// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public partial class ReactionClient : ISpaceClient
{
    private readonly Connection _connection;
    
    public ReactionClient(Connection connection)
    {
        _connection = connection;
    }
    
    /// <remarks>
    /// Required permissions:
    /// <list type="bullet">
    /// <item>
    /// <term>Add message reactions</term>
    /// </item>
    /// <item>
    /// <term>Add reactions to direct messages</term>
    /// </item>
    /// <item>
    /// <term>Add reactions to article comments</term>
    /// </item>
    /// <item>
    /// <term>Add reactions to comments in code reviews</term>
    /// </item>
    /// </list>
    /// </remarks>
    public async Task AddReactionAsync(ReactionItemIdentifier item, string emoji, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        
        await _connection.RequestResourceAsync("POST", $"api/http/reactions/{item}/{emoji}{queryParameters.ToQueryString()}", cancellationToken);
    }
    

    /// <remarks>
    /// Required permissions:
    /// <list type="bullet">
    /// <item>
    /// <term>View message reactions</term>
    /// </item>
    /// <item>
    /// <term>View reactions to direct messages</term>
    /// </item>
    /// <item>
    /// <term>View reactions to comments in code reviews</term>
    /// </item>
    /// <item>
    /// <term>View reactions to article comments</term>
    /// </item>
    /// </list>
    /// </remarks>
    public async Task<List<EmojiReaction>> ListReactionsAsync(ReactionItemIdentifier item, Func<Partial<EmojiReaction>, Partial<EmojiReaction>>? partial = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        queryParameters.Append("$fields", (partial != null ? partial(new Partial<EmojiReaction>()) : Partial<EmojiReaction>.Default()).ToString());
        
        return await _connection.RequestResourceAsync<List<EmojiReaction>>("GET", $"api/http/reactions/{item}{queryParameters.ToQueryString()}", cancellationToken);
    }
    

    /// <remarks>
    /// Required permissions:
    /// <list type="bullet">
    /// <item>
    /// <term>View message reactions</term>
    /// </item>
    /// <item>
    /// <term>View reactions to direct messages</term>
    /// </item>
    /// <item>
    /// <term>View reactions to comments in code reviews</term>
    /// </item>
    /// <item>
    /// <term>View reactions to article comments</term>
    /// </item>
    /// </list>
    /// </remarks>
    public async Task<List<CPrincipal>> ListReactedUsersAndApplicationsAsync(ReactionItemIdentifier item, string emoji, Func<Partial<CPrincipal>, Partial<CPrincipal>>? partial = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        queryParameters.Append("$fields", (partial != null ? partial(new Partial<CPrincipal>()) : Partial<CPrincipal>.Default()).ToString());
        
        return await _connection.RequestResourceAsync<List<CPrincipal>>("GET", $"api/http/reactions/{item}/{emoji}{queryParameters.ToQueryString()}", cancellationToken);
    }
    

    /// <remarks>
    /// Required permissions:
    /// <list type="bullet">
    /// <item>
    /// <term>Add message reactions</term>
    /// </item>
    /// <item>
    /// <term>Add reactions to direct messages</term>
    /// </item>
    /// <item>
    /// <term>Add reactions to article comments</term>
    /// </item>
    /// <item>
    /// <term>Add reactions to comments in code reviews</term>
    /// </item>
    /// </list>
    /// </remarks>
    public async Task RemoveReactionAsync(ReactionItemIdentifier item, string emoji, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        
        await _connection.RequestResourceAsync("DELETE", $"api/http/reactions/{item}/{emoji}{queryParameters.ToQueryString()}", cancellationToken);
    }
    

}

