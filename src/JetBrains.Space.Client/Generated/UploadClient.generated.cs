// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public partial class UploadClient : ISpaceClient
{
    private readonly Connection _connection;
    
    public UploadClient(Connection connection)
    {
        _connection = connection;
    }
    
    /// <summary>
    /// Request a URL that can be used to upload an attachment.
    /// An attachment can be uploaded to the URL that is returned, by making a PUT request that has a proper content-type header and the attachment data as the request body. The PUT request returns a string that is an id of the uploaded attachment. The attachment id can be passed to other API methods where this attachment needs to be used. Attachments are available for download at `/d/{attachmentId}`.
    /// The 'storagePrefix' parameter can be one of file, maps, emoji or attachments.
    /// The 'mediaType' parameter can be omitted for all uploads. For image uploads that need to be resized automatically for specific use, such as chat stickers or emoji, use one of `chat-image-attachment`, `chat-sticker`, `emoji`.
    /// </summary>
    public async Task<string> CreateUploadAsync(string storagePrefix, string? mediaType = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        
        return await _connection.RequestResourceAsync<UploadsPostRequest, string>("POST", $"api/http/uploads{queryParameters.ToQueryString()}", 
            new UploadsPostRequest
            { 
                StoragePrefix = storagePrefix,
                MediaType = mediaType,
            }, requestHeaders: null, cancellationToken: cancellationToken);
    }
    

    public ChatClient Chat => new ChatClient(_connection);
    
    public partial class ChatClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public ChatClient(Connection connection)
        {
            _connection = connection;
        }
        
        public PublicUrlClient PublicUrl => new PublicUrlClient(_connection);
        
        public partial class PublicUrlClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public PublicUrlClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Returns a URL that can be used to access attachment file without authentication
            /// </summary>
            public async Task<string> GetPublicUrlAsync(ChannelIdentifier channel, ChatMessageIdentifier message, string attachmentId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                return await _connection.RequestResourceAsync<string>("GET", $"api/http/uploads/chat/public-url/{channel}/{message}/{attachmentId}{queryParameters.ToQueryString()}", requestHeaders: null, cancellationToken: cancellationToken);
            }
            
        
        }
    
    }

    public ImageClient Image => new ImageClient(_connection);
    
    public partial class ImageClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public ImageClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Get meta information for a previously uploaded image
        /// </summary>
        public async Task<ImageAttachmentMeta> GetImageAttachmentMetadataAsync(string id, Func<Partial<ImageAttachmentMeta>, Partial<ImageAttachmentMeta>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<ImageAttachmentMeta>()) : Partial<ImageAttachmentMeta>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<ImageAttachmentMeta>("GET", $"api/http/uploads/image/{id}{queryParameters.ToQueryString()}", requestHeaders: null, cancellationToken: cancellationToken);
        }
        
    
    }

}

