// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public partial class TimeTrackingClient : ISpaceClient
{
    private readonly Connection _connection;
    
    public TimeTrackingClient(Connection connection)
    {
        _connection = connection;
    }
    
    public ItemClient Items => new ItemClient(_connection);
    
    public partial class ItemClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public ItemClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create work item.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update issues</term>
        /// <description>Update issues that were created by other users</description>
        /// </item>
        /// <item>
        /// <term>Manage own spent time</term>
        /// <description>Add, update and delete own spent time items</description>
        /// </item>
        /// <item>
        /// <term>Manage any spent time</term>
        /// <description>Add, update and delete spent time items for any user</description>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TimeTrackingItem> CreateItemAsync(TimeTrackingSubjectIdentifier subject, ProfileIdentifier userId, DateTime date, int duration, string? description = null, Func<Partial<TimeTrackingItem>, Partial<TimeTrackingItem>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TimeTrackingItem>()) : Partial<TimeTrackingItem>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TimeTrackingItemsPostRequest, TimeTrackingItem>("POST", $"api/http/time-tracking/items{queryParameters.ToQueryString()}", 
                new TimeTrackingItemsPostRequest
                { 
                    Subject = subject,
                    UserId = userId,
                    Date = date,
                    Duration = duration,
                    Description = description,
                }, requestHeaders: null, cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get items for subject
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View spent time</term>
        /// <description>View spent time in the project</description>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<Batch<TimeTrackingItem>> GetAllItemsAsync(TimeTrackingSubjectIdentifier subject, string? skip = null, int? top = 100, Func<Partial<Batch<TimeTrackingItem>>, Partial<Batch<TimeTrackingItem>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("subject", subject.ToString());
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TimeTrackingItem>>()) : Partial<Batch<TimeTrackingItem>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<TimeTrackingItem>>("GET", $"api/http/time-tracking/items{queryParameters.ToQueryString()}", requestHeaders: null, cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get items for subject
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View spent time</term>
        /// <description>View spent time in the project</description>
        /// </item>
        /// </list>
        /// </remarks>
        public IAsyncEnumerable<TimeTrackingItem> GetAllItemsAsyncEnumerable(TimeTrackingSubjectIdentifier subject, string? skip = null, int? top = 100, Func<Partial<TimeTrackingItem>, Partial<TimeTrackingItem>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllItemsAsync(subject: subject, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TimeTrackingItem>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TimeTrackingItem>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Update a single work item.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Manage own spent time</term>
        /// <description>Add, update and delete own spent time items</description>
        /// </item>
        /// <item>
        /// <term>Manage any spent time</term>
        /// <description>Add, update and delete spent time items for any user</description>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task UpdateItemAsync(string itemId, ProfileIdentifier? userId = null, DateTime? date = null, int? duration = null, string? description = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("PATCH", $"api/http/time-tracking/items/{itemId}{queryParameters.ToQueryString()}", 
                new TimeTrackingItemsForItemIdPatchRequest
                { 
                    UserId = userId,
                    Date = date,
                    Duration = duration,
                    Description = description,
                }, requestHeaders: null, cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Delete single work item
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Manage own spent time</term>
        /// <description>Add, update and delete own spent time items</description>
        /// </item>
        /// <item>
        /// <term>Manage any spent time</term>
        /// <description>Add, update and delete spent time items for any user</description>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task DeleteItemAsync(string itemId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/time-tracking/items/{itemId}{queryParameters.ToQueryString()}", requestHeaders: null, cancellationToken: cancellationToken);
        }
        
    
    }

}

