// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public partial class RdClient : ISpaceClient
{
    private readonly Connection _connection;
    
    public RdClient(Connection connection)
    {
        _connection = connection;
    }
    
    /// <remarks>
    /// Required permissions:
    /// <list type="bullet">
    /// <item>
    /// <term>Create dev environments</term>
    /// <description>Allows to create dev environments and manage their lifecycle</description>
    /// </item>
    /// </list>
    /// </remarks>
    public async Task<Batch<RdWarmupExec>> GetAvailableWarmupExecutionsAsync(ProjectIdentifier projectIdentifier, string repositoryName, string? skip = null, int? top = 100, string? branch = null, string? ideTypeId = null, List<WarmupExecutionStatus>? statuses = null, Func<Partial<Batch<RdWarmupExec>>, Partial<Batch<RdWarmupExec>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        if (skip != null) queryParameters.Append("$skip", skip);
        if (top != null) queryParameters.Append("$top", top?.ToString());
        queryParameters.Append("projectIdentifier", projectIdentifier.ToString());
        queryParameters.Append("repositoryName", repositoryName);
        if (branch != null) queryParameters.Append("branch", branch);
        if (ideTypeId != null) queryParameters.Append("ideTypeId", ideTypeId);
        if (statuses != null) queryParameters.Append("statuses", statuses.Select(it => it.ToEnumString()));
        queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<RdWarmupExec>>()) : Partial<Batch<RdWarmupExec>>.Default()).ToString());
        
        return await _connection.RequestResourceAsync<Batch<RdWarmupExec>>("GET", $"api/http/rd/warmups{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAvailableWarmupExecutions", cancellationToken: cancellationToken);
    }
    
    /// <remarks>
    /// Required permissions:
    /// <list type="bullet">
    /// <item>
    /// <term>Create dev environments</term>
    /// <description>Allows to create dev environments and manage their lifecycle</description>
    /// </item>
    /// </list>
    /// </remarks>
    public IAsyncEnumerable<RdWarmupExec> GetAvailableWarmupExecutionsAsyncEnumerable(ProjectIdentifier projectIdentifier, string repositoryName, string? skip = null, int? top = 100, string? branch = null, string? ideTypeId = null, List<WarmupExecutionStatus>? statuses = null, Func<Partial<RdWarmupExec>, Partial<RdWarmupExec>>? partial = null, CancellationToken cancellationToken = default)
        => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAvailableWarmupExecutionsAsync(projectIdentifier: projectIdentifier, repositoryName: repositoryName, top: top, branch: branch, ideTypeId: ideTypeId, statuses: statuses, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<RdWarmupExec>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<RdWarmupExec>.Default())), skip, cancellationToken);

}

