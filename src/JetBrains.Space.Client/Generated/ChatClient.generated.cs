// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public partial class ChatClient : ISpaceClient
{
    private readonly Connection _connection;
    
    public ChatClient(Connection connection)
    {
        _connection = connection;
    }
    
    public ChannelClient Channels => new ChannelClient(_connection);
    
    public partial class ChannelClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public ChannelClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Add new channels</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<M2ChannelRecord> AddNewChannelAsync(string name, string description, bool @private, Func<Partial<M2ChannelRecord>, Partial<M2ChannelRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<M2ChannelRecord>()) : Partial<M2ChannelRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<ChatsChannelsPostRequest, M2ChannelRecord>("POST", $"api/http/chats/channels{queryParameters.ToQueryString()}", 
                new ChatsChannelsPostRequest
                { 
                    Name = name,
                    Description = description,
                    IsPrivate = @private,
                }, requestHeaders: null, functionName: "AddNewChannel", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Create or get a direct messages channel with a profile
        /// </summary>
        [Obsolete("Use POST chats/channels/{channel} (since 2021-12-13) (will be removed in a future version)")]
        public async Task<M2ChannelRecord> GetOrCreateDirectMessagesChannelAsync(string profile, Func<Partial<M2ChannelRecord>, Partial<M2ChannelRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<M2ChannelRecord>()) : Partial<M2ChannelRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<ChatsChannelsDmPostRequest, M2ChannelRecord>("POST", $"api/http/chats/channels/dm{queryParameters.ToQueryString()}", 
                new ChatsChannelsDmPostRequest
                { 
                    Profile = profile,
                }, requestHeaders: null, functionName: "GetOrCreateDirectMessagesChannel", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Check whether a channel name is available. Returns true when the channel name can be used to create a new channel, false otherwise.
        /// </summary>
        public async Task<bool> IsNameFreeAsync(string name, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            return await _connection.RequestResourceAsync<ChatsChannelsIsNameFreePostRequest, bool>("POST", $"api/http/chats/channels/is-name-free{queryParameters.ToQueryString()}", 
                new ChatsChannelsIsNameFreePostRequest
                { 
                    Name = name,
                }, requestHeaders: null, functionName: "IsNameFree", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Restore an archived channel and allow new messages to be added again.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Manage channels</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task RestoreArchivedChannelAsync(ChannelIdentifier channel, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("POST", $"api/http/chats/channels/{channel}/restore-archived{queryParameters.ToQueryString()}", 
                new ChatsChannelsForChannelRestoreArchivedPostRequest
                { 
                }, requestHeaders: null, functionName: "RestoreArchivedChannel", cancellationToken: cancellationToken);
        }
        
    
        /// <param name="query">
        /// Substring matching name or description of the channel
        /// </param>
        /// <param name="quickFilter">
        /// Additional options to filter channels
        /// </param>
        /// <param name="subscriber">
        /// Filters the resulting list by the channel subscriber.
        /// </param>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View channel info</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<Batch<AllChannelsListEntry>> ListAllChannelsAsync(string query, string? skip = null, int? top = 100, AllChannelsFilter? quickFilter = null, AllChannelsSortColumn? sortColumn = null, ColumnSortOrder? sortOrder = ColumnSortOrder.ASC, bool? publicOnly = false, bool? withArchived = true, ProfileIdentifier? subscriber = null, Func<Partial<Batch<AllChannelsListEntry>>, Partial<Batch<AllChannelsListEntry>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("query", query);
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("quickFilter", quickFilter.ToEnumString());
            queryParameters.Append("sortColumn", sortColumn.ToEnumString());
            queryParameters.Append("sortOrder", sortOrder.ToEnumString());
            if (publicOnly != null) queryParameters.Append("publicOnly", publicOnly?.ToString("l"));
            if (withArchived != null) queryParameters.Append("withArchived", withArchived?.ToString("l"));
            if (subscriber != null) queryParameters.Append("subscriber", subscriber?.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<AllChannelsListEntry>>()) : Partial<Batch<AllChannelsListEntry>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<AllChannelsListEntry>>("GET", $"api/http/chats/channels/all-channels{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListAllChannels", cancellationToken: cancellationToken);
        }
        
        /// <param name="query">
        /// Substring matching name or description of the channel
        /// </param>
        /// <param name="quickFilter">
        /// Additional options to filter channels
        /// </param>
        /// <param name="subscriber">
        /// Filters the resulting list by the channel subscriber.
        /// </param>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View channel info</term>
        /// </item>
        /// </list>
        /// </remarks>
        public IAsyncEnumerable<AllChannelsListEntry> ListAllChannelsAsyncEnumerable(string query, string? skip = null, int? top = 100, AllChannelsFilter? quickFilter = null, AllChannelsSortColumn? sortColumn = null, ColumnSortOrder? sortOrder = ColumnSortOrder.ASC, bool? publicOnly = false, bool? withArchived = true, ProfileIdentifier? subscriber = null, Func<Partial<AllChannelsListEntry>, Partial<AllChannelsListEntry>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListAllChannelsAsync(query: query, top: top, quickFilter: quickFilter, sortColumn: sortColumn, sortOrder: sortOrder, publicOnly: publicOnly, withArchived: withArchived, subscriber: subscriber, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<AllChannelsListEntry>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<AllChannelsListEntry>.Default())), skip, cancellationToken);
    
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View channel info</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<Batch<ChatContactRecord>> ListDirectMessageChannelsAndConversationsAsync(string? skip = null, int? top = 100, Func<Partial<Batch<ChatContactRecord>>, Partial<Batch<ChatContactRecord>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ChatContactRecord>>()) : Partial<Batch<ChatContactRecord>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<ChatContactRecord>>("GET", $"api/http/chats/channels/private-channels{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListDirectMessageChannelsAndConversations", cancellationToken: cancellationToken);
        }
        
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View channel info</term>
        /// </item>
        /// </list>
        /// </remarks>
        public IAsyncEnumerable<ChatContactRecord> ListDirectMessageChannelsAndConversationsAsyncEnumerable(string? skip = null, int? top = 100, Func<Partial<ChatContactRecord>, Partial<ChatContactRecord>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListDirectMessageChannelsAndConversationsAsync(top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ChatContactRecord>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChatContactRecord>.Default())), skip, cancellationToken);
    
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View channel info</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<M2ChannelRecord> GetChannelAsync(ChannelIdentifier channel, Func<Partial<M2ChannelRecord>, Partial<M2ChannelRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<M2ChannelRecord>()) : Partial<M2ChannelRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<M2ChannelRecord>("GET", $"api/http/chats/channels/{channel}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetChannel", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Delete a channel. No one will be able to view this channel or its threads. This action cannot be undone.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Manage channels</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task DeleteChannelAsync(ChannelIdentifier channel, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/chats/channels/{channel}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteChannel", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Archive a channel and reject new messages being added. It is still possible to view messages from an archived channel. It is possible to restore the channel later.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Manage channels</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task ArchiveChannelAsync(ChannelIdentifier channel, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/chats/channels/{channel}/archive{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ArchiveChannel", cancellationToken: cancellationToken);
        }
        
    
        public ConversationClient Conversations => new ConversationClient(_connection);
        
        public partial class ConversationClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public ConversationClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Start new conversations</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<M2ChannelRecord> CreateConversationAsync(List<string> profileIds, string? subject = null, Func<Partial<M2ChannelRecord>, Partial<M2ChannelRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<M2ChannelRecord>()) : Partial<M2ChannelRecord>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<ChatsChannelsConversationsPostRequest, M2ChannelRecord>("POST", $"api/http/chats/channels/conversations{queryParameters.ToQueryString()}", 
                    new ChatsChannelsConversationsPostRequest
                    { 
                        ProfileIds = profileIds,
                        Subject = subject,
                    }, requestHeaders: null, functionName: "CreateConversation", cancellationToken: cancellationToken);
            }
            
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage channels</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<M2ChannelRecord> ConvertConversationToPrivateChannelAsync(ChannelIdentifier channel, string channelName, Func<Partial<M2ChannelRecord>, Partial<M2ChannelRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<M2ChannelRecord>()) : Partial<M2ChannelRecord>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<ChatsChannelsConversationsForChannelConvertPostRequest, M2ChannelRecord>("POST", $"api/http/chats/channels/conversations/{channel}/convert{queryParameters.ToQueryString()}", 
                    new ChatsChannelsConversationsForChannelConvertPostRequest
                    { 
                        ChannelName = channelName,
                    }, requestHeaders: null, functionName: "ConvertConversationToPrivateChannel", cancellationToken: cancellationToken);
            }
            
        
            public SubjectClient Subject => new SubjectClient(_connection);
            
            public partial class SubjectClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public SubjectClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Update channel info</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task ChangeConversationSubjectAsync(ChannelIdentifier channel, string subject, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("PATCH", $"api/http/chats/channels/conversations/{channel}/subject{queryParameters.ToQueryString()}", 
                        new ChatsChannelsConversationsForChannelSubjectPatchRequest
                        { 
                            Subject = subject,
                        }, requestHeaders: null, functionName: "ChangeConversationSubject", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
        public AdministratorClient Administrator => new AdministratorClient(_connection);
        
        public partial class AdministratorClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public AdministratorClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View channel participants</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<CPrincipal> GetChannelAdministratorAsync(ChannelIdentifier channel, Func<Partial<CPrincipal>, Partial<CPrincipal>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<CPrincipal>()) : Partial<CPrincipal>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<CPrincipal>("GET", $"api/http/chats/channels/{channel}/administrator{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetChannelAdministrator", cancellationToken: cancellationToken);
            }
            
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage channels</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task AssignChannelAdministratorAsync(ChannelIdentifier channel, ProfileIdentifier profile, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/chats/channels/{channel}/administrator{queryParameters.ToQueryString()}", 
                    new ChatsChannelsForChannelAdministratorPatchRequest
                    { 
                        Profile = profile,
                    }, requestHeaders: null, functionName: "AssignChannelAdministrator", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public AttachmentClient Attachments => new AttachmentClient(_connection);
        
        public partial class AttachmentClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public AttachmentClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View messages</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<ChannelInfoAttachment>> ListAttachmentsInChannelAsync(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<Batch<ChannelInfoAttachment>>, Partial<Batch<ChannelInfoAttachment>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ChannelInfoAttachment>>()) : Partial<Batch<ChannelInfoAttachment>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<ChannelInfoAttachment>>("GET", $"api/http/chats/channels/{channel}/attachments{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListAttachmentsInChannel", cancellationToken: cancellationToken);
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View messages</term>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<ChannelInfoAttachment> ListAttachmentsInChannelAsyncEnumerable(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<ChannelInfoAttachment>, Partial<ChannelInfoAttachment>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListAttachmentsInChannelAsync(channel: channel, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ChannelInfoAttachment>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChannelInfoAttachment>.Default())), skip, cancellationToken);
        
            public FileClient Files => new FileClient(_connection);
            
            public partial class FileClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public FileClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View messages</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<ChannelInfoAttachment>> ListFileAttachmentsInChannelAsync(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<Batch<ChannelInfoAttachment>>, Partial<Batch<ChannelInfoAttachment>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    if (skip != null) queryParameters.Append("$skip", skip);
                    if (top != null) queryParameters.Append("$top", top?.ToString());
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ChannelInfoAttachment>>()) : Partial<Batch<ChannelInfoAttachment>>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<Batch<ChannelInfoAttachment>>("GET", $"api/http/chats/channels/{channel}/attachments/files{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListFileAttachmentsInChannel", cancellationToken: cancellationToken);
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View messages</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<ChannelInfoAttachment> ListFileAttachmentsInChannelAsyncEnumerable(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<ChannelInfoAttachment>, Partial<ChannelInfoAttachment>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListFileAttachmentsInChannelAsync(channel: channel, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ChannelInfoAttachment>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChannelInfoAttachment>.Default())), skip, cancellationToken);
            
            }
        
            public ImageClient Images => new ImageClient(_connection);
            
            public partial class ImageClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public ImageClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View messages</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<ChannelInfoAttachment>> ListImagesInChannelAsync(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<Batch<ChannelInfoAttachment>>, Partial<Batch<ChannelInfoAttachment>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    if (skip != null) queryParameters.Append("$skip", skip);
                    if (top != null) queryParameters.Append("$top", top?.ToString());
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ChannelInfoAttachment>>()) : Partial<Batch<ChannelInfoAttachment>>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<Batch<ChannelInfoAttachment>>("GET", $"api/http/chats/channels/{channel}/attachments/images{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListImagesInChannel", cancellationToken: cancellationToken);
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View messages</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<ChannelInfoAttachment> ListImagesInChannelAsyncEnumerable(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<ChannelInfoAttachment>, Partial<ChannelInfoAttachment>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListImagesInChannelAsync(channel: channel, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ChannelInfoAttachment>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChannelInfoAttachment>.Default())), skip, cancellationToken);
            
            }
        
            public LinkClient Links => new LinkClient(_connection);
            
            public partial class LinkClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public LinkClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View messages</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<ChannelInfoAttachment>> ListLinksInChannelAsync(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<Batch<ChannelInfoAttachment>>, Partial<Batch<ChannelInfoAttachment>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    if (skip != null) queryParameters.Append("$skip", skip);
                    if (top != null) queryParameters.Append("$top", top?.ToString());
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ChannelInfoAttachment>>()) : Partial<Batch<ChannelInfoAttachment>>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<Batch<ChannelInfoAttachment>>("GET", $"api/http/chats/channels/{channel}/attachments/links{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListLinksInChannel", cancellationToken: cancellationToken);
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View messages</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<ChannelInfoAttachment> ListLinksInChannelAsyncEnumerable(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<ChannelInfoAttachment>, Partial<ChannelInfoAttachment>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListLinksInChannelAsync(channel: channel, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ChannelInfoAttachment>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChannelInfoAttachment>.Default())), skip, cancellationToken);
            
            }
        
            public VideoClient Videos => new VideoClient(_connection);
            
            public partial class VideoClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public VideoClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View messages</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<ChannelInfoAttachment>> ListVideosInChannelAsync(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<Batch<ChannelInfoAttachment>>, Partial<Batch<ChannelInfoAttachment>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    if (skip != null) queryParameters.Append("$skip", skip);
                    if (top != null) queryParameters.Append("$top", top?.ToString());
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ChannelInfoAttachment>>()) : Partial<Batch<ChannelInfoAttachment>>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<Batch<ChannelInfoAttachment>>("GET", $"api/http/chats/channels/{channel}/attachments/videos{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListVideosInChannel", cancellationToken: cancellationToken);
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View messages</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<ChannelInfoAttachment> ListVideosInChannelAsyncEnumerable(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<ChannelInfoAttachment>, Partial<ChannelInfoAttachment>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListVideosInChannelAsync(channel: channel, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ChannelInfoAttachment>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChannelInfoAttachment>.Default())), skip, cancellationToken);
            
            }
        
        }
    
        public DescriptionClient Description => new DescriptionClient(_connection);
        
        public partial class DescriptionClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public DescriptionClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update channel info</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task ChangeChannelDescriptionAsync(ChannelIdentifier channel, string description, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/chats/channels/{channel}/description{queryParameters.ToQueryString()}", 
                    new ChatsChannelsForChannelDescriptionPatchRequest
                    { 
                        Description = description,
                    }, requestHeaders: null, functionName: "ChangeChannelDescription", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public IconClient Icon => new IconClient(_connection);
        
        public partial class IconClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public IconClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update channel info</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task ChangeChannelIconAsync(ChannelIdentifier channel, string? icon = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/chats/channels/{channel}/icon{queryParameters.ToQueryString()}", 
                    new ChatsChannelsForChannelIconPatchRequest
                    { 
                        Icon = icon,
                    }, requestHeaders: null, functionName: "ChangeChannelIcon", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public NameClient Name => new NameClient(_connection);
        
        public partial class NameClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public NameClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage channels</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task RenameChannelAsync(ChannelIdentifier channel, string name, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/chats/channels/{channel}/name{queryParameters.ToQueryString()}", 
                    new ChatsChannelsForChannelNamePatchRequest
                    { 
                        Name = name,
                    }, requestHeaders: null, functionName: "RenameChannel", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public SubscriberClient Subscribers => new SubscriberClient(_connection);
        
        public partial class SubscriberClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public SubscriberClient(Connection connection)
            {
                _connection = connection;
            }
            
            public TeamClient Teams => new TeamClient(_connection);
            
            public partial class TeamClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public TeamClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Add members or teams to participant list</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task AddTeamsToChannelAsync(ChannelIdentifier channel, List<TeamIdentifier> teams, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("POST", $"api/http/chats/channels/{channel}/subscribers/teams{queryParameters.ToQueryString()}", 
                        new ChatsChannelsForChannelSubscribersTeamsPostRequest
                        { 
                            Teams = teams,
                        }, requestHeaders: null, functionName: "AddTeamsToChannel", cancellationToken: cancellationToken);
                }
                
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View channel participants</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<TDTeam>> ListTeamsSubscribedToChannelAsync(ChannelIdentifier channel, string query, string? skip = null, int? top = 100, Func<Partial<Batch<TDTeam>>, Partial<Batch<TDTeam>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    if (skip != null) queryParameters.Append("$skip", skip);
                    if (top != null) queryParameters.Append("$top", top?.ToString());
                    queryParameters.Append("query", query);
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDTeam>>()) : Partial<Batch<TDTeam>>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<Batch<TDTeam>>("GET", $"api/http/chats/channels/{channel}/subscribers/teams{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListTeamsSubscribedToChannel", cancellationToken: cancellationToken);
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View channel participants</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<TDTeam> ListTeamsSubscribedToChannelAsyncEnumerable(ChannelIdentifier channel, string query, string? skip = null, int? top = 100, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListTeamsSubscribedToChannelAsync(channel: channel, query: query, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDTeam>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDTeam>.Default())), skip, cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Remove members or teams from participant list</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task RemoveTeamsFromChannelAsync(ChannelIdentifier channel, List<TeamIdentifier> teams, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("teams", teams.Select(it => it.ToString()));
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/chats/channels/{channel}/subscribers/teams{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RemoveTeamsFromChannel", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public UserClient Users => new UserClient(_connection);
            
            public partial class UserClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public UserClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Add members or teams to participant list</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task AddUsersToChannelAsync(ChannelIdentifier channel, List<ProfileIdentifier> profiles, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("POST", $"api/http/chats/channels/{channel}/subscribers/users{queryParameters.ToQueryString()}", 
                        new ChatsChannelsForChannelSubscribersUsersPostRequest
                        { 
                            Profiles = profiles,
                        }, requestHeaders: null, functionName: "AddUsersToChannel", cancellationToken: cancellationToken);
                }
                
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View channel participants</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<TDMemberProfile>> ListUsersSubscribedToChannelAsync(ChannelIdentifier channel, string query, string? skip = null, int? top = 100, Func<Partial<Batch<TDMemberProfile>>, Partial<Batch<TDMemberProfile>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    if (skip != null) queryParameters.Append("$skip", skip);
                    if (top != null) queryParameters.Append("$top", top?.ToString());
                    queryParameters.Append("query", query);
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDMemberProfile>>()) : Partial<Batch<TDMemberProfile>>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<Batch<TDMemberProfile>>("GET", $"api/http/chats/channels/{channel}/subscribers/users{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListUsersSubscribedToChannel", cancellationToken: cancellationToken);
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View channel participants</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<TDMemberProfile> ListUsersSubscribedToChannelAsyncEnumerable(ChannelIdentifier channel, string query, string? skip = null, int? top = 100, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListUsersSubscribedToChannelAsync(channel: channel, query: query, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfile>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfile>.Default())), skip, cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Remove members or teams from participant list</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task RemoveUsersFromChannelAsync(ChannelIdentifier channel, List<ProfileIdentifier> profiles, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("profiles", profiles.Select(it => it.ToString()));
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/chats/channels/{channel}/subscribers/users{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RemoveUsersFromChannel", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
    }

    public MessageClient Messages => new MessageClient(_connection);
    
    public partial class MessageClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public MessageClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Delete a message from a channel.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Post messages</term>
        /// </item>
        /// <item>
        /// <term>Post messages in threads</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task DeleteMessageAsync(ChannelIdentifier channel, ChatMessageIdentifier id, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("POST", $"api/http/chats/messages/delete-message{queryParameters.ToQueryString()}", 
                new ChatsMessagesDeleteMessagePostRequest
                { 
                    Channel = channel,
                    Id = id,
                }, requestHeaders: null, functionName: "DeleteMessage", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Edit an existing message. Message content can be a string, or a block with one or several sections of information.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Post messages</term>
        /// </item>
        /// <item>
        /// <term>Post messages in threads</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task EditMessageAsync(ChannelIdentifier channel, ChatMessageIdentifier message, ChatMessage content, List<AttachmentIn>? attachments = null, bool? unfurlLinks = null, bool? resolveNames = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("POST", $"api/http/chats/messages/edit-message{queryParameters.ToQueryString()}", 
                new ChatsMessagesEditMessagePostRequest
                { 
                    Channel = channel,
                    Message = message,
                    Content = content,
                    Attachments = attachments,
                    IsUnfurlLinks = unfurlLinks,
                    IsResolveNames = resolveNames,
                }, requestHeaders: null, functionName: "EditMessage", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// This API method is intended to be used only by applications. The `createdAtUtc` and `editedAtUtc` parameters are Unix epoch timestamps in *milliseconds*.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Import messages</term>
        /// </item>
        /// <item>
        /// <term>Import issues</term>
        /// <description>Import issues</description>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task ImportMessagesAsync(ChannelIdentifier channel, List<ImportMessage> messages, bool suppressNotifications = false, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("POST", $"api/http/chats/messages/import{queryParameters.ToQueryString()}", 
                new ChatsMessagesImportPostRequest
                { 
                    Channel = channel,
                    Messages = messages,
                    IsSuppressNotifications = suppressNotifications,
                }, requestHeaders: null, functionName: "ImportMessages", cancellationToken: cancellationToken);
        }
        
    
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Post messages</term>
        /// </item>
        /// <item>
        /// <term>Post messages in threads</term>
        /// </item>
        /// </list>
        /// </remarks>
        [Obsolete("Use POST chats/messages/send-message (since 2020-01-17) (will be removed in a future version)")]
        public async Task<ChannelItemRecord> SendTextMessageAsync(string channel, string text, bool pending = false, string? temporaryId = null, Func<Partial<ChannelItemRecord>, Partial<ChannelItemRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<ChannelItemRecord>()) : Partial<ChannelItemRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<ChatsMessagesSendPostRequest, ChannelItemRecord>("POST", $"api/http/chats/messages/send{queryParameters.ToQueryString()}", 
                new ChatsMessagesSendPostRequest
                { 
                    Channel = channel,
                    Text = text,
                    IsPending = pending,
                    TemporaryId = temporaryId,
                }, requestHeaders: null, functionName: "SendTextMessage", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Send a message to a channel, thread, member, issue, code review, etc. Message content can be a string, or a block with one or several sections of information.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Post messages</term>
        /// </item>
        /// <item>
        /// <term>Post messages in threads</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<ChannelItemRecord> SendMessageAsync(ChatMessage content, ChannelIdentifier? channel = null, List<AttachmentIn>? attachments = null, bool? unfurlLinks = null, string? externalId = null, bool? resolveNames = null, bool? pending = null, bool? silent = null, MessageRecipient? recipient = null, Func<Partial<ChannelItemRecord>, Partial<ChannelItemRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<ChannelItemRecord>()) : Partial<ChannelItemRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<ChatsMessagesSendMessagePostRequest, ChannelItemRecord>("POST", $"api/http/chats/messages/send-message{queryParameters.ToQueryString()}", 
                new ChatsMessagesSendMessagePostRequest
                { 
                    Channel = channel,
                    Content = content,
                    Attachments = attachments,
                    IsUnfurlLinks = unfurlLinks,
                    ExternalId = externalId,
                    IsResolveNames = resolveNames,
                    IsPending = pending,
                    IsSilent = silent,
                    Recipient = recipient,
                }, requestHeaders: null, functionName: "SendMessage", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Retrieve a batch of messages from a channel. Messages are divided into batches by providing `sorting`, `startFromDate` and `batchSize` parameters. If the retrieved number of messages is less than `batchSize`, there are currently no more messages to return. Return data also contains next value for `startFromDate` as well as the `orgLimitReached` flag indicating whether part of messages could not be retrieved because of organization plan limitation.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View messages</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<GetMessagesResponse> GetChannelMessagesAsync(ChannelIdentifier channel, MessagesSorting sorting, int batchSize, DateTime? startFromDate = null, Func<Partial<GetMessagesResponse>, Partial<GetMessagesResponse>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("channel", channel.ToString());
            queryParameters.Append("sorting", sorting.ToEnumString());
            if (startFromDate != null) queryParameters.Append("startFromDate", startFromDate?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", CultureInfo.InvariantCulture));
            queryParameters.Append("batchSize", batchSize.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<GetMessagesResponse>()) : Partial<GetMessagesResponse>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<GetMessagesResponse>("GET", $"api/http/chats/messages{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetChannelMessages", cancellationToken: cancellationToken);
        }
        
    
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View messages</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<ChannelItemRecord> GetMessageAsync(ChatMessageIdentifier message, ChannelIdentifier channel, Func<Partial<ChannelItemRecord>, Partial<ChannelItemRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("channel", channel.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<ChannelItemRecord>()) : Partial<ChannelItemRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<ChannelItemRecord>("GET", $"api/http/chats/messages/{message}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetMessage", cancellationToken: cancellationToken);
        }
        
    
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Pin or unpin messages</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task PinMessageAsync(ChannelIdentifier channel, ChatMessageIdentifier message, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("PATCH", $"api/http/chats/messages/pin{queryParameters.ToQueryString()}", 
                new ChatsMessagesPinPatchRequest
                { 
                    Channel = channel,
                    Message = message,
                }, requestHeaders: null, functionName: "PinMessage", cancellationToken: cancellationToken);
        }
        
    
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Pin or unpin messages</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task UnpinMessageAsync(ChannelIdentifier channel, ChatMessageIdentifier message, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("PATCH", $"api/http/chats/messages/unpin{queryParameters.ToQueryString()}", 
                new ChatsMessagesUnpinPatchRequest
                { 
                    Channel = channel,
                    Message = message,
                }, requestHeaders: null, functionName: "UnpinMessage", cancellationToken: cancellationToken);
        }
        
    
        public PinnedMessageClient PinnedMessages => new PinnedMessageClient(_connection);
        
        public partial class PinnedMessageClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public PinnedMessageClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View messages</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<ChannelItemRecord>> ListPinnedMessagesInChannelAsync(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<Batch<ChannelItemRecord>>, Partial<Batch<ChannelItemRecord>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("channel", channel.ToString());
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ChannelItemRecord>>()) : Partial<Batch<ChannelItemRecord>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<ChannelItemRecord>>("GET", $"api/http/chats/messages/pinned-messages{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListPinnedMessagesInChannel", cancellationToken: cancellationToken);
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View messages</term>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<ChannelItemRecord> ListPinnedMessagesInChannelAsyncEnumerable(ChannelIdentifier channel, string? skip = null, int? top = 100, Func<Partial<ChannelItemRecord>, Partial<ChannelItemRecord>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListPinnedMessagesInChannelAsync(channel: channel, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ChannelItemRecord>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChannelItemRecord>.Default())), skip, cancellationToken);
        
        }
    
        public SyncBatchClient SyncBatch => new SyncBatchClient(_connection);
        
        public partial class SyncBatchClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public SyncBatchClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get messages in specified channel for synchronization with third-party system. Messages with etag greater than specified value are returned, in the order of creation and updates. Use etag value "0" to start retrieving all messages in the channel. To get the current etag value, use "Get current sync batch etag" method. Read more in the <a href="https://www.jetbrains.com/help/space/sync-api.html">documentation</a>.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View messages</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<SyncBatch<ChannelItemSyncRecord>> GetSyncBatchAsync(SyncBatchInfo batchInfo, ChannelIdentifier channel, Func<Partial<SyncBatch<ChannelItemSyncRecord>>, Partial<SyncBatch<ChannelItemSyncRecord>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("batchInfo", batchInfo.ToString());
                queryParameters.Append("channel", channel.ToString());
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<SyncBatch<ChannelItemSyncRecord>>()) : Partial<SyncBatch<ChannelItemSyncRecord>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<SyncBatch<ChannelItemSyncRecord>>("GET", $"api/http/chats/messages/sync-batch{queryParameters.ToQueryString()}", requestHeaders: EpochTrackerHeaders.GenerateFrom(_connection.ServerUrl, EpochTracker.Instance), functionName: "GetSyncBatch", cancellationToken: cancellationToken);
            }
            
        
            public CurrentEtagClient CurrentEtag => new CurrentEtagClient(_connection);
            
            public partial class CurrentEtagClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public CurrentEtagClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get current sync etag for given channel. You can use the returned etag to retrieve updates starting from this point through "Get sync batch" method. To retrieve all records instead, use "0" as the starting etag value. Read more in the <a href="https://www.jetbrains.com/help/space/sync-api.html">documentation</a>.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View channel info</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<string> GetCurrentSyncEtagAsync(ChannelIdentifier channel, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("channel", channel.ToString());
                    
                    return await _connection.RequestResourceAsync<string>("GET", $"api/http/chats/messages/sync-batch/current-etag{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetCurrentSyncEtag", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
    }

}

