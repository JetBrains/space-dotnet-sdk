// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public partial class ExternalIssueClient : ISpaceClient
{
    private readonly Connection _connection;
    
    public ExternalIssueClient(Connection connection)
    {
        _connection = connection;
    }
    
    /// <summary>
    /// Set default status to move external issues to when linked merge request is merged in Space
    /// </summary>
    /// <remarks>
    /// This API is experimental
    /// </remarks>
#if NET6_0_OR_GREATER
    [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
    [Obsolete("This API is experimental")]
#endif
    
    public async Task SetDefaultTargetIssueStatusForMergeRequestMergeAsync(ApplicationIdentifier application, ProjectIdentifier project, string issuePrefix, string? targetStatusForMergeRequestMerge = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        
        await _connection.RequestResourceAsync("POST", $"api/http/external-issues/default-issue-status-for-mr-merge{queryParameters.ToQueryString()}", 
            new ExternalIssuesDefaultIssueStatusForMrMergePostRequest
            { 
                Application = application,
                Project = project,
                IssuePrefix = issuePrefix,
                TargetStatusForMergeRequestMerge = targetStatusForMergeRequestMerge,
            }, requestHeaders: null, functionName: "SetDefaultTargetIssueStatusForMergeRequestMerge", cancellationToken: cancellationToken);
    }
    

    /// <summary>
    /// Provide information about an issue from external issue tracker
    /// </summary>
    /// <remarks>
    /// This API is experimental
    /// </remarks>
#if NET6_0_OR_GREATER
    [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
    [Obsolete("This API is experimental")]
#endif
    
    public async Task PostExternalIssueDataAsync(string issuePrefix, List<ExternalIssueDataIn> issues, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        
        await _connection.RequestResourceAsync("POST", $"api/http/external-issues/issue-content{queryParameters.ToQueryString()}", 
            new ExternalIssuesIssueContentPostRequest
            { 
                IssuePrefix = issuePrefix,
                Issues = issues,
            }, requestHeaders: null, functionName: "PostExternalIssueData", cancellationToken: cancellationToken);
    }
    

    /// <summary>
    /// Provide Space with all possible statuses for external issues for a given project
    /// </summary>
    /// <remarks>
    /// This API is experimental
    /// </remarks>
#if NET6_0_OR_GREATER
    [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
    [Obsolete("This API is experimental")]
#endif
    
    public async Task ProvideAllPossibleStatusesForExternalIssuesAsync(string issuePrefix, List<ExternalIssueStatusIn> statuses, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        
        await _connection.RequestResourceAsync("POST", $"api/http/external-issues/issue-statuses{queryParameters.ToQueryString()}", 
            new ExternalIssuesIssueStatusesPostRequest
            { 
                IssuePrefix = issuePrefix,
                Statuses = statuses,
            }, requestHeaders: null, functionName: "ProvideAllPossibleStatusesForExternalIssues", cancellationToken: cancellationToken);
    }
    

    /// <summary>
    /// Notify Space about issues that were deleted in external issue tracker
    /// </summary>
    /// <remarks>
    /// This API is experimental
    /// </remarks>
#if NET6_0_OR_GREATER
    [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
    [Obsolete("This API is experimental")]
#endif
    
    public async Task MarkExternalIssuesAsDeletedAsync(string issuePrefix, List<string> issueIds, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        
        await _connection.RequestResourceAsync("POST", $"api/http/external-issues/mark-issues-as-deleted{queryParameters.ToQueryString()}", 
            new ExternalIssuesMarkIssuesAsDeletedPostRequest
            { 
                IssuePrefix = issuePrefix,
                IssueIds = issueIds,
            }, requestHeaders: null, functionName: "MarkExternalIssuesAsDeleted", cancellationToken: cancellationToken);
    }
    

    /// <summary>
    /// Fetch events about external issues from Space
    /// </summary>
    /// <remarks>
    /// This API is experimental
    /// </remarks>
    /// <param name="issueCodeLinkingEventsShape">
    /// The shape of the events published as a result of linking external issues to commits and code reviews in Space.
    /// External issues to code linking can be reported from one of the following perspectives:
    /// * Creation or removal of a single link between an issue and a commit or a code review (default);
    /// * Update in a set of commits or code reviews in Space linked to a given external issue;
    /// * Update in a set of external issues linked to a given commit or code review in Space.
    /// </param>
#if NET6_0_OR_GREATER
    [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
    [Obsolete("This API is experimental")]
#endif
    
    public async Task<ExternalIssueEventQueueItemsBatch> GetExternalIssueEventQueueItemsAsync(int batchSize, ExternalIssueCodeLinkingEventsShape issueCodeLinkingEventsShape = ExternalIssueCodeLinkingEventsShape.Transactions, bool includeCommitChanges = false, long? fromEtag = null, Func<Partial<ExternalIssueEventQueueItemsBatch>, Partial<ExternalIssueEventQueueItemsBatch>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
    {
        var queryParameters = new NameValueCollection();
        if (fromEtag != null) queryParameters.Append("fromEtag", fromEtag?.ToString());
        queryParameters.Append("batchSize", batchSize.ToString());
        queryParameters.Append("issueCodeLinkingEventsShape", issueCodeLinkingEventsShape.ToEnumString());
        queryParameters.Append("includeCommitChanges", includeCommitChanges.ToString("l"));
        queryParameters.Append("$fields", (partial != null ? partial(new Partial<ExternalIssueEventQueueItemsBatch>()) : Partial<ExternalIssueEventQueueItemsBatch>.Default()).ToString());
        
        return await _connection.RequestResourceAsync<ExternalIssueEventQueueItemsBatch>("GET", $"api/http/external-issues/events-queue{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetExternalIssueEventQueueItems", cancellationToken: cancellationToken);
    }
    

    public ExternalTrackerProjectClient ExternalTrackerProjects => new ExternalTrackerProjectClient(_connection);
    
    public partial class ExternalTrackerProjectClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public ExternalTrackerProjectClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <remarks>
        /// This API is experimental
        /// </remarks>
#if NET6_0_OR_GREATER
        [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
        [Obsolete("This API is experimental")]
#endif
        
        public async Task<List<CreateExternalIssueProjectResult>> ConnectExternalIssueTrackerProjectsAsync(List<ExternalIssueTrackerProjectIn> projects, Func<Partial<CreateExternalIssueProjectResult>, Partial<CreateExternalIssueProjectResult>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<CreateExternalIssueProjectResult>()) : Partial<CreateExternalIssueProjectResult>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<ExternalIssuesExternalTrackerProjectsPostRequest, List<CreateExternalIssueProjectResult>>("POST", $"api/http/external-issues/external-tracker-projects{queryParameters.ToQueryString()}", 
                new ExternalIssuesExternalTrackerProjectsPostRequest
                { 
                    Projects = projects,
                }, requestHeaders: null, functionName: "ConnectExternalIssueTrackerProjects", cancellationToken: cancellationToken);
        }
        
    
        /// <remarks>
        /// This API is experimental
        /// </remarks>
#if NET6_0_OR_GREATER
        [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
        [Obsolete("This API is experimental")]
#endif
        
        public async Task<List<ExternalIssueTrackerProjectApi>> GetAllConnectedExternalIssueTrackerProjectsAsync(ApplicationIdentifier application, Func<Partial<ExternalIssueTrackerProjectApi>, Partial<ExternalIssueTrackerProjectApi>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("application", application.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<ExternalIssueTrackerProjectApi>()) : Partial<ExternalIssueTrackerProjectApi>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<ExternalIssueTrackerProjectApi>>("GET", $"api/http/external-issues/external-tracker-projects{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllConnectedExternalIssueTrackerProjects", cancellationToken: cancellationToken);
        }
        
    
        /// <remarks>
        /// This API is experimental
        /// </remarks>
#if NET6_0_OR_GREATER
        [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
        [Obsolete("This API is experimental")]
#endif
        
        public async Task DisconnectExternalIssueTrackerProjectAsync(string issuePrefix, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("issuePrefix", issuePrefix);
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/external-issues/external-tracker-projects{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DisconnectExternalIssueTrackerProject", cancellationToken: cancellationToken);
        }
        
    
    }

    public IssueClient Issues => new IssueClient(_connection);
    
    public partial class IssueClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public IssueClient(Connection connection)
        {
            _connection = connection;
        }
        
        public CodeReviewClient CodeReviews => new CodeReviewClient(_connection);
        
        public partial class CodeReviewClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public CodeReviewClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Add code review links to an existing issue in a project
            /// </summary>
            /// <remarks>
            /// This API is experimental
            /// </remarks>
#if NET6_0_OR_GREATER
            [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
            [Obsolete("This API is experimental")]
#endif
            
            public async Task LinkCodeReviewsToExternalIssueAsync(string issuePrefix, string issueId, ProjectIdentifier project, List<ReviewIdentifier> codeReviewIds, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("POST", $"api/http/external-issues/issues/{issuePrefix}/{issueId}/code-reviews{queryParameters.ToQueryString()}", 
                    new ExternalIssuesIssuesForIssuePrefixForIssueIdCodeReviewsPostRequest
                    { 
                        Project = project,
                        CodeReviewIds = codeReviewIds,
                    }, requestHeaders: null, functionName: "LinkCodeReviewsToExternalIssue", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Remove code review links from an existing issue in a project
            /// </summary>
            /// <remarks>
            /// This API is experimental
            /// </remarks>
#if NET6_0_OR_GREATER
            [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
            [Obsolete("This API is experimental")]
#endif
            
            public async Task UnlinkCodeReviewsFromExternalIssueAsync(string issuePrefix, string issueId, ProjectIdentifier project, List<ReviewIdentifier> codeReviewIds, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("project", project.ToString());
                queryParameters.Append("codeReviewIds", codeReviewIds.Select(it => it.ToString()));
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/external-issues/issues/{issuePrefix}/{issueId}/code-reviews{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "UnlinkCodeReviewsFromExternalIssue", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public CommitClient Commits => new CommitClient(_connection);
        
        public partial class CommitClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public CommitClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Add commit links to an existing issue in a project
            /// </summary>
            /// <remarks>
            /// This API is experimental
            /// </remarks>
#if NET6_0_OR_GREATER
            [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
            [Obsolete("This API is experimental")]
#endif
            
            public async Task LinkCommitsToExternalIssueAsync(string issuePrefix, string issueId, ProjectIdentifier project, string repository, List<string> commitIds, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("POST", $"api/http/external-issues/issues/{issuePrefix}/{issueId}/commits{queryParameters.ToQueryString()}", 
                    new ExternalIssuesIssuesForIssuePrefixForIssueIdCommitsPostRequest
                    { 
                        Project = project,
                        Repository = repository,
                        CommitIds = commitIds,
                    }, requestHeaders: null, functionName: "LinkCommitsToExternalIssue", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Remove commit links from an existing issue in a project
            /// </summary>
            /// <remarks>
            /// This API is experimental
            /// </remarks>
#if NET6_0_OR_GREATER
            [Obsolete("This API is experimental", DiagnosticId = "SPC001")]
#else
            [Obsolete("This API is experimental")]
#endif
            
            public async Task UnlinkCommitsFromExternalIssueAsync(string issuePrefix, string issueId, ProjectIdentifier project, string repository, List<string> commitIds, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("project", project.ToString());
                queryParameters.Append("repository", repository);
                queryParameters.Append("commitIds", commitIds.Select(it => it));
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/external-issues/issues/{issuePrefix}/{issueId}/commits{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "UnlinkCommitsFromExternalIssue", cancellationToken: cancellationToken);
            }
            
        
        }
    
    }

}

