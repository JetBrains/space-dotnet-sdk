// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Client.Internal;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public partial class ProjectClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public ProjectClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create a new project.
        /// </summary>
        public async Task<PRProject> CreateProjectAsync(ProjectKey key, string name, bool @private = false, List<string>? tags = null, string? description = null, Func<Partial<PRProject>, Partial<PRProject>>? partial = null, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync<ProjectsPostRequest, PRProject>("POST", $"api/http/projects?$fields={(partial != null ? partial(new Partial<PRProject>()) : Partial<PRProject>.Default())}", 
                new ProjectsPostRequest { 
                    Key = key,
                    Name = name,
                    Description = description,
                    IsPrivate = @private,
                    Tags = (tags ?? new List<string>()),
                }
        , cancellationToken);
    
        /// <summary>
        /// Get/search all projects. Parameters are applied as 'AND' filters.
        /// </summary>
        public async Task<Batch<PRProject>> GetAllProjectsAsync(string? skip = null, int? top = 100, string? term = null, string? tag = null, bool? starred = null, Func<Partial<Batch<PRProject>>, Partial<Batch<PRProject>>>? partial = null, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync<Batch<PRProject>>("GET", $"api/http/projects?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&tag={tag?.ToString() ?? "null"}&starred={starred?.ToString("l") ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProject>>()) : Partial<Batch<PRProject>>.Default())}", cancellationToken);
        
        /// <summary>
        /// Get/search all projects. Parameters are applied as 'AND' filters.
        /// </summary>
        public IAsyncEnumerable<PRProject> GetAllProjectsAsyncEnumerable(string? skip = null, int? top = 100, string? term = null, string? tag = null, bool? starred = null, Func<Partial<PRProject>, Partial<PRProject>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllProjectsAsync(top: top, term: term, tag: tag, starred: starred, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PRProject>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProject>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Get all projects for a member.
        /// </summary>
        public async Task<Batch<PRProject>> GetAllProjectsByMemberAsync(ProfileIdentifier member, string? skip = null, int? top = 100, Func<Partial<Batch<PRProject>>, Partial<Batch<PRProject>>>? partial = null, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync<Batch<PRProject>>("GET", $"api/http/projects/member:{member}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProject>>()) : Partial<Batch<PRProject>>.Default())}", cancellationToken);
        
        /// <summary>
        /// Get all projects for a member.
        /// </summary>
        public IAsyncEnumerable<PRProject> GetAllProjectsByMemberAsyncEnumerable(ProfileIdentifier member, string? skip = null, int? top = 100, Func<Partial<PRProject>, Partial<PRProject>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllProjectsByMemberAsync(member: member, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PRProject>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProject>.Default())), skip, cancellationToken);
    
        public async Task<Batch<PRProject>> GetAllProjectsWithRightAsync(string rightCode, string? skip = null, int? top = 100, string? term = null, string? path = null, Func<Partial<Batch<PRProject>>, Partial<Batch<PRProject>>>? partial = null, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync<Batch<PRProject>>("GET", $"api/http/projects/right-code:{rightCode}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&path={path?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProject>>()) : Partial<Batch<PRProject>>.Default())}", cancellationToken);
        
        public IAsyncEnumerable<PRProject> GetAllProjectsWithRightAsyncEnumerable(string rightCode, string? skip = null, int? top = 100, string? term = null, string? path = null, Func<Partial<PRProject>, Partial<PRProject>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllProjectsWithRightAsync(rightCode: rightCode, top: top, term: term, path: path, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PRProject>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProject>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Get all projects for a team.
        /// </summary>
        public async Task<Batch<PRProject>> GetAllProjectsByTeamAsync(string team, string? skip = null, int? top = 100, Func<Partial<Batch<PRProject>>, Partial<Batch<PRProject>>>? partial = null, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync<Batch<PRProject>>("GET", $"api/http/projects/team:{team}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProject>>()) : Partial<Batch<PRProject>>.Default())}", cancellationToken);
        
        /// <summary>
        /// Get all projects for a team.
        /// </summary>
        public IAsyncEnumerable<PRProject> GetAllProjectsByTeamAsyncEnumerable(string team, string? skip = null, int? top = 100, Func<Partial<PRProject>, Partial<PRProject>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllProjectsByTeamAsync(team: team, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PRProject>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProject>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Get project by id or project key.
        /// </summary>
        public async Task<PRProject> GetProjectAsync(ProjectIdentifier project, Func<Partial<PRProject>, Partial<PRProject>>? partial = null, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync<PRProject>("GET", $"api/http/projects/{project}?$fields={(partial != null ? partial(new Partial<PRProject>()) : Partial<PRProject>.Default())}", cancellationToken);
    
        /// <summary>
        /// Update an existing project. Optional parameters will be ignored when not specified, and updated otherwise.
        /// </summary>
        public async Task<PRProject> UpdateProjectAsync(ProjectIdentifier project, ProjectKey? key = null, string? name = null, string? description = null, bool? @private = null, List<string>? tags = null, string? icon = null, Func<Partial<PRProject>, Partial<PRProject>>? partial = null, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync<ProjectsForProjectPatchRequest, PRProject>("PATCH", $"api/http/projects/{project}?$fields={(partial != null ? partial(new Partial<PRProject>()) : Partial<PRProject>.Default())}", 
                new ProjectsForProjectPatchRequest { 
                    Key = key,
                    Name = name,
                    Description = description,
                    IsPrivate = @private,
                    Tags = tags,
                    Icon = icon,
                }
        , cancellationToken);
    
        /// <summary>
        /// Archive a project.
        /// </summary>
        public async Task ArchiveProjectAsync(ProjectIdentifier project, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}", cancellationToken);
    
        public AutomationClient Automation => new AutomationClient(_connection);
        
        public partial class AutomationClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public AutomationClient(Connection connection)
            {
                _connection = connection;
            }
            
            public GraphExecutionClient GraphExecutions => new GraphExecutionClient(_connection);
            
            public partial class GraphExecutionClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public GraphExecutionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Stop execution by ExecutionId.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Stop</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task StopAsync(string id, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/automation/graph-executions/{id}/stop", cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<JobExecution> GetGraphExecutionAsync(string id, Func<Partial<JobExecution>, Partial<JobExecution>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<JobExecution>("GET", $"api/http/projects/automation/graph-executions/{id}?$fields={(partial != null ? partial(new Partial<JobExecution>()) : Partial<JobExecution>.Default())}", cancellationToken);
            
            }
        
            public StepExecutionClient StepExecutions => new StepExecutionClient(_connection);
            
            public partial class StepExecutionClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public StepExecutionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ParameterClient Parameters => new ParameterClient(_connection);
                
                public partial class ParameterClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public ParameterClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<string> GetParameterAsync(string stepExecId, string key, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<string>("GET", $"api/http/projects/automation/step-executions/{stepExecId}/parameters/{key}", cancellationToken);
                
                    public async Task UpdateParameterAsync(string stepExecId, string key, string value, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/automation/step-executions/{stepExecId}/parameters/{key}", 
                            new ProjectsAutomationStepExecutionsForStepExecIdParametersForKeyPatchRequest { 
                                Value = value,
                            }
                    , cancellationToken);
                
                    public async Task DeleteParameterAsync(string stepExecId, string key, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/automation/step-executions/{stepExecId}/parameters/{key}", cancellationToken);
                
                }
            
            }
        
        }
    
        public partial class AutomationClient : ISpaceClient
        {
            public partial class GraphExecutionClient : ISpaceClient
            {
                /// <summary>
                /// Search executions. Parameters are applied as 'AND' filters.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<JobExecution>> GetAllGraphExecutionsAsync(ProjectIdentifier project, string jobId, string? branchFilter = null, ExecutionStatus? statusFilter = null, JobTriggerType? jobTriggerFilter = null, string? skip = null, int? top = 100, Func<Partial<Batch<JobExecution>>, Partial<Batch<JobExecution>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<JobExecution>>("GET", $"api/http/projects/{project}/automation/graph-executions?jobId={jobId.ToString()}&branchFilter={branchFilter?.ToString() ?? "null"}&statusFilter={statusFilter?.ToString() ?? "null"}&jobTriggerFilter={jobTriggerFilter?.ToString() ?? "null"}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<JobExecution>>()) : Partial<Batch<JobExecution>>.Default())}", cancellationToken);
                
                /// <summary>
                /// Search executions. Parameters are applied as 'AND' filters.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<JobExecution> GetAllGraphExecutionsAsyncEnumerable(ProjectIdentifier project, string jobId, string? branchFilter = null, ExecutionStatus? statusFilter = null, JobTriggerType? jobTriggerFilter = null, string? skip = null, int? top = 100, Func<Partial<JobExecution>, Partial<JobExecution>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllGraphExecutionsAsync(project: project, jobId: jobId, branchFilter: branchFilter, statusFilter: statusFilter, jobTriggerFilter: jobTriggerFilter, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<JobExecution>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<JobExecution>.Default())), skip, cancellationToken);
            
            }
        
            public JobClient Jobs => new JobClient(_connection);
            
            public partial class JobClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public JobClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Start Job. Returns Execution id, see projects/automation/graph-executions/{id}
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Start</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<LaunchResult> StartAsync(ProjectIdentifier project, string jobId, Branch branch, Func<Partial<LaunchResult>, Partial<LaunchResult>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectAutomationJobsForJobIdStartPostRequest, LaunchResult>("POST", $"api/http/projects/{project}/automation/jobs/{jobId}/start?$fields={(partial != null ? partial(new Partial<LaunchResult>()) : Partial<LaunchResult>.Default())}", 
                        new ProjectsForProjectAutomationJobsForJobIdStartPostRequest { 
                            Branch = branch,
                        }
                , cancellationToken);
            
                /// <summary>
                /// Search jobs. Parameters are applied as 'AND' filters.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<Job>> GetAllJobsAsync(ProjectIdentifier project, string repoFilter, string branchFilter, JobTriggerType? trigger = null, string? skip = null, int? top = 100, Func<Partial<Batch<Job>>, Partial<Batch<Job>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<Job>>("GET", $"api/http/projects/{project}/automation/jobs?repoFilter={repoFilter.ToString()}&branchFilter={branchFilter.ToString()}&trigger={trigger?.ToString() ?? "null"}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<Job>>()) : Partial<Batch<Job>>.Default())}", cancellationToken);
                
                /// <summary>
                /// Search jobs. Parameters are applied as 'AND' filters.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<Job> GetAllJobsAsyncEnumerable(ProjectIdentifier project, string repoFilter, string branchFilter, JobTriggerType? trigger = null, string? skip = null, int? top = 100, Func<Partial<Job>, Partial<Job>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllJobsAsync(project: project, repoFilter: repoFilter, branchFilter: branchFilter, trigger: trigger, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<Job>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<Job>.Default())), skip, cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Job> GetJobAsync(ProjectIdentifier project, string jobId, Func<Partial<Job>, Partial<Job>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Job>("GET", $"api/http/projects/{project}/automation/jobs/{jobId}?$fields={(partial != null ? partial(new Partial<Job>()) : Partial<Job>.Default())}", cancellationToken);
            
            }
        
        }
    
        public ParamClient Params => new ParamClient(_connection);
        
        public partial class ParamClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public ParamClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a new project parameter in a parameter bundle
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Modify parameters</term>
            /// <description>Create or edit project parameters</description>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<string> CreateParamAsync(string bundleId, string key, string value, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<ProjectsParamsPostRequest, string>("POST", $"api/http/projects/params", 
                    new ProjectsParamsPostRequest { 
                        BundleId = bundleId,
                        Key = key,
                        Value = value,
                    }
            , cancellationToken);
        
            /// <summary>
            /// List project parameters in a parameter bundle
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View parameters</term>
            /// <description>View project parameters</description>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<PlainParameterRecord>> GetAllParamsAsync(string bundleId, string? skip = null, int? top = 100, Func<Partial<Batch<PlainParameterRecord>>, Partial<Batch<PlainParameterRecord>>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<Batch<PlainParameterRecord>>("GET", $"api/http/projects/params?bundleId={bundleId.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PlainParameterRecord>>()) : Partial<Batch<PlainParameterRecord>>.Default())}", cancellationToken);
            
            /// <summary>
            /// List project parameters in a parameter bundle
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View parameters</term>
            /// <description>View project parameters</description>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<PlainParameterRecord> GetAllParamsAsyncEnumerable(string bundleId, string? skip = null, int? top = 100, Func<Partial<PlainParameterRecord>, Partial<PlainParameterRecord>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllParamsAsync(bundleId: bundleId, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PlainParameterRecord>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PlainParameterRecord>.Default())), skip, cancellationToken);
        
            /// <summary>
            /// Update an existing project parameter.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Modify parameters</term>
            /// <description>Create or edit project parameters</description>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task UpdateParamAsync(string id, string value, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/params/{id}", 
                    new ProjectsParamsForIdPatchRequest { 
                        Value = value,
                    }
            , cancellationToken);
        
            /// <summary>
            /// Delete an existing project parameter.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Delete parameters</term>
            /// <description>Delete project parameters</description>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task DeleteParamAsync(string id, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/params/{id}", cancellationToken);
        
            public InDefaultBundleClient InDefaultBundle => new InDefaultBundleClient(_connection);
            
            public partial class InDefaultBundleClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public InDefaultBundleClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Create a new project parameter in the default parameter bundle
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Modify parameters</term>
                /// <description>Create or edit project parameters</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<string> CreateInDefaultBundleAsync(string projectId, string key, string value, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsParamsInDefaultBundlePostRequest, string>("POST", $"api/http/projects/params/in-default-bundle", 
                        new ProjectsParamsInDefaultBundlePostRequest { 
                            ProjectId = projectId,
                            Key = key,
                            Value = value,
                        }
                , cancellationToken);
            
            }
        
        }
    
        public PrivateProjectClient PrivateProjects => new PrivateProjectClient(_connection);
        
        public partial class PrivateProjectClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public PrivateProjectClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Request access to a project.
            /// </summary>
            public async Task RequestAccessToProjectAsync(ProjectIdentifier project, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/private-projects/{project}/request-access", cancellationToken);
        
            /// <summary>
            /// List private projects in the current organisation.
            /// </summary>
            public async Task<List<PRPrivateProject>> GetAllPrivateProjectsAsync(Func<Partial<PRPrivateProject>, Partial<PRPrivateProject>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<List<PRPrivateProject>>("GET", $"api/http/projects/private-projects?$fields={(partial != null ? partial(new Partial<PRPrivateProject>()) : Partial<PRPrivateProject>.Default())}", cancellationToken);
        
        }
    
        public ResponsibilityClient Responsibilities => new ResponsibilityClient(_connection);
        
        public partial class ResponsibilityClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public ResponsibilityClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Add a responsibility for a given subject id.
            /// </summary>
            public async Task<string> AddResponsibilityAsync(string subjectId, string summary, string? notes = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<ProjectsResponsibilitiesPostRequest, string>("POST", $"api/http/projects/responsibilities", 
                    new ProjectsResponsibilitiesPostRequest { 
                        SubjectId = subjectId,
                        Summary = summary,
                        Notes = notes,
                    }
            , cancellationToken);
        
            /// <summary>
            /// Edit an existing responsibility.
            /// </summary>
            public async Task UpdateResponsibilityAsync(string responsibilityId, string summary, string? notes = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/responsibilities/{responsibilityId}", 
                    new ProjectsResponsibilitiesForResponsibilityIdPatchRequest { 
                        Summary = summary,
                        Notes = notes,
                    }
            , cancellationToken);
        
            /// <summary>
            /// Delete an existing responsibility.
            /// </summary>
            public async Task DeleteResponsibilityAsync(string responsibilityId, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/responsibilities/{responsibilityId}", cancellationToken);
        
            public SubjectClient Subjects => new SubjectClient(_connection);
            
            public partial class SubjectClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public SubjectClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Delete an existing responsibility subject for a given project id.
                /// </summary>
                public async Task DeleteResponsibilitySubjectAsync(string subjectId, ProjectIdentifier? project = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/responsibilities/subjects/{subjectId}?project={project?.ToString() ?? "null"}", cancellationToken);
            
            }
        
        }
    
        public partial class ResponsibilityClient : ISpaceClient
        {
            public SchemeClient Scheme => new SchemeClient(_connection);
            
            public partial class SchemeClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public SchemeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get the responsibilities schema for a given project id.
                /// </summary>
                public async Task<List<SubjectResponsibilitiesTable>> GetProjectResponsibilitySchemeAsync(ProjectIdentifier project, Func<Partial<SubjectResponsibilitiesTable>, Partial<SubjectResponsibilitiesTable>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<List<SubjectResponsibilitiesTable>>("GET", $"api/http/projects/{project}/responsibilities/scheme?$fields={(partial != null ? partial(new Partial<SubjectResponsibilitiesTable>()) : Partial<SubjectResponsibilitiesTable>.Default())}", cancellationToken);
            
            }
        
            public partial class SubjectClient : ISpaceClient
            {
                /// <summary>
                /// Add a responsibility subject for a given project id.
                /// </summary>
                public async Task<string> AddResponsibilitySubjectAsync(ProjectIdentifier project, string? name = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectResponsibilitiesSubjectsPostRequest, string>("POST", $"api/http/projects/{project}/responsibilities/subjects", 
                        new ProjectsForProjectResponsibilitiesSubjectsPostRequest { 
                            Name = name,
                        }
                , cancellationToken);
            
                /// <summary>
                /// Update an existing responsibility subject for a given project id.
                /// </summary>
                public async Task EditResponsibilitySubjectAsync(ProjectIdentifier project, string subjectId, string? name = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/responsibilities/subjects/{subjectId}", 
                        new ProjectsForProjectResponsibilitiesSubjectsForSubjectIdPatchRequest { 
                            Name = name,
                        }
                , cancellationToken);
            
            }
        
            public AssigneeClient Assignees => new AssigneeClient(_connection);
            
            public partial class AssigneeClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public AssigneeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Assign a responsible person for a given project id and responsibility id.
                /// </summary>
                public async Task AssignResponsibleAsync(ProjectIdentifier project, string responsibilityId, string profileId, string? role = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/responsibilities/{responsibilityId}/assignees/{profileId}", 
                        new ProjectsForProjectResponsibilitiesForResponsibilityIdAssigneesForProfileIdPostRequest { 
                            Role = role,
                        }
                , cancellationToken);
            
                /// <summary>
                /// Remove a responsible person for a given project id and responsibility id.
                /// </summary>
                public async Task RemoveResponsibleAsync(ProjectIdentifier project, string responsibilityId, string profileId, string? role = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/responsibilities/{responsibilityId}/assignees/{profileId}?role={role?.ToString() ?? "null"}", cancellationToken);
            
            }
        
        }
    
        public SecretClient Secrets => new SecretClient(_connection);
        
        public partial class SecretClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public SecretClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a new secret in a parameter bundle. Value is base64 encoded bytes of the secret value, possibly after client side encryption. If the secret value bytes are encrypted then the id of the Space public key must be provided
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Create secrets</term>
            /// <description>Create project secrets</description>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<string> CreateSecretAsync(string bundleId, string key, string valueBase64, string? publicKeyId = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<ProjectsSecretsPostRequest, string>("POST", $"api/http/projects/secrets", 
                    new ProjectsSecretsPostRequest { 
                        BundleId = bundleId,
                        Key = key,
                        ValueBase64 = valueBase64,
                        PublicKeyId = publicKeyId,
                    }
            , cancellationToken);
        
            /// <summary>
            /// List project secrets in a parameter bundle
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View keys of secrets</term>
            /// <description>View keys of project secrets</description>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<SecretParameterRecord>> GetAllSecretsAsync(string bundleId, string? skip = null, int? top = 100, Func<Partial<Batch<SecretParameterRecord>>, Partial<Batch<SecretParameterRecord>>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<Batch<SecretParameterRecord>>("GET", $"api/http/projects/secrets?bundleId={bundleId.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<SecretParameterRecord>>()) : Partial<Batch<SecretParameterRecord>>.Default())}", cancellationToken);
            
            /// <summary>
            /// List project secrets in a parameter bundle
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View keys of secrets</term>
            /// <description>View keys of project secrets</description>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<SecretParameterRecord> GetAllSecretsAsyncEnumerable(string bundleId, string? skip = null, int? top = 100, Func<Partial<SecretParameterRecord>, Partial<SecretParameterRecord>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllSecretsAsync(bundleId: bundleId, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<SecretParameterRecord>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<SecretParameterRecord>.Default())), skip, cancellationToken);
        
            /// <summary>
            /// Update an existing project secret.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Edit secrets</term>
            /// <description>Edit project secrets</description>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task UpdateSecretAsync(string id, string valueBase64, string? publicKeyId = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/secrets/{id}", 
                    new ProjectsSecretsForIdPatchRequest { 
                        ValueBase64 = valueBase64,
                        PublicKeyId = publicKeyId,
                    }
            , cancellationToken);
        
            /// <summary>
            /// Delete an existing project secret.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Delete secrets</term>
            /// <description>Delete project secrets</description>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task DeleteSecretAsync(string id, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/secrets/{id}", cancellationToken);
        
            public InDefaultBundleClient InDefaultBundle => new InDefaultBundleClient(_connection);
            
            public partial class InDefaultBundleClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public InDefaultBundleClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Create a new secret in the default parameter bundle. Value is base64 encoded bytes of the secret value, possibly after client side encryption. If the secret value bytes are encrypted then the id of the Space public key must be provided
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Create secrets</term>
                /// <description>Create project secrets</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<string> CreateInDefaultBundleAsync(string projectId, string key, string valueBase64, string? publicKeyId = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsSecretsInDefaultBundlePostRequest, string>("POST", $"api/http/projects/secrets/in-default-bundle", 
                        new ProjectsSecretsInDefaultBundlePostRequest { 
                            ProjectId = projectId,
                            Key = key,
                            ValueBase64 = valueBase64,
                            PublicKeyId = publicKeyId,
                        }
                , cancellationToken);
            
            }
        
        }
    
        public TagClient Tags => new TagClient(_connection);
        
        public partial class TagClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public TagClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Track a tag has been accessed.
            /// </summary>
            public async Task TrackTagAccessAsync(string tag, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/tags/track-access", 
                    new ProjectsTagsTrackAccessPostRequest { 
                        Tag = tag,
                    }
            , cancellationToken);
        
            /// <summary>
            /// List all tags, mapped to the number of projects they are used in.
            /// </summary>
            public async Task<List<PRTag>> GetAllTagsAsync(Func<Partial<PRTag>, Partial<PRTag>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<List<PRTag>>("GET", $"api/http/projects/tags?$fields={(partial != null ? partial(new Partial<PRTag>()) : Partial<PRTag>.Default())}", cancellationToken);
        
        }
    
        public AccesClient Access => new AccesClient(_connection);
        
        public partial class AccesClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public AccesClient(Connection connection)
            {
                _connection = connection;
            }
            
            public AdminClient Admins => new AdminClient(_connection);
            
            public partial class AdminClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public AdminClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Returns the list of all project administrators
                /// </summary>
                public async Task<List<TDMemberProfile>> GetAllAdminsAsync(ProjectIdentifier project, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<List<TDMemberProfile>>("GET", $"api/http/projects/{project}/access/admins?$fields={(partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default())}", cancellationToken);
            
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Add a member as administrator to a project.
                    /// </summary>
                    public async Task AddAdministratorAsync(ProjectIdentifier project, ProfileIdentifier profile, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/admins/profiles", 
                            new ProjectsForProjectAccessAdminsProfilesPostRequest { 
                                Profile = profile,
                            }
                    , cancellationToken);
                
                    /// <summary>
                    /// Remove a member as administrator from a project.
                    /// </summary>
                    public async Task RemoveAdministratorAsync(ProjectIdentifier project, ProfileIdentifier profile, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/admins/profiles/{profile}", cancellationToken);
                
                }
            
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Add a team as administrators to a project.
                    /// </summary>
                    public async Task AddAdministratorsTeamAsync(ProjectIdentifier project, string teamId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/admins/teams", 
                            new ProjectsForProjectAccessAdminsTeamsPostRequest { 
                                TeamId = teamId,
                            }
                    , cancellationToken);
                
                    /// <summary>
                    /// Remove a team as administrators from a project.
                    /// </summary>
                    public async Task RemoveAdministratorsTeamAsync(ProjectIdentifier project, string teamId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/admins/teams/{teamId}", cancellationToken);
                
                }
            
            }
        
            public CollaboratorClient Collaborators => new CollaboratorClient(_connection);
            
            public partial class CollaboratorClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public CollaboratorClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<TDMemberProfile>> GetAllCollaboratorsProfilesAsync(ProjectIdentifier project, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<List<TDMemberProfile>>("GET", $"api/http/projects/{project}/access/collaborators?$fields={(partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default())}", cancellationToken);
            
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddACollaboratorAsync(ProjectIdentifier project, ProfileIdentifier profile, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/collaborators/profiles", 
                            new ProjectsForProjectAccessCollaboratorsProfilesPostRequest { 
                                Profile = profile,
                            }
                    , cancellationToken);
                
                    public async Task<List<TDMemberProfile>> GetAllIndividualCollaboratorsAsync(ProjectIdentifier project, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<List<TDMemberProfile>>("GET", $"api/http/projects/{project}/access/collaborators/profiles?$fields={(partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default())}", cancellationToken);
                
                    public async Task RemoveAnIndividualCollaboratorsAsync(ProjectIdentifier project, ProfileIdentifier profile, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/collaborators/profiles?profile={profile.ToString()}", cancellationToken);
                
                }
            
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddACollaboratorsTeamAsync(ProjectIdentifier project, string teamId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/collaborators/teams", 
                            new ProjectsForProjectAccessCollaboratorsTeamsPostRequest { 
                                TeamId = teamId,
                            }
                    , cancellationToken);
                
                    public async Task<List<TDTeam>> GetAllCollaboratorsTeamsAsync(ProjectIdentifier project, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<List<TDTeam>>("GET", $"api/http/projects/{project}/access/collaborators/teams?$fields={(partial != null ? partial(new Partial<TDTeam>()) : Partial<TDTeam>.Default())}", cancellationToken);
                
                    public async Task RemoveACollaboratorsTeamAsync(ProjectIdentifier project, string teamId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/collaborators/teams?teamId={teamId.ToString()}", cancellationToken);
                
                }
            
            }
        
            public MemberProfileClient MemberProfiles => new MemberProfileClient(_connection);
            
            public partial class MemberProfileClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public MemberProfileClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get project members for a given project key.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View project data</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<TDMemberProfile>> GetAllMemberProfilesAsync(ProjectIdentifier project, string query = "", bool includingAdmins = false, string? skip = null, int? top = 100, Func<Partial<Batch<TDMemberProfile>>, Partial<Batch<TDMemberProfile>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfile>>("GET", $"api/http/projects/{project}/access/member-profiles?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&includingAdmins={includingAdmins.ToString("l")}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfile>>()) : Partial<Batch<TDMemberProfile>>.Default())}", cancellationToken);
                
                /// <summary>
                /// Get project members for a given project key.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View project data</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<TDMemberProfile> GetAllMemberProfilesAsyncEnumerable(ProjectIdentifier project, string query = "", bool includingAdmins = false, string? skip = null, int? top = 100, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllMemberProfilesAsync(project: project, query: query, includingAdmins: includingAdmins, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfile>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfile>.Default())), skip, cancellationToken);
            
            }
        
            public MemberClient Members => new MemberClient(_connection);
            
            public partial class MemberClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public MemberClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Add a member to a project.
                    /// </summary>
                    public async Task AddMemberAsync(ProjectIdentifier project, ProfileIdentifier profile, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/members/profiles", 
                            new ProjectsForProjectAccessMembersProfilesPostRequest { 
                                Profile = profile,
                            }
                    , cancellationToken);
                
                    /// <summary>
                    /// Remove a member from a project.
                    /// </summary>
                    public async Task RemoveMemberAsync(ProjectIdentifier project, ProfileIdentifier profile, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/members/profiles/{profile}", cancellationToken);
                
                }
            
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Add a team to a project.
                    /// </summary>
                    public async Task AddTeamAsync(ProjectIdentifier project, string teamId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/members/teams", 
                            new ProjectsForProjectAccessMembersTeamsPostRequest { 
                                TeamId = teamId,
                            }
                    , cancellationToken);
                
                    /// <summary>
                    /// Remove a team from a project.
                    /// </summary>
                    public async Task RemoveTeamAsync(ProjectIdentifier project, string teamId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/members/teams/{teamId}", cancellationToken);
                
                }
            
            }
        
            public ViewerClient Viewers => new ViewerClient(_connection);
            
            public partial class ViewerClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public ViewerClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get organization members who can view a project.
                /// </summary>
                public async Task<Batch<TDMemberProfile>> OrganizationProfilesWhoCanViewTheProjectAsync(ProjectIdentifier project, string term, bool meOnTop = false, string? skip = null, int? top = 100, Func<Partial<Batch<TDMemberProfile>>, Partial<Batch<TDMemberProfile>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfile>>("GET", $"api/http/projects/{project}/access/viewers?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term.ToString()}&meOnTop={meOnTop.ToString("l")}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfile>>()) : Partial<Batch<TDMemberProfile>>.Default())}", cancellationToken);
                
                /// <summary>
                /// Get organization members who can view a project.
                /// </summary>
                public IAsyncEnumerable<TDMemberProfile> OrganizationProfilesWhoCanViewTheProjectAsyncEnumerable(ProjectIdentifier project, string term, bool meOnTop = false, string? skip = null, int? top = 100, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => OrganizationProfilesWhoCanViewTheProjectAsync(project: project, term: term, meOnTop: meOnTop, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfile>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfile>.Default())), skip, cancellationToken);
            
            }
        
        }
    
        public CodeReviewClient CodeReviews => new CodeReviewClient(_connection);
        
        public partial class CodeReviewClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public CodeReviewClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<CodeReviewWithCount>> GetAllCodeReviewsAsync(ProjectIdentifier project, ReviewSorting? sort = null, string? skip = null, int? top = 100, CodeReviewStateFilter? state = null, string? text = null, ProfileIdentifier? author = null, DateTime? from = null, DateTime? to = null, ProfileIdentifier? reviewer = null, ReviewType? type = null, Func<Partial<Batch<CodeReviewWithCount>>, Partial<Batch<CodeReviewWithCount>>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<Batch<CodeReviewWithCount>>("GET", $"api/http/projects/{project}/code-reviews?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&state={(state ?? CodeReviewStateFilter.Opened)?.ToString() ?? "null"}&text={text?.ToString() ?? "null"}&author={author?.ToString() ?? "null"}&from={from?.ToString("yyyy-MM-dd") ?? "null"}&to={to?.ToString("yyyy-MM-dd") ?? "null"}&sort={(sort ?? ReviewSorting.CreatedAtAsc).ToString()}&reviewer={reviewer?.ToString() ?? "null"}&type={type?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<CodeReviewWithCount>>()) : Partial<Batch<CodeReviewWithCount>>.Default())}", cancellationToken);
            
            public IAsyncEnumerable<CodeReviewWithCount> GetAllCodeReviewsAsyncEnumerable(ProjectIdentifier project, ReviewSorting? sort = null, string? skip = null, int? top = 100, CodeReviewStateFilter? state = null, string? text = null, ProfileIdentifier? author = null, DateTime? from = null, DateTime? to = null, ProfileIdentifier? reviewer = null, ReviewType? type = null, Func<Partial<CodeReviewWithCount>, Partial<CodeReviewWithCount>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllCodeReviewsAsync(project: project, sort: sort, top: top, state: state, text: text, author: author, from: from, to: to, reviewer: reviewer, type: type, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<CodeReviewWithCount>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<CodeReviewWithCount>.Default())), skip, cancellationToken);
        
            public async Task<ReviewCounts> GetReviewCountsAsync(ProjectIdentifier project, Func<Partial<ReviewCounts>, Partial<ReviewCounts>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<ReviewCounts>("GET", $"api/http/projects/{project}/code-reviews/review-counts?$fields={(partial != null ? partial(new Partial<ReviewCounts>()) : Partial<ReviewCounts>.Default())}", cancellationToken);
        
            public async Task<CodeReviewRecord> GetCodeReviewAsync(ProjectIdentifier project, ReviewIdentifier reviewId, Func<Partial<CodeReviewRecord>, Partial<CodeReviewRecord>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<CodeReviewRecord>("GET", $"api/http/projects/{project}/code-reviews/{reviewId}?$fields={(partial != null ? partial(new Partial<CodeReviewRecord>()) : Partial<CodeReviewRecord>.Default())}", cancellationToken);
        
            public DetailClient Details => new DetailClient(_connection);
            
            public partial class DetailClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public DetailClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CodeReviewDetailedInfo> GetReviewDetailsAsync(ProjectIdentifier project, ReviewIdentifier reviewId, Func<Partial<CodeReviewDetailedInfo>, Partial<CodeReviewDetailedInfo>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<CodeReviewDetailedInfo>("GET", $"api/http/projects/{project}/code-reviews/{reviewId}/details?$fields={(partial != null ? partial(new Partial<CodeReviewDetailedInfo>()) : Partial<CodeReviewDetailedInfo>.Default())}", cancellationToken);
            
            }
        
            public ParticipantClient Participants => new ParticipantClient(_connection);
            
            public partial class ParticipantClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public ParticipantClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddReviewParticipantAsync(ProjectIdentifier project, ReviewIdentifier reviewId, ProfileIdentifier user, CodeReviewParticipantRole role, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/code-reviews/{reviewId}/participants/{user}", 
                        new ProjectsForProjectCodeReviewsForReviewIdParticipantsForUserPostRequest { 
                            Role = role,
                        }
                , cancellationToken);
            
                public async Task RemoveReviewParticipantAsync(ProjectIdentifier project, ReviewIdentifier reviewId, ProfileIdentifier user, CodeReviewParticipantRole role, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/code-reviews/{reviewId}/participants/{user}?role={role.ToString()}", cancellationToken);
            
            }
        
            public RevisionClient Revisions => new RevisionClient(_connection);
            
            public partial class RevisionClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public RevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddRevisionsToReviewAsync(ProjectIdentifier project, ReviewIdentifier reviewId, List<RevisionInReview> revisions, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/code-reviews/{reviewId}/revisions", 
                        new ProjectsForProjectCodeReviewsForReviewIdRevisionsPostRequest { 
                            Revisions = revisions,
                        }
                , cancellationToken);
            
                public async Task RemoveRevisionsFromReviewAsync(ProjectIdentifier project, ReviewIdentifier reviewId, List<string> revisions, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/code-reviews/{reviewId}/revisions?revisions={revisions.JoinToString("revisions", it => it.ToString())}", cancellationToken);
            
            }
        
            public StateClient State => new StateClient(_connection);
            
            public partial class StateClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public StateClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewStateAsync(ProjectIdentifier project, ReviewIdentifier reviewId, CodeReviewState state, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/code-reviews/{reviewId}/state", 
                        new ProjectsForProjectCodeReviewsForReviewIdStatePatchRequest { 
                            State = state,
                        }
                , cancellationToken);
            
            }
        
            public SuggestedReviewerClient SuggestedReviewers => new SuggestedReviewerClient(_connection);
            
            public partial class SuggestedReviewerClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public SuggestedReviewerClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<TDMemberProfile>> GetAllSuggestedReviewersAsync(ProjectIdentifier project, ReviewIdentifier reviewId, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<List<TDMemberProfile>>("GET", $"api/http/projects/{project}/code-reviews/{reviewId}/suggested-reviewers?$fields={(partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default())}", cancellationToken);
            
            }
        
            public TitleClient Title => new TitleClient(_connection);
            
            public partial class TitleClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public TitleClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewTitleAsync(ProjectIdentifier project, ReviewIdentifier reviewId, string title, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/code-reviews/{reviewId}/title", 
                        new ProjectsForProjectCodeReviewsForReviewIdTitlePatchRequest { 
                            Title = title,
                        }
                , cancellationToken);
            
            }
        
            public UnreadRevisionClient UnreadRevisions => new UnreadRevisionClient(_connection);
            
            public partial class UnreadRevisionClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public UnreadRevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<RevisionInReview>> GetAllUnreadRevisionsAsync(ProjectIdentifier project, ReviewIdentifier reviewId, Func<Partial<RevisionInReview>, Partial<RevisionInReview>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<List<RevisionInReview>>("GET", $"api/http/projects/{project}/code-reviews/{reviewId}/unread-revisions?$fields={(partial != null ? partial(new Partial<RevisionInReview>()) : Partial<RevisionInReview>.Default())}", cancellationToken);
            
            }
        
        }
    
        public PackageClient Packages => new PackageClient(_connection);
        
        public partial class PackageClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public PackageClient(Connection connection)
            {
                _connection = connection;
            }
            
            public RepositoryClient Repositories => new RepositoryClient(_connection);
            
            public partial class RepositoryClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public RepositoryClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Creates a new package repository for a given project id.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Create</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<ProjectPackageRepository> CreateNewRepositoryAsync(ProjectIdentifier project, string type, string name, bool @public, ESPackageRepositorySettings settings, PackageRepositoryMode mode, string? description = null, PackageRepositoryMirror? mirror = null, Func<Partial<ProjectPackageRepository>, Partial<ProjectPackageRepository>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPackagesRepositoriesPostRequest, ProjectPackageRepository>("POST", $"api/http/projects/{project}/packages/repositories?$fields={(partial != null ? partial(new Partial<ProjectPackageRepository>()) : Partial<ProjectPackageRepository>.Default())}", 
                        new ProjectsForProjectPackagesRepositoriesPostRequest { 
                            Type = type,
                            Name = name,
                            Description = description,
                            IsPublic = @public,
                            Settings = settings,
                            Mode = mode,
                            Mirror = mirror,
                        }
                , cancellationToken);
            
                /// <summary>
                /// Gets a list of package repositories for a given project id.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Read</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<List<ProjectPackageRepository>> GetRepositoriesAsync(ProjectIdentifier project, string? type = null, string? query = null, Func<Partial<ProjectPackageRepository>, Partial<ProjectPackageRepository>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<List<ProjectPackageRepository>>("GET", $"api/http/projects/{project}/packages/repositories?type={type?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<ProjectPackageRepository>()) : Partial<ProjectPackageRepository>.Default())}", cancellationToken);
            
                /// <summary>
                /// Gets a package repository for a given project id by type and name.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Read</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<ProjectPackageRepository> GetRepositoryAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, Func<Partial<ProjectPackageRepository>, Partial<ProjectPackageRepository>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectPackageRepository>("GET", $"api/http/projects/{project}/packages/repositories/{repository}?$fields={(partial != null ? partial(new Partial<ProjectPackageRepository>()) : Partial<ProjectPackageRepository>.Default())}", cancellationToken);
            
                /// <summary>
                /// Updates package repository settings for a given project id.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Admin</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task UpdateRepositoryAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, string? name = null, string? description = null, bool? @public = null, ESPackageRepositorySettings? settings = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/packages/repositories/{repository}", 
                        new ProjectsForProjectPackagesRepositoriesForRepositoryPatchRequest { 
                            Name = name,
                            Description = description,
                            IsPublic = @public,
                            Settings = settings,
                        }
                , cancellationToken);
            
                /// <summary>
                /// Removes package repository for a given project id.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Admin</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task DeleteRepositoryAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/packages/repositories/{repository}", cancellationToken);
            
                public CleanupClient Cleanup => new CleanupClient(_connection);
                
                public partial class CleanupClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public CleanupClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Cleanup specified package repository.
                    /// </summary>
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Admin</term>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task CleanupRepositoryAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/packages/repositories/{repository}/cleanup", cancellationToken);
                
                }
            
                public PackageClient Packages => new PackageClient(_connection);
                
                public partial class PackageClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public PackageClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Gets a list of repository packages for a given project id.
                    /// </summary>
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Read</term>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task<Batch<PackageData>> GetAllPackagesAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, string query, string? mirrorId = null, string? skip = null, int? top = 100, Func<Partial<Batch<PackageData>>, Partial<Batch<PackageData>>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<Batch<PackageData>>("GET", $"api/http/projects/{project}/packages/repositories/{repository}/packages?query={query.ToString()}&mirrorId={mirrorId?.ToString() ?? "null"}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PackageData>>()) : Partial<Batch<PackageData>>.Default())}", cancellationToken);
                    
                    /// <summary>
                    /// Gets a list of repository packages for a given project id.
                    /// </summary>
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Read</term>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public IAsyncEnumerable<PackageData> GetAllPackagesAsyncEnumerable(ProjectIdentifier project, PackageRepositoryIdentifier repository, string query, string? mirrorId = null, string? skip = null, int? top = 100, Func<Partial<PackageData>, Partial<PackageData>>? partial = null, CancellationToken cancellationToken = default)
                        => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllPackagesAsync(project: project, repository: repository, query: query, mirrorId: mirrorId, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PackageData>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PackageData>.Default())), skip, cancellationToken);
                
                    public MetadataClient Metadata => new MetadataClient(_connection);
                    
                    public partial class MetadataClient : ISpaceClient
                    {
                        private readonly Connection _connection;
                        
                        public MetadataClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        /// <summary>
                        /// Report a package version metadata in repository for a given project id.
                        /// </summary>
                        public async Task ReportPackageVersionMetadataAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, string packageName, string packageVersion, bool pin, string? comment = null, CancellationToken cancellationToken = default)
                            => await _connection.RequestResourceAsync("PUT", $"api/http/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/metadata/version:{packageVersion}", 
                                new ProjectsForProjectPackagesRepositoriesForRepositoryPackagesNameForPackageNameMetadataVersionForPackageVersionPutRequest { 
                                    IsPin = pin,
                                    Comment = comment,
                                }
                        , cancellationToken);
                    
                    }
                
                    public VersionClient Versions => new VersionClient(_connection);
                    
                    public partial class VersionClient : ISpaceClient
                    {
                        private readonly Connection _connection;
                        
                        public VersionClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        /// <summary>
                        /// Gets a list of repository package versions for a given project id.
                        /// </summary>
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>Read</term>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        public async Task<Batch<PackageVersionData>> GetAllPackageVersionsAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, string packageName, string query, string? mirrorId = null, string? skip = null, int? top = 100, Func<Partial<Batch<PackageVersionData>>, Partial<Batch<PackageVersionData>>>? partial = null, CancellationToken cancellationToken = default)
                            => await _connection.RequestResourceAsync<Batch<PackageVersionData>>("GET", $"api/http/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions?query={query.ToString()}&mirrorId={mirrorId?.ToString() ?? "null"}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PackageVersionData>>()) : Partial<Batch<PackageVersionData>>.Default())}", cancellationToken);
                        
                        /// <summary>
                        /// Gets a list of repository package versions for a given project id.
                        /// </summary>
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>Read</term>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        public IAsyncEnumerable<PackageVersionData> GetAllPackageVersionsAsyncEnumerable(ProjectIdentifier project, PackageRepositoryIdentifier repository, string packageName, string query, string? mirrorId = null, string? skip = null, int? top = 100, Func<Partial<PackageVersionData>, Partial<PackageVersionData>>? partial = null, CancellationToken cancellationToken = default)
                            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllPackageVersionsAsync(project: project, repository: repository, packageName: packageName, query: query, mirrorId: mirrorId, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PackageVersionData>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PackageVersionData>.Default())), skip, cancellationToken);
                    
                        /// <summary>
                        /// Gets a details for repository package version for a given project id.
                        /// </summary>
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>Read</term>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        public async Task<PackageVersionDetails> GetPackageVersionDetailsAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, string packageName, string packageVersion, Func<Partial<PackageVersionDetails>, Partial<PackageVersionDetails>>? partial = null, CancellationToken cancellationToken = default)
                            => await _connection.RequestResourceAsync<PackageVersionDetails>("GET", $"api/http/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions/version:{packageVersion}?$fields={(partial != null ? partial(new Partial<PackageVersionDetails>()) : Partial<PackageVersionDetails>.Default())}", cancellationToken);
                    
                        /// <summary>
                        /// Removes a package version in repository for a given project id.
                        /// </summary>
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>Write</term>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        public async Task DeletePackageVersionAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, string packageName, string packageVersion, CancellationToken cancellationToken = default)
                            => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions/version:{packageVersion}", cancellationToken);
                    
                    }
                
                }
            
                public partial class PackageClient : ISpaceClient
                {
                    /// <summary>
                    /// Gets a list of repository packages for a given project id.
                    /// </summary>
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Read</term>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    [Obsolete("Use GET /projects/{project}/packages/repositories/{repository}/packages (since 2020-09-01) (marked for removal)")]
                    public async Task<Batch<PackageData>> GetAllPackagesAsync(ProjectIdentifier project, string type, string repositoryName, string query, string? skip = null, int? top = 100, Func<Partial<Batch<PackageData>>, Partial<Batch<PackageData>>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<Batch<PackageData>>("GET", $"api/http/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages?query={query.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PackageData>>()) : Partial<Batch<PackageData>>.Default())}", cancellationToken);
                    
                    /// <summary>
                    /// Gets a list of repository packages for a given project id.
                    /// </summary>
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Read</term>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    [Obsolete("Use GET /projects/{project}/packages/repositories/{repository}/packages (since 2020-09-01) (marked for removal)")]
                    public IAsyncEnumerable<PackageData> GetAllPackagesAsyncEnumerable(ProjectIdentifier project, string type, string repositoryName, string query, string? skip = null, int? top = 100, Func<Partial<PackageData>, Partial<PackageData>>? partial = null, CancellationToken cancellationToken = default)
                        => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllPackagesAsync(project: project, type: type, repositoryName: repositoryName, query: query, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PackageData>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PackageData>.Default())), skip, cancellationToken);
                
                    public partial class VersionClient : ISpaceClient
                    {
                        /// <summary>
                        /// Gets a list of repository package versions for a given project id.
                        /// </summary>
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>Read</term>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        [Obsolete("Use GET /projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions (since 2020-09-01) (marked for removal)")]
                        public async Task<Batch<PackageVersionData>> GetAllPackageVersionsAsync(ProjectIdentifier project, string type, string repositoryName, string packageName, string query, string? skip = null, int? top = 100, Func<Partial<Batch<PackageVersionData>>, Partial<Batch<PackageVersionData>>>? partial = null, CancellationToken cancellationToken = default)
                            => await _connection.RequestResourceAsync<Batch<PackageVersionData>>("GET", $"api/http/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages/name:{packageName}/versions?query={query.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PackageVersionData>>()) : Partial<Batch<PackageVersionData>>.Default())}", cancellationToken);
                        
                        /// <summary>
                        /// Gets a list of repository package versions for a given project id.
                        /// </summary>
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>Read</term>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        [Obsolete("Use GET /projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions (since 2020-09-01) (marked for removal)")]
                        public IAsyncEnumerable<PackageVersionData> GetAllPackageVersionsAsyncEnumerable(ProjectIdentifier project, string type, string repositoryName, string packageName, string query, string? skip = null, int? top = 100, Func<Partial<PackageVersionData>, Partial<PackageVersionData>>? partial = null, CancellationToken cancellationToken = default)
                            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllPackageVersionsAsync(project: project, type: type, repositoryName: repositoryName, packageName: packageName, query: query, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PackageVersionData>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PackageVersionData>.Default())), skip, cancellationToken);
                    
                        /// <summary>
                        /// Gets a details for repository package version for a given project id.
                        /// </summary>
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>Read</term>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        [Obsolete("Use GET /projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions/version:{packageVersion} (since 2020-09-01) (marked for removal)")]
                        public async Task<PackageVersionDetails> GetPackageVersionDetailsAsync(ProjectIdentifier project, string type, string repositoryName, string packageName, string packageVersion, Func<Partial<PackageVersionDetails>, Partial<PackageVersionDetails>>? partial = null, CancellationToken cancellationToken = default)
                            => await _connection.RequestResourceAsync<PackageVersionDetails>("GET", $"api/http/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages/name:{packageName}/versions/version:{packageVersion}?$fields={(partial != null ? partial(new Partial<PackageVersionDetails>()) : Partial<PackageVersionDetails>.Default())}", cancellationToken);
                    
                        /// <summary>
                        /// Removes a package version in repository for a given project id.
                        /// </summary>
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>Write</term>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        [Obsolete("Use DELETE /projects/{project}/packages/repositories/{repository}/packages/name:{packageName}/versions/version:{packageVersion} (since 2020-09-01) (marked for removal)")]
                        public async Task DeletePackageVersionAsync(ProjectIdentifier project, string type, string repositoryName, string packageName, string packageVersion, CancellationToken cancellationToken = default)
                            => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/packages/repositories/type:{type}/repository:{repositoryName}/packages/name:{packageName}/versions/version:{packageVersion}", cancellationToken);
                    
                    }
                
                }
            
                public UrlClient Url => new UrlClient(_connection);
                
                public partial class UrlClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public UrlClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Gets a package repository URL for a given project id.
                    /// </summary>
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Read</term>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task<string> GetRepositoryUrlAsync(ProjectIdentifier project, PackageRepositoryIdentifier repository, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<string>("GET", $"api/http/projects/{project}/packages/repositories/{repository}/url", cancellationToken);
                
                }
            
            }
        
            public SearchClient Search => new SearchClient(_connection);
            
            public partial class SearchClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public SearchClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Executes a package search for a given project id.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Read</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<PackageVersionData>> FindPackagesInRepositoryAsync(ProjectIdentifier project, string type, string query, string? mirrorId = null, string? skip = null, int? top = 100, Func<Partial<Batch<PackageVersionData>>, Partial<Batch<PackageVersionData>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<PackageVersionData>>("GET", $"api/http/projects/{project}/packages/search?type={type.ToString()}&query={query.ToString()}&mirrorId={mirrorId?.ToString() ?? "null"}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PackageVersionData>>()) : Partial<Batch<PackageVersionData>>.Default())}", cancellationToken);
                
                /// <summary>
                /// Executes a package search for a given project id.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Read</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<PackageVersionData> FindPackagesInRepositoryAsyncEnumerable(ProjectIdentifier project, string type, string query, string? mirrorId = null, string? skip = null, int? top = 100, Func<Partial<PackageVersionData>, Partial<PackageVersionData>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => FindPackagesInRepositoryAsync(project: project, type: type, query: query, mirrorId: mirrorId, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PackageVersionData>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PackageVersionData>.Default())), skip, cancellationToken);
            
            }
        
            public TypeClient Types => new TypeClient(_connection);
            
            public partial class TypeClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public TypeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Creates a new package repository for a given project id.
                /// </summary>
                public async Task<List<PackageType>> GetAllTypesAsync(ProjectIdentifier project, Func<Partial<PackageType>, Partial<PackageType>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<List<PackageType>>("GET", $"api/http/projects/{project}/packages/types?$fields={(partial != null ? partial(new Partial<PackageType>()) : Partial<PackageType>.Default())}", cancellationToken);
            
            }
        
        }
    
        public PlanningClient Planning => new PlanningClient(_connection);
        
        public partial class PlanningClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public PlanningClient(Connection connection)
            {
                _connection = connection;
            }
            
            public ChecklistClient Checklists => new ChecklistClient(_connection);
            
            public partial class ChecklistClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public ChecklistClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Checklist> CreateChecklistAsync(ProjectIdentifier project, string name, Func<Partial<Checklist>, Partial<Checklist>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningChecklistsPostRequest, Checklist>("POST", $"api/http/projects/{project}/planning/checklists?$fields={(partial != null ? partial(new Partial<Checklist>()) : Partial<Checklist>.Default())}", 
                        new ProjectsForProjectPlanningChecklistsPostRequest { 
                            Name = name,
                        }
                , cancellationToken);
            
                public async Task<Checklist> ImportChecklistAsync(ProjectIdentifier project, string name, string tabIndentedLines, Func<Partial<Checklist>, Partial<Checklist>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningChecklistsImportPostRequest, Checklist>("POST", $"api/http/projects/{project}/planning/checklists/import?$fields={(partial != null ? partial(new Partial<Checklist>()) : Partial<Checklist>.Default())}", 
                        new ProjectsForProjectPlanningChecklistsImportPostRequest { 
                            Name = name,
                            TabIndentedLines = tabIndentedLines,
                        }
                , cancellationToken);
            
                public async Task ImportChecklistLinesAsync(ProjectIdentifier project, string checklistId, string targetParentId, string tabIndentedLines, string? afterItemId = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/checklists/{checklistId}/import", 
                        new ProjectsForProjectPlanningChecklistsForChecklistIdImportPostRequest { 
                            TargetParentId = targetParentId,
                            AfterItemId = afterItemId,
                            TabIndentedLines = tabIndentedLines,
                        }
                , cancellationToken);
            
                public async Task<Batch<Checklist>> GetAllChecklistsAsync(ProjectIdentifier project, ChecklistSorting? sorting = null, bool descending = false, string? skip = null, int? top = 100, string? query = null, Func<Partial<Batch<Checklist>>, Partial<Batch<Checklist>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<Checklist>>("GET", $"api/http/projects/{project}/planning/checklists?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&sorting={(sorting ?? ChecklistSorting.UPDATED).ToString()}&descending={descending.ToString("l")}&$fields={(partial != null ? partial(new Partial<Batch<Checklist>>()) : Partial<Batch<Checklist>>.Default())}", cancellationToken);
                
                public IAsyncEnumerable<Checklist> GetAllChecklistsAsyncEnumerable(ProjectIdentifier project, ChecklistSorting? sorting = null, bool descending = false, string? skip = null, int? top = 100, string? query = null, Func<Partial<Checklist>, Partial<Checklist>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllChecklistsAsync(project: project, sorting: sorting, descending: descending, top: top, query: query, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<Checklist>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<Checklist>.Default())), skip, cancellationToken);
            
                public async Task UpdateChecklistAsync(ProjectIdentifier project, string checklistId, string name, string? description = null, string? owner = null, string? tag = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/planning/checklists/{checklistId}", 
                        new ProjectsForProjectPlanningChecklistsForChecklistIdPatchRequest { 
                            Name = name,
                            Description = description,
                            Owner = owner,
                            Tag = tag,
                        }
                , cancellationToken);
            
                public async Task DeleteChecklistAsync(ProjectIdentifier project, string checklistId, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/checklists/{checklistId}", cancellationToken);
            
                public StarredClient Starred => new StarredClient(_connection);
                
                public partial class StarredClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public StarredClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<Checklist>> GetAllStarredChecklistsAsync(ProjectIdentifier project, Func<Partial<Checklist>, Partial<Checklist>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<List<Checklist>>("GET", $"api/http/projects/{project}/planning/checklists/starred?$fields={(partial != null ? partial(new Partial<Checklist>()) : Partial<Checklist>.Default())}", cancellationToken);
                
                }
            
                public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
                
                public partial class FullChecklistTreeClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public FullChecklistTreeClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<PlanItemChildren>> GetFullChecklistTreeAsync(ProjectIdentifier project, string checklistId, Func<Partial<PlanItemChildren>, Partial<PlanItemChildren>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<List<PlanItemChildren>>("GET", $"api/http/projects/{project}/planning/checklists/{checklistId}/full-checklist-tree?$fields={(partial != null ? partial(new Partial<PlanItemChildren>()) : Partial<PlanItemChildren>.Default())}", cancellationToken);
                
                }
            
            }
        
            public IssueClient Issues => new IssueClient(_connection);
            
            public partial class IssueClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public IssueClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Edit issues</term>
                /// <description>Edit issues that were created by other users</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Issue> CreateIssueAsync(ProjectIdentifier project, string title, string status, List<string>? tags = null, List<string>? checklists = null, List<string>? sprints = null, string? description = null, ProfileIdentifier? assignee = null, DateTime? dueDate = null, List<AttachmentIn>? attachments = null, MessageLink? fromMessage = null, List<CustomFieldInputValue>? customFields = null, Func<Partial<Issue>, Partial<Issue>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningIssuesPostRequest, Issue>("POST", $"api/http/projects/{project}/planning/issues?$fields={(partial != null ? partial(new Partial<Issue>()) : Partial<Issue>.Default())}", 
                        new ProjectsForProjectPlanningIssuesPostRequest { 
                            Title = title,
                            Description = description,
                            Assignee = assignee,
                            Status = status,
                            DueDate = dueDate,
                            Tags = (tags ?? new List<string>()),
                            Checklists = (checklists ?? new List<string>()),
                            Sprints = (sprints ?? new List<string>()),
                            Attachments = (attachments ?? new List<AttachmentIn>()),
                            FromMessage = fromMessage,
                            CustomFields = customFields,
                        }
                , cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Import issues</term>
                /// <description>Import issues</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<IssueImportResult> ImportIssuesAsync(ProjectIdentifier project, ImportMetadata metadata, List<ExternalIssue> issues, ImportMissingPolicy assigneeMissingPolicy, ImportMissingPolicy statusMissingPolicy, ImportExistsPolicy onExistsPolicy, bool dryRun, Func<Partial<IssueImportResult>, Partial<IssueImportResult>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningIssuesImportPostRequest, IssueImportResult>("POST", $"api/http/projects/{project}/planning/issues/import?$fields={(partial != null ? partial(new Partial<IssueImportResult>()) : Partial<IssueImportResult>.Default())}", 
                        new ProjectsForProjectPlanningIssuesImportPostRequest { 
                            Metadata = metadata,
                            Issues = issues,
                            AssigneeMissingPolicy = assigneeMissingPolicy,
                            StatusMissingPolicy = statusMissingPolicy,
                            OnExistsPolicy = onExistsPolicy,
                            IsDryRun = dryRun,
                        }
                , cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Edit issues</term>
                /// <description>Edit issues that were created by other users</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task ToggleIssueResolvedAsync(ProjectIdentifier project, string issueId, bool resolved, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/issues/{issueId}/toggle-resolved", 
                        new ProjectsForProjectPlanningIssuesForIssueIdToggleResolvedPostRequest { 
                            IsResolved = resolved,
                        }
                , cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View issues</term>
                /// <description>View issues in a project</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<Issue>> GetAllIssuesAsync(ProjectIdentifier project, List<ProfileIdentifier> assigneeId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = 100, ProfileIdentifier? createdByProfileId = null, string? tagId = null, string? query = null, List<string>? tags = null, List<string>? customFields = null, string? importTransaction = null, Func<Partial<Batch<Issue>>, Partial<Batch<Issue>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<Issue>>("GET", $"api/http/projects/{project}/planning/issues?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&assigneeId={assigneeId.JoinToString("assigneeId", it => it?.ToString())}&createdByProfileId={createdByProfileId?.ToString() ?? "null"}&statuses={statuses.JoinToString("statuses", it => it.ToString())}&tagId={tagId?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&sorting={sorting.ToString()}&descending={descending.ToString("l")}&tags={tags?.JoinToString("tags", it => it.ToString()) ?? "null"}&customFields={customFields?.JoinToString("customFields", it => it.ToString()) ?? "null"}&importTransaction={importTransaction?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<Issue>>()) : Partial<Batch<Issue>>.Default())}", cancellationToken);
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View issues</term>
                /// <description>View issues in a project</description>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<Issue> GetAllIssuesAsyncEnumerable(ProjectIdentifier project, List<ProfileIdentifier> assigneeId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = 100, ProfileIdentifier? createdByProfileId = null, string? tagId = null, string? query = null, List<string>? tags = null, List<string>? customFields = null, string? importTransaction = null, Func<Partial<Issue>, Partial<Issue>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllIssuesAsync(project: project, assigneeId: assigneeId, statuses: statuses, sorting: sorting, descending: descending, top: top, createdByProfileId: createdByProfileId, tagId: tagId, query: query, tags: tags, customFields: customFields, importTransaction: importTransaction, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<Issue>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<Issue>.Default())), skip, cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View issues</term>
                /// <description>View issues in a project</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Issue> GetIssueByNumberAsync(ProjectIdentifier project, int number, Func<Partial<Issue>, Partial<Issue>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Issue>("GET", $"api/http/projects/{project}/planning/issues/number:{number}?$fields={(partial != null ? partial(new Partial<Issue>()) : Partial<Issue>.Default())}", cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Edit issues</term>
                /// <description>Edit issues that were created by other users</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task UpdateIssueAsync(ProjectIdentifier project, string issueId, string title, string status, string? description = null, string? assignee = null, DateTime? dueDate = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/planning/issues/{issueId}", 
                        new ProjectsForProjectPlanningIssuesForIssueIdPatchRequest { 
                            Title = title,
                            Description = description,
                            Assignee = assignee,
                            Status = status,
                            DueDate = dueDate,
                        }
                , cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Edit issues</term>
                /// <description>Edit issues that were created by other users</description>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task DeleteIssueAsync(ProjectIdentifier project, string issueId, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/issues/{issueId}", cancellationToken);
            
                public StatusClient Statuses => new StatusClient(_connection);
                
                public partial class StatusClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public StatusClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>View issues</term>
                    /// <description>View issues in a project</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task<List<IssueStatus>> GetAllIssueStatusesAsync(ProjectIdentifier project, Func<Partial<IssueStatus>, Partial<IssueStatus>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<List<IssueStatus>>("GET", $"api/http/projects/{project}/planning/issues/statuses?$fields={(partial != null ? partial(new Partial<IssueStatus>()) : Partial<IssueStatus>.Default())}", cancellationToken);
                
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Manage issue settings</term>
                    /// <description>Manage settings of the issue tracker</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task UpdateStatusAsync(ProjectIdentifier project, List<IssueStatusData> statuses, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/planning/issues/statuses", 
                            new ProjectsForProjectPlanningIssuesStatusesPatchRequest { 
                                Statuses = statuses,
                            }
                    , cancellationToken);
                
                    public DistributionClient Distribution => new DistributionClient(_connection);
                    
                    public partial class DistributionClient : ISpaceClient
                    {
                        private readonly Connection _connection;
                        
                        public DistributionClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        /// <remarks>
                        /// Required permissions:
                        /// <list type="bullet">
                        /// <item>
                        /// <term>View issues</term>
                        /// <description>View issues in a project</description>
                        /// </item>
                        /// </list>
                        /// </remarks>
                        public async Task<List<IssueStatusWithUsages>> GetIssueStatusDistributionAsync(ProjectIdentifier project, Func<Partial<IssueStatusWithUsages>, Partial<IssueStatusWithUsages>>? partial = null, CancellationToken cancellationToken = default)
                            => await _connection.RequestResourceAsync<List<IssueStatusWithUsages>>("GET", $"api/http/projects/{project}/planning/issues/statuses/distribution?$fields={(partial != null ? partial(new Partial<IssueStatusWithUsages>()) : Partial<IssueStatusWithUsages>.Default())}", cancellationToken);
                    
                    }
                
                }
            
                public AttachmentClient Attachments => new AttachmentClient(_connection);
                
                public partial class AttachmentClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public AttachmentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Edit issues</term>
                    /// <description>Edit issues that were created by other users</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task AddAttachmentsAsync(ProjectIdentifier project, string issueId, List<AttachmentIn> attachments, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/issues/{issueId}/attachments", 
                            new ProjectsForProjectPlanningIssuesForIssueIdAttachmentsPostRequest { 
                                Attachments = attachments,
                            }
                    , cancellationToken);
                
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Edit issues</term>
                    /// <description>Edit issues that were created by other users</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task RemoveAttachmentsAsync(ProjectIdentifier project, string issueId, List<string> identities, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/issues/{issueId}/attachments?identities={identities.JoinToString("identities", it => it.ToString())}", cancellationToken);
                
                }
            
                public ChecklistClient Checklists => new ChecklistClient(_connection);
                
                public partial class ChecklistClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public ChecklistClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Edit issues</term>
                    /// <description>Edit issues that were created by other users</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task AddIssueChecklistAsync(ProjectIdentifier project, string issueId, string checklistId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/issues/{issueId}/checklists/{checklistId}", cancellationToken);
                
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Edit issues</term>
                    /// <description>Edit issues that were created by other users</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task RemoveIssueChecklistAsync(ProjectIdentifier project, string issueId, string checklistId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/issues/{issueId}/checklists/{checklistId}", cancellationToken);
                
                }
            
                public CommentClient Comments => new CommentClient(_connection);
                
                public partial class CommentClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public CommentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>View issues</term>
                    /// <description>View issues in a project</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task<List<string>> ImportIssueCommentHistoryAsync(ProjectIdentifier project, string issueId, List<MessageForImport> comments, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<ProjectsForProjectPlanningIssuesForIssueIdCommentsImportPostRequest, List<string>>("POST", $"api/http/projects/{project}/planning/issues/{issueId}/comments/import", 
                            new ProjectsForProjectPlanningIssuesForIssueIdCommentsImportPostRequest { 
                                Comments = comments,
                            }
                    , cancellationToken);
                
                }
            
                public TagClient Tags => new TagClient(_connection);
                
                public partial class TagClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public TagClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Edit issues</term>
                    /// <description>Edit issues that were created by other users</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task AddIssueTagAsync(ProjectIdentifier project, string issueId, string tagId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/issues/{issueId}/tags/{tagId}", cancellationToken);
                
                    /// <remarks>
                    /// Required permissions:
                    /// <list type="bullet">
                    /// <item>
                    /// <term>Edit issues</term>
                    /// <description>Edit issues that were created by other users</description>
                    /// </item>
                    /// </list>
                    /// </remarks>
                    public async Task RemoveIssueTagAsync(ProjectIdentifier project, string issueId, string tagId, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/issues/{issueId}/tags/{tagId}", cancellationToken);
                
                }
            
            }
        
            public TagClient Tags => new TagClient(_connection);
            
            public partial class TagClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public TagClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<PlanningTag> CreateHierarchicalTagAsync(ProjectIdentifier project, List<string> path, string? parentTagId = null, Func<Partial<PlanningTag>, Partial<PlanningTag>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningTagsPostRequest, PlanningTag>("POST", $"api/http/projects/{project}/planning/tags?$fields={(partial != null ? partial(new Partial<PlanningTag>()) : Partial<PlanningTag>.Default())}", 
                        new ProjectsForProjectPlanningTagsPostRequest { 
                            ParentTagId = parentTagId,
                            Path = path,
                        }
                , cancellationToken);
            
                public async Task<Batch<PlanningTag>> GetAllHierarchicalTagsAsync(ProjectIdentifier project, string? skip = null, int? top = 100, string? query = null, Func<Partial<Batch<PlanningTag>>, Partial<Batch<PlanningTag>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<PlanningTag>>("GET", $"api/http/projects/{project}/planning/tags?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PlanningTag>>()) : Partial<Batch<PlanningTag>>.Default())}", cancellationToken);
                
                public IAsyncEnumerable<PlanningTag> GetAllHierarchicalTagsAsyncEnumerable(ProjectIdentifier project, string? skip = null, int? top = 100, string? query = null, Func<Partial<PlanningTag>, Partial<PlanningTag>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllHierarchicalTagsAsync(project: project, top: top, query: query, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PlanningTag>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PlanningTag>.Default())), skip, cancellationToken);
            
            }
        
        }
    
        public RepositoryClient Repositories => new RepositoryClient(_connection);
        
        public partial class RepositoryClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public RepositoryClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<PRRepositoryInfo> CreateNewRepositoryAsync(ProjectIdentifier project, string repository, string description = "", bool initialize = true, bool defaultSetup = false, string? defaultBranch = null, Func<Partial<PRRepositoryInfo>, Partial<PRRepositoryInfo>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<ProjectsForProjectRepositoriesForRepositoryPostRequest, PRRepositoryInfo>("POST", $"api/http/projects/{project}/repositories/{repository}?$fields={(partial != null ? partial(new Partial<PRRepositoryInfo>()) : Partial<PRRepositoryInfo>.Default())}", 
                    new ProjectsForProjectRepositoriesForRepositoryPostRequest { 
                        Description = description,
                        DefaultBranch = defaultBranch,
                        IsInitialize = initialize,
                        IsDefaultSetup = defaultSetup,
                    }
            , cancellationToken);
        
            public async Task GcAsync(ProjectIdentifier project, string repository, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/repositories/{repository}/gc", cancellationToken);
        
            public async Task DeleteRepositoryAsync(ProjectIdentifier project, string repository, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/repositories/{repository}", cancellationToken);
        
            public CommitSetReviewClient CommitSetReviews => new CommitSetReviewClient(_connection);
            
            public partial class CommitSetReviewClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public CommitSetReviewClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CommitSetReviewRecord> CreateCommitSetReviewAsync(ProjectIdentifier project, string repository, List<string> revisions, string? title = null, Func<Partial<CommitSetReviewRecord>, Partial<CommitSetReviewRecord>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectRepositoriesForRepositoryCommitSetReviewsPostRequest, CommitSetReviewRecord>("POST", $"api/http/projects/{project}/repositories/{repository}/commit-set-reviews?$fields={(partial != null ? partial(new Partial<CommitSetReviewRecord>()) : Partial<CommitSetReviewRecord>.Default())}", 
                        new ProjectsForProjectRepositoriesForRepositoryCommitSetReviewsPostRequest { 
                            Revisions = revisions,
                            Title = title,
                        }
                , cancellationToken);
            
            }
        
            public MergeRequestClient MergeRequests => new MergeRequestClient(_connection);
            
            public partial class MergeRequestClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public MergeRequestClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<MergeRequestRecord> CreateMergeRequestAsync(ProjectIdentifier project, string repository, string sourceBranch, string targetBranch, string title, List<ReviewerParam>? reviewers = null, Func<Partial<MergeRequestRecord>, Partial<MergeRequestRecord>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ProjectsForProjectRepositoriesForRepositoryMergeRequestsPostRequest, MergeRequestRecord>("POST", $"api/http/projects/{project}/repositories/{repository}/merge-requests?$fields={(partial != null ? partial(new Partial<MergeRequestRecord>()) : Partial<MergeRequestRecord>.Default())}", 
                        new ProjectsForProjectRepositoriesForRepositoryMergeRequestsPostRequest { 
                            SourceBranch = sourceBranch,
                            TargetBranch = targetBranch,
                            Title = title,
                            Reviewers = reviewers,
                        }
                , cancellationToken);
            
            }
        
            public RevisionClient Revisions => new RevisionClient(_connection);
            
            public partial class RevisionClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public RevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public CodeDiscussionClient CodeDiscussions => new CodeDiscussionClient(_connection);
                
                public partial class CodeDiscussionClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public CodeDiscussionClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<CodeDiscussionRecord> CreateCodeDiscussionAsync(ProjectIdentifier project, string repository, string revision, string text, bool pending = false, DiffContext? diffContext = null, string? filename = null, int? line = null, int? oldLine = null, Func<Partial<CodeDiscussionRecord>, Partial<CodeDiscussionRecord>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<ProjectsForProjectRepositoriesForRepositoryRevisionsForRevisionCodeDiscussionsPostRequest, CodeDiscussionRecord>("POST", $"api/http/projects/{project}/repositories/{repository}/revisions/{revision}/code-discussions?$fields={(partial != null ? partial(new Partial<CodeDiscussionRecord>()) : Partial<CodeDiscussionRecord>.Default())}", 
                            new ProjectsForProjectRepositoriesForRepositoryRevisionsForRevisionCodeDiscussionsPostRequest { 
                                Text = text,
                                DiffContext = diffContext,
                                Filename = filename,
                                Line = line,
                                OldLine = oldLine,
                                IsPending = pending,
                            }
                    , cancellationToken);
                
                }
            
                public ExternalCheckClient ExternalChecks => new ExternalCheckClient(_connection);
                
                public partial class ExternalCheckClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public ExternalCheckClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task ReportExternalCheckStatusAsync(ProjectIdentifier project, string repository, string revision, CommitExecutionStatus executionStatus, string url, string externalServiceName, string taskName, string taskId, string? branch = null, List<string>? changes = null, long? timestamp = null, string? description = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/repositories/{repository}/revisions/{revision}/external-checks", 
                            new ProjectsForProjectRepositoriesForRepositoryRevisionsForRevisionExternalChecksPostRequest { 
                                Branch = branch,
                                Changes = changes,
                                ExecutionStatus = executionStatus,
                                Url = url,
                                ExternalServiceName = externalServiceName,
                                TaskName = taskName,
                                TaskId = taskId,
                                Timestamp = timestamp,
                                Description = description,
                            }
                    , cancellationToken);
                
                    public async Task<List<ExternalCheck>> GetExternalChecksForCommitAsync(ProjectIdentifier project, string repository, string revision, Func<Partial<ExternalCheck>, Partial<ExternalCheck>>? partial = null, CancellationToken cancellationToken = default)
                        => await _connection.RequestResourceAsync<List<ExternalCheck>>("GET", $"api/http/projects/{project}/repositories/{repository}/revisions/{revision}/external-checks?$fields={(partial != null ? partial(new Partial<ExternalCheck>()) : Partial<ExternalCheck>.Default())}", cancellationToken);
                
                }
            
            }
        
        }
    
        public CommitClient Commits => new CommitClient(_connection);
        
        public partial class CommitClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public CommitClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<GitCommitInfo>> ListCommitsMatchingQueryAsync(ProjectIdentifier project, string repository, string? skip = null, int? top = 100, string? query = null, Func<Partial<Batch<GitCommitInfo>>, Partial<Batch<GitCommitInfo>>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<Batch<GitCommitInfo>>("GET", $"api/http/projects/{project}/{repository}/commits?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<GitCommitInfo>>()) : Partial<Batch<GitCommitInfo>>.Default())}", cancellationToken);
            
            public IAsyncEnumerable<GitCommitInfo> ListCommitsMatchingQueryAsyncEnumerable(ProjectIdentifier project, string repository, string? skip = null, int? top = 100, string? query = null, Func<Partial<GitCommitInfo>, Partial<GitCommitInfo>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListCommitsMatchingQueryAsync(project: project, repository: repository, top: top, query: query, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<GitCommitInfo>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<GitCommitInfo>.Default())), skip, cancellationToken);
        
        }
    
    }
    
}
