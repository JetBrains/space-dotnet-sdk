// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client.InlineDiffPartialBuilder;

public static class InlineDiffPartialExtensions
{
    public static Partial<InlineDiff> WithType(this Partial<InlineDiff> it)
        => it.AddFieldName("type");
    
    public static Partial<InlineDiff> WithType(this Partial<InlineDiff> it, Func<Partial<GitFileType>, Partial<GitFileType>> partialBuilder)
        => it.AddFieldName("type", partialBuilder(new Partial<GitFileType>(it)));
    
    public static Partial<InlineDiff> WithLines(this Partial<InlineDiff> it)
        => it.AddFieldName("lines");
    
    public static Partial<InlineDiff> WithLines(this Partial<InlineDiff> it, Func<Partial<InlineDiffLine>, Partial<InlineDiffLine>> partialBuilder)
        => it.AddFieldName("lines", partialBuilder(new Partial<InlineDiffLine>(it)));
    
    public static Partial<InlineDiff> WithIsHasFilteredFragments(this Partial<InlineDiff> it)
        => it.AddFieldName("hasFilteredFragments");
    
    public static Partial<InlineDiff> WithLineEndingDiff(this Partial<InlineDiff> it)
        => it.AddFieldName("lineEndingDiff");
    
    public static Partial<InlineDiff> WithLineEndingDiff(this Partial<InlineDiff> it, Func<Partial<LineEndingDiff>, Partial<LineEndingDiff>> partialBuilder)
        => it.AddFieldName("lineEndingDiff", partialBuilder(new Partial<LineEndingDiff>(it)));
    
    public static Partial<InlineDiff> WithBomDiff(this Partial<InlineDiff> it)
        => it.AddFieldName("bomDiff");
    
    public static Partial<InlineDiff> WithBomDiff(this Partial<InlineDiff> it, Func<Partial<BOMDiff>, Partial<BOMDiff>> partialBuilder)
        => it.AddFieldName("bomDiff", partialBuilder(new Partial<BOMDiff>(it)));
    
    public static Partial<InlineDiff> WithScopes(this Partial<InlineDiff> it)
        => it.AddFieldName("scopes");
    
    public static Partial<InlineDiff> WithScopes(this Partial<InlineDiff> it, Func<Partial<CodeScopeRange>, Partial<CodeScopeRange>> partialBuilder)
        => it.AddFieldName("scopes", partialBuilder(new Partial<CodeScopeRange>(it)));
    
}

