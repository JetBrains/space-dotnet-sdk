// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client.GitCommitChangePartialBuilder
{
    public static class GitCommitChangePartialExtensions
    {
        public static Partial<GitCommitChange> WithChangeType(this Partial<GitCommitChange> it)
            => it.AddFieldName("changeType");
        
        public static Partial<GitCommitChange> WithChangeType(this Partial<GitCommitChange> it, Func<Partial<GitCommitChangeType>, Partial<GitCommitChangeType>> partialBuilder)
            => it.AddFieldName("changeType", partialBuilder(new Partial<GitCommitChangeType>(it)));
        
        public static Partial<GitCommitChange> WithOld(this Partial<GitCommitChange> it)
            => it.AddFieldName("old");
        
        public static Partial<GitCommitChange> WithOld(this Partial<GitCommitChange> it, Func<Partial<GitFile>, Partial<GitFile>> partialBuilder)
            => it.AddFieldName("old", partialBuilder(new Partial<GitFile>(it)));
        
        public static Partial<GitCommitChange> WithNew(this Partial<GitCommitChange> it)
            => it.AddFieldName("new");
        
        public static Partial<GitCommitChange> WithNew(this Partial<GitCommitChange> it, Func<Partial<GitFile>, Partial<GitFile>> partialBuilder)
            => it.AddFieldName("new", partialBuilder(new Partial<GitFile>(it)));
        
        public static Partial<GitCommitChange> WithRevision(this Partial<GitCommitChange> it)
            => it.AddFieldName("revision");
        
        public static Partial<GitCommitChange> WithDiffSize(this Partial<GitCommitChange> it)
            => it.AddFieldName("diffSize");
        
        public static Partial<GitCommitChange> WithDiffSize(this Partial<GitCommitChange> it, Func<Partial<GitDiffSize>, Partial<GitDiffSize>> partialBuilder)
            => it.AddFieldName("diffSize", partialBuilder(new Partial<GitDiffSize>(it)));
        
        public static Partial<GitCommitChange> WithPath(this Partial<GitCommitChange> it)
            => it.AddFieldName("path");
        
    }
    
}
