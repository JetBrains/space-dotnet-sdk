// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ESApplicationPermanentToken
     : IPropagatePropertyAccessPath
{
    public ESApplicationPermanentToken() { }
    
    public ESApplicationPermanentToken(string id, string name, ESApp application, string scope, XScopeApi apiScope, DateTime created, DateTime? expires = null, AccessRecord? lastAccess = null)
    {
        Id = id;
        Name = name;
        Application = application;
        Scope = scope;
        ApiScope = apiScope;
        Created = created;
        Expires = expires;
        LastAccess = lastAccess;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(ESApplicationPermanentToken), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(ESApplicationPermanentToken), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<ESApp> _application = new PropertyValue<ESApp>(nameof(ESApplicationPermanentToken), nameof(Application), "application");
    
    [Required]
    [JsonPropertyName("application")]
    public ESApp Application
    {
        get => _application.GetValue(InlineErrors);
        set => _application.SetValue(value);
    }

    private PropertyValue<string> _scope = new PropertyValue<string>(nameof(ESApplicationPermanentToken), nameof(Scope), "scope");
    
    [Required]
    [JsonPropertyName("scope")]
    public string Scope
    {
        get => _scope.GetValue(InlineErrors);
        set => _scope.SetValue(value);
    }

    private PropertyValue<XScopeApi> _apiScope = new PropertyValue<XScopeApi>(nameof(ESApplicationPermanentToken), nameof(ApiScope), "apiScope");
    
    [Required]
    [JsonPropertyName("apiScope")]
    public XScopeApi ApiScope
    {
        get => _apiScope.GetValue(InlineErrors);
        set => _apiScope.SetValue(value);
    }

    private PropertyValue<DateTime> _created = new PropertyValue<DateTime>(nameof(ESApplicationPermanentToken), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<DateTime?> _expires = new PropertyValue<DateTime?>(nameof(ESApplicationPermanentToken), nameof(Expires), "expires");
    
    [JsonPropertyName("expires")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? Expires
    {
        get => _expires.GetValue(InlineErrors);
        set => _expires.SetValue(value);
    }

    private PropertyValue<AccessRecord?> _lastAccess = new PropertyValue<AccessRecord?>(nameof(ESApplicationPermanentToken), nameof(LastAccess), "lastAccess");
    
    [JsonPropertyName("lastAccess")]
    public AccessRecord? LastAccess
    {
        get => _lastAccess.GetValue(InlineErrors);
        set => _lastAccess.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _application.SetAccessPath(parentChainPath, validateHasBeenSet);
        _scope.SetAccessPath(parentChainPath, validateHasBeenSet);
        _apiScope.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _expires.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lastAccess.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

