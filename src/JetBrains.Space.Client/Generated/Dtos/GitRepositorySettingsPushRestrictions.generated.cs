// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitRepositorySettingsPushRestrictions
     : IPropagatePropertyAccessPath
{
    public GitRepositorySettingsPushRestrictions() { }
    
    public GitRepositorySettingsPushRestrictions(bool? checkAuthenticatedCommitter = null, bool? requireSignature = null, bool? verifySignature = null, string? maxFileSize = null, bool? defaultForbiddenFilesList = null, List<string>? forbiddenFileNames = null, string? commitMessageRegex = null, string? commitMessageNegativeRegex = null, bool? windowsCompatibility = null)
    {
        IsCheckAuthenticatedCommitter = checkAuthenticatedCommitter;
        IsRequireSignature = requireSignature;
        IsVerifySignature = verifySignature;
        MaxFileSize = maxFileSize;
        IsDefaultForbiddenFilesList = defaultForbiddenFilesList;
        ForbiddenFileNames = forbiddenFileNames;
        CommitMessageRegex = commitMessageRegex;
        CommitMessageNegativeRegex = commitMessageNegativeRegex;
        IsWindowsCompatibility = windowsCompatibility;
    }
    
    private PropertyValue<bool?> _checkAuthenticatedCommitter = new PropertyValue<bool?>(nameof(GitRepositorySettingsPushRestrictions), nameof(IsCheckAuthenticatedCommitter), "checkAuthenticatedCommitter");
    
    [JsonPropertyName("checkAuthenticatedCommitter")]
    public bool? IsCheckAuthenticatedCommitter
    {
        get => _checkAuthenticatedCommitter.GetValue(InlineErrors);
        set => _checkAuthenticatedCommitter.SetValue(value);
    }

    private PropertyValue<bool?> _requireSignature = new PropertyValue<bool?>(nameof(GitRepositorySettingsPushRestrictions), nameof(IsRequireSignature), "requireSignature");
    
    [JsonPropertyName("requireSignature")]
    public bool? IsRequireSignature
    {
        get => _requireSignature.GetValue(InlineErrors);
        set => _requireSignature.SetValue(value);
    }

    private PropertyValue<bool?> _verifySignature = new PropertyValue<bool?>(nameof(GitRepositorySettingsPushRestrictions), nameof(IsVerifySignature), "verifySignature");
    
    [JsonPropertyName("verifySignature")]
    public bool? IsVerifySignature
    {
        get => _verifySignature.GetValue(InlineErrors);
        set => _verifySignature.SetValue(value);
    }

    private PropertyValue<string?> _maxFileSize = new PropertyValue<string?>(nameof(GitRepositorySettingsPushRestrictions), nameof(MaxFileSize), "maxFileSize");
    
    [JsonPropertyName("maxFileSize")]
    public string? MaxFileSize
    {
        get => _maxFileSize.GetValue(InlineErrors);
        set => _maxFileSize.SetValue(value);
    }

    private PropertyValue<bool?> _defaultForbiddenFilesList = new PropertyValue<bool?>(nameof(GitRepositorySettingsPushRestrictions), nameof(IsDefaultForbiddenFilesList), "defaultForbiddenFilesList");
    
    [JsonPropertyName("defaultForbiddenFilesList")]
    public bool? IsDefaultForbiddenFilesList
    {
        get => _defaultForbiddenFilesList.GetValue(InlineErrors);
        set => _defaultForbiddenFilesList.SetValue(value);
    }

    private PropertyValue<List<string>?> _forbiddenFileNames = new PropertyValue<List<string>?>(nameof(GitRepositorySettingsPushRestrictions), nameof(ForbiddenFileNames), "forbiddenFileNames");
    
    [JsonPropertyName("forbiddenFileNames")]
    public List<string>? ForbiddenFileNames
    {
        get => _forbiddenFileNames.GetValue(InlineErrors);
        set => _forbiddenFileNames.SetValue(value);
    }

    private PropertyValue<string?> _commitMessageRegex = new PropertyValue<string?>(nameof(GitRepositorySettingsPushRestrictions), nameof(CommitMessageRegex), "commitMessageRegex");
    
    [JsonPropertyName("commitMessageRegex")]
    public string? CommitMessageRegex
    {
        get => _commitMessageRegex.GetValue(InlineErrors);
        set => _commitMessageRegex.SetValue(value);
    }

    private PropertyValue<string?> _commitMessageNegativeRegex = new PropertyValue<string?>(nameof(GitRepositorySettingsPushRestrictions), nameof(CommitMessageNegativeRegex), "commitMessageNegativeRegex");
    
    [JsonPropertyName("commitMessageNegativeRegex")]
    public string? CommitMessageNegativeRegex
    {
        get => _commitMessageNegativeRegex.GetValue(InlineErrors);
        set => _commitMessageNegativeRegex.SetValue(value);
    }

    private PropertyValue<bool?> _windowsCompatibility = new PropertyValue<bool?>(nameof(GitRepositorySettingsPushRestrictions), nameof(IsWindowsCompatibility), "windowsCompatibility");
    
    [JsonPropertyName("windowsCompatibility")]
    public bool? IsWindowsCompatibility
    {
        get => _windowsCompatibility.GetValue(InlineErrors);
        set => _windowsCompatibility.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _checkAuthenticatedCommitter.SetAccessPath(parentChainPath, validateHasBeenSet);
        _requireSignature.SetAccessPath(parentChainPath, validateHasBeenSet);
        _verifySignature.SetAccessPath(parentChainPath, validateHasBeenSet);
        _maxFileSize.SetAccessPath(parentChainPath, validateHasBeenSet);
        _defaultForbiddenFilesList.SetAccessPath(parentChainPath, validateHasBeenSet);
        _forbiddenFileNames.SetAccessPath(parentChainPath, validateHasBeenSet);
        _commitMessageRegex.SetAccessPath(parentChainPath, validateHasBeenSet);
        _commitMessageNegativeRegex.SetAccessPath(parentChainPath, validateHasBeenSet);
        _windowsCompatibility.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

