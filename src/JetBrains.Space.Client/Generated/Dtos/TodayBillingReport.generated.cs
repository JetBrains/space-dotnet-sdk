// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class TodayBillingReport
         : IPropagatePropertyAccessPath
    {
        public TodayBillingReport() { }
        
        public TodayBillingReport(PurchasedBillingPlan plan, int activeUsers, int chargedUsers, double userBalance, long storageTotalUsage, double storageBalance, long bandwidthTotalUsage, double bandwidthBalance, long ciUsage, double ciBalance, long appUsage, long chatUsage, double totalBalance, long? storageActualLimitB = null)
        {
            Plan = plan;
            ActiveUsers = activeUsers;
            ChargedUsers = chargedUsers;
            UserBalance = userBalance;
            StorageActualLimitB = storageActualLimitB;
            StorageTotalUsage = storageTotalUsage;
            StorageBalance = storageBalance;
            BandwidthTotalUsage = bandwidthTotalUsage;
            BandwidthBalance = bandwidthBalance;
            CiUsage = ciUsage;
            CiBalance = ciBalance;
            AppUsage = appUsage;
            ChatUsage = chatUsage;
            TotalBalance = totalBalance;
        }
        
        private PropertyValue<PurchasedBillingPlan> _plan = new PropertyValue<PurchasedBillingPlan>(nameof(TodayBillingReport), nameof(Plan));
        
        [Required]
        [JsonPropertyName("plan")]
        public PurchasedBillingPlan Plan
        {
            get => _plan.GetValue();
            set => _plan.SetValue(value);
        }
    
        private PropertyValue<int> _activeUsers = new PropertyValue<int>(nameof(TodayBillingReport), nameof(ActiveUsers));
        
        [Required]
        [JsonPropertyName("activeUsers")]
        public int ActiveUsers
        {
            get => _activeUsers.GetValue();
            set => _activeUsers.SetValue(value);
        }
    
        private PropertyValue<int> _chargedUsers = new PropertyValue<int>(nameof(TodayBillingReport), nameof(ChargedUsers));
        
        [Required]
        [JsonPropertyName("chargedUsers")]
        public int ChargedUsers
        {
            get => _chargedUsers.GetValue();
            set => _chargedUsers.SetValue(value);
        }
    
        private PropertyValue<double> _userBalance = new PropertyValue<double>(nameof(TodayBillingReport), nameof(UserBalance));
        
        [Required]
        [JsonPropertyName("userBalance")]
        public double UserBalance
        {
            get => _userBalance.GetValue();
            set => _userBalance.SetValue(value);
        }
    
        private PropertyValue<long?> _storageActualLimitB = new PropertyValue<long?>(nameof(TodayBillingReport), nameof(StorageActualLimitB));
        
        [JsonPropertyName("storageActualLimitB")]
        public long? StorageActualLimitB
        {
            get => _storageActualLimitB.GetValue();
            set => _storageActualLimitB.SetValue(value);
        }
    
        private PropertyValue<long> _storageTotalUsage = new PropertyValue<long>(nameof(TodayBillingReport), nameof(StorageTotalUsage));
        
        [Required]
        [JsonPropertyName("storageTotalUsage")]
        public long StorageTotalUsage
        {
            get => _storageTotalUsage.GetValue();
            set => _storageTotalUsage.SetValue(value);
        }
    
        private PropertyValue<double> _storageBalance = new PropertyValue<double>(nameof(TodayBillingReport), nameof(StorageBalance));
        
        [Required]
        [JsonPropertyName("storageBalance")]
        public double StorageBalance
        {
            get => _storageBalance.GetValue();
            set => _storageBalance.SetValue(value);
        }
    
        private PropertyValue<long> _bandwidthTotalUsage = new PropertyValue<long>(nameof(TodayBillingReport), nameof(BandwidthTotalUsage));
        
        [Required]
        [JsonPropertyName("bandwidthTotalUsage")]
        public long BandwidthTotalUsage
        {
            get => _bandwidthTotalUsage.GetValue();
            set => _bandwidthTotalUsage.SetValue(value);
        }
    
        private PropertyValue<double> _bandwidthBalance = new PropertyValue<double>(nameof(TodayBillingReport), nameof(BandwidthBalance));
        
        [Required]
        [JsonPropertyName("bandwidthBalance")]
        public double BandwidthBalance
        {
            get => _bandwidthBalance.GetValue();
            set => _bandwidthBalance.SetValue(value);
        }
    
        private PropertyValue<long> _ciUsage = new PropertyValue<long>(nameof(TodayBillingReport), nameof(CiUsage));
        
        [Required]
        [JsonPropertyName("ciUsage")]
        public long CiUsage
        {
            get => _ciUsage.GetValue();
            set => _ciUsage.SetValue(value);
        }
    
        private PropertyValue<double> _ciBalance = new PropertyValue<double>(nameof(TodayBillingReport), nameof(CiBalance));
        
        [Required]
        [JsonPropertyName("ciBalance")]
        public double CiBalance
        {
            get => _ciBalance.GetValue();
            set => _ciBalance.SetValue(value);
        }
    
        private PropertyValue<long> _appUsage = new PropertyValue<long>(nameof(TodayBillingReport), nameof(AppUsage));
        
        [Required]
        [JsonPropertyName("appUsage")]
        public long AppUsage
        {
            get => _appUsage.GetValue();
            set => _appUsage.SetValue(value);
        }
    
        private PropertyValue<long> _chatUsage = new PropertyValue<long>(nameof(TodayBillingReport), nameof(ChatUsage));
        
        [Required]
        [JsonPropertyName("chatUsage")]
        public long ChatUsage
        {
            get => _chatUsage.GetValue();
            set => _chatUsage.SetValue(value);
        }
    
        private PropertyValue<double> _totalBalance = new PropertyValue<double>(nameof(TodayBillingReport), nameof(TotalBalance));
        
        [Required]
        [JsonPropertyName("totalBalance")]
        public double TotalBalance
        {
            get => _totalBalance.GetValue();
            set => _totalBalance.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _plan.SetAccessPath(path, validateHasBeenSet);
            _activeUsers.SetAccessPath(path, validateHasBeenSet);
            _chargedUsers.SetAccessPath(path, validateHasBeenSet);
            _userBalance.SetAccessPath(path, validateHasBeenSet);
            _storageActualLimitB.SetAccessPath(path, validateHasBeenSet);
            _storageTotalUsage.SetAccessPath(path, validateHasBeenSet);
            _storageBalance.SetAccessPath(path, validateHasBeenSet);
            _bandwidthTotalUsage.SetAccessPath(path, validateHasBeenSet);
            _bandwidthBalance.SetAccessPath(path, validateHasBeenSet);
            _ciUsage.SetAccessPath(path, validateHasBeenSet);
            _ciBalance.SetAccessPath(path, validateHasBeenSet);
            _appUsage.SetAccessPath(path, validateHasBeenSet);
            _chatUsage.SetAccessPath(path, validateHasBeenSet);
            _totalBalance.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
