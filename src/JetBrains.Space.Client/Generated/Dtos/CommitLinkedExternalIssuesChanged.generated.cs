// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class CommitLinkedExternalIssuesChanged
     : ExternalIssueEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "CommitLinkedExternalIssuesChanged";
    
    public CommitLinkedExternalIssuesChanged() { }
    
    public CommitLinkedExternalIssuesChanged(PRProject project, string repositoryId, string commitId, List<ExternalIssueIdOut> issues, string? repositoryName = null, GitCommitInfo? commit = null, GitCommitChanges? changes = null, string? url = null)
    {
        Project = project;
        RepositoryId = repositoryId;
        RepositoryName = repositoryName;
        CommitId = commitId;
        Commit = commit;
        Changes = changes;
        Url = url;
        Issues = issues;
    }
    
    private PropertyValue<PRProject> _project = new PropertyValue<PRProject>(nameof(CommitLinkedExternalIssuesChanged), nameof(Project), "project");
    
    [Required]
    [JsonPropertyName("project")]
    public PRProject Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<string> _repositoryId = new PropertyValue<string>(nameof(CommitLinkedExternalIssuesChanged), nameof(RepositoryId), "repositoryId");
    
    [Required]
    [JsonPropertyName("repositoryId")]
    public string RepositoryId
    {
        get => _repositoryId.GetValue(InlineErrors);
        set => _repositoryId.SetValue(value);
    }

    private PropertyValue<string?> _repositoryName = new PropertyValue<string?>(nameof(CommitLinkedExternalIssuesChanged), nameof(RepositoryName), "repositoryName");
    
    [JsonPropertyName("repositoryName")]
    public string? RepositoryName
    {
        get => _repositoryName.GetValue(InlineErrors);
        set => _repositoryName.SetValue(value);
    }

    private PropertyValue<string> _commitId = new PropertyValue<string>(nameof(CommitLinkedExternalIssuesChanged), nameof(CommitId), "commitId");
    
    [Required]
    [JsonPropertyName("commitId")]
    public string CommitId
    {
        get => _commitId.GetValue(InlineErrors);
        set => _commitId.SetValue(value);
    }

    private PropertyValue<GitCommitInfo?> _commit = new PropertyValue<GitCommitInfo?>(nameof(CommitLinkedExternalIssuesChanged), nameof(Commit), "commit");
    
    [JsonPropertyName("commit")]
    public GitCommitInfo? Commit
    {
        get => _commit.GetValue(InlineErrors);
        set => _commit.SetValue(value);
    }

    private PropertyValue<GitCommitChanges?> _changes = new PropertyValue<GitCommitChanges?>(nameof(CommitLinkedExternalIssuesChanged), nameof(Changes), "changes");
    
    [JsonPropertyName("changes")]
    public GitCommitChanges? Changes
    {
        get => _changes.GetValue(InlineErrors);
        set => _changes.SetValue(value);
    }

    private PropertyValue<string?> _url = new PropertyValue<string?>(nameof(CommitLinkedExternalIssuesChanged), nameof(Url), "url");
    
    [JsonPropertyName("url")]
    public string? Url
    {
        get => _url.GetValue(InlineErrors);
        set => _url.SetValue(value);
    }

    private PropertyValue<List<ExternalIssueIdOut>> _issues = new PropertyValue<List<ExternalIssueIdOut>>(nameof(CommitLinkedExternalIssuesChanged), nameof(Issues), "issues", new List<ExternalIssueIdOut>());
    
    [Required]
    [JsonPropertyName("issues")]
    public List<ExternalIssueIdOut> Issues
    {
        get => _issues.GetValue(InlineErrors);
        set => _issues.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositoryId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositoryName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _commitId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _commit.SetAccessPath(parentChainPath, validateHasBeenSet);
        _changes.SetAccessPath(parentChainPath, validateHasBeenSet);
        _url.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issues.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

