// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class Sticker
     : IPropagatePropertyAccessPath
{
    public Sticker() { }
    
    public Sticker(string id, bool archived, string? symbol = null, string? attachmentId = null, int? width = null, int? height = null, List<StickerVariant>? variants = null, bool? animated = null)
    {
        Id = id;
        Symbol = symbol;
        AttachmentId = attachmentId;
        Width = width;
        Height = height;
        Variants = variants;
        IsAnimated = animated;
        IsArchived = archived;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(Sticker), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string?> _symbol = new PropertyValue<string?>(nameof(Sticker), nameof(Symbol), "symbol");
    
    [JsonPropertyName("symbol")]
    public string? Symbol
    {
        get => _symbol.GetValue(InlineErrors);
        set => _symbol.SetValue(value);
    }

    private PropertyValue<string?> _attachmentId = new PropertyValue<string?>(nameof(Sticker), nameof(AttachmentId), "attachmentId");
    
    [JsonPropertyName("attachmentId")]
    public string? AttachmentId
    {
        get => _attachmentId.GetValue(InlineErrors);
        set => _attachmentId.SetValue(value);
    }

    private PropertyValue<int?> _width = new PropertyValue<int?>(nameof(Sticker), nameof(Width), "width");
    
    [JsonPropertyName("width")]
    public int? Width
    {
        get => _width.GetValue(InlineErrors);
        set => _width.SetValue(value);
    }

    private PropertyValue<int?> _height = new PropertyValue<int?>(nameof(Sticker), nameof(Height), "height");
    
    [JsonPropertyName("height")]
    public int? Height
    {
        get => _height.GetValue(InlineErrors);
        set => _height.SetValue(value);
    }

    private PropertyValue<List<StickerVariant>?> _variants = new PropertyValue<List<StickerVariant>?>(nameof(Sticker), nameof(Variants), "variants");
    
    [JsonPropertyName("variants")]
    public List<StickerVariant>? Variants
    {
        get => _variants.GetValue(InlineErrors);
        set => _variants.SetValue(value);
    }

    private PropertyValue<bool?> _animated = new PropertyValue<bool?>(nameof(Sticker), nameof(IsAnimated), "animated");
    
    [JsonPropertyName("animated")]
    public bool? IsAnimated
    {
        get => _animated.GetValue(InlineErrors);
        set => _animated.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(Sticker), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _symbol.SetAccessPath(parentChainPath, validateHasBeenSet);
        _attachmentId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _width.SetAccessPath(parentChainPath, validateHasBeenSet);
        _height.SetAccessPath(parentChainPath, validateHasBeenSet);
        _variants.SetAccessPath(parentChainPath, validateHasBeenSet);
        _animated.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

