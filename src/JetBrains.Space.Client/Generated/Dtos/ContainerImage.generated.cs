// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ContainerImage
     : IPropagatePropertyAccessPath
{
    public ContainerImage() { }
    
    public ContainerImage(List<ContainerImageLayer> history, List<ContainerManifest> children, string? name = null, string? description = null, List<string>? tags = null, string? projectUrl = null, string? sourceUrl = null, string? version = null, ContainerImagePlatform? platform = null, ContainerImageConfig? config = null, ContainerImageAnnotation? annotation = null)
    {
        Name = name;
        Description = description;
        Tags = tags;
        ProjectUrl = projectUrl;
        SourceUrl = sourceUrl;
        Version = version;
        Platform = platform;
        History = history;
        Children = children;
        Config = config;
        Annotation = annotation;
    }
    
    private PropertyValue<string?> _name = new PropertyValue<string?>(nameof(ContainerImage), nameof(Name), "name");
    
    [JsonPropertyName("name")]
    public string? Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(ContainerImage), nameof(Description), "description");
    
    [JsonPropertyName("description")]
    public string? Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<List<string>?> _tags = new PropertyValue<List<string>?>(nameof(ContainerImage), nameof(Tags), "tags");
    
    [JsonPropertyName("tags")]
    public List<string>? Tags
    {
        get => _tags.GetValue(InlineErrors);
        set => _tags.SetValue(value);
    }

    private PropertyValue<string?> _projectUrl = new PropertyValue<string?>(nameof(ContainerImage), nameof(ProjectUrl), "projectUrl");
    
    [JsonPropertyName("projectUrl")]
    public string? ProjectUrl
    {
        get => _projectUrl.GetValue(InlineErrors);
        set => _projectUrl.SetValue(value);
    }

    private PropertyValue<string?> _sourceUrl = new PropertyValue<string?>(nameof(ContainerImage), nameof(SourceUrl), "sourceUrl");
    
    [JsonPropertyName("sourceUrl")]
    public string? SourceUrl
    {
        get => _sourceUrl.GetValue(InlineErrors);
        set => _sourceUrl.SetValue(value);
    }

    private PropertyValue<string?> _version = new PropertyValue<string?>(nameof(ContainerImage), nameof(Version), "version");
    
    [JsonPropertyName("version")]
    public string? Version
    {
        get => _version.GetValue(InlineErrors);
        set => _version.SetValue(value);
    }

    private PropertyValue<ContainerImagePlatform?> _platform = new PropertyValue<ContainerImagePlatform?>(nameof(ContainerImage), nameof(Platform), "platform");
    
    [JsonPropertyName("platform")]
    public ContainerImagePlatform? Platform
    {
        get => _platform.GetValue(InlineErrors);
        set => _platform.SetValue(value);
    }

    private PropertyValue<List<ContainerImageLayer>> _history = new PropertyValue<List<ContainerImageLayer>>(nameof(ContainerImage), nameof(History), "history", new List<ContainerImageLayer>());
    
    [Required]
    [JsonPropertyName("history")]
    public List<ContainerImageLayer> History
    {
        get => _history.GetValue(InlineErrors);
        set => _history.SetValue(value);
    }

    private PropertyValue<List<ContainerManifest>> _children = new PropertyValue<List<ContainerManifest>>(nameof(ContainerImage), nameof(Children), "children", new List<ContainerManifest>());
    
    [Required]
    [JsonPropertyName("children")]
    public List<ContainerManifest> Children
    {
        get => _children.GetValue(InlineErrors);
        set => _children.SetValue(value);
    }

    private PropertyValue<ContainerImageConfig?> _config = new PropertyValue<ContainerImageConfig?>(nameof(ContainerImage), nameof(Config), "config");
    
    [JsonPropertyName("config")]
    public ContainerImageConfig? Config
    {
        get => _config.GetValue(InlineErrors);
        set => _config.SetValue(value);
    }

    private PropertyValue<ContainerImageAnnotation?> _annotation = new PropertyValue<ContainerImageAnnotation?>(nameof(ContainerImage), nameof(Annotation), "annotation");
    
    [JsonPropertyName("annotation")]
    public ContainerImageAnnotation? Annotation
    {
        get => _annotation.GetValue(InlineErrors);
        set => _annotation.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _tags.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectUrl.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sourceUrl.SetAccessPath(parentChainPath, validateHasBeenSet);
        _version.SetAccessPath(parentChainPath, validateHasBeenSet);
        _platform.SetAccessPath(parentChainPath, validateHasBeenSet);
        _history.SetAccessPath(parentChainPath, validateHasBeenSet);
        _children.SetAccessPath(parentChainPath, validateHasBeenSet);
        _config.SetAccessPath(parentChainPath, validateHasBeenSet);
        _annotation.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

