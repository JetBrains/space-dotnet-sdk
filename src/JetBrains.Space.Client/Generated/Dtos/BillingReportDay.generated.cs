// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class BillingReportDay
         : IPropagatePropertyAccessPath
    {
        public BillingReportDay() { }
        
        public BillingReportDay(DateTime date, int activeUsers, int chargedUsers, double userBalance, long storageTotalUsage, long storageFilesUsage, long storageGitUsage, long storagePackagesUsage, long storageOverdraftB, double storageBalance, long bandwidthTotalUsage, long bandwidthFilesUsage, long bandwidthGitUsage, long bandwidthPackagesUsage, long bandwidthAutomationUsage, long bandwidthOverdraftB, double bandwidthBalance, long ciUsage, long ciOverdraft, double ciBalance, long appUsage, long chatUsage, double totalBalance, long? storageActualLimitB = null, long? bandwidthLeftoversB = null, long? ciLeftovers = null)
        {
            Date = date;
            ActiveUsers = activeUsers;
            ChargedUsers = chargedUsers;
            UserBalance = userBalance;
            StorageActualLimitB = storageActualLimitB;
            StorageTotalUsage = storageTotalUsage;
            StorageFilesUsage = storageFilesUsage;
            StorageGitUsage = storageGitUsage;
            StoragePackagesUsage = storagePackagesUsage;
            StorageOverdraftB = storageOverdraftB;
            StorageBalance = storageBalance;
            BandwidthLeftoversB = bandwidthLeftoversB;
            BandwidthTotalUsage = bandwidthTotalUsage;
            BandwidthFilesUsage = bandwidthFilesUsage;
            BandwidthGitUsage = bandwidthGitUsage;
            BandwidthPackagesUsage = bandwidthPackagesUsage;
            BandwidthAutomationUsage = bandwidthAutomationUsage;
            BandwidthOverdraftB = bandwidthOverdraftB;
            BandwidthBalance = bandwidthBalance;
            CiLeftovers = ciLeftovers;
            CiUsage = ciUsage;
            CiOverdraft = ciOverdraft;
            CiBalance = ciBalance;
            AppUsage = appUsage;
            ChatUsage = chatUsage;
            TotalBalance = totalBalance;
        }
        
        private PropertyValue<DateTime> _date = new PropertyValue<DateTime>(nameof(BillingReportDay), nameof(Date));
        
        [Required]
        [JsonPropertyName("date")]
        [JsonConverter(typeof(SpaceDateConverter))]
        public DateTime Date
        {
            get => _date.GetValue();
            set => _date.SetValue(value);
        }
    
        private PropertyValue<int> _activeUsers = new PropertyValue<int>(nameof(BillingReportDay), nameof(ActiveUsers));
        
        [Required]
        [JsonPropertyName("activeUsers")]
        public int ActiveUsers
        {
            get => _activeUsers.GetValue();
            set => _activeUsers.SetValue(value);
        }
    
        private PropertyValue<int> _chargedUsers = new PropertyValue<int>(nameof(BillingReportDay), nameof(ChargedUsers));
        
        [Required]
        [JsonPropertyName("chargedUsers")]
        public int ChargedUsers
        {
            get => _chargedUsers.GetValue();
            set => _chargedUsers.SetValue(value);
        }
    
        private PropertyValue<double> _userBalance = new PropertyValue<double>(nameof(BillingReportDay), nameof(UserBalance));
        
        [Required]
        [JsonPropertyName("userBalance")]
        public double UserBalance
        {
            get => _userBalance.GetValue();
            set => _userBalance.SetValue(value);
        }
    
        private PropertyValue<long?> _storageActualLimitB = new PropertyValue<long?>(nameof(BillingReportDay), nameof(StorageActualLimitB));
        
        [JsonPropertyName("storageActualLimitB")]
        public long? StorageActualLimitB
        {
            get => _storageActualLimitB.GetValue();
            set => _storageActualLimitB.SetValue(value);
        }
    
        private PropertyValue<long> _storageTotalUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(StorageTotalUsage));
        
        [Required]
        [JsonPropertyName("storageTotalUsage")]
        public long StorageTotalUsage
        {
            get => _storageTotalUsage.GetValue();
            set => _storageTotalUsage.SetValue(value);
        }
    
        private PropertyValue<long> _storageFilesUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(StorageFilesUsage));
        
        [Required]
        [JsonPropertyName("storageFilesUsage")]
        public long StorageFilesUsage
        {
            get => _storageFilesUsage.GetValue();
            set => _storageFilesUsage.SetValue(value);
        }
    
        private PropertyValue<long> _storageGitUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(StorageGitUsage));
        
        [Required]
        [JsonPropertyName("storageGitUsage")]
        public long StorageGitUsage
        {
            get => _storageGitUsage.GetValue();
            set => _storageGitUsage.SetValue(value);
        }
    
        private PropertyValue<long> _storagePackagesUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(StoragePackagesUsage));
        
        [Required]
        [JsonPropertyName("storagePackagesUsage")]
        public long StoragePackagesUsage
        {
            get => _storagePackagesUsage.GetValue();
            set => _storagePackagesUsage.SetValue(value);
        }
    
        private PropertyValue<long> _storageOverdraftB = new PropertyValue<long>(nameof(BillingReportDay), nameof(StorageOverdraftB));
        
        [Required]
        [JsonPropertyName("storageOverdraftB")]
        public long StorageOverdraftB
        {
            get => _storageOverdraftB.GetValue();
            set => _storageOverdraftB.SetValue(value);
        }
    
        private PropertyValue<double> _storageBalance = new PropertyValue<double>(nameof(BillingReportDay), nameof(StorageBalance));
        
        [Required]
        [JsonPropertyName("storageBalance")]
        public double StorageBalance
        {
            get => _storageBalance.GetValue();
            set => _storageBalance.SetValue(value);
        }
    
        private PropertyValue<long?> _bandwidthLeftoversB = new PropertyValue<long?>(nameof(BillingReportDay), nameof(BandwidthLeftoversB));
        
        [JsonPropertyName("bandwidthLeftoversB")]
        public long? BandwidthLeftoversB
        {
            get => _bandwidthLeftoversB.GetValue();
            set => _bandwidthLeftoversB.SetValue(value);
        }
    
        private PropertyValue<long> _bandwidthTotalUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(BandwidthTotalUsage));
        
        [Required]
        [JsonPropertyName("bandwidthTotalUsage")]
        public long BandwidthTotalUsage
        {
            get => _bandwidthTotalUsage.GetValue();
            set => _bandwidthTotalUsage.SetValue(value);
        }
    
        private PropertyValue<long> _bandwidthFilesUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(BandwidthFilesUsage));
        
        [Required]
        [JsonPropertyName("bandwidthFilesUsage")]
        public long BandwidthFilesUsage
        {
            get => _bandwidthFilesUsage.GetValue();
            set => _bandwidthFilesUsage.SetValue(value);
        }
    
        private PropertyValue<long> _bandwidthGitUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(BandwidthGitUsage));
        
        [Required]
        [JsonPropertyName("bandwidthGitUsage")]
        public long BandwidthGitUsage
        {
            get => _bandwidthGitUsage.GetValue();
            set => _bandwidthGitUsage.SetValue(value);
        }
    
        private PropertyValue<long> _bandwidthPackagesUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(BandwidthPackagesUsage));
        
        [Required]
        [JsonPropertyName("bandwidthPackagesUsage")]
        public long BandwidthPackagesUsage
        {
            get => _bandwidthPackagesUsage.GetValue();
            set => _bandwidthPackagesUsage.SetValue(value);
        }
    
        private PropertyValue<long> _bandwidthAutomationUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(BandwidthAutomationUsage));
        
        [Required]
        [JsonPropertyName("bandwidthAutomationUsage")]
        public long BandwidthAutomationUsage
        {
            get => _bandwidthAutomationUsage.GetValue();
            set => _bandwidthAutomationUsage.SetValue(value);
        }
    
        private PropertyValue<long> _bandwidthOverdraftB = new PropertyValue<long>(nameof(BillingReportDay), nameof(BandwidthOverdraftB));
        
        [Required]
        [JsonPropertyName("bandwidthOverdraftB")]
        public long BandwidthOverdraftB
        {
            get => _bandwidthOverdraftB.GetValue();
            set => _bandwidthOverdraftB.SetValue(value);
        }
    
        private PropertyValue<double> _bandwidthBalance = new PropertyValue<double>(nameof(BillingReportDay), nameof(BandwidthBalance));
        
        [Required]
        [JsonPropertyName("bandwidthBalance")]
        public double BandwidthBalance
        {
            get => _bandwidthBalance.GetValue();
            set => _bandwidthBalance.SetValue(value);
        }
    
        private PropertyValue<long?> _ciLeftovers = new PropertyValue<long?>(nameof(BillingReportDay), nameof(CiLeftovers));
        
        [JsonPropertyName("ciLeftovers")]
        public long? CiLeftovers
        {
            get => _ciLeftovers.GetValue();
            set => _ciLeftovers.SetValue(value);
        }
    
        private PropertyValue<long> _ciUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(CiUsage));
        
        [Required]
        [JsonPropertyName("ciUsage")]
        public long CiUsage
        {
            get => _ciUsage.GetValue();
            set => _ciUsage.SetValue(value);
        }
    
        private PropertyValue<long> _ciOverdraft = new PropertyValue<long>(nameof(BillingReportDay), nameof(CiOverdraft));
        
        [Required]
        [JsonPropertyName("ciOverdraft")]
        public long CiOverdraft
        {
            get => _ciOverdraft.GetValue();
            set => _ciOverdraft.SetValue(value);
        }
    
        private PropertyValue<double> _ciBalance = new PropertyValue<double>(nameof(BillingReportDay), nameof(CiBalance));
        
        [Required]
        [JsonPropertyName("ciBalance")]
        public double CiBalance
        {
            get => _ciBalance.GetValue();
            set => _ciBalance.SetValue(value);
        }
    
        private PropertyValue<long> _appUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(AppUsage));
        
        [Required]
        [JsonPropertyName("appUsage")]
        public long AppUsage
        {
            get => _appUsage.GetValue();
            set => _appUsage.SetValue(value);
        }
    
        private PropertyValue<long> _chatUsage = new PropertyValue<long>(nameof(BillingReportDay), nameof(ChatUsage));
        
        [Required]
        [JsonPropertyName("chatUsage")]
        public long ChatUsage
        {
            get => _chatUsage.GetValue();
            set => _chatUsage.SetValue(value);
        }
    
        private PropertyValue<double> _totalBalance = new PropertyValue<double>(nameof(BillingReportDay), nameof(TotalBalance));
        
        [Required]
        [JsonPropertyName("totalBalance")]
        public double TotalBalance
        {
            get => _totalBalance.GetValue();
            set => _totalBalance.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _date.SetAccessPath(path, validateHasBeenSet);
            _activeUsers.SetAccessPath(path, validateHasBeenSet);
            _chargedUsers.SetAccessPath(path, validateHasBeenSet);
            _userBalance.SetAccessPath(path, validateHasBeenSet);
            _storageActualLimitB.SetAccessPath(path, validateHasBeenSet);
            _storageTotalUsage.SetAccessPath(path, validateHasBeenSet);
            _storageFilesUsage.SetAccessPath(path, validateHasBeenSet);
            _storageGitUsage.SetAccessPath(path, validateHasBeenSet);
            _storagePackagesUsage.SetAccessPath(path, validateHasBeenSet);
            _storageOverdraftB.SetAccessPath(path, validateHasBeenSet);
            _storageBalance.SetAccessPath(path, validateHasBeenSet);
            _bandwidthLeftoversB.SetAccessPath(path, validateHasBeenSet);
            _bandwidthTotalUsage.SetAccessPath(path, validateHasBeenSet);
            _bandwidthFilesUsage.SetAccessPath(path, validateHasBeenSet);
            _bandwidthGitUsage.SetAccessPath(path, validateHasBeenSet);
            _bandwidthPackagesUsage.SetAccessPath(path, validateHasBeenSet);
            _bandwidthAutomationUsage.SetAccessPath(path, validateHasBeenSet);
            _bandwidthOverdraftB.SetAccessPath(path, validateHasBeenSet);
            _bandwidthBalance.SetAccessPath(path, validateHasBeenSet);
            _ciLeftovers.SetAccessPath(path, validateHasBeenSet);
            _ciUsage.SetAccessPath(path, validateHasBeenSet);
            _ciOverdraft.SetAccessPath(path, validateHasBeenSet);
            _ciBalance.SetAccessPath(path, validateHasBeenSet);
            _appUsage.SetAccessPath(path, validateHasBeenSet);
            _chatUsage.SetAccessPath(path, validateHasBeenSet);
            _totalBalance.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
