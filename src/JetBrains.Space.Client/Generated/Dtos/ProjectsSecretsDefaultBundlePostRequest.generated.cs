// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public class ProjectsSecretsDefaultBundlePostRequest
     : IPropagatePropertyAccessPath
{
    public ProjectsSecretsDefaultBundlePostRequest() { }
    
    public ProjectsSecretsDefaultBundlePostRequest(ProjectIdentifier project, string key, string? valueBase64 = null, string? publicKeyId = null, string? description = null, string? secretReference = null)
    {
        Project = project;
        Key = key;
        ValueBase64 = valueBase64;
        PublicKeyId = publicKeyId;
        Description = description;
        SecretReference = secretReference;
    }
    
    private PropertyValue<ProjectIdentifier> _project = new PropertyValue<ProjectIdentifier>(nameof(ProjectsSecretsDefaultBundlePostRequest), nameof(Project), "project");
    
    [Required]
    [JsonPropertyName("project")]
    public ProjectIdentifier Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<string> _key = new PropertyValue<string>(nameof(ProjectsSecretsDefaultBundlePostRequest), nameof(Key), "key");
    
    [Required]
    [JsonPropertyName("key")]
    public string Key
    {
        get => _key.GetValue(InlineErrors);
        set => _key.SetValue(value);
    }

    private PropertyValue<string?> _valueBase64 = new PropertyValue<string?>(nameof(ProjectsSecretsDefaultBundlePostRequest), nameof(ValueBase64), "valueBase64");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("valueBase64")]
    public string? ValueBase64
    {
        get => _valueBase64.GetValue(InlineErrors);
        set => _valueBase64.SetValue(value);
    }

    private PropertyValue<string?> _publicKeyId = new PropertyValue<string?>(nameof(ProjectsSecretsDefaultBundlePostRequest), nameof(PublicKeyId), "publicKeyId");
    
    /// <summary>
    /// Not supported at the moment
    /// </summary>
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("publicKeyId")]
    public string? PublicKeyId
    {
        get => _publicKeyId.GetValue(InlineErrors);
        set => _publicKeyId.SetValue(value);
    }

    private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(ProjectsSecretsDefaultBundlePostRequest), nameof(Description), "description");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("description")]
    public string? Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<string?> _secretReference = new PropertyValue<string?>(nameof(ProjectsSecretsDefaultBundlePostRequest), nameof(SecretReference), "secretReference");
    
    /// <summary>
    /// Can contain reference to a single project secret in a `{{ project:... }}` format, or a Vault secret reference in a `vault:..` format.
    /// </summary>
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("secretReference")]
    public string? SecretReference
    {
        get => _secretReference.GetValue(InlineErrors);
        set => _secretReference.SetValue(value);
    }

    public virtual void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _key.SetAccessPath(parentChainPath, validateHasBeenSet);
        _valueBase64.SetAccessPath(parentChainPath, validateHasBeenSet);
        _publicKeyId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _secretReference.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

