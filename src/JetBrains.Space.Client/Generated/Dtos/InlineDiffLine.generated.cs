// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class InlineDiffLine
         : IPropagatePropertyAccessPath
    {
        public InlineDiffLine() { }
        
        public InlineDiffLine(string text, int oldFileOffset, int newFileOffset, DiffLineType? type = null, int? oldLineNum = null, int? newLineNum = null, List<SyntaxMarkup>? syntax = null, List<TextRange>? deletes = null, List<TextRange>? inserts = null)
        {
            Text = text;
            Type = type;
            OldLineNum = oldLineNum;
            NewLineNum = newLineNum;
            OldFileOffset = oldFileOffset;
            NewFileOffset = newFileOffset;
            Syntax = syntax;
            Deletes = deletes;
            Inserts = inserts;
        }
        
        private PropertyValue<string> _text = new PropertyValue<string>(nameof(InlineDiffLine), nameof(Text));
        
        [Required]
        [JsonPropertyName("text")]
        public string Text
        {
            get => _text.GetValue();
            set => _text.SetValue(value);
        }
    
        private PropertyValue<DiffLineType?> _type = new PropertyValue<DiffLineType?>(nameof(InlineDiffLine), nameof(Type));
        
        [JsonPropertyName("type")]
        public DiffLineType? Type
        {
            get => _type.GetValue();
            set => _type.SetValue(value);
        }
    
        private PropertyValue<int?> _oldLineNum = new PropertyValue<int?>(nameof(InlineDiffLine), nameof(OldLineNum));
        
        [JsonPropertyName("oldLineNum")]
        public int? OldLineNum
        {
            get => _oldLineNum.GetValue();
            set => _oldLineNum.SetValue(value);
        }
    
        private PropertyValue<int?> _newLineNum = new PropertyValue<int?>(nameof(InlineDiffLine), nameof(NewLineNum));
        
        [JsonPropertyName("newLineNum")]
        public int? NewLineNum
        {
            get => _newLineNum.GetValue();
            set => _newLineNum.SetValue(value);
        }
    
        private PropertyValue<int> _oldFileOffset = new PropertyValue<int>(nameof(InlineDiffLine), nameof(OldFileOffset));
        
        [Required]
        [JsonPropertyName("oldFileOffset")]
        public int OldFileOffset
        {
            get => _oldFileOffset.GetValue();
            set => _oldFileOffset.SetValue(value);
        }
    
        private PropertyValue<int> _newFileOffset = new PropertyValue<int>(nameof(InlineDiffLine), nameof(NewFileOffset));
        
        [Required]
        [JsonPropertyName("newFileOffset")]
        public int NewFileOffset
        {
            get => _newFileOffset.GetValue();
            set => _newFileOffset.SetValue(value);
        }
    
        private PropertyValue<List<SyntaxMarkup>?> _syntax = new PropertyValue<List<SyntaxMarkup>?>(nameof(InlineDiffLine), nameof(Syntax));
        
        [JsonPropertyName("syntax")]
        public List<SyntaxMarkup>? Syntax
        {
            get => _syntax.GetValue();
            set => _syntax.SetValue(value);
        }
    
        private PropertyValue<List<TextRange>?> _deletes = new PropertyValue<List<TextRange>?>(nameof(InlineDiffLine), nameof(Deletes));
        
        [JsonPropertyName("deletes")]
        public List<TextRange>? Deletes
        {
            get => _deletes.GetValue();
            set => _deletes.SetValue(value);
        }
    
        private PropertyValue<List<TextRange>?> _inserts = new PropertyValue<List<TextRange>?>(nameof(InlineDiffLine), nameof(Inserts));
        
        [JsonPropertyName("inserts")]
        public List<TextRange>? Inserts
        {
            get => _inserts.GetValue();
            set => _inserts.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _text.SetAccessPath(path, validateHasBeenSet);
            _type.SetAccessPath(path, validateHasBeenSet);
            _oldLineNum.SetAccessPath(path, validateHasBeenSet);
            _newLineNum.SetAccessPath(path, validateHasBeenSet);
            _oldFileOffset.SetAccessPath(path, validateHasBeenSet);
            _newFileOffset.SetAccessPath(path, validateHasBeenSet);
            _syntax.SetAccessPath(path, validateHasBeenSet);
            _deletes.SetAccessPath(path, validateHasBeenSet);
            _inserts.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
