// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitRepositorySettingsExternalStatus
     : IPropagatePropertyAccessPath
{
    public GitRepositorySettingsExternalStatus() { }
    
    public GitRepositorySettingsExternalStatus(string serviceName, string taskId, string? taskName = null, List<string>? pathSpec = null)
    {
        ServiceName = serviceName;
        TaskId = taskId;
        TaskName = taskName;
        PathSpec = pathSpec;
    }
    
    private PropertyValue<string> _serviceName = new PropertyValue<string>(nameof(GitRepositorySettingsExternalStatus), nameof(ServiceName), "serviceName");
    
    [Required]
    [JsonPropertyName("serviceName")]
    public string ServiceName
    {
        get => _serviceName.GetValue(InlineErrors);
        set => _serviceName.SetValue(value);
    }

    private PropertyValue<string> _taskId = new PropertyValue<string>(nameof(GitRepositorySettingsExternalStatus), nameof(TaskId), "taskId");
    
    [Required]
    [JsonPropertyName("taskId")]
    public string TaskId
    {
        get => _taskId.GetValue(InlineErrors);
        set => _taskId.SetValue(value);
    }

    private PropertyValue<string?> _taskName = new PropertyValue<string?>(nameof(GitRepositorySettingsExternalStatus), nameof(TaskName), "taskName");
    
    [JsonPropertyName("taskName")]
    public string? TaskName
    {
        get => _taskName.GetValue(InlineErrors);
        set => _taskName.SetValue(value);
    }

    private PropertyValue<List<string>?> _pathSpec = new PropertyValue<List<string>?>(nameof(GitRepositorySettingsExternalStatus), nameof(PathSpec), "pathSpec");
    
    [JsonPropertyName("pathSpec")]
    public List<string>? PathSpec
    {
        get => _pathSpec.GetValue(InlineErrors);
        set => _pathSpec.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _serviceName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _taskId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _taskName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pathSpec.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

