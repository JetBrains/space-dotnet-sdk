// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class RdWarmupM2ItemContentDetails
     : M2ItemContentDetails, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "RdWarmupM2ItemContentDetails";
    
    public RdWarmupM2ItemContentDetails() { }
    
    public RdWarmupM2ItemContentDetails(string warmupExecId, IdeType ideType, string repoName, ProjectKey projectKey, string configurationName, WarmupExecutionStatus status, string? branch = null)
    {
        WarmupExecId = warmupExecId;
        IdeType = ideType;
        RepoName = repoName;
        Branch = branch;
        ProjectKey = projectKey;
        ConfigurationName = configurationName;
        Status = status;
    }
    
    private PropertyValue<string> _warmupExecId = new PropertyValue<string>(nameof(RdWarmupM2ItemContentDetails), nameof(WarmupExecId), "warmupExecId");
    
    [Required]
    [JsonPropertyName("warmupExecId")]
    public string WarmupExecId
    {
        get => _warmupExecId.GetValue(InlineErrors);
        set => _warmupExecId.SetValue(value);
    }

    private PropertyValue<IdeType> _ideType = new PropertyValue<IdeType>(nameof(RdWarmupM2ItemContentDetails), nameof(IdeType), "ideType");
    
    [Required]
    [JsonPropertyName("ideType")]
    public IdeType IdeType
    {
        get => _ideType.GetValue(InlineErrors);
        set => _ideType.SetValue(value);
    }

    private PropertyValue<string> _repoName = new PropertyValue<string>(nameof(RdWarmupM2ItemContentDetails), nameof(RepoName), "repoName");
    
    [Required]
    [JsonPropertyName("repoName")]
    public string RepoName
    {
        get => _repoName.GetValue(InlineErrors);
        set => _repoName.SetValue(value);
    }

    private PropertyValue<string?> _branch = new PropertyValue<string?>(nameof(RdWarmupM2ItemContentDetails), nameof(Branch), "branch");
    
    [JsonPropertyName("branch")]
    public string? Branch
    {
        get => _branch.GetValue(InlineErrors);
        set => _branch.SetValue(value);
    }

    private PropertyValue<ProjectKey> _projectKey = new PropertyValue<ProjectKey>(nameof(RdWarmupM2ItemContentDetails), nameof(ProjectKey), "projectKey");
    
    [Required]
    [JsonPropertyName("projectKey")]
    public ProjectKey ProjectKey
    {
        get => _projectKey.GetValue(InlineErrors);
        set => _projectKey.SetValue(value);
    }

    private PropertyValue<string> _configurationName = new PropertyValue<string>(nameof(RdWarmupM2ItemContentDetails), nameof(ConfigurationName), "configurationName");
    
    [Required]
    [JsonPropertyName("configurationName")]
    public string ConfigurationName
    {
        get => _configurationName.GetValue(InlineErrors);
        set => _configurationName.SetValue(value);
    }

    private PropertyValue<WarmupExecutionStatus> _status = new PropertyValue<WarmupExecutionStatus>(nameof(RdWarmupM2ItemContentDetails), nameof(Status), "status");
    
    [Required]
    [JsonPropertyName("status")]
    public WarmupExecutionStatus Status
    {
        get => _status.GetValue(InlineErrors);
        set => _status.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _warmupExecId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _ideType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repoName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _branch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectKey.SetAccessPath(parentChainPath, validateHasBeenSet);
        _configurationName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _status.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

