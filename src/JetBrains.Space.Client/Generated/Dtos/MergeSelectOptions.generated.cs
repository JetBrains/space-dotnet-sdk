// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class MergeSelectOptions
     : IPropagatePropertyAccessPath
{
    public MergeSelectOptions() { }
    
    public MergeSelectOptions(MergeSelectOptionsOperation operation, GitMergeMode mergeMode, GitRebaseMode rebaseMode, GitSquashMode squashMode, string squashCommitMessage, bool deleteSourceBranch, List<TargetStatusForLinkedIssue> targetStatusesForLinkedIssues)
    {
        Operation = operation;
        MergeMode = mergeMode;
        RebaseMode = rebaseMode;
        SquashMode = squashMode;
        SquashCommitMessage = squashCommitMessage;
        IsDeleteSourceBranch = deleteSourceBranch;
        TargetStatusesForLinkedIssues = targetStatusesForLinkedIssues;
    }
    
    private PropertyValue<MergeSelectOptionsOperation> _operation = new PropertyValue<MergeSelectOptionsOperation>(nameof(MergeSelectOptions), nameof(Operation), "operation");
    
    [Required]
    [JsonPropertyName("operation")]
    public MergeSelectOptionsOperation Operation
    {
        get => _operation.GetValue(InlineErrors);
        set => _operation.SetValue(value);
    }

    private PropertyValue<GitMergeMode> _mergeMode = new PropertyValue<GitMergeMode>(nameof(MergeSelectOptions), nameof(MergeMode), "mergeMode");
    
    [Required]
    [JsonPropertyName("mergeMode")]
    public GitMergeMode MergeMode
    {
        get => _mergeMode.GetValue(InlineErrors);
        set => _mergeMode.SetValue(value);
    }

    private PropertyValue<GitRebaseMode> _rebaseMode = new PropertyValue<GitRebaseMode>(nameof(MergeSelectOptions), nameof(RebaseMode), "rebaseMode");
    
    [Required]
    [JsonPropertyName("rebaseMode")]
    public GitRebaseMode RebaseMode
    {
        get => _rebaseMode.GetValue(InlineErrors);
        set => _rebaseMode.SetValue(value);
    }

    private PropertyValue<GitSquashMode> _squashMode = new PropertyValue<GitSquashMode>(nameof(MergeSelectOptions), nameof(SquashMode), "squashMode");
    
    [Required]
    [JsonPropertyName("squashMode")]
    public GitSquashMode SquashMode
    {
        get => _squashMode.GetValue(InlineErrors);
        set => _squashMode.SetValue(value);
    }

    private PropertyValue<string> _squashCommitMessage = new PropertyValue<string>(nameof(MergeSelectOptions), nameof(SquashCommitMessage), "squashCommitMessage");
    
    [Required]
    [JsonPropertyName("squashCommitMessage")]
    public string SquashCommitMessage
    {
        get => _squashCommitMessage.GetValue(InlineErrors);
        set => _squashCommitMessage.SetValue(value);
    }

    private PropertyValue<bool> _deleteSourceBranch = new PropertyValue<bool>(nameof(MergeSelectOptions), nameof(IsDeleteSourceBranch), "deleteSourceBranch");
    
    [Required]
    [JsonPropertyName("deleteSourceBranch")]
    public bool IsDeleteSourceBranch
    {
        get => _deleteSourceBranch.GetValue(InlineErrors);
        set => _deleteSourceBranch.SetValue(value);
    }

    private PropertyValue<List<TargetStatusForLinkedIssue>> _targetStatusesForLinkedIssues = new PropertyValue<List<TargetStatusForLinkedIssue>>(nameof(MergeSelectOptions), nameof(TargetStatusesForLinkedIssues), "targetStatusesForLinkedIssues", new List<TargetStatusForLinkedIssue>());
    
    [Required]
    [JsonPropertyName("targetStatusesForLinkedIssues")]
    public List<TargetStatusForLinkedIssue> TargetStatusesForLinkedIssues
    {
        get => _targetStatusesForLinkedIssues.GetValue(InlineErrors);
        set => _targetStatusesForLinkedIssues.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _operation.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mergeMode.SetAccessPath(parentChainPath, validateHasBeenSet);
        _rebaseMode.SetAccessPath(parentChainPath, validateHasBeenSet);
        _squashMode.SetAccessPath(parentChainPath, validateHasBeenSet);
        _squashCommitMessage.SetAccessPath(parentChainPath, validateHasBeenSet);
        _deleteSourceBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetStatusesForLinkedIssues.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

