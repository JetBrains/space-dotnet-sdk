// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class AutomationJobEvent
     : WebhookEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "AutomationJobEvent";
    
    public AutomationJobEvent() { }
    
    public AutomationJobEvent(KMetaMod meta, string executionId, PRProject project, string repositoryName, string jobName, long executionNumber, JobExecutionTrigger trigger, DateTime triggerTime, Modification<JobExecutionStatus>? status = null, Modification<List<FailureConditionType>>? failureReasons = null, Modification<CPrincipal>? stoppedBy = null, Modification<DateTime>? startTime = null, Modification<DateTime>? endTime = null, List<GitCheckout>? repositories = null)
    {
        Meta = meta;
        ExecutionId = executionId;
        Project = project;
        RepositoryName = repositoryName;
        JobName = jobName;
        ExecutionNumber = executionNumber;
        Trigger = trigger;
        TriggerTime = triggerTime;
        Status = status;
        FailureReasons = failureReasons;
        StoppedBy = stoppedBy;
        StartTime = startTime;
        EndTime = endTime;
        Repositories = repositories;
    }
    
    private PropertyValue<KMetaMod> _meta = new PropertyValue<KMetaMod>(nameof(AutomationJobEvent), nameof(Meta), "meta");
    
    [Required]
    [JsonPropertyName("meta")]
    public KMetaMod Meta
    {
        get => _meta.GetValue(InlineErrors);
        set => _meta.SetValue(value);
    }

    private PropertyValue<string> _executionId = new PropertyValue<string>(nameof(AutomationJobEvent), nameof(ExecutionId), "executionId");
    
    [Required]
    [JsonPropertyName("executionId")]
    public string ExecutionId
    {
        get => _executionId.GetValue(InlineErrors);
        set => _executionId.SetValue(value);
    }

    private PropertyValue<PRProject> _project = new PropertyValue<PRProject>(nameof(AutomationJobEvent), nameof(Project), "project");
    
    [Required]
    [JsonPropertyName("project")]
    public PRProject Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<string> _repositoryName = new PropertyValue<string>(nameof(AutomationJobEvent), nameof(RepositoryName), "repositoryName");
    
    [Required]
    [JsonPropertyName("repositoryName")]
    public string RepositoryName
    {
        get => _repositoryName.GetValue(InlineErrors);
        set => _repositoryName.SetValue(value);
    }

    private PropertyValue<string> _jobName = new PropertyValue<string>(nameof(AutomationJobEvent), nameof(JobName), "jobName");
    
    [Required]
    [JsonPropertyName("jobName")]
    public string JobName
    {
        get => _jobName.GetValue(InlineErrors);
        set => _jobName.SetValue(value);
    }

    private PropertyValue<long> _executionNumber = new PropertyValue<long>(nameof(AutomationJobEvent), nameof(ExecutionNumber), "executionNumber");
    
    [Required]
    [JsonPropertyName("executionNumber")]
    public long ExecutionNumber
    {
        get => _executionNumber.GetValue(InlineErrors);
        set => _executionNumber.SetValue(value);
    }

    private PropertyValue<JobExecutionTrigger> _trigger = new PropertyValue<JobExecutionTrigger>(nameof(AutomationJobEvent), nameof(Trigger), "trigger");
    
    [Required]
    [JsonPropertyName("trigger")]
    public JobExecutionTrigger Trigger
    {
        get => _trigger.GetValue(InlineErrors);
        set => _trigger.SetValue(value);
    }

    private PropertyValue<DateTime> _triggerTime = new PropertyValue<DateTime>(nameof(AutomationJobEvent), nameof(TriggerTime), "triggerTime");
    
    [Required]
    [JsonPropertyName("triggerTime")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime TriggerTime
    {
        get => _triggerTime.GetValue(InlineErrors);
        set => _triggerTime.SetValue(value);
    }

    private PropertyValue<Modification<JobExecutionStatus>?> _status = new PropertyValue<Modification<JobExecutionStatus>?>(nameof(AutomationJobEvent), nameof(Status), "status");
    
    [JsonPropertyName("status")]
    public Modification<JobExecutionStatus>? Status
    {
        get => _status.GetValue(InlineErrors);
        set => _status.SetValue(value);
    }

    private PropertyValue<Modification<List<FailureConditionType>>?> _failureReasons = new PropertyValue<Modification<List<FailureConditionType>>?>(nameof(AutomationJobEvent), nameof(FailureReasons), "failureReasons");
    
    [JsonPropertyName("failureReasons")]
    public Modification<List<FailureConditionType>>? FailureReasons
    {
        get => _failureReasons.GetValue(InlineErrors);
        set => _failureReasons.SetValue(value);
    }

    private PropertyValue<Modification<CPrincipal>?> _stoppedBy = new PropertyValue<Modification<CPrincipal>?>(nameof(AutomationJobEvent), nameof(StoppedBy), "stoppedBy");
    
    [JsonPropertyName("stoppedBy")]
    public Modification<CPrincipal>? StoppedBy
    {
        get => _stoppedBy.GetValue(InlineErrors);
        set => _stoppedBy.SetValue(value);
    }

    private PropertyValue<Modification<DateTime>?> _startTime = new PropertyValue<Modification<DateTime>?>(nameof(AutomationJobEvent), nameof(StartTime), "startTime");
    
    [JsonPropertyName("startTime")]
    public Modification<DateTime>? StartTime
    {
        get => _startTime.GetValue(InlineErrors);
        set => _startTime.SetValue(value);
    }

    private PropertyValue<Modification<DateTime>?> _endTime = new PropertyValue<Modification<DateTime>?>(nameof(AutomationJobEvent), nameof(EndTime), "endTime");
    
    [JsonPropertyName("endTime")]
    public Modification<DateTime>? EndTime
    {
        get => _endTime.GetValue(InlineErrors);
        set => _endTime.SetValue(value);
    }

    private PropertyValue<List<GitCheckout>?> _repositories = new PropertyValue<List<GitCheckout>?>(nameof(AutomationJobEvent), nameof(Repositories), "repositories");
    
    [JsonPropertyName("repositories")]
    public List<GitCheckout>? Repositories
    {
        get => _repositories.GetValue(InlineErrors);
        set => _repositories.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _meta.SetAccessPath(parentChainPath, validateHasBeenSet);
        _executionId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositoryName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _jobName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _executionNumber.SetAccessPath(parentChainPath, validateHasBeenSet);
        _trigger.SetAccessPath(parentChainPath, validateHasBeenSet);
        _triggerTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _status.SetAccessPath(parentChainPath, validateHasBeenSet);
        _failureReasons.SetAccessPath(parentChainPath, validateHasBeenSet);
        _stoppedBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _startTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _endTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositories.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

