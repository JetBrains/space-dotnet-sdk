// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class OrgDomainDTO
     : IPropagatePropertyAccessPath
{
    public OrgDomainDTO() { }
    
    public OrgDomainDTO(string domain, string orgUrl, DateTime? expireAt = null, string? codeOrgUrl = null)
    {
        Domain = domain;
        ExpireAt = expireAt;
        OrgUrl = orgUrl;
        CodeOrgUrl = codeOrgUrl;
    }
    
    private PropertyValue<string> _domain = new PropertyValue<string>(nameof(OrgDomainDTO), nameof(Domain), "domain");
    
    [Required]
    [JsonPropertyName("domain")]
    public string Domain
    {
        get => _domain.GetValue(InlineErrors);
        set => _domain.SetValue(value);
    }

    private PropertyValue<DateTime?> _expireAt = new PropertyValue<DateTime?>(nameof(OrgDomainDTO), nameof(ExpireAt), "expireAt");
    
    [JsonPropertyName("expireAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? ExpireAt
    {
        get => _expireAt.GetValue(InlineErrors);
        set => _expireAt.SetValue(value);
    }

    private PropertyValue<string> _orgUrl = new PropertyValue<string>(nameof(OrgDomainDTO), nameof(OrgUrl), "orgUrl");
    
    [Required]
    [JsonPropertyName("orgUrl")]
    public string OrgUrl
    {
        get => _orgUrl.GetValue(InlineErrors);
        set => _orgUrl.SetValue(value);
    }

    private PropertyValue<string?> _codeOrgUrl = new PropertyValue<string?>(nameof(OrgDomainDTO), nameof(CodeOrgUrl), "codeOrgUrl");
    
    [JsonPropertyName("codeOrgUrl")]
    public string? CodeOrgUrl
    {
        get => _codeOrgUrl.GetValue(InlineErrors);
        set => _codeOrgUrl.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _domain.SetAccessPath(parentChainPath, validateHasBeenSet);
        _expireAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _orgUrl.SetAccessPath(parentChainPath, validateHasBeenSet);
        _codeOrgUrl.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

