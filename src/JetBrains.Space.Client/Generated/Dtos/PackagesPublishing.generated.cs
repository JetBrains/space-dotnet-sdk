// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class PackagesPublishing
     : IPropagatePropertyAccessPath
{
    public PackagesPublishing() { }
    
    public PackagesPublishing(string publishingId, long created, bool successful, long? started = null, long? completed = null, string? error = null, CPrincipal? principal = null)
    {
        PublishingId = publishingId;
        Created = created;
        Started = started;
        Completed = completed;
        IsSuccessful = successful;
        Error = error;
        Principal = principal;
    }
    
    private PropertyValue<string> _publishingId = new PropertyValue<string>(nameof(PackagesPublishing), nameof(PublishingId), "publishingId");
    
    [Required]
    [JsonPropertyName("publishingId")]
    public string PublishingId
    {
        get => _publishingId.GetValue(InlineErrors);
        set => _publishingId.SetValue(value);
    }

    private PropertyValue<long> _created = new PropertyValue<long>(nameof(PackagesPublishing), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    public long Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<long?> _started = new PropertyValue<long?>(nameof(PackagesPublishing), nameof(Started), "started");
    
    [JsonPropertyName("started")]
    public long? Started
    {
        get => _started.GetValue(InlineErrors);
        set => _started.SetValue(value);
    }

    private PropertyValue<long?> _completed = new PropertyValue<long?>(nameof(PackagesPublishing), nameof(Completed), "completed");
    
    [JsonPropertyName("completed")]
    public long? Completed
    {
        get => _completed.GetValue(InlineErrors);
        set => _completed.SetValue(value);
    }

    private PropertyValue<bool> _successful = new PropertyValue<bool>(nameof(PackagesPublishing), nameof(IsSuccessful), "successful");
    
    [Required]
    [JsonPropertyName("successful")]
    public bool IsSuccessful
    {
        get => _successful.GetValue(InlineErrors);
        set => _successful.SetValue(value);
    }

    private PropertyValue<string?> _error = new PropertyValue<string?>(nameof(PackagesPublishing), nameof(Error), "error");
    
    [JsonPropertyName("error")]
    public string? Error
    {
        get => _error.GetValue(InlineErrors);
        set => _error.SetValue(value);
    }

    private PropertyValue<CPrincipal?> _principal = new PropertyValue<CPrincipal?>(nameof(PackagesPublishing), nameof(Principal), "principal");
    
    [JsonPropertyName("principal")]
    public CPrincipal? Principal
    {
        get => _principal.GetValue(InlineErrors);
        set => _principal.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _publishingId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _started.SetAccessPath(parentChainPath, validateHasBeenSet);
        _completed.SetAccessPath(parentChainPath, validateHasBeenSet);
        _successful.SetAccessPath(parentChainPath, validateHasBeenSet);
        _error.SetAccessPath(parentChainPath, validateHasBeenSet);
        _principal.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

