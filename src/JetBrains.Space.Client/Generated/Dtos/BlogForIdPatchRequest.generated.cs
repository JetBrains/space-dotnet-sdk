// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

internal class BlogForIdPatchRequest
     : IPropagatePropertyAccessPath
{
    public BlogForIdPatchRequest() { }
    
    public BlogForIdPatchRequest(string? title = null, string? content = null, TextDocumentContent? docContent = null, List<string>? locations = null, List<string>? teams = null, BlogCalendarEvent? @event = null)
    {
        Title = title;
        Content = content;
        DocContent = docContent;
        Locations = locations;
        Teams = teams;
        Event = @event;
    }
    
    private PropertyValue<string?> _title = new PropertyValue<string?>(nameof(BlogForIdPatchRequest), nameof(Title), "title");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("title")]
    public string? Title
    {
        get => _title.GetValue(InlineErrors);
        set => _title.SetValue(value);
    }

    private PropertyValue<string?> _content = new PropertyValue<string?>(nameof(BlogForIdPatchRequest), nameof(Content), "content");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [Obsolete("Use docContent property instead (since 2023-05-30) (will be removed in a future version)")]
    [JsonPropertyName("content")]
    public string? Content
    {
        get => _content.GetValue(InlineErrors);
        set => _content.SetValue(value);
    }

    private PropertyValue<TextDocumentContent?> _docContent = new PropertyValue<TextDocumentContent?>(nameof(BlogForIdPatchRequest), nameof(DocContent), "docContent");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("docContent")]
    public TextDocumentContent? DocContent
    {
        get => _docContent.GetValue(InlineErrors);
        set => _docContent.SetValue(value);
    }

    private PropertyValue<List<string>?> _locations = new PropertyValue<List<string>?>(nameof(BlogForIdPatchRequest), nameof(Locations), "locations");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("locations")]
    public List<string>? Locations
    {
        get => _locations.GetValue(InlineErrors);
        set => _locations.SetValue(value);
    }

    private PropertyValue<List<string>?> _teams = new PropertyValue<List<string>?>(nameof(BlogForIdPatchRequest), nameof(Teams), "teams");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("teams")]
    public List<string>? Teams
    {
        get => _teams.GetValue(InlineErrors);
        set => _teams.SetValue(value);
    }

    private PropertyValue<BlogCalendarEvent?> _event = new PropertyValue<BlogCalendarEvent?>(nameof(BlogForIdPatchRequest), nameof(Event), "event");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("event")]
    public BlogCalendarEvent? Event
    {
        get => _event.GetValue(InlineErrors);
        set => _event.SetValue(value);
    }

    public virtual void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _title.SetAccessPath(parentChainPath, validateHasBeenSet);
        _content.SetAccessPath(parentChainPath, validateHasBeenSet);
        _docContent.SetAccessPath(parentChainPath, validateHasBeenSet);
        _locations.SetAccessPath(parentChainPath, validateHasBeenSet);
        _teams.SetAccessPath(parentChainPath, validateHasBeenSet);
        _event.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

