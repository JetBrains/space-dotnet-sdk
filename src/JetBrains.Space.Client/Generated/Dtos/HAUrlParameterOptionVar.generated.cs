// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class HAUrlParameterOptionVar
     : HAUrlParameterOption, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public override string? ClassName => "HA_UrlParameterOption.Var";
    
    public HAUrlParameterOptionVar() { }
    
    public HAUrlParameterOptionVar(HAField parameter, List<HAField> parameters, bool prefixRequired, string optionName, HADescription? description = null, HADeprecation? deprecation = null, HAExperimental? experimental = null)
    {
        Parameter = parameter;
        Parameters = parameters;
        IsPrefixRequired = prefixRequired;
        OptionName = optionName;
        Description = description;
        Deprecation = deprecation;
        Experimental = experimental;
    }
    
    private PropertyValue<HAField> _parameter = new PropertyValue<HAField>(nameof(HAUrlParameterOptionVar), nameof(Parameter), "parameter");
    
    [Required]
    [Obsolete("Use 'parameters' (since 2021-08-17)")]
    [JsonPropertyName("parameter")]
    public HAField Parameter
    {
        get => _parameter.GetValue(InlineErrors);
        set => _parameter.SetValue(value);
    }

    private PropertyValue<List<HAField>> _parameters = new PropertyValue<List<HAField>>(nameof(HAUrlParameterOptionVar), nameof(Parameters), "parameters", new List<HAField>());
    
    [Required]
    [JsonPropertyName("parameters")]
    public List<HAField> Parameters
    {
        get => _parameters.GetValue(InlineErrors);
        set => _parameters.SetValue(value);
    }

    private PropertyValue<bool> _prefixRequired = new PropertyValue<bool>(nameof(HAUrlParameterOptionVar), nameof(IsPrefixRequired), "prefixRequired");
    
    [Required]
    [JsonPropertyName("prefixRequired")]
    public bool IsPrefixRequired
    {
        get => _prefixRequired.GetValue(InlineErrors);
        set => _prefixRequired.SetValue(value);
    }

    private PropertyValue<string> _optionName = new PropertyValue<string>(nameof(HAUrlParameterOptionVar), nameof(OptionName), "optionName");
    
    [Required]
    [JsonPropertyName("optionName")]
    public string OptionName
    {
        get => _optionName.GetValue(InlineErrors);
        set => _optionName.SetValue(value);
    }

    private PropertyValue<HADescription?> _description = new PropertyValue<HADescription?>(nameof(HAUrlParameterOptionVar), nameof(Description), "description");
    
    [JsonPropertyName("description")]
    public HADescription? Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<HADeprecation?> _deprecation = new PropertyValue<HADeprecation?>(nameof(HAUrlParameterOptionVar), nameof(Deprecation), "deprecation");
    
    [JsonPropertyName("deprecation")]
    public HADeprecation? Deprecation
    {
        get => _deprecation.GetValue(InlineErrors);
        set => _deprecation.SetValue(value);
    }

    private PropertyValue<HAExperimental?> _experimental = new PropertyValue<HAExperimental?>(nameof(HAUrlParameterOptionVar), nameof(Experimental), "experimental");
    
    [JsonPropertyName("experimental")]
    public HAExperimental? Experimental
    {
        get => _experimental.GetValue(InlineErrors);
        set => _experimental.SetValue(value);
    }

    public override void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _parameter.SetAccessPath(parentChainPath, validateHasBeenSet);
        _parameters.SetAccessPath(parentChainPath, validateHasBeenSet);
        _prefixRequired.SetAccessPath(parentChainPath, validateHasBeenSet);
        _optionName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _deprecation.SetAccessPath(parentChainPath, validateHasBeenSet);
        _experimental.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

