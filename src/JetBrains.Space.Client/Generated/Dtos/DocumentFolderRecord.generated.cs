// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class DocumentFolderRecord
     : IPropagatePropertyAccessPath
{
    public DocumentFolderRecord() { }
    
    public DocumentFolderRecord(string id, bool archived, string name, List<DocumentFolderRecord> subfolders, List<DRDraftHeader> documents, TDMemberProfile owner, string alias, DateTime created, DateTime updated, DocumentFolderRecord? parent = null, CPrincipal? createdBy = null, CPrincipal? updatedBy = null)
    {
        Id = id;
        IsArchived = archived;
        Name = name;
        Parent = parent;
        Subfolders = subfolders;
        Documents = documents;
        Owner = owner;
        Alias = alias;
        Created = created;
        CreatedBy = createdBy;
        Updated = updated;
        UpdatedBy = updatedBy;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(DocumentFolderRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(DocumentFolderRecord), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(DocumentFolderRecord), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<DocumentFolderRecord?> _parent = new PropertyValue<DocumentFolderRecord?>(nameof(DocumentFolderRecord), nameof(Parent), "parent");
    
    [JsonPropertyName("parent")]
    public DocumentFolderRecord? Parent
    {
        get => _parent.GetValue(InlineErrors);
        set => _parent.SetValue(value);
    }

    private PropertyValue<List<DocumentFolderRecord>> _subfolders = new PropertyValue<List<DocumentFolderRecord>>(nameof(DocumentFolderRecord), nameof(Subfolders), "subfolders", new List<DocumentFolderRecord>());
    
    [Required]
    [JsonPropertyName("subfolders")]
    public List<DocumentFolderRecord> Subfolders
    {
        get => _subfolders.GetValue(InlineErrors);
        set => _subfolders.SetValue(value);
    }

    private PropertyValue<List<DRDraftHeader>> _documents = new PropertyValue<List<DRDraftHeader>>(nameof(DocumentFolderRecord), nameof(Documents), "documents", new List<DRDraftHeader>());
    
    [Required]
    [JsonPropertyName("documents")]
    public List<DRDraftHeader> Documents
    {
        get => _documents.GetValue(InlineErrors);
        set => _documents.SetValue(value);
    }

    private PropertyValue<TDMemberProfile> _owner = new PropertyValue<TDMemberProfile>(nameof(DocumentFolderRecord), nameof(Owner), "owner");
    
    [Required]
    [JsonPropertyName("owner")]
    public TDMemberProfile Owner
    {
        get => _owner.GetValue(InlineErrors);
        set => _owner.SetValue(value);
    }

    private PropertyValue<string> _alias = new PropertyValue<string>(nameof(DocumentFolderRecord), nameof(Alias), "alias");
    
    [Required]
    [JsonPropertyName("alias")]
    public string Alias
    {
        get => _alias.GetValue(InlineErrors);
        set => _alias.SetValue(value);
    }

    private PropertyValue<DateTime> _created = new PropertyValue<DateTime>(nameof(DocumentFolderRecord), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<CPrincipal?> _createdBy = new PropertyValue<CPrincipal?>(nameof(DocumentFolderRecord), nameof(CreatedBy), "createdBy");
    
    [JsonPropertyName("createdBy")]
    public CPrincipal? CreatedBy
    {
        get => _createdBy.GetValue(InlineErrors);
        set => _createdBy.SetValue(value);
    }

    private PropertyValue<DateTime> _updated = new PropertyValue<DateTime>(nameof(DocumentFolderRecord), nameof(Updated), "updated");
    
    [Required]
    [JsonPropertyName("updated")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Updated
    {
        get => _updated.GetValue(InlineErrors);
        set => _updated.SetValue(value);
    }

    private PropertyValue<CPrincipal?> _updatedBy = new PropertyValue<CPrincipal?>(nameof(DocumentFolderRecord), nameof(UpdatedBy), "updatedBy");
    
    [JsonPropertyName("updatedBy")]
    public CPrincipal? UpdatedBy
    {
        get => _updatedBy.GetValue(InlineErrors);
        set => _updatedBy.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _parent.SetAccessPath(parentChainPath, validateHasBeenSet);
        _subfolders.SetAccessPath(parentChainPath, validateHasBeenSet);
        _documents.SetAccessPath(parentChainPath, validateHasBeenSet);
        _owner.SetAccessPath(parentChainPath, validateHasBeenSet);
        _alias.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _updated.SetAccessPath(parentChainPath, validateHasBeenSet);
        _updatedBy.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

