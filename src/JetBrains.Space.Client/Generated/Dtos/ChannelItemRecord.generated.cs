// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ChannelItemRecord
     : IPropagatePropertyAccessPath
{
    public ChannelItemRecord() { }
    
    public ChannelItemRecord(string text, CPrincipal author, DateTime created, long time, string id, bool archived, List<Issue> issues, M2ItemContentDetails? details = null, AllReactionsToItemRecord? reactions = null, M2ChannelRecord? thread = null, ChannelItemRecord? projectedItem = null, List<AttachmentInfo>? attachments = null, string? externalId = null, bool? pending = null, DateTime? edited = null, bool? pinned = null, List<CPrincipal>? suggestedParticipants = null, List<EntityMention>? mentions = null, string? channelId = null)
    {
        Text = text;
        Details = details;
        Author = author;
        Created = created;
        Time = time;
        Reactions = reactions;
        Thread = thread;
        ProjectedItem = projectedItem;
        Attachments = attachments;
        ExternalId = externalId;
        IsPending = pending;
        Id = id;
        IsArchived = archived;
        Edited = edited;
        IsPinned = pinned;
        SuggestedParticipants = suggestedParticipants;
        Mentions = mentions;
        ChannelId = channelId;
        Issues = issues;
    }
    
    private PropertyValue<string> _text = new PropertyValue<string>(nameof(ChannelItemRecord), nameof(Text), "text");
    
    [Required]
    [JsonPropertyName("text")]
    public string Text
    {
        get => _text.GetValue(InlineErrors);
        set => _text.SetValue(value);
    }

    private PropertyValue<M2ItemContentDetails?> _details = new PropertyValue<M2ItemContentDetails?>(nameof(ChannelItemRecord), nameof(Details), "details");
    
    [JsonPropertyName("details")]
    public M2ItemContentDetails? Details
    {
        get => _details.GetValue(InlineErrors);
        set => _details.SetValue(value);
    }

    private PropertyValue<CPrincipal> _author = new PropertyValue<CPrincipal>(nameof(ChannelItemRecord), nameof(Author), "author");
    
    [Required]
    [JsonPropertyName("author")]
    public CPrincipal Author
    {
        get => _author.GetValue(InlineErrors);
        set => _author.SetValue(value);
    }

    private PropertyValue<DateTime> _created = new PropertyValue<DateTime>(nameof(ChannelItemRecord), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<long> _time = new PropertyValue<long>(nameof(ChannelItemRecord), nameof(Time), "time");
    
    [Required]
    [JsonPropertyName("time")]
    public long Time
    {
        get => _time.GetValue(InlineErrors);
        set => _time.SetValue(value);
    }

    private PropertyValue<AllReactionsToItemRecord?> _reactions = new PropertyValue<AllReactionsToItemRecord?>(nameof(ChannelItemRecord), nameof(Reactions), "reactions");
    
    [JsonPropertyName("reactions")]
    public AllReactionsToItemRecord? Reactions
    {
        get => _reactions.GetValue(InlineErrors);
        set => _reactions.SetValue(value);
    }

    private PropertyValue<M2ChannelRecord?> _thread = new PropertyValue<M2ChannelRecord?>(nameof(ChannelItemRecord), nameof(Thread), "thread");
    
    [JsonPropertyName("thread")]
    public M2ChannelRecord? Thread
    {
        get => _thread.GetValue(InlineErrors);
        set => _thread.SetValue(value);
    }

    private PropertyValue<ChannelItemRecord?> _projectedItem = new PropertyValue<ChannelItemRecord?>(nameof(ChannelItemRecord), nameof(ProjectedItem), "projectedItem");
    
    [JsonPropertyName("projectedItem")]
    public ChannelItemRecord? ProjectedItem
    {
        get => _projectedItem.GetValue(InlineErrors);
        set => _projectedItem.SetValue(value);
    }

    private PropertyValue<List<AttachmentInfo>?> _attachments = new PropertyValue<List<AttachmentInfo>?>(nameof(ChannelItemRecord), nameof(Attachments), "attachments");
    
    [JsonPropertyName("attachments")]
    public List<AttachmentInfo>? Attachments
    {
        get => _attachments.GetValue(InlineErrors);
        set => _attachments.SetValue(value);
    }

    private PropertyValue<string?> _externalId = new PropertyValue<string?>(nameof(ChannelItemRecord), nameof(ExternalId), "externalId");
    
    [JsonPropertyName("externalId")]
    public string? ExternalId
    {
        get => _externalId.GetValue(InlineErrors);
        set => _externalId.SetValue(value);
    }

    private PropertyValue<bool?> _pending = new PropertyValue<bool?>(nameof(ChannelItemRecord), nameof(IsPending), "pending");
    
    [JsonPropertyName("pending")]
    public bool? IsPending
    {
        get => _pending.GetValue(InlineErrors);
        set => _pending.SetValue(value);
    }

    private PropertyValue<string> _id = new PropertyValue<string>(nameof(ChannelItemRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(ChannelItemRecord), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<DateTime?> _edited = new PropertyValue<DateTime?>(nameof(ChannelItemRecord), nameof(Edited), "edited");
    
    [JsonPropertyName("edited")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? Edited
    {
        get => _edited.GetValue(InlineErrors);
        set => _edited.SetValue(value);
    }

    private PropertyValue<bool?> _pinned = new PropertyValue<bool?>(nameof(ChannelItemRecord), nameof(IsPinned), "pinned");
    
    [JsonPropertyName("pinned")]
    public bool? IsPinned
    {
        get => _pinned.GetValue(InlineErrors);
        set => _pinned.SetValue(value);
    }

    private PropertyValue<List<CPrincipal>?> _suggestedParticipants = new PropertyValue<List<CPrincipal>?>(nameof(ChannelItemRecord), nameof(SuggestedParticipants), "suggestedParticipants");
    
    [JsonPropertyName("suggestedParticipants")]
    public List<CPrincipal>? SuggestedParticipants
    {
        get => _suggestedParticipants.GetValue(InlineErrors);
        set => _suggestedParticipants.SetValue(value);
    }

    private PropertyValue<List<EntityMention>?> _mentions = new PropertyValue<List<EntityMention>?>(nameof(ChannelItemRecord), nameof(Mentions), "mentions");
    
    [JsonPropertyName("mentions")]
    public List<EntityMention>? Mentions
    {
        get => _mentions.GetValue(InlineErrors);
        set => _mentions.SetValue(value);
    }

    private PropertyValue<string?> _channelId = new PropertyValue<string?>(nameof(ChannelItemRecord), nameof(ChannelId), "channelId");
    
    [JsonPropertyName("channelId")]
    public string? ChannelId
    {
        get => _channelId.GetValue(InlineErrors);
        set => _channelId.SetValue(value);
    }

    private PropertyValue<List<Issue>> _issues = new PropertyValue<List<Issue>>(nameof(ChannelItemRecord), nameof(Issues), "issues", new List<Issue>());
    
    [Required]
    [JsonPropertyName("issues")]
    public List<Issue> Issues
    {
        get => _issues.GetValue(InlineErrors);
        set => _issues.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _text.SetAccessPath(parentChainPath, validateHasBeenSet);
        _details.SetAccessPath(parentChainPath, validateHasBeenSet);
        _author.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _time.SetAccessPath(parentChainPath, validateHasBeenSet);
        _reactions.SetAccessPath(parentChainPath, validateHasBeenSet);
        _thread.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectedItem.SetAccessPath(parentChainPath, validateHasBeenSet);
        _attachments.SetAccessPath(parentChainPath, validateHasBeenSet);
        _externalId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pending.SetAccessPath(parentChainPath, validateHasBeenSet);
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _edited.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pinned.SetAccessPath(parentChainPath, validateHasBeenSet);
        _suggestedParticipants.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mentions.SetAccessPath(parentChainPath, validateHasBeenSet);
        _channelId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issues.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

