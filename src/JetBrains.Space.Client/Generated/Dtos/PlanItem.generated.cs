// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class PlanItem
     : IPropagatePropertyAccessPath
{
    public PlanItem() { }
    
    public PlanItem(string id, string checklistId, bool hasChildren, bool archived, List<PlanItem> children, List<Topic> topics, PlanningTag? tag = null, string? simpleText = null, bool? simpleDone = null, Issue? issue = null, string? issueProblem = null, bool? canEditIssue = null)
    {
        Id = id;
        ChecklistId = checklistId;
        Tag = tag;
        SimpleText = simpleText;
        IsSimpleDone = simpleDone;
        Issue = issue;
        IssueProblem = issueProblem;
        CanEditIssue = canEditIssue;
        IsHasChildren = hasChildren;
        IsArchived = archived;
        Children = children;
        Topics = topics;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(PlanItem), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _checklistId = new PropertyValue<string>(nameof(PlanItem), nameof(ChecklistId), "checklistId");
    
    [Required]
    [JsonPropertyName("checklistId")]
    public string ChecklistId
    {
        get => _checklistId.GetValue(InlineErrors);
        set => _checklistId.SetValue(value);
    }

    private PropertyValue<PlanningTag?> _tag = new PropertyValue<PlanningTag?>(nameof(PlanItem), nameof(Tag), "tag");
    
    [JsonPropertyName("tag")]
    public PlanningTag? Tag
    {
        get => _tag.GetValue(InlineErrors);
        set => _tag.SetValue(value);
    }

    private PropertyValue<string?> _simpleText = new PropertyValue<string?>(nameof(PlanItem), nameof(SimpleText), "simpleText");
    
    [JsonPropertyName("simpleText")]
    public string? SimpleText
    {
        get => _simpleText.GetValue(InlineErrors);
        set => _simpleText.SetValue(value);
    }

    private PropertyValue<bool?> _simpleDone = new PropertyValue<bool?>(nameof(PlanItem), nameof(IsSimpleDone), "simpleDone");
    
    [JsonPropertyName("simpleDone")]
    public bool? IsSimpleDone
    {
        get => _simpleDone.GetValue(InlineErrors);
        set => _simpleDone.SetValue(value);
    }

    private PropertyValue<Issue?> _issue = new PropertyValue<Issue?>(nameof(PlanItem), nameof(Issue), "issue");
    
    [JsonPropertyName("issue")]
    public Issue? Issue
    {
        get => _issue.GetValue(InlineErrors);
        set => _issue.SetValue(value);
    }

    private PropertyValue<string?> _issueProblem = new PropertyValue<string?>(nameof(PlanItem), nameof(IssueProblem), "issueProblem");
    
    [JsonPropertyName("issueProblem")]
    public string? IssueProblem
    {
        get => _issueProblem.GetValue(InlineErrors);
        set => _issueProblem.SetValue(value);
    }

    private PropertyValue<bool?> _canEditIssue = new PropertyValue<bool?>(nameof(PlanItem), nameof(CanEditIssue), "canEditIssue");
    
    [JsonPropertyName("canEditIssue")]
    public bool? CanEditIssue
    {
        get => _canEditIssue.GetValue(InlineErrors);
        set => _canEditIssue.SetValue(value);
    }

    private PropertyValue<bool> _hasChildren = new PropertyValue<bool>(nameof(PlanItem), nameof(IsHasChildren), "hasChildren");
    
    [Required]
    [JsonPropertyName("hasChildren")]
    public bool IsHasChildren
    {
        get => _hasChildren.GetValue(InlineErrors);
        set => _hasChildren.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(PlanItem), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<List<PlanItem>> _children = new PropertyValue<List<PlanItem>>(nameof(PlanItem), nameof(Children), "children", new List<PlanItem>());
    
    [Required]
    [JsonPropertyName("children")]
    public List<PlanItem> Children
    {
        get => _children.GetValue(InlineErrors);
        set => _children.SetValue(value);
    }

    private PropertyValue<List<Topic>> _topics = new PropertyValue<List<Topic>>(nameof(PlanItem), nameof(Topics), "topics", new List<Topic>());
    
    [Required]
    [JsonPropertyName("topics")]
    public List<Topic> Topics
    {
        get => _topics.GetValue(InlineErrors);
        set => _topics.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _checklistId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _tag.SetAccessPath(parentChainPath, validateHasBeenSet);
        _simpleText.SetAccessPath(parentChainPath, validateHasBeenSet);
        _simpleDone.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issue.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issueProblem.SetAccessPath(parentChainPath, validateHasBeenSet);
        _canEditIssue.SetAccessPath(parentChainPath, validateHasBeenSet);
        _hasChildren.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _children.SetAccessPath(parentChainPath, validateHasBeenSet);
        _topics.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

