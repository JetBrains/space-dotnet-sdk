// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class VcsHostingPassword
         : IPropagatePropertyAccessPath
    {
        public VcsHostingPassword() { }
        
        public VcsHostingPassword(string fingerprint, DateTime? lastUsed = null)
        {
            Fingerprint = fingerprint;
            LastUsed = lastUsed;
        }
        
        private PropertyValue<string> _fingerprint = new PropertyValue<string>(nameof(VcsHostingPassword), nameof(Fingerprint));
        
        [Required]
        [JsonPropertyName("fingerprint")]
        public string Fingerprint
        {
            get => _fingerprint.GetValue();
            set => _fingerprint.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _lastUsed = new PropertyValue<DateTime?>(nameof(VcsHostingPassword), nameof(LastUsed));
        
        [JsonPropertyName("lastUsed")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime? LastUsed
        {
            get => _lastUsed.GetValue();
            set => _lastUsed.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _fingerprint.SetAccessPath(path, validateHasBeenSet);
            _lastUsed.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
