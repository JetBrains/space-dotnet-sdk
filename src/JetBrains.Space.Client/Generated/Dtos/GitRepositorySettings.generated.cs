// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitRepositorySettings
     : IPropagatePropertyAccessPath
{
    public GitRepositorySettings() { }
    
    public GitRepositorySettings(string version, GitRepositorySettingsMirrorSettings? mirror = null, string? encoding = null, GitRepositorySettingsPushRestrictions? pushRestrictions = null, List<GitRepositorySettingsProtectedBranch>? protectedBranches = null, GitRepositorySettingsPreReceiveHook? preReceiveHook = null, GitRepositorySettingsBundle? bundle = null)
    {
        Version = version;
        Mirror = mirror;
        Encoding = encoding;
        PushRestrictions = pushRestrictions;
        ProtectedBranches = protectedBranches;
        PreReceiveHook = preReceiveHook;
        Bundle = bundle;
    }
    
    private PropertyValue<string> _version = new PropertyValue<string>(nameof(GitRepositorySettings), nameof(Version), "version");
    
    [Required]
    [JsonPropertyName("version")]
    public string Version
    {
        get => _version.GetValue(InlineErrors);
        set => _version.SetValue(value);
    }

    private PropertyValue<GitRepositorySettingsMirrorSettings?> _mirror = new PropertyValue<GitRepositorySettingsMirrorSettings?>(nameof(GitRepositorySettings), nameof(Mirror), "mirror");
    
    [JsonPropertyName("mirror")]
    public GitRepositorySettingsMirrorSettings? Mirror
    {
        get => _mirror.GetValue(InlineErrors);
        set => _mirror.SetValue(value);
    }

    private PropertyValue<string?> _encoding = new PropertyValue<string?>(nameof(GitRepositorySettings), nameof(Encoding), "encoding");
    
    [JsonPropertyName("encoding")]
    public string? Encoding
    {
        get => _encoding.GetValue(InlineErrors);
        set => _encoding.SetValue(value);
    }

    private PropertyValue<GitRepositorySettingsPushRestrictions?> _pushRestrictions = new PropertyValue<GitRepositorySettingsPushRestrictions?>(nameof(GitRepositorySettings), nameof(PushRestrictions), "pushRestrictions");
    
    [JsonPropertyName("pushRestrictions")]
    public GitRepositorySettingsPushRestrictions? PushRestrictions
    {
        get => _pushRestrictions.GetValue(InlineErrors);
        set => _pushRestrictions.SetValue(value);
    }

    private PropertyValue<List<GitRepositorySettingsProtectedBranch>?> _protectedBranches = new PropertyValue<List<GitRepositorySettingsProtectedBranch>?>(nameof(GitRepositorySettings), nameof(ProtectedBranches), "protectedBranches");
    
    [JsonPropertyName("protectedBranches")]
    public List<GitRepositorySettingsProtectedBranch>? ProtectedBranches
    {
        get => _protectedBranches.GetValue(InlineErrors);
        set => _protectedBranches.SetValue(value);
    }

    private PropertyValue<GitRepositorySettingsPreReceiveHook?> _preReceiveHook = new PropertyValue<GitRepositorySettingsPreReceiveHook?>(nameof(GitRepositorySettings), nameof(PreReceiveHook), "preReceiveHook");
    
    [JsonPropertyName("preReceiveHook")]
    public GitRepositorySettingsPreReceiveHook? PreReceiveHook
    {
        get => _preReceiveHook.GetValue(InlineErrors);
        set => _preReceiveHook.SetValue(value);
    }

    private PropertyValue<GitRepositorySettingsBundle?> _bundle = new PropertyValue<GitRepositorySettingsBundle?>(nameof(GitRepositorySettings), nameof(Bundle), "bundle");
    
    [JsonPropertyName("bundle")]
    public GitRepositorySettingsBundle? Bundle
    {
        get => _bundle.GetValue(InlineErrors);
        set => _bundle.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _version.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mirror.SetAccessPath(parentChainPath, validateHasBeenSet);
        _encoding.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pushRestrictions.SetAccessPath(parentChainPath, validateHasBeenSet);
        _protectedBranches.SetAccessPath(parentChainPath, validateHasBeenSet);
        _preReceiveHook.SetAccessPath(parentChainPath, validateHasBeenSet);
        _bundle.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

