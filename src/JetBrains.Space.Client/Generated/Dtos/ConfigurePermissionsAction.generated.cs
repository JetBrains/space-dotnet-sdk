// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class ConfigurePermissionsAction
         : ClientSideActionContext, IClassNameConvertible, IPropagatePropertyAccessPath
    {
        [JsonPropertyName("className")]
        public  string? ClassName => "ConfigurePermissionsAction";
        
        public ConfigurePermissionsAction() { }
        
        public ConfigurePermissionsAction(ESApp app, PermissionContextIdentifier context)
        {
            App = app;
            Context = context;
        }
        
        private PropertyValue<ESApp> _app = new PropertyValue<ESApp>(nameof(ConfigurePermissionsAction), nameof(App));
        
        [Required]
        [JsonPropertyName("app")]
        public ESApp App
        {
            get => _app.GetValue();
            set => _app.SetValue(value);
        }
    
        private PropertyValue<PermissionContextIdentifier> _context = new PropertyValue<PermissionContextIdentifier>(nameof(ConfigurePermissionsAction), nameof(Context));
        
        [Required]
        [JsonPropertyName("context")]
        public PermissionContextIdentifier Context
        {
            get => _context.GetValue();
            set => _context.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _app.SetAccessPath(path, validateHasBeenSet);
            _context.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
