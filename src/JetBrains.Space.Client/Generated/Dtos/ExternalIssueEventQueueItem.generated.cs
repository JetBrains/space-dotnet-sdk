// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ExternalIssueEventQueueItem
     : IPropagatePropertyAccessPath
{
    public ExternalIssueEventQueueItem() { }
    
    public ExternalIssueEventQueueItem(ExternalIssueEvent @event, long etag)
    {
        Event = @event;
        Etag = etag;
    }
    
    private PropertyValue<ExternalIssueEvent> _event = new PropertyValue<ExternalIssueEvent>(nameof(ExternalIssueEventQueueItem), nameof(Event), "event");
    
    /// <summary>
    /// An actionable event from Space about issue from external issue tracker
    /// </summary>
    [Required]
    [JsonPropertyName("event")]
    public ExternalIssueEvent Event
    {
        get => _event.GetValue(InlineErrors);
        set => _event.SetValue(value);
    }

    private PropertyValue<long> _etag = new PropertyValue<long>(nameof(ExternalIssueEventQueueItem), nameof(Etag), "etag");
    
    /// <summary>
    /// Monotonically increasing counter that should be used by the application to fetch unprocessed queue items only
    /// </summary>
    [Required]
    [JsonPropertyName("etag")]
    public long Etag
    {
        get => _etag.GetValue(InlineErrors);
        set => _etag.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _event.SetAccessPath(parentChainPath, validateHasBeenSet);
        _etag.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

