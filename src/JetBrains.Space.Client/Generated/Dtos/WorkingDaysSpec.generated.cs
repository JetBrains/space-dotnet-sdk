// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class WorkingDaysSpec
     : IPropagatePropertyAccessPath
{
    public WorkingDaysSpec() { }
    
    public WorkingDaysSpec(List<Workday> days, List<WeekDayTimeInterval>? workingHours = null, List<WeekDayTimeInterval>? notificationHours = null, ATimeZone? timezone = null)
    {
        Days = days;
        WorkingHours = workingHours;
        NotificationHours = notificationHours;
        Timezone = timezone;
    }
    
    private PropertyValue<List<Workday>> _days = new PropertyValue<List<Workday>>(nameof(WorkingDaysSpec), nameof(Days), "days", new List<Workday>());
    
    [Required]
    [Obsolete("Use workingHours and notificationHours instead (since 2020-11-10)")]
    [JsonPropertyName("days")]
    public List<Workday> Days
    {
        get => _days.GetValue(InlineErrors);
        set => _days.SetValue(value);
    }

    private PropertyValue<List<WeekDayTimeInterval>?> _workingHours = new PropertyValue<List<WeekDayTimeInterval>?>(nameof(WorkingDaysSpec), nameof(WorkingHours), "workingHours");
    
    [JsonPropertyName("workingHours")]
    public List<WeekDayTimeInterval>? WorkingHours
    {
        get => _workingHours.GetValue(InlineErrors);
        set => _workingHours.SetValue(value);
    }

    private PropertyValue<List<WeekDayTimeInterval>?> _notificationHours = new PropertyValue<List<WeekDayTimeInterval>?>(nameof(WorkingDaysSpec), nameof(NotificationHours), "notificationHours");
    
    [JsonPropertyName("notificationHours")]
    public List<WeekDayTimeInterval>? NotificationHours
    {
        get => _notificationHours.GetValue(InlineErrors);
        set => _notificationHours.SetValue(value);
    }

    private PropertyValue<ATimeZone?> _timezone = new PropertyValue<ATimeZone?>(nameof(WorkingDaysSpec), nameof(Timezone), "timezone");
    
    [JsonPropertyName("timezone")]
    public ATimeZone? Timezone
    {
        get => _timezone.GetValue(InlineErrors);
        set => _timezone.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _days.SetAccessPath(parentChainPath, validateHasBeenSet);
        _workingHours.SetAccessPath(parentChainPath, validateHasBeenSet);
        _notificationHours.SetAccessPath(parentChainPath, validateHasBeenSet);
        _timezone.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

