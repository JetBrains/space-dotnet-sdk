// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class JobExecutionDTO
     : IPropagatePropertyAccessPath
{
    public JobExecutionDTO() { }
    
    public JobExecutionDTO(string executionId, long executionNumber, string jobId, string jobName, string projectId, string branch, ExecutionStatus status, long triggeredTime, int changesCount, List<FailureConditionDTO> failureConditions, long? startedTime = null, long? finishedTime = null, string? commitId = null)
    {
        ExecutionId = executionId;
        ExecutionNumber = executionNumber;
        JobId = jobId;
        JobName = jobName;
        ProjectId = projectId;
        Branch = branch;
        Status = status;
        TriggeredTime = triggeredTime;
        StartedTime = startedTime;
        FinishedTime = finishedTime;
        ChangesCount = changesCount;
        FailureConditions = failureConditions;
        CommitId = commitId;
    }
    
    private PropertyValue<string> _executionId = new PropertyValue<string>(nameof(JobExecutionDTO), nameof(ExecutionId), "executionId");
    
    [Required]
    [JsonPropertyName("executionId")]
    public string ExecutionId
    {
        get => _executionId.GetValue(InlineErrors);
        set => _executionId.SetValue(value);
    }

    private PropertyValue<long> _executionNumber = new PropertyValue<long>(nameof(JobExecutionDTO), nameof(ExecutionNumber), "executionNumber");
    
    [Required]
    [JsonPropertyName("executionNumber")]
    public long ExecutionNumber
    {
        get => _executionNumber.GetValue(InlineErrors);
        set => _executionNumber.SetValue(value);
    }

    private PropertyValue<string> _jobId = new PropertyValue<string>(nameof(JobExecutionDTO), nameof(JobId), "jobId");
    
    [Required]
    [JsonPropertyName("jobId")]
    public string JobId
    {
        get => _jobId.GetValue(InlineErrors);
        set => _jobId.SetValue(value);
    }

    private PropertyValue<string> _jobName = new PropertyValue<string>(nameof(JobExecutionDTO), nameof(JobName), "jobName");
    
    [Required]
    [JsonPropertyName("jobName")]
    public string JobName
    {
        get => _jobName.GetValue(InlineErrors);
        set => _jobName.SetValue(value);
    }

    private PropertyValue<string> _projectId = new PropertyValue<string>(nameof(JobExecutionDTO), nameof(ProjectId), "projectId");
    
    [Required]
    [JsonPropertyName("projectId")]
    public string ProjectId
    {
        get => _projectId.GetValue(InlineErrors);
        set => _projectId.SetValue(value);
    }

    private PropertyValue<string> _branch = new PropertyValue<string>(nameof(JobExecutionDTO), nameof(Branch), "branch");
    
    [Required]
    [JsonPropertyName("branch")]
    public string Branch
    {
        get => _branch.GetValue(InlineErrors);
        set => _branch.SetValue(value);
    }

    private PropertyValue<ExecutionStatus> _status = new PropertyValue<ExecutionStatus>(nameof(JobExecutionDTO), nameof(Status), "status");
    
    [Required]
    [JsonPropertyName("status")]
    public ExecutionStatus Status
    {
        get => _status.GetValue(InlineErrors);
        set => _status.SetValue(value);
    }

    private PropertyValue<long> _triggeredTime = new PropertyValue<long>(nameof(JobExecutionDTO), nameof(TriggeredTime), "triggeredTime");
    
    [Required]
    [JsonPropertyName("triggeredTime")]
    public long TriggeredTime
    {
        get => _triggeredTime.GetValue(InlineErrors);
        set => _triggeredTime.SetValue(value);
    }

    private PropertyValue<long?> _startedTime = new PropertyValue<long?>(nameof(JobExecutionDTO), nameof(StartedTime), "startedTime");
    
    [JsonPropertyName("startedTime")]
    public long? StartedTime
    {
        get => _startedTime.GetValue(InlineErrors);
        set => _startedTime.SetValue(value);
    }

    private PropertyValue<long?> _finishedTime = new PropertyValue<long?>(nameof(JobExecutionDTO), nameof(FinishedTime), "finishedTime");
    
    [JsonPropertyName("finishedTime")]
    public long? FinishedTime
    {
        get => _finishedTime.GetValue(InlineErrors);
        set => _finishedTime.SetValue(value);
    }

    private PropertyValue<int> _changesCount = new PropertyValue<int>(nameof(JobExecutionDTO), nameof(ChangesCount), "changesCount");
    
    [Required]
    [JsonPropertyName("changesCount")]
    public int ChangesCount
    {
        get => _changesCount.GetValue(InlineErrors);
        set => _changesCount.SetValue(value);
    }

    private PropertyValue<List<FailureConditionDTO>> _failureConditions = new PropertyValue<List<FailureConditionDTO>>(nameof(JobExecutionDTO), nameof(FailureConditions), "failureConditions", new List<FailureConditionDTO>());
    
    [Required]
    [JsonPropertyName("failureConditions")]
    public List<FailureConditionDTO> FailureConditions
    {
        get => _failureConditions.GetValue(InlineErrors);
        set => _failureConditions.SetValue(value);
    }

    private PropertyValue<string?> _commitId = new PropertyValue<string?>(nameof(JobExecutionDTO), nameof(CommitId), "commitId");
    
    [JsonPropertyName("commitId")]
    public string? CommitId
    {
        get => _commitId.GetValue(InlineErrors);
        set => _commitId.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _executionId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _executionNumber.SetAccessPath(parentChainPath, validateHasBeenSet);
        _jobId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _jobName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _branch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _status.SetAccessPath(parentChainPath, validateHasBeenSet);
        _triggeredTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _startedTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _finishedTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _changesCount.SetAccessPath(parentChainPath, validateHasBeenSet);
        _failureConditions.SetAccessPath(parentChainPath, validateHasBeenSet);
        _commitId.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

