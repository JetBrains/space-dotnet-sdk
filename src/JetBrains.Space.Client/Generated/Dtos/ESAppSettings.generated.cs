// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class ESAppSettings
         : IPropagatePropertyAccessPath
    {
        public ESAppSettings() { }
        
        public ESAppSettings(bool? clientCredentialsFlowEnabled = null, bool? codeFlowEnabled = null, string? codeFlowRedirectURIs = null, bool? pkceRequired = null, bool? implicitFlowEnabled = null, string? implicitFlowRedirectURIs = null, string? endpointURI = null, bool? hasVerificationToken = null, bool? hasSigningKey = null, bool? hasPublicKeySignature = null, bool? endpointSslVerification = null, string? basicAuthUsername = null, bool? hasBearerToken = null, string? sslKeystoreAuth = null)
        {
            IsClientCredentialsFlowEnabled = clientCredentialsFlowEnabled;
            IsCodeFlowEnabled = codeFlowEnabled;
            CodeFlowRedirectURIs = codeFlowRedirectURIs;
            IsPkceRequired = pkceRequired;
            IsImplicitFlowEnabled = implicitFlowEnabled;
            ImplicitFlowRedirectURIs = implicitFlowRedirectURIs;
            EndpointURI = endpointURI;
            IsHasVerificationToken = hasVerificationToken;
            IsHasSigningKey = hasSigningKey;
            IsHasPublicKeySignature = hasPublicKeySignature;
            IsEndpointSslVerification = endpointSslVerification;
            BasicAuthUsername = basicAuthUsername;
            IsHasBearerToken = hasBearerToken;
            SslKeystoreAuth = sslKeystoreAuth;
        }
        
        private PropertyValue<bool?> _clientCredentialsFlowEnabled = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsClientCredentialsFlowEnabled));
        
        [JsonPropertyName("clientCredentialsFlowEnabled")]
        public bool? IsClientCredentialsFlowEnabled
        {
            get => _clientCredentialsFlowEnabled.GetValue();
            set => _clientCredentialsFlowEnabled.SetValue(value);
        }
    
        private PropertyValue<bool?> _codeFlowEnabled = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsCodeFlowEnabled));
        
        [JsonPropertyName("codeFlowEnabled")]
        public bool? IsCodeFlowEnabled
        {
            get => _codeFlowEnabled.GetValue();
            set => _codeFlowEnabled.SetValue(value);
        }
    
        private PropertyValue<string?> _codeFlowRedirectURIs = new PropertyValue<string?>(nameof(ESAppSettings), nameof(CodeFlowRedirectURIs));
        
        [JsonPropertyName("codeFlowRedirectURIs")]
        public string? CodeFlowRedirectURIs
        {
            get => _codeFlowRedirectURIs.GetValue();
            set => _codeFlowRedirectURIs.SetValue(value);
        }
    
        private PropertyValue<bool?> _pkceRequired = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsPkceRequired));
        
        [JsonPropertyName("pkceRequired")]
        public bool? IsPkceRequired
        {
            get => _pkceRequired.GetValue();
            set => _pkceRequired.SetValue(value);
        }
    
        private PropertyValue<bool?> _implicitFlowEnabled = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsImplicitFlowEnabled));
        
        [JsonPropertyName("implicitFlowEnabled")]
        public bool? IsImplicitFlowEnabled
        {
            get => _implicitFlowEnabled.GetValue();
            set => _implicitFlowEnabled.SetValue(value);
        }
    
        private PropertyValue<string?> _implicitFlowRedirectURIs = new PropertyValue<string?>(nameof(ESAppSettings), nameof(ImplicitFlowRedirectURIs));
        
        [JsonPropertyName("implicitFlowRedirectURIs")]
        public string? ImplicitFlowRedirectURIs
        {
            get => _implicitFlowRedirectURIs.GetValue();
            set => _implicitFlowRedirectURIs.SetValue(value);
        }
    
        private PropertyValue<string?> _endpointURI = new PropertyValue<string?>(nameof(ESAppSettings), nameof(EndpointURI));
        
        [JsonPropertyName("endpointURI")]
        public string? EndpointURI
        {
            get => _endpointURI.GetValue();
            set => _endpointURI.SetValue(value);
        }
    
        private PropertyValue<bool?> _hasVerificationToken = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsHasVerificationToken));
        
        [JsonPropertyName("hasVerificationToken")]
        public bool? IsHasVerificationToken
        {
            get => _hasVerificationToken.GetValue();
            set => _hasVerificationToken.SetValue(value);
        }
    
        private PropertyValue<bool?> _hasSigningKey = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsHasSigningKey));
        
        [JsonPropertyName("hasSigningKey")]
        public bool? IsHasSigningKey
        {
            get => _hasSigningKey.GetValue();
            set => _hasSigningKey.SetValue(value);
        }
    
        private PropertyValue<bool?> _hasPublicKeySignature = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsHasPublicKeySignature));
        
        [JsonPropertyName("hasPublicKeySignature")]
        public bool? IsHasPublicKeySignature
        {
            get => _hasPublicKeySignature.GetValue();
            set => _hasPublicKeySignature.SetValue(value);
        }
    
        private PropertyValue<bool?> _endpointSslVerification = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsEndpointSslVerification));
        
        [JsonPropertyName("endpointSslVerification")]
        public bool? IsEndpointSslVerification
        {
            get => _endpointSslVerification.GetValue();
            set => _endpointSslVerification.SetValue(value);
        }
    
        private PropertyValue<string?> _basicAuthUsername = new PropertyValue<string?>(nameof(ESAppSettings), nameof(BasicAuthUsername));
        
        [JsonPropertyName("basicAuthUsername")]
        public string? BasicAuthUsername
        {
            get => _basicAuthUsername.GetValue();
            set => _basicAuthUsername.SetValue(value);
        }
    
        private PropertyValue<bool?> _hasBearerToken = new PropertyValue<bool?>(nameof(ESAppSettings), nameof(IsHasBearerToken));
        
        [JsonPropertyName("hasBearerToken")]
        public bool? IsHasBearerToken
        {
            get => _hasBearerToken.GetValue();
            set => _hasBearerToken.SetValue(value);
        }
    
        private PropertyValue<string?> _sslKeystoreAuth = new PropertyValue<string?>(nameof(ESAppSettings), nameof(SslKeystoreAuth));
        
        [JsonPropertyName("sslKeystoreAuth")]
        public string? SslKeystoreAuth
        {
            get => _sslKeystoreAuth.GetValue();
            set => _sslKeystoreAuth.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _clientCredentialsFlowEnabled.SetAccessPath(path, validateHasBeenSet);
            _codeFlowEnabled.SetAccessPath(path, validateHasBeenSet);
            _codeFlowRedirectURIs.SetAccessPath(path, validateHasBeenSet);
            _pkceRequired.SetAccessPath(path, validateHasBeenSet);
            _implicitFlowEnabled.SetAccessPath(path, validateHasBeenSet);
            _implicitFlowRedirectURIs.SetAccessPath(path, validateHasBeenSet);
            _endpointURI.SetAccessPath(path, validateHasBeenSet);
            _hasVerificationToken.SetAccessPath(path, validateHasBeenSet);
            _hasSigningKey.SetAccessPath(path, validateHasBeenSet);
            _hasPublicKeySignature.SetAccessPath(path, validateHasBeenSet);
            _endpointSslVerification.SetAccessPath(path, validateHasBeenSet);
            _basicAuthUsername.SetAccessPath(path, validateHasBeenSet);
            _hasBearerToken.SetAccessPath(path, validateHasBeenSet);
            _sslKeystoreAuth.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
