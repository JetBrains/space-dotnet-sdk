// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitCommitChange
     : IPropagatePropertyAccessPath
{
    public GitCommitChange() { }
    
    public GitCommitChange(GitCommitChangeType changeType, string revision, GitFile? old = null, GitFile? @new = null, GitDiffSize? diffSize = null, string? path = null, bool? detached = null, List<string>? constituentCommits = null)
    {
        ChangeType = changeType;
        Old = old;
        New = @new;
        Revision = revision;
        DiffSize = diffSize;
        Path = path;
        IsDetached = detached;
        ConstituentCommits = constituentCommits;
    }
    
    private PropertyValue<GitCommitChangeType> _changeType = new PropertyValue<GitCommitChangeType>(nameof(GitCommitChange), nameof(ChangeType), "changeType");
    
    [Required]
    [JsonPropertyName("changeType")]
    public GitCommitChangeType ChangeType
    {
        get => _changeType.GetValue(InlineErrors);
        set => _changeType.SetValue(value);
    }

    private PropertyValue<GitFile?> _old = new PropertyValue<GitFile?>(nameof(GitCommitChange), nameof(Old), "old");
    
    [JsonPropertyName("old")]
    public GitFile? Old
    {
        get => _old.GetValue(InlineErrors);
        set => _old.SetValue(value);
    }

    private PropertyValue<GitFile?> _new = new PropertyValue<GitFile?>(nameof(GitCommitChange), nameof(New), "new");
    
    [JsonPropertyName("new")]
    public GitFile? New
    {
        get => _new.GetValue(InlineErrors);
        set => _new.SetValue(value);
    }

    private PropertyValue<string> _revision = new PropertyValue<string>(nameof(GitCommitChange), nameof(Revision), "revision");
    
    [Required]
    [JsonPropertyName("revision")]
    public string Revision
    {
        get => _revision.GetValue(InlineErrors);
        set => _revision.SetValue(value);
    }

    private PropertyValue<GitDiffSize?> _diffSize = new PropertyValue<GitDiffSize?>(nameof(GitCommitChange), nameof(DiffSize), "diffSize");
    
    [JsonPropertyName("diffSize")]
    public GitDiffSize? DiffSize
    {
        get => _diffSize.GetValue(InlineErrors);
        set => _diffSize.SetValue(value);
    }

    private PropertyValue<string?> _path = new PropertyValue<string?>(nameof(GitCommitChange), nameof(Path), "path");
    
    [JsonPropertyName("path")]
    public string? Path
    {
        get => _path.GetValue(InlineErrors);
        set => _path.SetValue(value);
    }

    private PropertyValue<bool?> _detached = new PropertyValue<bool?>(nameof(GitCommitChange), nameof(IsDetached), "detached");
    
    [JsonPropertyName("detached")]
    public bool? IsDetached
    {
        get => _detached.GetValue(InlineErrors);
        set => _detached.SetValue(value);
    }

    private PropertyValue<List<string>?> _constituentCommits = new PropertyValue<List<string>?>(nameof(GitCommitChange), nameof(ConstituentCommits), "constituentCommits");
    
    [JsonPropertyName("constituentCommits")]
    public List<string>? ConstituentCommits
    {
        get => _constituentCommits.GetValue(InlineErrors);
        set => _constituentCommits.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _changeType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _old.SetAccessPath(parentChainPath, validateHasBeenSet);
        _new.SetAccessPath(parentChainPath, validateHasBeenSet);
        _revision.SetAccessPath(parentChainPath, validateHasBeenSet);
        _diffSize.SetAccessPath(parentChainPath, validateHasBeenSet);
        _path.SetAccessPath(parentChainPath, validateHasBeenSet);
        _detached.SetAccessPath(parentChainPath, validateHasBeenSet);
        _constituentCommits.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

