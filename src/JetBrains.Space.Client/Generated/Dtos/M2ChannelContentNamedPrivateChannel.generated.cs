// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class M2ChannelContentNamedPrivateChannel
     : M2ChannelContactInfo, M2ChannelContentInfo, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "M2ChannelContentNamedPrivateChannel";
    
    public M2ChannelContentNamedPrivateChannel() { }
    
    public M2ChannelContentNamedPrivateChannel(string name, bool canHaveThreads, ChannelSpecificDefaults? notificationDefaults = null, PrivateFeedColor? color = null, string? icon = null)
    {
        Name = name;
        NotificationDefaults = notificationDefaults;
        CanHaveThreads = canHaveThreads;
        Color = color;
        Icon = icon;
    }
    
    private PropertyValue<string> _name = new PropertyValue<string>(nameof(M2ChannelContentNamedPrivateChannel), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<ChannelSpecificDefaults?> _notificationDefaults = new PropertyValue<ChannelSpecificDefaults?>(nameof(M2ChannelContentNamedPrivateChannel), nameof(NotificationDefaults), "notificationDefaults");
    
    [JsonPropertyName("notificationDefaults")]
    public ChannelSpecificDefaults? NotificationDefaults
    {
        get => _notificationDefaults.GetValue(InlineErrors);
        set => _notificationDefaults.SetValue(value);
    }

    private PropertyValue<bool> _canHaveThreads = new PropertyValue<bool>(nameof(M2ChannelContentNamedPrivateChannel), nameof(CanHaveThreads), "canHaveThreads");
    
    [Required]
    [JsonPropertyName("canHaveThreads")]
    public bool CanHaveThreads
    {
        get => _canHaveThreads.GetValue(InlineErrors);
        set => _canHaveThreads.SetValue(value);
    }

    private PropertyValue<PrivateFeedColor?> _color = new PropertyValue<PrivateFeedColor?>(nameof(M2ChannelContentNamedPrivateChannel), nameof(Color), "color");
    
    [JsonPropertyName("color")]
    public PrivateFeedColor? Color
    {
        get => _color.GetValue(InlineErrors);
        set => _color.SetValue(value);
    }

    private PropertyValue<string?> _icon = new PropertyValue<string?>(nameof(M2ChannelContentNamedPrivateChannel), nameof(Icon), "icon");
    
    [JsonPropertyName("icon")]
    public string? Icon
    {
        get => _icon.GetValue(InlineErrors);
        set => _icon.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _notificationDefaults.SetAccessPath(parentChainPath, validateHasBeenSet);
        _canHaveThreads.SetAccessPath(parentChainPath, validateHasBeenSet);
        _color.SetAccessPath(parentChainPath, validateHasBeenSet);
        _icon.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

