// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class FileContent
     : IPropagatePropertyAccessPath
{
    public FileContent() { }
    
    public FileContent(GitFileType type, List<CodeLine> lines, LineEnding? lineEnding = null, FileBOM? bom = null, List<CodeMDWidget>? widgets = null, List<CodeFold>? folds = null, List<CodeScopeRange>? scopes = null)
    {
        Type = type;
        LineEnding = lineEnding;
        Bom = bom;
        Lines = lines;
        Widgets = widgets;
        Folds = folds;
        Scopes = scopes;
    }
    
    private PropertyValue<GitFileType> _type = new PropertyValue<GitFileType>(nameof(FileContent), nameof(Type), "type");
    
    [Required]
    [JsonPropertyName("type")]
    public GitFileType Type
    {
        get => _type.GetValue(InlineErrors);
        set => _type.SetValue(value);
    }

    private PropertyValue<LineEnding?> _lineEnding = new PropertyValue<LineEnding?>(nameof(FileContent), nameof(LineEnding), "lineEnding");
    
    [JsonPropertyName("lineEnding")]
    public LineEnding? LineEnding
    {
        get => _lineEnding.GetValue(InlineErrors);
        set => _lineEnding.SetValue(value);
    }

    private PropertyValue<FileBOM?> _bom = new PropertyValue<FileBOM?>(nameof(FileContent), nameof(Bom), "bom");
    
    [JsonPropertyName("bom")]
    public FileBOM? Bom
    {
        get => _bom.GetValue(InlineErrors);
        set => _bom.SetValue(value);
    }

    private PropertyValue<List<CodeLine>> _lines = new PropertyValue<List<CodeLine>>(nameof(FileContent), nameof(Lines), "lines", new List<CodeLine>());
    
    [Required]
    [JsonPropertyName("lines")]
    public List<CodeLine> Lines
    {
        get => _lines.GetValue(InlineErrors);
        set => _lines.SetValue(value);
    }

    private PropertyValue<List<CodeMDWidget>?> _widgets = new PropertyValue<List<CodeMDWidget>?>(nameof(FileContent), nameof(Widgets), "widgets");
    
    [JsonPropertyName("widgets")]
    public List<CodeMDWidget>? Widgets
    {
        get => _widgets.GetValue(InlineErrors);
        set => _widgets.SetValue(value);
    }

    private PropertyValue<List<CodeFold>?> _folds = new PropertyValue<List<CodeFold>?>(nameof(FileContent), nameof(Folds), "folds");
    
    [JsonPropertyName("folds")]
    public List<CodeFold>? Folds
    {
        get => _folds.GetValue(InlineErrors);
        set => _folds.SetValue(value);
    }

    private PropertyValue<List<CodeScopeRange>?> _scopes = new PropertyValue<List<CodeScopeRange>?>(nameof(FileContent), nameof(Scopes), "scopes");
    
    [JsonPropertyName("scopes")]
    public List<CodeScopeRange>? Scopes
    {
        get => _scopes.GetValue(InlineErrors);
        set => _scopes.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _type.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lineEnding.SetAccessPath(parentChainPath, validateHasBeenSet);
        _bom.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lines.SetAccessPath(parentChainPath, validateHasBeenSet);
        _widgets.SetAccessPath(parentChainPath, validateHasBeenSet);
        _folds.SetAccessPath(parentChainPath, validateHasBeenSet);
        _scopes.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

