// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class TimeTrackingItem
     : IPropagatePropertyAccessPath
{
    public TimeTrackingItem() { }
    
    public TimeTrackingItem(string id, TDMemberProfile user, PRProject project, DateTime date, TimeSpan duration, TimeTrackingSubjectType subjectType, string subject, string? description = null)
    {
        Id = id;
        User = user;
        Project = project;
        Date = date;
        Duration = duration;
        Description = description;
        SubjectType = subjectType;
        Subject = subject;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(TimeTrackingItem), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<TDMemberProfile> _user = new PropertyValue<TDMemberProfile>(nameof(TimeTrackingItem), nameof(User), "user");
    
    [Required]
    [JsonPropertyName("user")]
    public TDMemberProfile User
    {
        get => _user.GetValue(InlineErrors);
        set => _user.SetValue(value);
    }

    private PropertyValue<PRProject> _project = new PropertyValue<PRProject>(nameof(TimeTrackingItem), nameof(Project), "project");
    
    [Required]
    [JsonPropertyName("project")]
    public PRProject Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<DateTime> _date = new PropertyValue<DateTime>(nameof(TimeTrackingItem), nameof(Date), "date");
    
    [Required]
    [JsonPropertyName("date")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime Date
    {
        get => _date.GetValue(InlineErrors);
        set => _date.SetValue(value);
    }

    private PropertyValue<TimeSpan> _duration = new PropertyValue<TimeSpan>(nameof(TimeTrackingItem), nameof(Duration), "duration");
    
    [Required]
    [JsonPropertyName("duration")]
    [JsonConverter(typeof(SpaceDurationConverter))]
    public TimeSpan Duration
    {
        get => _duration.GetValue(InlineErrors);
        set => _duration.SetValue(value);
    }

    private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(TimeTrackingItem), nameof(Description), "description");
    
    [JsonPropertyName("description")]
    public string? Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<TimeTrackingSubjectType> _subjectType = new PropertyValue<TimeTrackingSubjectType>(nameof(TimeTrackingItem), nameof(SubjectType), "subjectType");
    
    [Required]
    [JsonPropertyName("subjectType")]
    public TimeTrackingSubjectType SubjectType
    {
        get => _subjectType.GetValue(InlineErrors);
        set => _subjectType.SetValue(value);
    }

    private PropertyValue<string> _subject = new PropertyValue<string>(nameof(TimeTrackingItem), nameof(Subject), "subject");
    
    [Required]
    [JsonPropertyName("subject")]
    public string Subject
    {
        get => _subject.GetValue(InlineErrors);
        set => _subject.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _user.SetAccessPath(parentChainPath, validateHasBeenSet);
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _date.SetAccessPath(parentChainPath, validateHasBeenSet);
        _duration.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _subjectType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _subject.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

