// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class PollRecord
     : IPropagatePropertyAccessPath
{
    public PollRecord() { }
    
    public PollRecord(string id, TDMemberProfile owner, string question, bool meVote, int countPeople, bool anonymous, bool closed, bool extendable, bool multiChoice, bool ended, List<VoteGroup> votes, DateTime? expirationTime = null)
    {
        Id = id;
        Owner = owner;
        Question = question;
        IsMeVote = meVote;
        CountPeople = countPeople;
        IsAnonymous = anonymous;
        IsClosed = closed;
        IsExtendable = extendable;
        IsMultiChoice = multiChoice;
        IsEnded = ended;
        ExpirationTime = expirationTime;
        Votes = votes;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(PollRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<TDMemberProfile> _owner = new PropertyValue<TDMemberProfile>(nameof(PollRecord), nameof(Owner), "owner");
    
    [Required]
    [JsonPropertyName("owner")]
    public TDMemberProfile Owner
    {
        get => _owner.GetValue(InlineErrors);
        set => _owner.SetValue(value);
    }

    private PropertyValue<string> _question = new PropertyValue<string>(nameof(PollRecord), nameof(Question), "question");
    
    [Required]
    [JsonPropertyName("question")]
    public string Question
    {
        get => _question.GetValue(InlineErrors);
        set => _question.SetValue(value);
    }

    private PropertyValue<bool> _meVote = new PropertyValue<bool>(nameof(PollRecord), nameof(IsMeVote), "meVote");
    
    [Required]
    [JsonPropertyName("meVote")]
    public bool IsMeVote
    {
        get => _meVote.GetValue(InlineErrors);
        set => _meVote.SetValue(value);
    }

    private PropertyValue<int> _countPeople = new PropertyValue<int>(nameof(PollRecord), nameof(CountPeople), "countPeople");
    
    [Required]
    [JsonPropertyName("countPeople")]
    public int CountPeople
    {
        get => _countPeople.GetValue(InlineErrors);
        set => _countPeople.SetValue(value);
    }

    private PropertyValue<bool> _anonymous = new PropertyValue<bool>(nameof(PollRecord), nameof(IsAnonymous), "anonymous");
    
    [Required]
    [JsonPropertyName("anonymous")]
    public bool IsAnonymous
    {
        get => _anonymous.GetValue(InlineErrors);
        set => _anonymous.SetValue(value);
    }

    private PropertyValue<bool> _closed = new PropertyValue<bool>(nameof(PollRecord), nameof(IsClosed), "closed");
    
    [Required]
    [JsonPropertyName("closed")]
    public bool IsClosed
    {
        get => _closed.GetValue(InlineErrors);
        set => _closed.SetValue(value);
    }

    private PropertyValue<bool> _extendable = new PropertyValue<bool>(nameof(PollRecord), nameof(IsExtendable), "extendable");
    
    [Required]
    [JsonPropertyName("extendable")]
    public bool IsExtendable
    {
        get => _extendable.GetValue(InlineErrors);
        set => _extendable.SetValue(value);
    }

    private PropertyValue<bool> _multiChoice = new PropertyValue<bool>(nameof(PollRecord), nameof(IsMultiChoice), "multiChoice");
    
    [Required]
    [JsonPropertyName("multiChoice")]
    public bool IsMultiChoice
    {
        get => _multiChoice.GetValue(InlineErrors);
        set => _multiChoice.SetValue(value);
    }

    private PropertyValue<bool> _ended = new PropertyValue<bool>(nameof(PollRecord), nameof(IsEnded), "ended");
    
    [Required]
    [JsonPropertyName("ended")]
    public bool IsEnded
    {
        get => _ended.GetValue(InlineErrors);
        set => _ended.SetValue(value);
    }

    private PropertyValue<DateTime?> _expirationTime = new PropertyValue<DateTime?>(nameof(PollRecord), nameof(ExpirationTime), "expirationTime");
    
    [JsonPropertyName("expirationTime")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? ExpirationTime
    {
        get => _expirationTime.GetValue(InlineErrors);
        set => _expirationTime.SetValue(value);
    }

    private PropertyValue<List<VoteGroup>> _votes = new PropertyValue<List<VoteGroup>>(nameof(PollRecord), nameof(Votes), "votes", new List<VoteGroup>());
    
    [Required]
    [JsonPropertyName("votes")]
    public List<VoteGroup> Votes
    {
        get => _votes.GetValue(InlineErrors);
        set => _votes.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _owner.SetAccessPath(parentChainPath, validateHasBeenSet);
        _question.SetAccessPath(parentChainPath, validateHasBeenSet);
        _meVote.SetAccessPath(parentChainPath, validateHasBeenSet);
        _countPeople.SetAccessPath(parentChainPath, validateHasBeenSet);
        _anonymous.SetAccessPath(parentChainPath, validateHasBeenSet);
        _closed.SetAccessPath(parentChainPath, validateHasBeenSet);
        _extendable.SetAccessPath(parentChainPath, validateHasBeenSet);
        _multiChoice.SetAccessPath(parentChainPath, validateHasBeenSet);
        _ended.SetAccessPath(parentChainPath, validateHasBeenSet);
        _expirationTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _votes.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

