// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class StickerPackInfo
     : IPropagatePropertyAccessPath
{
    public StickerPackInfo() { }
    
    public StickerPackInfo(string id, string name, bool favoriteByDefault, bool archived, bool @private, List<Sticker> stickers, DateTime? addedAt = null)
    {
        Id = id;
        Name = name;
        IsFavoriteByDefault = favoriteByDefault;
        IsArchived = archived;
        IsPrivate = @private;
        AddedAt = addedAt;
        Stickers = stickers;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(StickerPackInfo), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(StickerPackInfo), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<bool> _favoriteByDefault = new PropertyValue<bool>(nameof(StickerPackInfo), nameof(IsFavoriteByDefault), "favoriteByDefault");
    
    [Required]
    [JsonPropertyName("favoriteByDefault")]
    public bool IsFavoriteByDefault
    {
        get => _favoriteByDefault.GetValue(InlineErrors);
        set => _favoriteByDefault.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(StickerPackInfo), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<bool> _private = new PropertyValue<bool>(nameof(StickerPackInfo), nameof(IsPrivate), "private");
    
    [Required]
    [JsonPropertyName("private")]
    public bool IsPrivate
    {
        get => _private.GetValue(InlineErrors);
        set => _private.SetValue(value);
    }

    private PropertyValue<DateTime?> _addedAt = new PropertyValue<DateTime?>(nameof(StickerPackInfo), nameof(AddedAt), "addedAt");
    
    [JsonPropertyName("addedAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? AddedAt
    {
        get => _addedAt.GetValue(InlineErrors);
        set => _addedAt.SetValue(value);
    }

    private PropertyValue<List<Sticker>> _stickers = new PropertyValue<List<Sticker>>(nameof(StickerPackInfo), nameof(Stickers), "stickers", new List<Sticker>());
    
    [Required]
    [JsonPropertyName("stickers")]
    public List<Sticker> Stickers
    {
        get => _stickers.GetValue(InlineErrors);
        set => _stickers.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _favoriteByDefault.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _private.SetAccessPath(parentChainPath, validateHasBeenSet);
        _addedAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _stickers.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

