// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitFile
     : IPropagatePropertyAccessPath
{
    public GitFile() { }
    
    public GitFile(string commit, string path, string blob, GitEntryType type, GitFileProperties? properties = null)
    {
        Commit = commit;
        Path = path;
        Blob = blob;
        Type = type;
        Properties = properties;
    }
    
    private PropertyValue<string> _commit = new PropertyValue<string>(nameof(GitFile), nameof(Commit), "commit");
    
    [Required]
    [JsonPropertyName("commit")]
    public string Commit
    {
        get => _commit.GetValue(InlineErrors);
        set => _commit.SetValue(value);
    }

    private PropertyValue<string> _path = new PropertyValue<string>(nameof(GitFile), nameof(Path), "path");
    
    [Required]
    [JsonPropertyName("path")]
    public string Path
    {
        get => _path.GetValue(InlineErrors);
        set => _path.SetValue(value);
    }

    private PropertyValue<string> _blob = new PropertyValue<string>(nameof(GitFile), nameof(Blob), "blob");
    
    [Required]
    [JsonPropertyName("blob")]
    public string Blob
    {
        get => _blob.GetValue(InlineErrors);
        set => _blob.SetValue(value);
    }

    private PropertyValue<GitEntryType> _type = new PropertyValue<GitEntryType>(nameof(GitFile), nameof(Type), "type");
    
    [Required]
    [JsonPropertyName("type")]
    public GitEntryType Type
    {
        get => _type.GetValue(InlineErrors);
        set => _type.SetValue(value);
    }

    private PropertyValue<GitFileProperties?> _properties = new PropertyValue<GitFileProperties?>(nameof(GitFile), nameof(Properties), "properties");
    
    [JsonPropertyName("properties")]
    public GitFileProperties? Properties
    {
        get => _properties.GetValue(InlineErrors);
        set => _properties.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _commit.SetAccessPath(parentChainPath, validateHasBeenSet);
        _path.SetAccessPath(parentChainPath, validateHasBeenSet);
        _blob.SetAccessPath(parentChainPath, validateHasBeenSet);
        _type.SetAccessPath(parentChainPath, validateHasBeenSet);
        _properties.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

