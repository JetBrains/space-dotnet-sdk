// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitRepositorySettingsMirrorSettings
     : IPropagatePropertyAccessPath
{
    public GitRepositorySettingsMirrorSettings() { }
    
    public GitRepositorySettingsMirrorSettings(string url, bool detachHEAD, bool fetchPeriodically, bool fetchBeforeGitCall, List<string>? refsSpec = null, string? username = null, string? password = null, bool? useKeyAuth = null, string? key = null, string? keyPassphrase = null, string? keyError = null, string? publicKey = null, List<string>? keyFingerprints = null, bool? allowAtomicPush = null)
    {
        Url = url;
        RefsSpec = refsSpec;
        IsDetachHEAD = detachHEAD;
        Username = username;
        Password = password;
        IsUseKeyAuth = useKeyAuth;
        Key = key;
        KeyPassphrase = keyPassphrase;
        KeyError = keyError;
        PublicKey = publicKey;
        KeyFingerprints = keyFingerprints;
        IsFetchPeriodically = fetchPeriodically;
        IsFetchBeforeGitCall = fetchBeforeGitCall;
        IsAllowAtomicPush = allowAtomicPush;
    }
    
    private PropertyValue<string> _url = new PropertyValue<string>(nameof(GitRepositorySettingsMirrorSettings), nameof(Url), "url");
    
    [Required]
    [JsonPropertyName("url")]
    public string Url
    {
        get => _url.GetValue(InlineErrors);
        set => _url.SetValue(value);
    }

    private PropertyValue<List<string>?> _refsSpec = new PropertyValue<List<string>?>(nameof(GitRepositorySettingsMirrorSettings), nameof(RefsSpec), "refsSpec");
    
    [JsonPropertyName("refsSpec")]
    public List<string>? RefsSpec
    {
        get => _refsSpec.GetValue(InlineErrors);
        set => _refsSpec.SetValue(value);
    }

    private PropertyValue<bool> _detachHEAD = new PropertyValue<bool>(nameof(GitRepositorySettingsMirrorSettings), nameof(IsDetachHEAD), "detachHEAD");
    
    [Required]
    [JsonPropertyName("detachHEAD")]
    public bool IsDetachHEAD
    {
        get => _detachHEAD.GetValue(InlineErrors);
        set => _detachHEAD.SetValue(value);
    }

    private PropertyValue<string?> _username = new PropertyValue<string?>(nameof(GitRepositorySettingsMirrorSettings), nameof(Username), "username");
    
    [JsonPropertyName("username")]
    public string? Username
    {
        get => _username.GetValue(InlineErrors);
        set => _username.SetValue(value);
    }

    private PropertyValue<string?> _password = new PropertyValue<string?>(nameof(GitRepositorySettingsMirrorSettings), nameof(Password), "password");
    
    [JsonPropertyName("password")]
    public string? Password
    {
        get => _password.GetValue(InlineErrors);
        set => _password.SetValue(value);
    }

    private PropertyValue<bool?> _useKeyAuth = new PropertyValue<bool?>(nameof(GitRepositorySettingsMirrorSettings), nameof(IsUseKeyAuth), "useKeyAuth");
    
    [JsonPropertyName("useKeyAuth")]
    public bool? IsUseKeyAuth
    {
        get => _useKeyAuth.GetValue(InlineErrors);
        set => _useKeyAuth.SetValue(value);
    }

    private PropertyValue<string?> _key = new PropertyValue<string?>(nameof(GitRepositorySettingsMirrorSettings), nameof(Key), "key");
    
    [JsonPropertyName("key")]
    public string? Key
    {
        get => _key.GetValue(InlineErrors);
        set => _key.SetValue(value);
    }

    private PropertyValue<string?> _keyPassphrase = new PropertyValue<string?>(nameof(GitRepositorySettingsMirrorSettings), nameof(KeyPassphrase), "keyPassphrase");
    
    [JsonPropertyName("keyPassphrase")]
    public string? KeyPassphrase
    {
        get => _keyPassphrase.GetValue(InlineErrors);
        set => _keyPassphrase.SetValue(value);
    }

    private PropertyValue<string?> _keyError = new PropertyValue<string?>(nameof(GitRepositorySettingsMirrorSettings), nameof(KeyError), "keyError");
    
    [JsonPropertyName("keyError")]
    public string? KeyError
    {
        get => _keyError.GetValue(InlineErrors);
        set => _keyError.SetValue(value);
    }

    private PropertyValue<string?> _publicKey = new PropertyValue<string?>(nameof(GitRepositorySettingsMirrorSettings), nameof(PublicKey), "publicKey");
    
    [JsonPropertyName("publicKey")]
    public string? PublicKey
    {
        get => _publicKey.GetValue(InlineErrors);
        set => _publicKey.SetValue(value);
    }

    private PropertyValue<List<string>?> _keyFingerprints = new PropertyValue<List<string>?>(nameof(GitRepositorySettingsMirrorSettings), nameof(KeyFingerprints), "keyFingerprints");
    
    [JsonPropertyName("keyFingerprints")]
    public List<string>? KeyFingerprints
    {
        get => _keyFingerprints.GetValue(InlineErrors);
        set => _keyFingerprints.SetValue(value);
    }

    private PropertyValue<bool> _fetchPeriodically = new PropertyValue<bool>(nameof(GitRepositorySettingsMirrorSettings), nameof(IsFetchPeriodically), "fetchPeriodically");
    
    [Required]
    [JsonPropertyName("fetchPeriodically")]
    public bool IsFetchPeriodically
    {
        get => _fetchPeriodically.GetValue(InlineErrors);
        set => _fetchPeriodically.SetValue(value);
    }

    private PropertyValue<bool> _fetchBeforeGitCall = new PropertyValue<bool>(nameof(GitRepositorySettingsMirrorSettings), nameof(IsFetchBeforeGitCall), "fetchBeforeGitCall");
    
    [Required]
    [JsonPropertyName("fetchBeforeGitCall")]
    public bool IsFetchBeforeGitCall
    {
        get => _fetchBeforeGitCall.GetValue(InlineErrors);
        set => _fetchBeforeGitCall.SetValue(value);
    }

    private PropertyValue<bool?> _allowAtomicPush = new PropertyValue<bool?>(nameof(GitRepositorySettingsMirrorSettings), nameof(IsAllowAtomicPush), "allowAtomicPush");
    
    [JsonPropertyName("allowAtomicPush")]
    public bool? IsAllowAtomicPush
    {
        get => _allowAtomicPush.GetValue(InlineErrors);
        set => _allowAtomicPush.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _url.SetAccessPath(parentChainPath, validateHasBeenSet);
        _refsSpec.SetAccessPath(parentChainPath, validateHasBeenSet);
        _detachHEAD.SetAccessPath(parentChainPath, validateHasBeenSet);
        _username.SetAccessPath(parentChainPath, validateHasBeenSet);
        _password.SetAccessPath(parentChainPath, validateHasBeenSet);
        _useKeyAuth.SetAccessPath(parentChainPath, validateHasBeenSet);
        _key.SetAccessPath(parentChainPath, validateHasBeenSet);
        _keyPassphrase.SetAccessPath(parentChainPath, validateHasBeenSet);
        _keyError.SetAccessPath(parentChainPath, validateHasBeenSet);
        _publicKey.SetAccessPath(parentChainPath, validateHasBeenSet);
        _keyFingerprints.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fetchPeriodically.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fetchBeforeGitCall.SetAccessPath(parentChainPath, validateHasBeenSet);
        _allowAtomicPush.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

