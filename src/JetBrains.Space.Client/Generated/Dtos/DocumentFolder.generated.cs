// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class DocumentFolder
         : IPropagatePropertyAccessPath
    {
        public DocumentFolder() { }
        
        public DocumentFolder(string id, bool archived, string containerLinkId, DocumentContainerInfo containerInfo, int subfoldersCount, int documentsCount, string name, string alias, DateTime created, DateTime updated, DocumentFolder? parent = null, CPrincipal? createdBy = null, CPrincipal? updatedBy = null)
        {
            Id = id;
            IsArchived = archived;
            ContainerLinkId = containerLinkId;
            ContainerInfo = containerInfo;
            Parent = parent;
            SubfoldersCount = subfoldersCount;
            DocumentsCount = documentsCount;
            Name = name;
            Alias = alias;
            Created = created;
            CreatedBy = createdBy;
            Updated = updated;
            UpdatedBy = updatedBy;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(DocumentFolder), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get => _id.GetValue();
            set => _id.SetValue(value);
        }
    
        private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(DocumentFolder), nameof(IsArchived));
        
        [Required]
        [JsonPropertyName("archived")]
        public bool IsArchived
        {
            get => _archived.GetValue();
            set => _archived.SetValue(value);
        }
    
        private PropertyValue<string> _containerLinkId = new PropertyValue<string>(nameof(DocumentFolder), nameof(ContainerLinkId));
        
        [Required]
        [JsonPropertyName("containerLinkId")]
        public string ContainerLinkId
        {
            get => _containerLinkId.GetValue();
            set => _containerLinkId.SetValue(value);
        }
    
        private PropertyValue<DocumentContainerInfo> _containerInfo = new PropertyValue<DocumentContainerInfo>(nameof(DocumentFolder), nameof(ContainerInfo));
        
        [Required]
        [JsonPropertyName("containerInfo")]
        public DocumentContainerInfo ContainerInfo
        {
            get => _containerInfo.GetValue();
            set => _containerInfo.SetValue(value);
        }
    
        private PropertyValue<DocumentFolder?> _parent = new PropertyValue<DocumentFolder?>(nameof(DocumentFolder), nameof(Parent));
        
        [JsonPropertyName("parent")]
        public DocumentFolder? Parent
        {
            get => _parent.GetValue();
            set => _parent.SetValue(value);
        }
    
        private PropertyValue<int> _subfoldersCount = new PropertyValue<int>(nameof(DocumentFolder), nameof(SubfoldersCount));
        
        [Required]
        [JsonPropertyName("subfoldersCount")]
        public int SubfoldersCount
        {
            get => _subfoldersCount.GetValue();
            set => _subfoldersCount.SetValue(value);
        }
    
        private PropertyValue<int> _documentsCount = new PropertyValue<int>(nameof(DocumentFolder), nameof(DocumentsCount));
        
        [Required]
        [JsonPropertyName("documentsCount")]
        public int DocumentsCount
        {
            get => _documentsCount.GetValue();
            set => _documentsCount.SetValue(value);
        }
    
        private PropertyValue<string> _name = new PropertyValue<string>(nameof(DocumentFolder), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public string Name
        {
            get => _name.GetValue();
            set => _name.SetValue(value);
        }
    
        private PropertyValue<string> _alias = new PropertyValue<string>(nameof(DocumentFolder), nameof(Alias));
        
        [Required]
        [JsonPropertyName("alias")]
        public string Alias
        {
            get => _alias.GetValue();
            set => _alias.SetValue(value);
        }
    
        private PropertyValue<DateTime> _created = new PropertyValue<DateTime>(nameof(DocumentFolder), nameof(Created));
        
        [Required]
        [JsonPropertyName("created")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime Created
        {
            get => _created.GetValue();
            set => _created.SetValue(value);
        }
    
        private PropertyValue<CPrincipal?> _createdBy = new PropertyValue<CPrincipal?>(nameof(DocumentFolder), nameof(CreatedBy));
        
        [JsonPropertyName("createdBy")]
        public CPrincipal? CreatedBy
        {
            get => _createdBy.GetValue();
            set => _createdBy.SetValue(value);
        }
    
        private PropertyValue<DateTime> _updated = new PropertyValue<DateTime>(nameof(DocumentFolder), nameof(Updated));
        
        [Required]
        [JsonPropertyName("updated")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime Updated
        {
            get => _updated.GetValue();
            set => _updated.SetValue(value);
        }
    
        private PropertyValue<CPrincipal?> _updatedBy = new PropertyValue<CPrincipal?>(nameof(DocumentFolder), nameof(UpdatedBy));
        
        [JsonPropertyName("updatedBy")]
        public CPrincipal? UpdatedBy
        {
            get => _updatedBy.GetValue();
            set => _updatedBy.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _archived.SetAccessPath(path, validateHasBeenSet);
            _containerLinkId.SetAccessPath(path, validateHasBeenSet);
            _containerInfo.SetAccessPath(path, validateHasBeenSet);
            _parent.SetAccessPath(path, validateHasBeenSet);
            _subfoldersCount.SetAccessPath(path, validateHasBeenSet);
            _documentsCount.SetAccessPath(path, validateHasBeenSet);
            _name.SetAccessPath(path, validateHasBeenSet);
            _alias.SetAccessPath(path, validateHasBeenSet);
            _created.SetAccessPath(path, validateHasBeenSet);
            _createdBy.SetAccessPath(path, validateHasBeenSet);
            _updated.SetAccessPath(path, validateHasBeenSet);
            _updatedBy.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
