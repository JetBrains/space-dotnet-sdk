// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class NonWorkingDays
     : IPropagatePropertyAccessPath
{
    public NonWorkingDays() { }
    
    public NonWorkingDays(DateTime since, DateTime till, bool startsEarlier, bool endsLater)
    {
        Since = since;
        Till = till;
        IsStartsEarlier = startsEarlier;
        IsEndsLater = endsLater;
    }
    
    private PropertyValue<DateTime> _since = new PropertyValue<DateTime>(nameof(NonWorkingDays), nameof(Since), "since");
    
    [Required]
    [JsonPropertyName("since")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime Since
    {
        get => _since.GetValue(InlineErrors);
        set => _since.SetValue(value);
    }

    private PropertyValue<DateTime> _till = new PropertyValue<DateTime>(nameof(NonWorkingDays), nameof(Till), "till");
    
    [Required]
    [JsonPropertyName("till")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime Till
    {
        get => _till.GetValue(InlineErrors);
        set => _till.SetValue(value);
    }

    private PropertyValue<bool> _startsEarlier = new PropertyValue<bool>(nameof(NonWorkingDays), nameof(IsStartsEarlier), "startsEarlier");
    
    [Required]
    [JsonPropertyName("startsEarlier")]
    public bool IsStartsEarlier
    {
        get => _startsEarlier.GetValue(InlineErrors);
        set => _startsEarlier.SetValue(value);
    }

    private PropertyValue<bool> _endsLater = new PropertyValue<bool>(nameof(NonWorkingDays), nameof(IsEndsLater), "endsLater");
    
    [Required]
    [JsonPropertyName("endsLater")]
    public bool IsEndsLater
    {
        get => _endsLater.GetValue(InlineErrors);
        set => _endsLater.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _since.SetAccessPath(parentChainPath, validateHasBeenSet);
        _till.SetAccessPath(parentChainPath, validateHasBeenSet);
        _startsEarlier.SetAccessPath(parentChainPath, validateHasBeenSet);
        _endsLater.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

