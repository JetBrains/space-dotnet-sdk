// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class AiAgentTask
     : IPropagatePropertyAccessPath
{
    public AiAgentTask() { }
    
    public AiAgentTask(string id, AiAgentType agentType, CPrincipal createdBy, DateTime createdAt, DateTime updatedAt, AiAgentTaskStatus status, string? prompt = null, string? title = null, MergeRequestRecord? mergeRequest = null, string? executionPlan = null, string? settings = null, string? previewEnvId = null)
    {
        Id = id;
        AgentType = agentType;
        Prompt = prompt;
        Title = title;
        CreatedBy = createdBy;
        CreatedAt = createdAt;
        UpdatedAt = updatedAt;
        Status = status;
        MergeRequest = mergeRequest;
        ExecutionPlan = executionPlan;
        Settings = settings;
        PreviewEnvId = previewEnvId;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(AiAgentTask), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<AiAgentType> _agentType = new PropertyValue<AiAgentType>(nameof(AiAgentTask), nameof(AgentType), "agentType");
    
    [Required]
    [JsonPropertyName("agentType")]
    public AiAgentType AgentType
    {
        get => _agentType.GetValue(InlineErrors);
        set => _agentType.SetValue(value);
    }

    private PropertyValue<string?> _prompt = new PropertyValue<string?>(nameof(AiAgentTask), nameof(Prompt), "prompt");
    
    [JsonPropertyName("prompt")]
    public string? Prompt
    {
        get => _prompt.GetValue(InlineErrors);
        set => _prompt.SetValue(value);
    }

    private PropertyValue<string?> _title = new PropertyValue<string?>(nameof(AiAgentTask), nameof(Title), "title");
    
    [JsonPropertyName("title")]
    public string? Title
    {
        get => _title.GetValue(InlineErrors);
        set => _title.SetValue(value);
    }

    private PropertyValue<CPrincipal> _createdBy = new PropertyValue<CPrincipal>(nameof(AiAgentTask), nameof(CreatedBy), "createdBy");
    
    [Required]
    [JsonPropertyName("createdBy")]
    public CPrincipal CreatedBy
    {
        get => _createdBy.GetValue(InlineErrors);
        set => _createdBy.SetValue(value);
    }

    private PropertyValue<DateTime> _createdAt = new PropertyValue<DateTime>(nameof(AiAgentTask), nameof(CreatedAt), "createdAt");
    
    [Required]
    [JsonPropertyName("createdAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime CreatedAt
    {
        get => _createdAt.GetValue(InlineErrors);
        set => _createdAt.SetValue(value);
    }

    private PropertyValue<DateTime> _updatedAt = new PropertyValue<DateTime>(nameof(AiAgentTask), nameof(UpdatedAt), "updatedAt");
    
    [Required]
    [JsonPropertyName("updatedAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime UpdatedAt
    {
        get => _updatedAt.GetValue(InlineErrors);
        set => _updatedAt.SetValue(value);
    }

    private PropertyValue<AiAgentTaskStatus> _status = new PropertyValue<AiAgentTaskStatus>(nameof(AiAgentTask), nameof(Status), "status");
    
    [Required]
    [JsonPropertyName("status")]
    public AiAgentTaskStatus Status
    {
        get => _status.GetValue(InlineErrors);
        set => _status.SetValue(value);
    }

    private PropertyValue<MergeRequestRecord?> _mergeRequest = new PropertyValue<MergeRequestRecord?>(nameof(AiAgentTask), nameof(MergeRequest), "mergeRequest");
    
    [JsonPropertyName("mergeRequest")]
    public MergeRequestRecord? MergeRequest
    {
        get => _mergeRequest.GetValue(InlineErrors);
        set => _mergeRequest.SetValue(value);
    }

    private PropertyValue<string?> _executionPlan = new PropertyValue<string?>(nameof(AiAgentTask), nameof(ExecutionPlan), "executionPlan");
    
    [JsonPropertyName("executionPlan")]
    public string? ExecutionPlan
    {
        get => _executionPlan.GetValue(InlineErrors);
        set => _executionPlan.SetValue(value);
    }

    private PropertyValue<string?> _settings = new PropertyValue<string?>(nameof(AiAgentTask), nameof(Settings), "settings");
    
    [JsonPropertyName("settings")]
    public string? Settings
    {
        get => _settings.GetValue(InlineErrors);
        set => _settings.SetValue(value);
    }

    private PropertyValue<string?> _previewEnvId = new PropertyValue<string?>(nameof(AiAgentTask), nameof(PreviewEnvId), "previewEnvId");
    
    [JsonPropertyName("previewEnvId")]
    public string? PreviewEnvId
    {
        get => _previewEnvId.GetValue(InlineErrors);
        set => _previewEnvId.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _agentType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _prompt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _title.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _updatedAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _status.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mergeRequest.SetAccessPath(parentChainPath, validateHasBeenSet);
        _executionPlan.SetAccessPath(parentChainPath, validateHasBeenSet);
        _settings.SetAccessPath(parentChainPath, validateHasBeenSet);
        _previewEnvId.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

