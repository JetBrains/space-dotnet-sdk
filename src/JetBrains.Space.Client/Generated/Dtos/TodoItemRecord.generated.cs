// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class TodoItemRecord
     : IPropagatePropertyAccessPath
{
    public TodoItemRecord() { }
    
    public TodoItemRecord(string id, bool archived, DateTime created, DateTime updated, TodoItemContent content, string _status, DateTime? dueDate = null, DateTime? dueTime = null, bool? notificationRequired = null)
    {
        Id = id;
        IsArchived = archived;
        Created = created;
        Updated = updated;
        Content = content;
        Status = _status;
        DueDate = dueDate;
        DueTime = dueTime;
        IsNotificationRequired = notificationRequired;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(TodoItemRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(TodoItemRecord), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<DateTime> _created = new PropertyValue<DateTime>(nameof(TodoItemRecord), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<DateTime> _updated = new PropertyValue<DateTime>(nameof(TodoItemRecord), nameof(Updated), "updated");
    
    [Required]
    [JsonPropertyName("updated")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Updated
    {
        get => _updated.GetValue(InlineErrors);
        set => _updated.SetValue(value);
    }

    private PropertyValue<TodoItemContent> _content = new PropertyValue<TodoItemContent>(nameof(TodoItemRecord), nameof(Content), "content");
    
    [Required]
    [JsonPropertyName("content")]
    public TodoItemContent Content
    {
        get => _content.GetValue(InlineErrors);
        set => _content.SetValue(value);
    }

    private PropertyValue<string> __status = new PropertyValue<string>(nameof(TodoItemRecord), nameof(Status), "_status");
    
    [Required]
    [JsonPropertyName("_status")]
    public string Status
    {
        get => __status.GetValue(InlineErrors);
        set => __status.SetValue(value);
    }

    private PropertyValue<DateTime?> _dueDate = new PropertyValue<DateTime?>(nameof(TodoItemRecord), nameof(DueDate), "dueDate");
    
    [JsonPropertyName("dueDate")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? DueDate
    {
        get => _dueDate.GetValue(InlineErrors);
        set => _dueDate.SetValue(value);
    }

    private PropertyValue<DateTime?> _dueTime = new PropertyValue<DateTime?>(nameof(TodoItemRecord), nameof(DueTime), "dueTime");
    
    [JsonPropertyName("dueTime")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? DueTime
    {
        get => _dueTime.GetValue(InlineErrors);
        set => _dueTime.SetValue(value);
    }

    private PropertyValue<bool?> _notificationRequired = new PropertyValue<bool?>(nameof(TodoItemRecord), nameof(IsNotificationRequired), "notificationRequired");
    
    [JsonPropertyName("notificationRequired")]
    public bool? IsNotificationRequired
    {
        get => _notificationRequired.GetValue(InlineErrors);
        set => _notificationRequired.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _updated.SetAccessPath(parentChainPath, validateHasBeenSet);
        _content.SetAccessPath(parentChainPath, validateHasBeenSet);
        __status.SetAccessPath(parentChainPath, validateHasBeenSet);
        _dueDate.SetAccessPath(parentChainPath, validateHasBeenSet);
        _dueTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _notificationRequired.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

