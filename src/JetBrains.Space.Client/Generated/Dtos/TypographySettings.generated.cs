// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class TypographySettings
     : IPropagatePropertyAccessPath
{
    public TypographySettings() { }
    
    public TypographySettings(bool? fontLigaturesInRegularText = null, bool? fontLigaturesInCodeSnippets = null, bool? limitLineLengthInChatMessages = null)
    {
        IsFontLigaturesInRegularText = fontLigaturesInRegularText;
        IsFontLigaturesInCodeSnippets = fontLigaturesInCodeSnippets;
        IsLimitLineLengthInChatMessages = limitLineLengthInChatMessages;
    }
    
    private PropertyValue<bool?> _fontLigaturesInRegularText = new PropertyValue<bool?>(nameof(TypographySettings), nameof(IsFontLigaturesInRegularText), "fontLigaturesInRegularText");
    
    [JsonPropertyName("fontLigaturesInRegularText")]
    public bool? IsFontLigaturesInRegularText
    {
        get => _fontLigaturesInRegularText.GetValue(InlineErrors);
        set => _fontLigaturesInRegularText.SetValue(value);
    }

    private PropertyValue<bool?> _fontLigaturesInCodeSnippets = new PropertyValue<bool?>(nameof(TypographySettings), nameof(IsFontLigaturesInCodeSnippets), "fontLigaturesInCodeSnippets");
    
    [JsonPropertyName("fontLigaturesInCodeSnippets")]
    public bool? IsFontLigaturesInCodeSnippets
    {
        get => _fontLigaturesInCodeSnippets.GetValue(InlineErrors);
        set => _fontLigaturesInCodeSnippets.SetValue(value);
    }

    private PropertyValue<bool?> _limitLineLengthInChatMessages = new PropertyValue<bool?>(nameof(TypographySettings), nameof(IsLimitLineLengthInChatMessages), "limitLineLengthInChatMessages");
    
    [JsonPropertyName("limitLineLengthInChatMessages")]
    public bool? IsLimitLineLengthInChatMessages
    {
        get => _limitLineLengthInChatMessages.GetValue(InlineErrors);
        set => _limitLineLengthInChatMessages.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _fontLigaturesInRegularText.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fontLigaturesInCodeSnippets.SetAccessPath(parentChainPath, validateHasBeenSet);
        _limitLineLengthInChatMessages.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

