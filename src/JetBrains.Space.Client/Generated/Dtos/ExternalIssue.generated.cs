// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ExternalIssue
     : IPropagatePropertyAccessPath
{
    public ExternalIssue() { }
    
    public ExternalIssue(string id, bool archived, string issueId, string issuePrefix, string externalTrackerProject, string url, IssueStatus? status = null, string? summary = null, List<ExternalIssueField>? fields = null)
    {
        Id = id;
        IsArchived = archived;
        IssueId = issueId;
        IssuePrefix = issuePrefix;
        ExternalTrackerProject = externalTrackerProject;
        Url = url;
        Status = status;
        Summary = summary;
        Fields = fields;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(ExternalIssue), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(ExternalIssue), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<string> _issueId = new PropertyValue<string>(nameof(ExternalIssue), nameof(IssueId), "issueId");
    
    [Required]
    [JsonPropertyName("issueId")]
    public string IssueId
    {
        get => _issueId.GetValue(InlineErrors);
        set => _issueId.SetValue(value);
    }

    private PropertyValue<string> _issuePrefix = new PropertyValue<string>(nameof(ExternalIssue), nameof(IssuePrefix), "issuePrefix");
    
    [Required]
    [JsonPropertyName("issuePrefix")]
    public string IssuePrefix
    {
        get => _issuePrefix.GetValue(InlineErrors);
        set => _issuePrefix.SetValue(value);
    }

    private PropertyValue<string> _externalTrackerProject = new PropertyValue<string>(nameof(ExternalIssue), nameof(ExternalTrackerProject), "externalTrackerProject");
    
    [Required]
    [JsonPropertyName("externalTrackerProject")]
    public string ExternalTrackerProject
    {
        get => _externalTrackerProject.GetValue(InlineErrors);
        set => _externalTrackerProject.SetValue(value);
    }

    private PropertyValue<string> _url = new PropertyValue<string>(nameof(ExternalIssue), nameof(Url), "url");
    
    [Required]
    [JsonPropertyName("url")]
    public string Url
    {
        get => _url.GetValue(InlineErrors);
        set => _url.SetValue(value);
    }

    private PropertyValue<IssueStatus?> _status = new PropertyValue<IssueStatus?>(nameof(ExternalIssue), nameof(Status), "status");
    
    [JsonPropertyName("status")]
    public IssueStatus? Status
    {
        get => _status.GetValue(InlineErrors);
        set => _status.SetValue(value);
    }

    private PropertyValue<string?> _summary = new PropertyValue<string?>(nameof(ExternalIssue), nameof(Summary), "summary");
    
    [JsonPropertyName("summary")]
    public string? Summary
    {
        get => _summary.GetValue(InlineErrors);
        set => _summary.SetValue(value);
    }

    private PropertyValue<List<ExternalIssueField>?> _fields = new PropertyValue<List<ExternalIssueField>?>(nameof(ExternalIssue), nameof(Fields), "fields");
    
    [JsonPropertyName("fields")]
    public List<ExternalIssueField>? Fields
    {
        get => _fields.GetValue(InlineErrors);
        set => _fields.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issueId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issuePrefix.SetAccessPath(parentChainPath, validateHasBeenSet);
        _externalTrackerProject.SetAccessPath(parentChainPath, validateHasBeenSet);
        _url.SetAccessPath(parentChainPath, validateHasBeenSet);
        _status.SetAccessPath(parentChainPath, validateHasBeenSet);
        _summary.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fields.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

