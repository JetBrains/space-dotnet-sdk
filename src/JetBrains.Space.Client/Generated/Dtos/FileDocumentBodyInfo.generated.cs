// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class FileDocumentBodyInfo
     : DocumentBodyInfo, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "FileDocumentBodyInfo";
    
    public FileDocumentBodyInfo() { }
    
    public FileDocumentBodyInfo(FileDocumentRecord? fileDocument = null, string? fileDocumentId = null, string? contentType = null, long? fileSize = null)
    {
        FileDocument = fileDocument;
        FileDocumentId = fileDocumentId;
        ContentType = contentType;
        FileSize = fileSize;
    }
    
    private PropertyValue<FileDocumentRecord?> _fileDocument = new PropertyValue<FileDocumentRecord?>(nameof(FileDocumentBodyInfo), nameof(FileDocument), "fileDocument");
    
    [JsonPropertyName("fileDocument")]
    public FileDocumentRecord? FileDocument
    {
        get => _fileDocument.GetValue(InlineErrors);
        set => _fileDocument.SetValue(value);
    }

    private PropertyValue<string?> _fileDocumentId = new PropertyValue<string?>(nameof(FileDocumentBodyInfo), nameof(FileDocumentId), "fileDocumentId");
    
    [JsonPropertyName("fileDocumentId")]
    public string? FileDocumentId
    {
        get => _fileDocumentId.GetValue(InlineErrors);
        set => _fileDocumentId.SetValue(value);
    }

    private PropertyValue<string?> _contentType = new PropertyValue<string?>(nameof(FileDocumentBodyInfo), nameof(ContentType), "contentType");
    
    [JsonPropertyName("contentType")]
    public string? ContentType
    {
        get => _contentType.GetValue(InlineErrors);
        set => _contentType.SetValue(value);
    }

    private PropertyValue<long?> _fileSize = new PropertyValue<long?>(nameof(FileDocumentBodyInfo), nameof(FileSize), "fileSize");
    
    [JsonPropertyName("fileSize")]
    public long? FileSize
    {
        get => _fileSize.GetValue(InlineErrors);
        set => _fileSize.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _fileDocument.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fileDocumentId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _contentType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fileSize.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

