// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class RepositoryCommitRecord
     : IPropagatePropertyAccessPath
{
    public RepositoryCommitRecord() { }
    
    public RepositoryCommitRecord(string id, string repositoryId, string repositoryName, string revision, DateTime date, string? message = null, string? authorName = null, string? authorEmail = null, string? committerName = null, string? committerEmail = null, TDMemberProfile? authorProfile = null)
    {
        Id = id;
        RepositoryId = repositoryId;
        RepositoryName = repositoryName;
        Revision = revision;
        Message = message;
        Date = date;
        AuthorName = authorName;
        AuthorEmail = authorEmail;
        CommitterName = committerName;
        CommitterEmail = committerEmail;
        AuthorProfile = authorProfile;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(RepositoryCommitRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _repositoryId = new PropertyValue<string>(nameof(RepositoryCommitRecord), nameof(RepositoryId), "repositoryId");
    
    [Required]
    [JsonPropertyName("repositoryId")]
    public string RepositoryId
    {
        get => _repositoryId.GetValue(InlineErrors);
        set => _repositoryId.SetValue(value);
    }

    private PropertyValue<string> _repositoryName = new PropertyValue<string>(nameof(RepositoryCommitRecord), nameof(RepositoryName), "repositoryName");
    
    [Required]
    [JsonPropertyName("repositoryName")]
    public string RepositoryName
    {
        get => _repositoryName.GetValue(InlineErrors);
        set => _repositoryName.SetValue(value);
    }

    private PropertyValue<string> _revision = new PropertyValue<string>(nameof(RepositoryCommitRecord), nameof(Revision), "revision");
    
    [Required]
    [JsonPropertyName("revision")]
    public string Revision
    {
        get => _revision.GetValue(InlineErrors);
        set => _revision.SetValue(value);
    }

    private PropertyValue<string?> _message = new PropertyValue<string?>(nameof(RepositoryCommitRecord), nameof(Message), "message");
    
    [JsonPropertyName("message")]
    public string? Message
    {
        get => _message.GetValue(InlineErrors);
        set => _message.SetValue(value);
    }

    private PropertyValue<DateTime> _date = new PropertyValue<DateTime>(nameof(RepositoryCommitRecord), nameof(Date), "date");
    
    [Required]
    [JsonPropertyName("date")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Date
    {
        get => _date.GetValue(InlineErrors);
        set => _date.SetValue(value);
    }

    private PropertyValue<string?> _authorName = new PropertyValue<string?>(nameof(RepositoryCommitRecord), nameof(AuthorName), "authorName");
    
    [JsonPropertyName("authorName")]
    public string? AuthorName
    {
        get => _authorName.GetValue(InlineErrors);
        set => _authorName.SetValue(value);
    }

    private PropertyValue<string?> _authorEmail = new PropertyValue<string?>(nameof(RepositoryCommitRecord), nameof(AuthorEmail), "authorEmail");
    
    [JsonPropertyName("authorEmail")]
    public string? AuthorEmail
    {
        get => _authorEmail.GetValue(InlineErrors);
        set => _authorEmail.SetValue(value);
    }

    private PropertyValue<string?> _committerName = new PropertyValue<string?>(nameof(RepositoryCommitRecord), nameof(CommitterName), "committerName");
    
    [JsonPropertyName("committerName")]
    public string? CommitterName
    {
        get => _committerName.GetValue(InlineErrors);
        set => _committerName.SetValue(value);
    }

    private PropertyValue<string?> _committerEmail = new PropertyValue<string?>(nameof(RepositoryCommitRecord), nameof(CommitterEmail), "committerEmail");
    
    [JsonPropertyName("committerEmail")]
    public string? CommitterEmail
    {
        get => _committerEmail.GetValue(InlineErrors);
        set => _committerEmail.SetValue(value);
    }

    private PropertyValue<TDMemberProfile?> _authorProfile = new PropertyValue<TDMemberProfile?>(nameof(RepositoryCommitRecord), nameof(AuthorProfile), "authorProfile");
    
    [JsonPropertyName("authorProfile")]
    public TDMemberProfile? AuthorProfile
    {
        get => _authorProfile.GetValue(InlineErrors);
        set => _authorProfile.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositoryId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositoryName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _revision.SetAccessPath(parentChainPath, validateHasBeenSet);
        _message.SetAccessPath(parentChainPath, validateHasBeenSet);
        _date.SetAccessPath(parentChainPath, validateHasBeenSet);
        _authorName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _authorEmail.SetAccessPath(parentChainPath, validateHasBeenSet);
        _committerName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _committerEmail.SetAccessPath(parentChainPath, validateHasBeenSet);
        _authorProfile.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

