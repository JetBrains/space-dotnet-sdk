// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ContainerManifest
     : IPropagatePropertyAccessPath
{
    public ContainerManifest() { }
    
    public ContainerManifest(string name, string digest, List<string> tags, long created, int schemaVersion, string mediaType, string manifestType, long totalSize, ContainerImage? image = null, ContainerHelmChart? chart = null)
    {
        Name = name;
        Digest = digest;
        Tags = tags;
        Created = created;
        SchemaVersion = schemaVersion;
        MediaType = mediaType;
        ManifestType = manifestType;
        TotalSize = totalSize;
        Image = image;
        Chart = chart;
    }
    
    private PropertyValue<string> _name = new PropertyValue<string>(nameof(ContainerManifest), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string> _digest = new PropertyValue<string>(nameof(ContainerManifest), nameof(Digest), "digest");
    
    [Required]
    [JsonPropertyName("digest")]
    public string Digest
    {
        get => _digest.GetValue(InlineErrors);
        set => _digest.SetValue(value);
    }

    private PropertyValue<List<string>> _tags = new PropertyValue<List<string>>(nameof(ContainerManifest), nameof(Tags), "tags", new List<string>());
    
    [Required]
    [JsonPropertyName("tags")]
    public List<string> Tags
    {
        get => _tags.GetValue(InlineErrors);
        set => _tags.SetValue(value);
    }

    private PropertyValue<long> _created = new PropertyValue<long>(nameof(ContainerManifest), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    public long Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<int> _schemaVersion = new PropertyValue<int>(nameof(ContainerManifest), nameof(SchemaVersion), "schemaVersion");
    
    [Required]
    [JsonPropertyName("schemaVersion")]
    public int SchemaVersion
    {
        get => _schemaVersion.GetValue(InlineErrors);
        set => _schemaVersion.SetValue(value);
    }

    private PropertyValue<string> _mediaType = new PropertyValue<string>(nameof(ContainerManifest), nameof(MediaType), "mediaType");
    
    [Required]
    [JsonPropertyName("mediaType")]
    public string MediaType
    {
        get => _mediaType.GetValue(InlineErrors);
        set => _mediaType.SetValue(value);
    }

    private PropertyValue<string> _manifestType = new PropertyValue<string>(nameof(ContainerManifest), nameof(ManifestType), "manifestType");
    
    [Required]
    [JsonPropertyName("manifestType")]
    public string ManifestType
    {
        get => _manifestType.GetValue(InlineErrors);
        set => _manifestType.SetValue(value);
    }

    private PropertyValue<long> _totalSize = new PropertyValue<long>(nameof(ContainerManifest), nameof(TotalSize), "totalSize");
    
    [Required]
    [JsonPropertyName("totalSize")]
    public long TotalSize
    {
        get => _totalSize.GetValue(InlineErrors);
        set => _totalSize.SetValue(value);
    }

    private PropertyValue<ContainerImage?> _image = new PropertyValue<ContainerImage?>(nameof(ContainerManifest), nameof(Image), "image");
    
    [JsonPropertyName("image")]
    public ContainerImage? Image
    {
        get => _image.GetValue(InlineErrors);
        set => _image.SetValue(value);
    }

    private PropertyValue<ContainerHelmChart?> _chart = new PropertyValue<ContainerHelmChart?>(nameof(ContainerManifest), nameof(Chart), "chart");
    
    [JsonPropertyName("chart")]
    public ContainerHelmChart? Chart
    {
        get => _chart.GetValue(InlineErrors);
        set => _chart.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _digest.SetAccessPath(parentChainPath, validateHasBeenSet);
        _tags.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _schemaVersion.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mediaType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _manifestType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _totalSize.SetAccessPath(parentChainPath, validateHasBeenSet);
        _image.SetAccessPath(parentChainPath, validateHasBeenSet);
        _chart.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

