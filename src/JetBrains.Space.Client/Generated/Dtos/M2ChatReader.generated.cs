// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Client.Internal;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class M2ChatReader
         : IPropagatePropertyAccessPath
    {
        public M2ChatReader() { }
        
        public M2ChatReader(string id, int unreadCounter, M2ChannelContact contact, int totalMessages, List<TDMemberProfile> authors, bool archived, bool @goto, DateTime? readTime = null, bool? hasUnread = null, MessageInfo? lastMessage = null, bool? pinned = null, bool? hidden = null, string? pinnedPrevChannelId = null, DateTime? subscribedSince = null, bool? subscribed = null, string? parentChannelId = null)
        {
            Id = id;
            UnreadCounter = unreadCounter;
            ReadTime = readTime;
            IsHasUnread = hasUnread;
            Contact = contact;
            LastMessage = lastMessage;
            TotalMessages = totalMessages;
            Authors = authors;
            IsArchived = archived;
            IsGoto = @goto;
            IsPinned = pinned;
            IsHidden = hidden;
            PinnedPrevChannelId = pinnedPrevChannelId;
            SubscribedSince = subscribedSince;
            IsSubscribed = subscribed;
            ParentChannelId = parentChannelId;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(M2ChatReader), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get => _id.GetValue();
            set => _id.SetValue(value);
        }
    
        private PropertyValue<int> _unreadCounter = new PropertyValue<int>(nameof(M2ChatReader), nameof(UnreadCounter));
        
        [Required]
        [JsonPropertyName("unreadCounter")]
        public int UnreadCounter
        {
            get => _unreadCounter.GetValue();
            set => _unreadCounter.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _readTime = new PropertyValue<DateTime?>(nameof(M2ChatReader), nameof(ReadTime));
        
        [JsonPropertyName("readTime")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime? ReadTime
        {
            get => _readTime.GetValue();
            set => _readTime.SetValue(value);
        }
    
        private PropertyValue<bool?> _hasUnread = new PropertyValue<bool?>(nameof(M2ChatReader), nameof(IsHasUnread));
        
        [JsonPropertyName("hasUnread")]
        public bool? IsHasUnread
        {
            get => _hasUnread.GetValue();
            set => _hasUnread.SetValue(value);
        }
    
        private PropertyValue<M2ChannelContact> _contact = new PropertyValue<M2ChannelContact>(nameof(M2ChatReader), nameof(Contact));
        
        [Required]
        [JsonPropertyName("contact")]
        public M2ChannelContact Contact
        {
            get => _contact.GetValue();
            set => _contact.SetValue(value);
        }
    
        private PropertyValue<MessageInfo?> _lastMessage = new PropertyValue<MessageInfo?>(nameof(M2ChatReader), nameof(LastMessage));
        
        [JsonPropertyName("lastMessage")]
        public MessageInfo? LastMessage
        {
            get => _lastMessage.GetValue();
            set => _lastMessage.SetValue(value);
        }
    
        private PropertyValue<int> _totalMessages = new PropertyValue<int>(nameof(M2ChatReader), nameof(TotalMessages));
        
        [Required]
        [JsonPropertyName("totalMessages")]
        public int TotalMessages
        {
            get => _totalMessages.GetValue();
            set => _totalMessages.SetValue(value);
        }
    
        private PropertyValue<List<TDMemberProfile>> _authors = new PropertyValue<List<TDMemberProfile>>(nameof(M2ChatReader), nameof(Authors));
        
        [Required]
        [JsonPropertyName("authors")]
        public List<TDMemberProfile> Authors
        {
            get => _authors.GetValue();
            set => _authors.SetValue(value);
        }
    
        private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(M2ChatReader), nameof(IsArchived));
        
        [Required]
        [JsonPropertyName("archived")]
        public bool IsArchived
        {
            get => _archived.GetValue();
            set => _archived.SetValue(value);
        }
    
        private PropertyValue<bool> _goto = new PropertyValue<bool>(nameof(M2ChatReader), nameof(IsGoto));
        
        [Required]
        [JsonPropertyName("goto")]
        public bool IsGoto
        {
            get => _goto.GetValue();
            set => _goto.SetValue(value);
        }
    
        private PropertyValue<bool?> _pinned = new PropertyValue<bool?>(nameof(M2ChatReader), nameof(IsPinned));
        
        [JsonPropertyName("pinned")]
        public bool? IsPinned
        {
            get => _pinned.GetValue();
            set => _pinned.SetValue(value);
        }
    
        private PropertyValue<bool?> _hidden = new PropertyValue<bool?>(nameof(M2ChatReader), nameof(IsHidden));
        
        [JsonPropertyName("hidden")]
        public bool? IsHidden
        {
            get => _hidden.GetValue();
            set => _hidden.SetValue(value);
        }
    
        private PropertyValue<string?> _pinnedPrevChannelId = new PropertyValue<string?>(nameof(M2ChatReader), nameof(PinnedPrevChannelId));
        
        [JsonPropertyName("pinnedPrevChannelId")]
        public string? PinnedPrevChannelId
        {
            get => _pinnedPrevChannelId.GetValue();
            set => _pinnedPrevChannelId.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _subscribedSince = new PropertyValue<DateTime?>(nameof(M2ChatReader), nameof(SubscribedSince));
        
        [JsonPropertyName("subscribedSince")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime? SubscribedSince
        {
            get => _subscribedSince.GetValue();
            set => _subscribedSince.SetValue(value);
        }
    
        private PropertyValue<bool?> _subscribed = new PropertyValue<bool?>(nameof(M2ChatReader), nameof(IsSubscribed));
        
        [JsonPropertyName("subscribed")]
        public bool? IsSubscribed
        {
            get => _subscribed.GetValue();
            set => _subscribed.SetValue(value);
        }
    
        private PropertyValue<string?> _parentChannelId = new PropertyValue<string?>(nameof(M2ChatReader), nameof(ParentChannelId));
        
        [JsonPropertyName("parentChannelId")]
        public string? ParentChannelId
        {
            get => _parentChannelId.GetValue();
            set => _parentChannelId.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _unreadCounter.SetAccessPath(path, validateHasBeenSet);
            _readTime.SetAccessPath(path, validateHasBeenSet);
            _hasUnread.SetAccessPath(path, validateHasBeenSet);
            _contact.SetAccessPath(path, validateHasBeenSet);
            _lastMessage.SetAccessPath(path, validateHasBeenSet);
            _totalMessages.SetAccessPath(path, validateHasBeenSet);
            _authors.SetAccessPath(path, validateHasBeenSet);
            _archived.SetAccessPath(path, validateHasBeenSet);
            _goto.SetAccessPath(path, validateHasBeenSet);
            _pinned.SetAccessPath(path, validateHasBeenSet);
            _hidden.SetAccessPath(path, validateHasBeenSet);
            _pinnedPrevChannelId.SetAccessPath(path, validateHasBeenSet);
            _subscribedSince.SetAccessPath(path, validateHasBeenSet);
            _subscribed.SetAccessPath(path, validateHasBeenSet);
            _parentChannelId.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
