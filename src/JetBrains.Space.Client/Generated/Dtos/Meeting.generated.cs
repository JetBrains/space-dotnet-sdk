// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class Meeting
     : IPropagatePropertyAccessPath
{
    public Meeting() { }
    
    public Meeting(string id, bool archived, string summary, List<TDLocation> locations, List<TDMemberProfile> profiles, List<TDTeam> teams, CalendarEventSpec occurrenceRule, MeetingOrigin origin, MeetingVisibility visibility, MeetingModificationPreference modificationPreference, long etag, bool privateDataSubstituted, bool canModify, bool canDelete, bool canJoin, List<string> externalParticipants, string? description = null, string? conferenceLink = null, MeetingJoiningPreference? joiningPreference = null, MeetingOrganizer? organizer = null, string? linkToExternalSource = null, List<MeetingAttachment>? eventAttachments = null, EventConferenceData? conferenceData = null, M2ChannelRecord? channelRef = null)
    {
        Id = id;
        IsArchived = archived;
        Summary = summary;
        Description = description;
        Locations = locations;
        Profiles = profiles;
        Teams = teams;
        OccurrenceRule = occurrenceRule;
        Origin = origin;
        ConferenceLink = conferenceLink;
        Visibility = visibility;
        ModificationPreference = modificationPreference;
        JoiningPreference = joiningPreference;
        Organizer = organizer;
        Etag = etag;
        IsPrivateDataSubstituted = privateDataSubstituted;
        CanModify = canModify;
        CanDelete = canDelete;
        CanJoin = canJoin;
        ExternalParticipants = externalParticipants;
        LinkToExternalSource = linkToExternalSource;
        EventAttachments = eventAttachments;
        ConferenceData = conferenceData;
        ChannelRef = channelRef;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(Meeting), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(Meeting), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<string> _summary = new PropertyValue<string>(nameof(Meeting), nameof(Summary), "summary");
    
    [Required]
    [JsonPropertyName("summary")]
    public string Summary
    {
        get => _summary.GetValue(InlineErrors);
        set => _summary.SetValue(value);
    }

    private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(Meeting), nameof(Description), "description");
    
    [JsonPropertyName("description")]
    public string? Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<List<TDLocation>> _locations = new PropertyValue<List<TDLocation>>(nameof(Meeting), nameof(Locations), "locations", new List<TDLocation>());
    
    [Required]
    [JsonPropertyName("locations")]
    public List<TDLocation> Locations
    {
        get => _locations.GetValue(InlineErrors);
        set => _locations.SetValue(value);
    }

    private PropertyValue<List<TDMemberProfile>> _profiles = new PropertyValue<List<TDMemberProfile>>(nameof(Meeting), nameof(Profiles), "profiles", new List<TDMemberProfile>());
    
    [Required]
    [JsonPropertyName("profiles")]
    public List<TDMemberProfile> Profiles
    {
        get => _profiles.GetValue(InlineErrors);
        set => _profiles.SetValue(value);
    }

    private PropertyValue<List<TDTeam>> _teams = new PropertyValue<List<TDTeam>>(nameof(Meeting), nameof(Teams), "teams", new List<TDTeam>());
    
    [Required]
    [JsonPropertyName("teams")]
    public List<TDTeam> Teams
    {
        get => _teams.GetValue(InlineErrors);
        set => _teams.SetValue(value);
    }

    private PropertyValue<CalendarEventSpec> _occurrenceRule = new PropertyValue<CalendarEventSpec>(nameof(Meeting), nameof(OccurrenceRule), "occurrenceRule");
    
    [Required]
    [JsonPropertyName("occurrenceRule")]
    public CalendarEventSpec OccurrenceRule
    {
        get => _occurrenceRule.GetValue(InlineErrors);
        set => _occurrenceRule.SetValue(value);
    }

    private PropertyValue<MeetingOrigin> _origin = new PropertyValue<MeetingOrigin>(nameof(Meeting), nameof(Origin), "origin");
    
    [Required]
    [JsonPropertyName("origin")]
    public MeetingOrigin Origin
    {
        get => _origin.GetValue(InlineErrors);
        set => _origin.SetValue(value);
    }

    private PropertyValue<string?> _conferenceLink = new PropertyValue<string?>(nameof(Meeting), nameof(ConferenceLink), "conferenceLink");
    
    [JsonPropertyName("conferenceLink")]
    public string? ConferenceLink
    {
        get => _conferenceLink.GetValue(InlineErrors);
        set => _conferenceLink.SetValue(value);
    }

    private PropertyValue<MeetingVisibility> _visibility = new PropertyValue<MeetingVisibility>(nameof(Meeting), nameof(Visibility), "visibility");
    
    [Required]
    [JsonPropertyName("visibility")]
    public MeetingVisibility Visibility
    {
        get => _visibility.GetValue(InlineErrors);
        set => _visibility.SetValue(value);
    }

    private PropertyValue<MeetingModificationPreference> _modificationPreference = new PropertyValue<MeetingModificationPreference>(nameof(Meeting), nameof(ModificationPreference), "modificationPreference");
    
    [Required]
    [JsonPropertyName("modificationPreference")]
    public MeetingModificationPreference ModificationPreference
    {
        get => _modificationPreference.GetValue(InlineErrors);
        set => _modificationPreference.SetValue(value);
    }

    private PropertyValue<MeetingJoiningPreference?> _joiningPreference = new PropertyValue<MeetingJoiningPreference?>(nameof(Meeting), nameof(JoiningPreference), "joiningPreference");
    
    [JsonPropertyName("joiningPreference")]
    public MeetingJoiningPreference? JoiningPreference
    {
        get => _joiningPreference.GetValue(InlineErrors);
        set => _joiningPreference.SetValue(value);
    }

    private PropertyValue<MeetingOrganizer?> _organizer = new PropertyValue<MeetingOrganizer?>(nameof(Meeting), nameof(Organizer), "organizer");
    
    [JsonPropertyName("organizer")]
    public MeetingOrganizer? Organizer
    {
        get => _organizer.GetValue(InlineErrors);
        set => _organizer.SetValue(value);
    }

    private PropertyValue<long> _etag = new PropertyValue<long>(nameof(Meeting), nameof(Etag), "etag");
    
    [Required]
    [JsonPropertyName("etag")]
    public long Etag
    {
        get => _etag.GetValue(InlineErrors);
        set => _etag.SetValue(value);
    }

    private PropertyValue<bool> _privateDataSubstituted = new PropertyValue<bool>(nameof(Meeting), nameof(IsPrivateDataSubstituted), "privateDataSubstituted");
    
    [Required]
    [JsonPropertyName("privateDataSubstituted")]
    public bool IsPrivateDataSubstituted
    {
        get => _privateDataSubstituted.GetValue(InlineErrors);
        set => _privateDataSubstituted.SetValue(value);
    }

    private PropertyValue<bool> _canModify = new PropertyValue<bool>(nameof(Meeting), nameof(CanModify), "canModify");
    
    [Required]
    [JsonPropertyName("canModify")]
    public bool CanModify
    {
        get => _canModify.GetValue(InlineErrors);
        set => _canModify.SetValue(value);
    }

    private PropertyValue<bool> _canDelete = new PropertyValue<bool>(nameof(Meeting), nameof(CanDelete), "canDelete");
    
    [Required]
    [JsonPropertyName("canDelete")]
    public bool CanDelete
    {
        get => _canDelete.GetValue(InlineErrors);
        set => _canDelete.SetValue(value);
    }

    private PropertyValue<bool> _canJoin = new PropertyValue<bool>(nameof(Meeting), nameof(CanJoin), "canJoin");
    
    [Required]
    [JsonPropertyName("canJoin")]
    public bool CanJoin
    {
        get => _canJoin.GetValue(InlineErrors);
        set => _canJoin.SetValue(value);
    }

    private PropertyValue<List<string>> _externalParticipants = new PropertyValue<List<string>>(nameof(Meeting), nameof(ExternalParticipants), "externalParticipants", new List<string>());
    
    [Required]
    [JsonPropertyName("externalParticipants")]
    public List<string> ExternalParticipants
    {
        get => _externalParticipants.GetValue(InlineErrors);
        set => _externalParticipants.SetValue(value);
    }

    private PropertyValue<string?> _linkToExternalSource = new PropertyValue<string?>(nameof(Meeting), nameof(LinkToExternalSource), "linkToExternalSource");
    
    [JsonPropertyName("linkToExternalSource")]
    public string? LinkToExternalSource
    {
        get => _linkToExternalSource.GetValue(InlineErrors);
        set => _linkToExternalSource.SetValue(value);
    }

    private PropertyValue<List<MeetingAttachment>?> _eventAttachments = new PropertyValue<List<MeetingAttachment>?>(nameof(Meeting), nameof(EventAttachments), "eventAttachments");
    
    [JsonPropertyName("eventAttachments")]
    public List<MeetingAttachment>? EventAttachments
    {
        get => _eventAttachments.GetValue(InlineErrors);
        set => _eventAttachments.SetValue(value);
    }

    private PropertyValue<EventConferenceData?> _conferenceData = new PropertyValue<EventConferenceData?>(nameof(Meeting), nameof(ConferenceData), "conferenceData");
    
    [JsonPropertyName("conferenceData")]
    public EventConferenceData? ConferenceData
    {
        get => _conferenceData.GetValue(InlineErrors);
        set => _conferenceData.SetValue(value);
    }

    private PropertyValue<M2ChannelRecord?> _channelRef = new PropertyValue<M2ChannelRecord?>(nameof(Meeting), nameof(ChannelRef), "channelRef");
    
    [JsonPropertyName("channelRef")]
    public M2ChannelRecord? ChannelRef
    {
        get => _channelRef.GetValue(InlineErrors);
        set => _channelRef.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _summary.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _locations.SetAccessPath(parentChainPath, validateHasBeenSet);
        _profiles.SetAccessPath(parentChainPath, validateHasBeenSet);
        _teams.SetAccessPath(parentChainPath, validateHasBeenSet);
        _occurrenceRule.SetAccessPath(parentChainPath, validateHasBeenSet);
        _origin.SetAccessPath(parentChainPath, validateHasBeenSet);
        _conferenceLink.SetAccessPath(parentChainPath, validateHasBeenSet);
        _visibility.SetAccessPath(parentChainPath, validateHasBeenSet);
        _modificationPreference.SetAccessPath(parentChainPath, validateHasBeenSet);
        _joiningPreference.SetAccessPath(parentChainPath, validateHasBeenSet);
        _organizer.SetAccessPath(parentChainPath, validateHasBeenSet);
        _etag.SetAccessPath(parentChainPath, validateHasBeenSet);
        _privateDataSubstituted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _canModify.SetAccessPath(parentChainPath, validateHasBeenSet);
        _canDelete.SetAccessPath(parentChainPath, validateHasBeenSet);
        _canJoin.SetAccessPath(parentChainPath, validateHasBeenSet);
        _externalParticipants.SetAccessPath(parentChainPath, validateHasBeenSet);
        _linkToExternalSource.SetAccessPath(parentChainPath, validateHasBeenSet);
        _eventAttachments.SetAccessPath(parentChainPath, validateHasBeenSet);
        _conferenceData.SetAccessPath(parentChainPath, validateHasBeenSet);
        _channelRef.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

