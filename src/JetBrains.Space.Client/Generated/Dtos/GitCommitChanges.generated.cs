// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class GitCommitChanges
         : IPropagatePropertyAccessPath
    {
        public GitCommitChanges() { }
        
        public GitCommitChanges(List<GitCommitChange> changes, bool overflow)
        {
            Changes = changes;
            IsOverflow = overflow;
        }
        
        private PropertyValue<List<GitCommitChange>> _changes = new PropertyValue<List<GitCommitChange>>(nameof(GitCommitChanges), nameof(Changes), new List<GitCommitChange>());
        
        [Required]
        [JsonPropertyName("changes")]
        public List<GitCommitChange> Changes
        {
            get => _changes.GetValue();
            set => _changes.SetValue(value);
        }
    
        private PropertyValue<bool> _overflow = new PropertyValue<bool>(nameof(GitCommitChanges), nameof(IsOverflow));
        
        [Required]
        [JsonPropertyName("overflow")]
        public bool IsOverflow
        {
            get => _overflow.GetValue();
            set => _overflow.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _changes.SetAccessPath(path, validateHasBeenSet);
            _overflow.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
