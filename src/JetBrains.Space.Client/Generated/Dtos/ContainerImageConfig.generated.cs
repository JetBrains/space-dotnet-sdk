// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ContainerImageConfig
     : IPropagatePropertyAccessPath
{
    public ContainerImageConfig() { }
    
    public ContainerImageConfig(string? userName = null, List<string>? ports = null, List<string>? volumes = null, List<string>? env = null, string? workingDir = null, string? entryPoint = null, string? cmd = null, List<string>? labels = null)
    {
        UserName = userName;
        Ports = ports;
        Volumes = volumes;
        Env = env;
        WorkingDir = workingDir;
        EntryPoint = entryPoint;
        Cmd = cmd;
        Labels = labels;
    }
    
    private PropertyValue<string?> _userName = new PropertyValue<string?>(nameof(ContainerImageConfig), nameof(UserName), "userName");
    
    [JsonPropertyName("userName")]
    public string? UserName
    {
        get => _userName.GetValue(InlineErrors);
        set => _userName.SetValue(value);
    }

    private PropertyValue<List<string>?> _ports = new PropertyValue<List<string>?>(nameof(ContainerImageConfig), nameof(Ports), "ports");
    
    [JsonPropertyName("ports")]
    public List<string>? Ports
    {
        get => _ports.GetValue(InlineErrors);
        set => _ports.SetValue(value);
    }

    private PropertyValue<List<string>?> _volumes = new PropertyValue<List<string>?>(nameof(ContainerImageConfig), nameof(Volumes), "volumes");
    
    [JsonPropertyName("volumes")]
    public List<string>? Volumes
    {
        get => _volumes.GetValue(InlineErrors);
        set => _volumes.SetValue(value);
    }

    private PropertyValue<List<string>?> _env = new PropertyValue<List<string>?>(nameof(ContainerImageConfig), nameof(Env), "env");
    
    [JsonPropertyName("env")]
    public List<string>? Env
    {
        get => _env.GetValue(InlineErrors);
        set => _env.SetValue(value);
    }

    private PropertyValue<string?> _workingDir = new PropertyValue<string?>(nameof(ContainerImageConfig), nameof(WorkingDir), "workingDir");
    
    [JsonPropertyName("workingDir")]
    public string? WorkingDir
    {
        get => _workingDir.GetValue(InlineErrors);
        set => _workingDir.SetValue(value);
    }

    private PropertyValue<string?> _entryPoint = new PropertyValue<string?>(nameof(ContainerImageConfig), nameof(EntryPoint), "entryPoint");
    
    [JsonPropertyName("entryPoint")]
    public string? EntryPoint
    {
        get => _entryPoint.GetValue(InlineErrors);
        set => _entryPoint.SetValue(value);
    }

    private PropertyValue<string?> _cmd = new PropertyValue<string?>(nameof(ContainerImageConfig), nameof(Cmd), "cmd");
    
    [JsonPropertyName("cmd")]
    public string? Cmd
    {
        get => _cmd.GetValue(InlineErrors);
        set => _cmd.SetValue(value);
    }

    private PropertyValue<List<string>?> _labels = new PropertyValue<List<string>?>(nameof(ContainerImageConfig), nameof(Labels), "labels");
    
    [JsonPropertyName("labels")]
    public List<string>? Labels
    {
        get => _labels.GetValue(InlineErrors);
        set => _labels.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _userName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _ports.SetAccessPath(parentChainPath, validateHasBeenSet);
        _volumes.SetAccessPath(parentChainPath, validateHasBeenSet);
        _env.SetAccessPath(parentChainPath, validateHasBeenSet);
        _workingDir.SetAccessPath(parentChainPath, validateHasBeenSet);
        _entryPoint.SetAccessPath(parentChainPath, validateHasBeenSet);
        _cmd.SetAccessPath(parentChainPath, validateHasBeenSet);
        _labels.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

