// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitFileChange
     : IPropagatePropertyAccessPath
{
    public GitFileChange() { }
    
    public GitFileChange(GitCommitChangeType changeType, GitFile? old = null, GitFile? @new = null)
    {
        ChangeType = changeType;
        Old = old;
        New = @new;
    }
    
    private PropertyValue<GitCommitChangeType> _changeType = new PropertyValue<GitCommitChangeType>(nameof(GitFileChange), nameof(ChangeType), "changeType");
    
    [Required]
    [JsonPropertyName("changeType")]
    public GitCommitChangeType ChangeType
    {
        get => _changeType.GetValue(InlineErrors);
        set => _changeType.SetValue(value);
    }

    private PropertyValue<GitFile?> _old = new PropertyValue<GitFile?>(nameof(GitFileChange), nameof(Old), "old");
    
    [JsonPropertyName("old")]
    public GitFile? Old
    {
        get => _old.GetValue(InlineErrors);
        set => _old.SetValue(value);
    }

    private PropertyValue<GitFile?> _new = new PropertyValue<GitFile?>(nameof(GitFileChange), nameof(New), "new");
    
    [JsonPropertyName("new")]
    public GitFile? New
    {
        get => _new.GetValue(InlineErrors);
        set => _new.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _changeType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _old.SetAccessPath(parentChainPath, validateHasBeenSet);
        _new.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

