// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class CalendarEventSpec
     : IPropagatePropertyAccessPath
{
    public CalendarEventSpec() { }
    
    public CalendarEventSpec(DateTime start, DateTime end, bool allDay, ATimeZone timezone, RecurrenceRule? recurrenceRule = null, string? parentId = null, DateTime? initialMeetingStart = null, BusyStatus? busyStatus = null, string? nextChainId = null)
    {
        Start = start;
        End = end;
        RecurrenceRule = recurrenceRule;
        IsAllDay = allDay;
        Timezone = timezone;
        ParentId = parentId;
        InitialMeetingStart = initialMeetingStart;
        BusyStatus = busyStatus;
        NextChainId = nextChainId;
    }
    
    private PropertyValue<DateTime> _start = new PropertyValue<DateTime>(nameof(CalendarEventSpec), nameof(Start), "start");
    
    [Required]
    [JsonPropertyName("start")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Start
    {
        get => _start.GetValue(InlineErrors);
        set => _start.SetValue(value);
    }

    private PropertyValue<DateTime> _end = new PropertyValue<DateTime>(nameof(CalendarEventSpec), nameof(End), "end");
    
    [Required]
    [JsonPropertyName("end")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime End
    {
        get => _end.GetValue(InlineErrors);
        set => _end.SetValue(value);
    }

    private PropertyValue<RecurrenceRule?> _recurrenceRule = new PropertyValue<RecurrenceRule?>(nameof(CalendarEventSpec), nameof(RecurrenceRule), "recurrenceRule");
    
    [JsonPropertyName("recurrenceRule")]
    public RecurrenceRule? RecurrenceRule
    {
        get => _recurrenceRule.GetValue(InlineErrors);
        set => _recurrenceRule.SetValue(value);
    }

    private PropertyValue<bool> _allDay = new PropertyValue<bool>(nameof(CalendarEventSpec), nameof(IsAllDay), "allDay");
    
    [Required]
    [JsonPropertyName("allDay")]
    public bool IsAllDay
    {
        get => _allDay.GetValue(InlineErrors);
        set => _allDay.SetValue(value);
    }

    private PropertyValue<ATimeZone> _timezone = new PropertyValue<ATimeZone>(nameof(CalendarEventSpec), nameof(Timezone), "timezone");
    
    [Required]
    [JsonPropertyName("timezone")]
    public ATimeZone Timezone
    {
        get => _timezone.GetValue(InlineErrors);
        set => _timezone.SetValue(value);
    }

    private PropertyValue<string?> _parentId = new PropertyValue<string?>(nameof(CalendarEventSpec), nameof(ParentId), "parentId");
    
    [JsonPropertyName("parentId")]
    public string? ParentId
    {
        get => _parentId.GetValue(InlineErrors);
        set => _parentId.SetValue(value);
    }

    private PropertyValue<DateTime?> _initialMeetingStart = new PropertyValue<DateTime?>(nameof(CalendarEventSpec), nameof(InitialMeetingStart), "initialMeetingStart");
    
    [JsonPropertyName("initialMeetingStart")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? InitialMeetingStart
    {
        get => _initialMeetingStart.GetValue(InlineErrors);
        set => _initialMeetingStart.SetValue(value);
    }

    private PropertyValue<BusyStatus?> _busyStatus = new PropertyValue<BusyStatus?>(nameof(CalendarEventSpec), nameof(BusyStatus), "busyStatus");
    
    [JsonPropertyName("busyStatus")]
    public BusyStatus? BusyStatus
    {
        get => _busyStatus.GetValue(InlineErrors);
        set => _busyStatus.SetValue(value);
    }

    private PropertyValue<string?> _nextChainId = new PropertyValue<string?>(nameof(CalendarEventSpec), nameof(NextChainId), "nextChainId");
    
    [JsonPropertyName("nextChainId")]
    public string? NextChainId
    {
        get => _nextChainId.GetValue(InlineErrors);
        set => _nextChainId.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _start.SetAccessPath(parentChainPath, validateHasBeenSet);
        _end.SetAccessPath(parentChainPath, validateHasBeenSet);
        _recurrenceRule.SetAccessPath(parentChainPath, validateHasBeenSet);
        _allDay.SetAccessPath(parentChainPath, validateHasBeenSet);
        _timezone.SetAccessPath(parentChainPath, validateHasBeenSet);
        _parentId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _initialMeetingStart.SetAccessPath(parentChainPath, validateHasBeenSet);
        _busyStatus.SetAccessPath(parentChainPath, validateHasBeenSet);
        _nextChainId.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

