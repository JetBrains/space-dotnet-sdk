// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class VaultConnectionRecord
     : IPropagatePropertyAccessPath
{
    public VaultConnectionRecord() { }
    
    public VaultConnectionRecord(string id, string projectId, string url, string appRoleEndpointPath, string appRoleId, DateTime createdAt, CPrincipal createdBy, DateTime updatedAt, CPrincipal updatedBy, bool deleted, string? name = null, string? @namespace = null, string? vaultNamespace = null)
    {
        Id = id;
        ProjectId = projectId;
        Url = url;
        Name = name;
        Namespace = @namespace;
        VaultNamespace = vaultNamespace;
        AppRoleEndpointPath = appRoleEndpointPath;
        AppRoleId = appRoleId;
        CreatedAt = createdAt;
        CreatedBy = createdBy;
        UpdatedAt = updatedAt;
        UpdatedBy = updatedBy;
        IsDeleted = deleted;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(VaultConnectionRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _projectId = new PropertyValue<string>(nameof(VaultConnectionRecord), nameof(ProjectId), "projectId");
    
    [Required]
    [JsonPropertyName("projectId")]
    public string ProjectId
    {
        get => _projectId.GetValue(InlineErrors);
        set => _projectId.SetValue(value);
    }

    private PropertyValue<string> _url = new PropertyValue<string>(nameof(VaultConnectionRecord), nameof(Url), "url");
    
    [Required]
    [JsonPropertyName("url")]
    public string Url
    {
        get => _url.GetValue(InlineErrors);
        set => _url.SetValue(value);
    }

    private PropertyValue<string?> _name = new PropertyValue<string?>(nameof(VaultConnectionRecord), nameof(Name), "name");
    
    [JsonPropertyName("name")]
    public string? Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string?> _namespace = new PropertyValue<string?>(nameof(VaultConnectionRecord), nameof(Namespace), "namespace");
    
    [JsonPropertyName("namespace")]
    public string? Namespace
    {
        get => _namespace.GetValue(InlineErrors);
        set => _namespace.SetValue(value);
    }

    private PropertyValue<string?> _vaultNamespace = new PropertyValue<string?>(nameof(VaultConnectionRecord), nameof(VaultNamespace), "vaultNamespace");
    
    [JsonPropertyName("vaultNamespace")]
    public string? VaultNamespace
    {
        get => _vaultNamespace.GetValue(InlineErrors);
        set => _vaultNamespace.SetValue(value);
    }

    private PropertyValue<string> _appRoleEndpointPath = new PropertyValue<string>(nameof(VaultConnectionRecord), nameof(AppRoleEndpointPath), "appRoleEndpointPath");
    
    [Required]
    [JsonPropertyName("appRoleEndpointPath")]
    public string AppRoleEndpointPath
    {
        get => _appRoleEndpointPath.GetValue(InlineErrors);
        set => _appRoleEndpointPath.SetValue(value);
    }

    private PropertyValue<string> _appRoleId = new PropertyValue<string>(nameof(VaultConnectionRecord), nameof(AppRoleId), "appRoleId");
    
    [Required]
    [JsonPropertyName("appRoleId")]
    public string AppRoleId
    {
        get => _appRoleId.GetValue(InlineErrors);
        set => _appRoleId.SetValue(value);
    }

    private PropertyValue<DateTime> _createdAt = new PropertyValue<DateTime>(nameof(VaultConnectionRecord), nameof(CreatedAt), "createdAt");
    
    [Required]
    [JsonPropertyName("createdAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime CreatedAt
    {
        get => _createdAt.GetValue(InlineErrors);
        set => _createdAt.SetValue(value);
    }

    private PropertyValue<CPrincipal> _createdBy = new PropertyValue<CPrincipal>(nameof(VaultConnectionRecord), nameof(CreatedBy), "createdBy");
    
    [Required]
    [JsonPropertyName("createdBy")]
    public CPrincipal CreatedBy
    {
        get => _createdBy.GetValue(InlineErrors);
        set => _createdBy.SetValue(value);
    }

    private PropertyValue<DateTime> _updatedAt = new PropertyValue<DateTime>(nameof(VaultConnectionRecord), nameof(UpdatedAt), "updatedAt");
    
    [Required]
    [JsonPropertyName("updatedAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime UpdatedAt
    {
        get => _updatedAt.GetValue(InlineErrors);
        set => _updatedAt.SetValue(value);
    }

    private PropertyValue<CPrincipal> _updatedBy = new PropertyValue<CPrincipal>(nameof(VaultConnectionRecord), nameof(UpdatedBy), "updatedBy");
    
    [Required]
    [JsonPropertyName("updatedBy")]
    public CPrincipal UpdatedBy
    {
        get => _updatedBy.GetValue(InlineErrors);
        set => _updatedBy.SetValue(value);
    }

    private PropertyValue<bool> _deleted = new PropertyValue<bool>(nameof(VaultConnectionRecord), nameof(IsDeleted), "deleted");
    
    [Required]
    [JsonPropertyName("deleted")]
    public bool IsDeleted
    {
        get => _deleted.GetValue(InlineErrors);
        set => _deleted.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _url.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _namespace.SetAccessPath(parentChainPath, validateHasBeenSet);
        _vaultNamespace.SetAccessPath(parentChainPath, validateHasBeenSet);
        _appRoleEndpointPath.SetAccessPath(parentChainPath, validateHasBeenSet);
        _appRoleId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _updatedAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _updatedBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _deleted.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

