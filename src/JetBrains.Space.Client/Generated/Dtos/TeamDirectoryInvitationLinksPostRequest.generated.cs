// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public class TeamDirectoryInvitationLinksPostRequest
     : IPropagatePropertyAccessPath
{
    public TeamDirectoryInvitationLinksPostRequest() { }
    
    public TeamDirectoryInvitationLinksPostRequest(string name, DateTime expiresAt, int inviteeLimit, string? team = null, string? role = null, ProjectIdentifier? project = null, ProjectTeamRole? projectRole = null)
    {
        Name = name;
        ExpiresAt = expiresAt;
        InviteeLimit = inviteeLimit;
        Team = team;
        Role = role;
        Project = project;
        ProjectRole = projectRole;
    }
    
    private PropertyValue<string> _name = new PropertyValue<string>(nameof(TeamDirectoryInvitationLinksPostRequest), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<DateTime> _expiresAt = new PropertyValue<DateTime>(nameof(TeamDirectoryInvitationLinksPostRequest), nameof(ExpiresAt), "expiresAt");
    
    [Required]
    [JsonPropertyName("expiresAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime ExpiresAt
    {
        get => _expiresAt.GetValue(InlineErrors);
        set => _expiresAt.SetValue(value);
    }

    private PropertyValue<int> _inviteeLimit = new PropertyValue<int>(nameof(TeamDirectoryInvitationLinksPostRequest), nameof(InviteeLimit), "inviteeLimit");
    
    [Required]
    [JsonPropertyName("inviteeLimit")]
    public int InviteeLimit
    {
        get => _inviteeLimit.GetValue(InlineErrors);
        set => _inviteeLimit.SetValue(value);
    }

    private PropertyValue<string?> _team = new PropertyValue<string?>(nameof(TeamDirectoryInvitationLinksPostRequest), nameof(Team), "team");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("team")]
    public string? Team
    {
        get => _team.GetValue(InlineErrors);
        set => _team.SetValue(value);
    }

    private PropertyValue<string?> _role = new PropertyValue<string?>(nameof(TeamDirectoryInvitationLinksPostRequest), nameof(Role), "role");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("role")]
    public string? Role
    {
        get => _role.GetValue(InlineErrors);
        set => _role.SetValue(value);
    }

    private PropertyValue<ProjectIdentifier?> _project = new PropertyValue<ProjectIdentifier?>(nameof(TeamDirectoryInvitationLinksPostRequest), nameof(Project), "project");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("project")]
    public ProjectIdentifier? Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<ProjectTeamRole?> _projectRole = new PropertyValue<ProjectTeamRole?>(nameof(TeamDirectoryInvitationLinksPostRequest), nameof(ProjectRole), "projectRole");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("projectRole")]
    public ProjectTeamRole? ProjectRole
    {
        get => _projectRole.GetValue(InlineErrors);
        set => _projectRole.SetValue(value);
    }

    public virtual void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _expiresAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _inviteeLimit.SetAccessPath(parentChainPath, validateHasBeenSet);
        _team.SetAccessPath(parentChainPath, validateHasBeenSet);
        _role.SetAccessPath(parentChainPath, validateHasBeenSet);
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectRole.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

