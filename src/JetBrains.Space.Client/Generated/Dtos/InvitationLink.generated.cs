// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class InvitationLink
     : IPropagatePropertyAccessPath
{
    public InvitationLink() { }
    
    public InvitationLink(string id, string name, CPrincipal createdBy, DateTime createdAt, int inviteeLimit, int inviteeUsage, ProjectTeamRole projectRole, bool deleted, DateTime? expiresAt = null, TDTeam? team = null, TDRole? position = null, PRProject? project = null, string? link = null)
    {
        Id = id;
        Name = name;
        CreatedBy = createdBy;
        CreatedAt = createdAt;
        ExpiresAt = expiresAt;
        InviteeLimit = inviteeLimit;
        InviteeUsage = inviteeUsage;
        Team = team;
        Position = position;
        Project = project;
        ProjectRole = projectRole;
        Link = link;
        IsDeleted = deleted;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(InvitationLink), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(InvitationLink), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<CPrincipal> _createdBy = new PropertyValue<CPrincipal>(nameof(InvitationLink), nameof(CreatedBy), "createdBy");
    
    [Required]
    [JsonPropertyName("createdBy")]
    public CPrincipal CreatedBy
    {
        get => _createdBy.GetValue(InlineErrors);
        set => _createdBy.SetValue(value);
    }

    private PropertyValue<DateTime> _createdAt = new PropertyValue<DateTime>(nameof(InvitationLink), nameof(CreatedAt), "createdAt");
    
    [Required]
    [JsonPropertyName("createdAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime CreatedAt
    {
        get => _createdAt.GetValue(InlineErrors);
        set => _createdAt.SetValue(value);
    }

    private PropertyValue<DateTime?> _expiresAt = new PropertyValue<DateTime?>(nameof(InvitationLink), nameof(ExpiresAt), "expiresAt");
    
    [JsonPropertyName("expiresAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? ExpiresAt
    {
        get => _expiresAt.GetValue(InlineErrors);
        set => _expiresAt.SetValue(value);
    }

    private PropertyValue<int> _inviteeLimit = new PropertyValue<int>(nameof(InvitationLink), nameof(InviteeLimit), "inviteeLimit");
    
    [Required]
    [JsonPropertyName("inviteeLimit")]
    public int InviteeLimit
    {
        get => _inviteeLimit.GetValue(InlineErrors);
        set => _inviteeLimit.SetValue(value);
    }

    private PropertyValue<int> _inviteeUsage = new PropertyValue<int>(nameof(InvitationLink), nameof(InviteeUsage), "inviteeUsage");
    
    [Required]
    [JsonPropertyName("inviteeUsage")]
    public int InviteeUsage
    {
        get => _inviteeUsage.GetValue(InlineErrors);
        set => _inviteeUsage.SetValue(value);
    }

    private PropertyValue<TDTeam?> _team = new PropertyValue<TDTeam?>(nameof(InvitationLink), nameof(Team), "team");
    
    [JsonPropertyName("team")]
    public TDTeam? Team
    {
        get => _team.GetValue(InlineErrors);
        set => _team.SetValue(value);
    }

    private PropertyValue<TDRole?> _position = new PropertyValue<TDRole?>(nameof(InvitationLink), nameof(Position), "position");
    
    [JsonPropertyName("position")]
    public TDRole? Position
    {
        get => _position.GetValue(InlineErrors);
        set => _position.SetValue(value);
    }

    private PropertyValue<PRProject?> _project = new PropertyValue<PRProject?>(nameof(InvitationLink), nameof(Project), "project");
    
    [JsonPropertyName("project")]
    public PRProject? Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<ProjectTeamRole> _projectRole = new PropertyValue<ProjectTeamRole>(nameof(InvitationLink), nameof(ProjectRole), "projectRole");
    
    [Required]
    [JsonPropertyName("projectRole")]
    public ProjectTeamRole ProjectRole
    {
        get => _projectRole.GetValue(InlineErrors);
        set => _projectRole.SetValue(value);
    }

    private PropertyValue<string?> _link = new PropertyValue<string?>(nameof(InvitationLink), nameof(Link), "link");
    
    [JsonPropertyName("link")]
    public string? Link
    {
        get => _link.GetValue(InlineErrors);
        set => _link.SetValue(value);
    }

    private PropertyValue<bool> _deleted = new PropertyValue<bool>(nameof(InvitationLink), nameof(IsDeleted), "deleted");
    
    [Required]
    [JsonPropertyName("deleted")]
    public bool IsDeleted
    {
        get => _deleted.GetValue(InlineErrors);
        set => _deleted.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _expiresAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _inviteeLimit.SetAccessPath(parentChainPath, validateHasBeenSet);
        _inviteeUsage.SetAccessPath(parentChainPath, validateHasBeenSet);
        _team.SetAccessPath(parentChainPath, validateHasBeenSet);
        _position.SetAccessPath(parentChainPath, validateHasBeenSet);
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectRole.SetAccessPath(parentChainPath, validateHasBeenSet);
        _link.SetAccessPath(parentChainPath, validateHasBeenSet);
        _deleted.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

