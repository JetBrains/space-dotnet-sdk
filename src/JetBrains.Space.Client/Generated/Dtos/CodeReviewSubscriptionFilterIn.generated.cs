// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class CodeReviewSubscriptionFilterIn
     : SubscriptionFilterIn, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "CodeReviewSubscriptionFilterIn";
    
    public CodeReviewSubscriptionFilterIn() { }
    
    public CodeReviewSubscriptionFilterIn(List<string> authors, List<string> participants, List<string> branchSpec, List<string> pathSpec, string titleRegex, string? project = null, string? repository = null)
    {
        Project = project;
        Repository = repository;
        Authors = authors;
        Participants = participants;
        BranchSpec = branchSpec;
        PathSpec = pathSpec;
        TitleRegex = titleRegex;
    }
    
    private PropertyValue<string?> _project = new PropertyValue<string?>(nameof(CodeReviewSubscriptionFilterIn), nameof(Project), "project");
    
    [JsonPropertyName("project")]
    public string? Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<string?> _repository = new PropertyValue<string?>(nameof(CodeReviewSubscriptionFilterIn), nameof(Repository), "repository");
    
    [JsonPropertyName("repository")]
    public string? Repository
    {
        get => _repository.GetValue(InlineErrors);
        set => _repository.SetValue(value);
    }

    private PropertyValue<List<string>> _authors = new PropertyValue<List<string>>(nameof(CodeReviewSubscriptionFilterIn), nameof(Authors), "authors", new List<string>());
    
    [Required]
    [JsonPropertyName("authors")]
    public List<string> Authors
    {
        get => _authors.GetValue(InlineErrors);
        set => _authors.SetValue(value);
    }

    private PropertyValue<List<string>> _participants = new PropertyValue<List<string>>(nameof(CodeReviewSubscriptionFilterIn), nameof(Participants), "participants", new List<string>());
    
    [Required]
    [JsonPropertyName("participants")]
    public List<string> Participants
    {
        get => _participants.GetValue(InlineErrors);
        set => _participants.SetValue(value);
    }

    private PropertyValue<List<string>> _branchSpec = new PropertyValue<List<string>>(nameof(CodeReviewSubscriptionFilterIn), nameof(BranchSpec), "branchSpec", new List<string>());
    
    [Required]
    [JsonPropertyName("branchSpec")]
    public List<string> BranchSpec
    {
        get => _branchSpec.GetValue(InlineErrors);
        set => _branchSpec.SetValue(value);
    }

    private PropertyValue<List<string>> _pathSpec = new PropertyValue<List<string>>(nameof(CodeReviewSubscriptionFilterIn), nameof(PathSpec), "pathSpec", new List<string>());
    
    [Required]
    [JsonPropertyName("pathSpec")]
    public List<string> PathSpec
    {
        get => _pathSpec.GetValue(InlineErrors);
        set => _pathSpec.SetValue(value);
    }

    private PropertyValue<string> _titleRegex = new PropertyValue<string>(nameof(CodeReviewSubscriptionFilterIn), nameof(TitleRegex), "titleRegex");
    
    [Required]
    [JsonPropertyName("titleRegex")]
    public string TitleRegex
    {
        get => _titleRegex.GetValue(InlineErrors);
        set => _titleRegex.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repository.SetAccessPath(parentChainPath, validateHasBeenSet);
        _authors.SetAccessPath(parentChainPath, validateHasBeenSet);
        _participants.SetAccessPath(parentChainPath, validateHasBeenSet);
        _branchSpec.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pathSpec.SetAccessPath(parentChainPath, validateHasBeenSet);
        _titleRegex.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

