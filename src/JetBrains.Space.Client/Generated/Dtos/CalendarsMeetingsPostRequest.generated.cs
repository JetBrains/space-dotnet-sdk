// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public class CalendarsMeetingsPostRequest
     : IPropagatePropertyAccessPath
{
    public CalendarsMeetingsPostRequest() { }
    
    public CalendarsMeetingsPostRequest(string summary, CalendarEventSpec occurrenceRule, List<string>? locations = null, List<string>? profiles = null, List<string>? externalParticipants = null, List<string>? teams = null, MeetingVisibility visibility = MeetingVisibility.EVERYONE, MeetingModificationPreference modificationPreference = MeetingModificationPreference.PARTICIPANTS, MeetingJoiningPreference joiningPreference = MeetingJoiningPreference.NOBODY, bool notifyOnExport = true, string? description = null, string? organizer = null, EventConferenceData? conferenceData = null)
    {
        Summary = summary;
        Description = description;
        OccurrenceRule = occurrenceRule;
        Locations = (locations ?? new List<string>());
        Profiles = (profiles ?? new List<string>());
        ExternalParticipants = (externalParticipants ?? new List<string>());
        Teams = (teams ?? new List<string>());
        Visibility = visibility;
        ModificationPreference = modificationPreference;
        JoiningPreference = joiningPreference;
        IsNotifyOnExport = notifyOnExport;
        Organizer = organizer;
        ConferenceData = conferenceData;
    }
    
    private PropertyValue<string> _summary = new PropertyValue<string>(nameof(CalendarsMeetingsPostRequest), nameof(Summary));
    
    [Required]
    [JsonPropertyName("summary")]
    public string Summary
    {
        get => _summary.GetValue();
        set => _summary.SetValue(value);
    }

    private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(CalendarsMeetingsPostRequest), nameof(Description));
    
    [JsonPropertyName("description")]
    public string? Description
    {
        get => _description.GetValue();
        set => _description.SetValue(value);
    }

    private PropertyValue<CalendarEventSpec> _occurrenceRule = new PropertyValue<CalendarEventSpec>(nameof(CalendarsMeetingsPostRequest), nameof(OccurrenceRule));
    
    [Required]
    [JsonPropertyName("occurrenceRule")]
    public CalendarEventSpec OccurrenceRule
    {
        get => _occurrenceRule.GetValue();
        set => _occurrenceRule.SetValue(value);
    }

    private PropertyValue<List<string>> _locations = new PropertyValue<List<string>>(nameof(CalendarsMeetingsPostRequest), nameof(Locations), new List<string>());
    
    [JsonPropertyName("locations")]
    public List<string> Locations
    {
        get => _locations.GetValue();
        set => _locations.SetValue(value);
    }

    private PropertyValue<List<string>> _profiles = new PropertyValue<List<string>>(nameof(CalendarsMeetingsPostRequest), nameof(Profiles), new List<string>());
    
    [JsonPropertyName("profiles")]
    public List<string> Profiles
    {
        get => _profiles.GetValue();
        set => _profiles.SetValue(value);
    }

    private PropertyValue<List<string>> _externalParticipants = new PropertyValue<List<string>>(nameof(CalendarsMeetingsPostRequest), nameof(ExternalParticipants), new List<string>());
    
    [JsonPropertyName("externalParticipants")]
    public List<string> ExternalParticipants
    {
        get => _externalParticipants.GetValue();
        set => _externalParticipants.SetValue(value);
    }

    private PropertyValue<List<string>> _teams = new PropertyValue<List<string>>(nameof(CalendarsMeetingsPostRequest), nameof(Teams), new List<string>());
    
    [JsonPropertyName("teams")]
    public List<string> Teams
    {
        get => _teams.GetValue();
        set => _teams.SetValue(value);
    }

    private PropertyValue<MeetingVisibility> _visibility = new PropertyValue<MeetingVisibility>(nameof(CalendarsMeetingsPostRequest), nameof(Visibility), MeetingVisibility.EVERYONE);
    
    [JsonPropertyName("visibility")]
    public MeetingVisibility Visibility
    {
        get => _visibility.GetValue();
        set => _visibility.SetValue(value);
    }

    private PropertyValue<MeetingModificationPreference> _modificationPreference = new PropertyValue<MeetingModificationPreference>(nameof(CalendarsMeetingsPostRequest), nameof(ModificationPreference), MeetingModificationPreference.PARTICIPANTS);
    
    [JsonPropertyName("modificationPreference")]
    public MeetingModificationPreference ModificationPreference
    {
        get => _modificationPreference.GetValue();
        set => _modificationPreference.SetValue(value);
    }

    private PropertyValue<MeetingJoiningPreference> _joiningPreference = new PropertyValue<MeetingJoiningPreference>(nameof(CalendarsMeetingsPostRequest), nameof(JoiningPreference), MeetingJoiningPreference.NOBODY);
    
    [JsonPropertyName("joiningPreference")]
    public MeetingJoiningPreference JoiningPreference
    {
        get => _joiningPreference.GetValue();
        set => _joiningPreference.SetValue(value);
    }

    private PropertyValue<bool> _notifyOnExport = new PropertyValue<bool>(nameof(CalendarsMeetingsPostRequest), nameof(IsNotifyOnExport));
    
    [JsonPropertyName("notifyOnExport")]
    public bool IsNotifyOnExport
    {
        get => _notifyOnExport.GetValue();
        set => _notifyOnExport.SetValue(value);
    }

    private PropertyValue<string?> _organizer = new PropertyValue<string?>(nameof(CalendarsMeetingsPostRequest), nameof(Organizer));
    
    [JsonPropertyName("organizer")]
    public string? Organizer
    {
        get => _organizer.GetValue();
        set => _organizer.SetValue(value);
    }

    private PropertyValue<EventConferenceData?> _conferenceData = new PropertyValue<EventConferenceData?>(nameof(CalendarsMeetingsPostRequest), nameof(ConferenceData));
    
    [JsonPropertyName("conferenceData")]
    public EventConferenceData? ConferenceData
    {
        get => _conferenceData.GetValue();
        set => _conferenceData.SetValue(value);
    }

    public virtual void SetAccessPath(string path, bool validateHasBeenSet)
    {
        _summary.SetAccessPath(path, validateHasBeenSet);
        _description.SetAccessPath(path, validateHasBeenSet);
        _occurrenceRule.SetAccessPath(path, validateHasBeenSet);
        _locations.SetAccessPath(path, validateHasBeenSet);
        _profiles.SetAccessPath(path, validateHasBeenSet);
        _externalParticipants.SetAccessPath(path, validateHasBeenSet);
        _teams.SetAccessPath(path, validateHasBeenSet);
        _visibility.SetAccessPath(path, validateHasBeenSet);
        _modificationPreference.SetAccessPath(path, validateHasBeenSet);
        _joiningPreference.SetAccessPath(path, validateHasBeenSet);
        _notifyOnExport.SetAccessPath(path, validateHasBeenSet);
        _organizer.SetAccessPath(path, validateHasBeenSet);
        _conferenceData.SetAccessPath(path, validateHasBeenSet);
    }

}

