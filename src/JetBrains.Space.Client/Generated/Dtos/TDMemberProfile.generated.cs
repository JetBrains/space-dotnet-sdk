// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class TDMemberProfile
         : IPropagatePropertyAccessPath
    {
        public TDMemberProfile() { }
        
        public TDMemberProfile(string id, string username, TDProfileName name, bool speaksEnglish, List<TDProfileLanguage> languages, bool archived, bool notAMember, List<AbsenceRecord> absences, Dictionary<string, CFValue> customFields, List<TDProfileEmail> emails, DocumentFolderRecord folder, List<PublicHoliday> holidays, List<string> links, List<TDMemberLocation> locations, List<TDMemberProfile> managers, List<TDMembership> membershipHistory, List<TDMembership> memberships, List<string> messengers, bool onboardingRequired, List<string> phones, List<Topic> topics, string? smallAvatar = null, string? avatar = null, string? profilePicture = null, DateTime? joined = null, DateTime? left = null, DateTime? leftAt = null, bool? external = null, string? about = null, AvatarCropSquare? avatarCropSquare = null, DateTime? birthday = null, Gender? gender = null, bool? showBannerOnLandingPage = null, bool? showBannerOnProjectPage = null, bool? showBannerOnTeamDirectoryHomePage = null, List<TDMembership>? unapprovedMemberships = null)
        {
            Id = id;
            Username = username;
            Name = name;
            IsSpeaksEnglish = speaksEnglish;
            SmallAvatar = smallAvatar;
            Avatar = avatar;
            ProfilePicture = profilePicture;
            Languages = languages;
            IsArchived = archived;
            IsNotAMember = notAMember;
            Joined = joined;
            Left = left;
            LeftAt = leftAt;
            IsExternal = external;
            About = about;
            Absences = absences;
            AvatarCropSquare = avatarCropSquare;
            Birthday = birthday;
            CustomFields = customFields;
            Emails = emails;
            Folder = folder;
            Gender = gender;
            Holidays = holidays;
            Links = links;
            Locations = locations;
            Managers = managers;
            MembershipHistory = membershipHistory;
            Memberships = memberships;
            Messengers = messengers;
            IsOnboardingRequired = onboardingRequired;
            Phones = phones;
            IsShowBannerOnLandingPage = showBannerOnLandingPage;
            IsShowBannerOnProjectPage = showBannerOnProjectPage;
            IsShowBannerOnTeamDirectoryHomePage = showBannerOnTeamDirectoryHomePage;
            Topics = topics;
            UnapprovedMemberships = unapprovedMemberships;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(TDMemberProfile), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get => _id.GetValue();
            set => _id.SetValue(value);
        }
    
        private PropertyValue<string> _username = new PropertyValue<string>(nameof(TDMemberProfile), nameof(Username));
        
        [Required]
        [JsonPropertyName("username")]
        public string Username
        {
            get => _username.GetValue();
            set => _username.SetValue(value);
        }
    
        private PropertyValue<TDProfileName> _name = new PropertyValue<TDProfileName>(nameof(TDMemberProfile), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public TDProfileName Name
        {
            get => _name.GetValue();
            set => _name.SetValue(value);
        }
    
        private PropertyValue<bool> _speaksEnglish = new PropertyValue<bool>(nameof(TDMemberProfile), nameof(IsSpeaksEnglish));
        
        [Required]
        [JsonPropertyName("speaksEnglish")]
        public bool IsSpeaksEnglish
        {
            get => _speaksEnglish.GetValue();
            set => _speaksEnglish.SetValue(value);
        }
    
        private PropertyValue<string?> _smallAvatar = new PropertyValue<string?>(nameof(TDMemberProfile), nameof(SmallAvatar));
        
        [JsonPropertyName("smallAvatar")]
        public string? SmallAvatar
        {
            get => _smallAvatar.GetValue();
            set => _smallAvatar.SetValue(value);
        }
    
        private PropertyValue<string?> _avatar = new PropertyValue<string?>(nameof(TDMemberProfile), nameof(Avatar));
        
        [JsonPropertyName("avatar")]
        public string? Avatar
        {
            get => _avatar.GetValue();
            set => _avatar.SetValue(value);
        }
    
        private PropertyValue<string?> _profilePicture = new PropertyValue<string?>(nameof(TDMemberProfile), nameof(ProfilePicture));
        
        [JsonPropertyName("profilePicture")]
        public string? ProfilePicture
        {
            get => _profilePicture.GetValue();
            set => _profilePicture.SetValue(value);
        }
    
        private PropertyValue<List<TDProfileLanguage>> _languages = new PropertyValue<List<TDProfileLanguage>>(nameof(TDMemberProfile), nameof(Languages), new List<TDProfileLanguage>());
        
        [Required]
        [JsonPropertyName("languages")]
        public List<TDProfileLanguage> Languages
        {
            get => _languages.GetValue();
            set => _languages.SetValue(value);
        }
    
        private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(TDMemberProfile), nameof(IsArchived));
        
        [Required]
        [JsonPropertyName("archived")]
        public bool IsArchived
        {
            get => _archived.GetValue();
            set => _archived.SetValue(value);
        }
    
        private PropertyValue<bool> _notAMember = new PropertyValue<bool>(nameof(TDMemberProfile), nameof(IsNotAMember));
        
        [Required]
        [JsonPropertyName("notAMember")]
        public bool IsNotAMember
        {
            get => _notAMember.GetValue();
            set => _notAMember.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _joined = new PropertyValue<DateTime?>(nameof(TDMemberProfile), nameof(Joined));
        
        [JsonPropertyName("joined")]
        [JsonConverter(typeof(SpaceDateConverter))]
        public DateTime? Joined
        {
            get => _joined.GetValue();
            set => _joined.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _left = new PropertyValue<DateTime?>(nameof(TDMemberProfile), nameof(Left));
        
        [JsonPropertyName("left")]
        [JsonConverter(typeof(SpaceDateConverter))]
        public DateTime? Left
        {
            get => _left.GetValue();
            set => _left.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _leftAt = new PropertyValue<DateTime?>(nameof(TDMemberProfile), nameof(LeftAt));
        
        [JsonPropertyName("leftAt")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime? LeftAt
        {
            get => _leftAt.GetValue();
            set => _leftAt.SetValue(value);
        }
    
        private PropertyValue<bool?> _external = new PropertyValue<bool?>(nameof(TDMemberProfile), nameof(IsExternal));
        
        [JsonPropertyName("external")]
        public bool? IsExternal
        {
            get => _external.GetValue();
            set => _external.SetValue(value);
        }
    
        private PropertyValue<string?> _about = new PropertyValue<string?>(nameof(TDMemberProfile), nameof(About));
        
        [JsonPropertyName("about")]
        public string? About
        {
            get => _about.GetValue();
            set => _about.SetValue(value);
        }
    
        private PropertyValue<List<AbsenceRecord>> _absences = new PropertyValue<List<AbsenceRecord>>(nameof(TDMemberProfile), nameof(Absences), new List<AbsenceRecord>());
        
        [Required]
        [JsonPropertyName("absences")]
        public List<AbsenceRecord> Absences
        {
            get => _absences.GetValue();
            set => _absences.SetValue(value);
        }
    
        private PropertyValue<AvatarCropSquare?> _avatarCropSquare = new PropertyValue<AvatarCropSquare?>(nameof(TDMemberProfile), nameof(AvatarCropSquare));
        
        [JsonPropertyName("avatarCropSquare")]
        public AvatarCropSquare? AvatarCropSquare
        {
            get => _avatarCropSquare.GetValue();
            set => _avatarCropSquare.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _birthday = new PropertyValue<DateTime?>(nameof(TDMemberProfile), nameof(Birthday));
        
        [JsonPropertyName("birthday")]
        [JsonConverter(typeof(SpaceDateConverter))]
        public DateTime? Birthday
        {
            get => _birthday.GetValue();
            set => _birthday.SetValue(value);
        }
    
        private PropertyValue<Dictionary<string, CFValue>> _customFields = new PropertyValue<Dictionary<string, CFValue>>(nameof(TDMemberProfile), nameof(CustomFields), new Dictionary<string, CFValue>());
        
        [Required]
        [JsonPropertyName("customFields")]
        public Dictionary<string, CFValue> CustomFields
        {
            get => _customFields.GetValue();
            set => _customFields.SetValue(value);
        }
    
        private PropertyValue<List<TDProfileEmail>> _emails = new PropertyValue<List<TDProfileEmail>>(nameof(TDMemberProfile), nameof(Emails), new List<TDProfileEmail>());
        
        [Required]
        [JsonPropertyName("emails")]
        public List<TDProfileEmail> Emails
        {
            get => _emails.GetValue();
            set => _emails.SetValue(value);
        }
    
        private PropertyValue<DocumentFolderRecord> _folder = new PropertyValue<DocumentFolderRecord>(nameof(TDMemberProfile), nameof(Folder));
        
        [Required]
        [JsonPropertyName("folder")]
        public DocumentFolderRecord Folder
        {
            get => _folder.GetValue();
            set => _folder.SetValue(value);
        }
    
        private PropertyValue<Gender?> _gender = new PropertyValue<Gender?>(nameof(TDMemberProfile), nameof(Gender));
        
        [JsonPropertyName("gender")]
        public Gender? Gender
        {
            get => _gender.GetValue();
            set => _gender.SetValue(value);
        }
    
        private PropertyValue<List<PublicHoliday>> _holidays = new PropertyValue<List<PublicHoliday>>(nameof(TDMemberProfile), nameof(Holidays), new List<PublicHoliday>());
        
        [Required]
        [JsonPropertyName("holidays")]
        public List<PublicHoliday> Holidays
        {
            get => _holidays.GetValue();
            set => _holidays.SetValue(value);
        }
    
        private PropertyValue<List<string>> _links = new PropertyValue<List<string>>(nameof(TDMemberProfile), nameof(Links), new List<string>());
        
        [Required]
        [JsonPropertyName("links")]
        public List<string> Links
        {
            get => _links.GetValue();
            set => _links.SetValue(value);
        }
    
        private PropertyValue<List<TDMemberLocation>> _locations = new PropertyValue<List<TDMemberLocation>>(nameof(TDMemberProfile), nameof(Locations), new List<TDMemberLocation>());
        
        [Required]
        [JsonPropertyName("locations")]
        public List<TDMemberLocation> Locations
        {
            get => _locations.GetValue();
            set => _locations.SetValue(value);
        }
    
        private PropertyValue<List<TDMemberProfile>> _managers = new PropertyValue<List<TDMemberProfile>>(nameof(TDMemberProfile), nameof(Managers), new List<TDMemberProfile>());
        
        [Required]
        [JsonPropertyName("managers")]
        public List<TDMemberProfile> Managers
        {
            get => _managers.GetValue();
            set => _managers.SetValue(value);
        }
    
        private PropertyValue<List<TDMembership>> _membershipHistory = new PropertyValue<List<TDMembership>>(nameof(TDMemberProfile), nameof(MembershipHistory), new List<TDMembership>());
        
        [Required]
        [JsonPropertyName("membershipHistory")]
        public List<TDMembership> MembershipHistory
        {
            get => _membershipHistory.GetValue();
            set => _membershipHistory.SetValue(value);
        }
    
        private PropertyValue<List<TDMembership>> _memberships = new PropertyValue<List<TDMembership>>(nameof(TDMemberProfile), nameof(Memberships), new List<TDMembership>());
        
        [Required]
        [JsonPropertyName("memberships")]
        public List<TDMembership> Memberships
        {
            get => _memberships.GetValue();
            set => _memberships.SetValue(value);
        }
    
        private PropertyValue<List<string>> _messengers = new PropertyValue<List<string>>(nameof(TDMemberProfile), nameof(Messengers), new List<string>());
        
        [Required]
        [JsonPropertyName("messengers")]
        public List<string> Messengers
        {
            get => _messengers.GetValue();
            set => _messengers.SetValue(value);
        }
    
        private PropertyValue<bool> _onboardingRequired = new PropertyValue<bool>(nameof(TDMemberProfile), nameof(IsOnboardingRequired));
        
        [Required]
        [JsonPropertyName("onboardingRequired")]
        public bool IsOnboardingRequired
        {
            get => _onboardingRequired.GetValue();
            set => _onboardingRequired.SetValue(value);
        }
    
        private PropertyValue<List<string>> _phones = new PropertyValue<List<string>>(nameof(TDMemberProfile), nameof(Phones), new List<string>());
        
        [Required]
        [JsonPropertyName("phones")]
        public List<string> Phones
        {
            get => _phones.GetValue();
            set => _phones.SetValue(value);
        }
    
        private PropertyValue<bool?> _showBannerOnLandingPage = new PropertyValue<bool?>(nameof(TDMemberProfile), nameof(IsShowBannerOnLandingPage));
        
        [JsonPropertyName("showBannerOnLandingPage")]
        public bool? IsShowBannerOnLandingPage
        {
            get => _showBannerOnLandingPage.GetValue();
            set => _showBannerOnLandingPage.SetValue(value);
        }
    
        private PropertyValue<bool?> _showBannerOnProjectPage = new PropertyValue<bool?>(nameof(TDMemberProfile), nameof(IsShowBannerOnProjectPage));
        
        [JsonPropertyName("showBannerOnProjectPage")]
        public bool? IsShowBannerOnProjectPage
        {
            get => _showBannerOnProjectPage.GetValue();
            set => _showBannerOnProjectPage.SetValue(value);
        }
    
        private PropertyValue<bool?> _showBannerOnTeamDirectoryHomePage = new PropertyValue<bool?>(nameof(TDMemberProfile), nameof(IsShowBannerOnTeamDirectoryHomePage));
        
        [JsonPropertyName("showBannerOnTeamDirectoryHomePage")]
        public bool? IsShowBannerOnTeamDirectoryHomePage
        {
            get => _showBannerOnTeamDirectoryHomePage.GetValue();
            set => _showBannerOnTeamDirectoryHomePage.SetValue(value);
        }
    
        private PropertyValue<List<Topic>> _topics = new PropertyValue<List<Topic>>(nameof(TDMemberProfile), nameof(Topics), new List<Topic>());
        
        [Required]
        [JsonPropertyName("topics")]
        public List<Topic> Topics
        {
            get => _topics.GetValue();
            set => _topics.SetValue(value);
        }
    
        private PropertyValue<List<TDMembership>?> _unapprovedMemberships = new PropertyValue<List<TDMembership>?>(nameof(TDMemberProfile), nameof(UnapprovedMemberships));
        
        [JsonPropertyName("unapprovedMemberships")]
        public List<TDMembership>? UnapprovedMemberships
        {
            get => _unapprovedMemberships.GetValue();
            set => _unapprovedMemberships.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _username.SetAccessPath(path, validateHasBeenSet);
            _name.SetAccessPath(path, validateHasBeenSet);
            _speaksEnglish.SetAccessPath(path, validateHasBeenSet);
            _smallAvatar.SetAccessPath(path, validateHasBeenSet);
            _avatar.SetAccessPath(path, validateHasBeenSet);
            _profilePicture.SetAccessPath(path, validateHasBeenSet);
            _languages.SetAccessPath(path, validateHasBeenSet);
            _archived.SetAccessPath(path, validateHasBeenSet);
            _notAMember.SetAccessPath(path, validateHasBeenSet);
            _joined.SetAccessPath(path, validateHasBeenSet);
            _left.SetAccessPath(path, validateHasBeenSet);
            _leftAt.SetAccessPath(path, validateHasBeenSet);
            _external.SetAccessPath(path, validateHasBeenSet);
            _about.SetAccessPath(path, validateHasBeenSet);
            _absences.SetAccessPath(path, validateHasBeenSet);
            _avatarCropSquare.SetAccessPath(path, validateHasBeenSet);
            _birthday.SetAccessPath(path, validateHasBeenSet);
            _customFields.SetAccessPath(path, validateHasBeenSet);
            _emails.SetAccessPath(path, validateHasBeenSet);
            _folder.SetAccessPath(path, validateHasBeenSet);
            _gender.SetAccessPath(path, validateHasBeenSet);
            _holidays.SetAccessPath(path, validateHasBeenSet);
            _links.SetAccessPath(path, validateHasBeenSet);
            _locations.SetAccessPath(path, validateHasBeenSet);
            _managers.SetAccessPath(path, validateHasBeenSet);
            _membershipHistory.SetAccessPath(path, validateHasBeenSet);
            _memberships.SetAccessPath(path, validateHasBeenSet);
            _messengers.SetAccessPath(path, validateHasBeenSet);
            _onboardingRequired.SetAccessPath(path, validateHasBeenSet);
            _phones.SetAccessPath(path, validateHasBeenSet);
            _showBannerOnLandingPage.SetAccessPath(path, validateHasBeenSet);
            _showBannerOnProjectPage.SetAccessPath(path, validateHasBeenSet);
            _showBannerOnTeamDirectoryHomePage.SetAccessPath(path, validateHasBeenSet);
            _topics.SetAccessPath(path, validateHasBeenSet);
            _unapprovedMemberships.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
