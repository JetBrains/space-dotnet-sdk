// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ChatMessageReactionRemovedEvent
     : WebhookEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "ChatMessageReactionRemovedEvent";
    
    public ChatMessageReactionRemovedEvent() { }
    
    public ChatMessageReactionRemovedEvent(string messageId, string channelId, CPrincipal actor, string emoji, int newCount, string? threadId = null)
    {
        MessageId = messageId;
        ChannelId = channelId;
        ThreadId = threadId;
        Actor = actor;
        Emoji = emoji;
        NewCount = newCount;
    }
    
    private PropertyValue<string> _messageId = new PropertyValue<string>(nameof(ChatMessageReactionRemovedEvent), nameof(MessageId), "messageId");
    
    [Required]
    [JsonPropertyName("messageId")]
    public string MessageId
    {
        get => _messageId.GetValue(InlineErrors);
        set => _messageId.SetValue(value);
    }

    private PropertyValue<string> _channelId = new PropertyValue<string>(nameof(ChatMessageReactionRemovedEvent), nameof(ChannelId), "channelId");
    
    [Required]
    [JsonPropertyName("channelId")]
    public string ChannelId
    {
        get => _channelId.GetValue(InlineErrors);
        set => _channelId.SetValue(value);
    }

    private PropertyValue<string?> _threadId = new PropertyValue<string?>(nameof(ChatMessageReactionRemovedEvent), nameof(ThreadId), "threadId");
    
    [JsonPropertyName("threadId")]
    public string? ThreadId
    {
        get => _threadId.GetValue(InlineErrors);
        set => _threadId.SetValue(value);
    }

    private PropertyValue<CPrincipal> _actor = new PropertyValue<CPrincipal>(nameof(ChatMessageReactionRemovedEvent), nameof(Actor), "actor");
    
    [Required]
    [JsonPropertyName("actor")]
    public CPrincipal Actor
    {
        get => _actor.GetValue(InlineErrors);
        set => _actor.SetValue(value);
    }

    private PropertyValue<string> _emoji = new PropertyValue<string>(nameof(ChatMessageReactionRemovedEvent), nameof(Emoji), "emoji");
    
    [Required]
    [JsonPropertyName("emoji")]
    public string Emoji
    {
        get => _emoji.GetValue(InlineErrors);
        set => _emoji.SetValue(value);
    }

    private PropertyValue<int> _newCount = new PropertyValue<int>(nameof(ChatMessageReactionRemovedEvent), nameof(NewCount), "newCount");
    
    [Required]
    [JsonPropertyName("newCount")]
    public int NewCount
    {
        get => _newCount.GetValue(InlineErrors);
        set => _newCount.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _messageId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _channelId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _threadId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _actor.SetAccessPath(parentChainPath, validateHasBeenSet);
        _emoji.SetAccessPath(parentChainPath, validateHasBeenSet);
        _newCount.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

