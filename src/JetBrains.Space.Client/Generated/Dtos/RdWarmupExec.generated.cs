// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class RdWarmupExec
     : IPropagatePropertyAccessPath
{
    public RdWarmupExec() { }
    
    public RdWarmupExec(string id, string projectId, string repositoryName, string branch, string revision, WarmupExecutionStatus status, IdeType ideType, string ideVersion, string computeTaskId, WarmupExecutionTrigger trigger, bool archived, string? devfile = null, DateTime? startedAt = null, DateTime? finishedAt = null, string? ideQuality = null)
    {
        Id = id;
        ProjectId = projectId;
        RepositoryName = repositoryName;
        Branch = branch;
        Revision = revision;
        Devfile = devfile;
        Status = status;
        StartedAt = startedAt;
        FinishedAt = finishedAt;
        IdeType = ideType;
        IdeVersion = ideVersion;
        IdeQuality = ideQuality;
        ComputeTaskId = computeTaskId;
        Trigger = trigger;
        IsArchived = archived;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(RdWarmupExec), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _projectId = new PropertyValue<string>(nameof(RdWarmupExec), nameof(ProjectId), "projectId");
    
    [Required]
    [JsonPropertyName("projectId")]
    public string ProjectId
    {
        get => _projectId.GetValue(InlineErrors);
        set => _projectId.SetValue(value);
    }

    private PropertyValue<string> _repositoryName = new PropertyValue<string>(nameof(RdWarmupExec), nameof(RepositoryName), "repositoryName");
    
    [Required]
    [JsonPropertyName("repositoryName")]
    public string RepositoryName
    {
        get => _repositoryName.GetValue(InlineErrors);
        set => _repositoryName.SetValue(value);
    }

    private PropertyValue<string> _branch = new PropertyValue<string>(nameof(RdWarmupExec), nameof(Branch), "branch");
    
    [Required]
    [JsonPropertyName("branch")]
    public string Branch
    {
        get => _branch.GetValue(InlineErrors);
        set => _branch.SetValue(value);
    }

    private PropertyValue<string> _revision = new PropertyValue<string>(nameof(RdWarmupExec), nameof(Revision), "revision");
    
    [Required]
    [JsonPropertyName("revision")]
    public string Revision
    {
        get => _revision.GetValue(InlineErrors);
        set => _revision.SetValue(value);
    }

    private PropertyValue<string?> _devfile = new PropertyValue<string?>(nameof(RdWarmupExec), nameof(Devfile), "devfile");
    
    [JsonPropertyName("devfile")]
    public string? Devfile
    {
        get => _devfile.GetValue(InlineErrors);
        set => _devfile.SetValue(value);
    }

    private PropertyValue<WarmupExecutionStatus> _status = new PropertyValue<WarmupExecutionStatus>(nameof(RdWarmupExec), nameof(Status), "status");
    
    [Required]
    [JsonPropertyName("status")]
    public WarmupExecutionStatus Status
    {
        get => _status.GetValue(InlineErrors);
        set => _status.SetValue(value);
    }

    private PropertyValue<DateTime?> _startedAt = new PropertyValue<DateTime?>(nameof(RdWarmupExec), nameof(StartedAt), "startedAt");
    
    [JsonPropertyName("startedAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? StartedAt
    {
        get => _startedAt.GetValue(InlineErrors);
        set => _startedAt.SetValue(value);
    }

    private PropertyValue<DateTime?> _finishedAt = new PropertyValue<DateTime?>(nameof(RdWarmupExec), nameof(FinishedAt), "finishedAt");
    
    [JsonPropertyName("finishedAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? FinishedAt
    {
        get => _finishedAt.GetValue(InlineErrors);
        set => _finishedAt.SetValue(value);
    }

    private PropertyValue<IdeType> _ideType = new PropertyValue<IdeType>(nameof(RdWarmupExec), nameof(IdeType), "ideType");
    
    [Required]
    [JsonPropertyName("ideType")]
    public IdeType IdeType
    {
        get => _ideType.GetValue(InlineErrors);
        set => _ideType.SetValue(value);
    }

    private PropertyValue<string> _ideVersion = new PropertyValue<string>(nameof(RdWarmupExec), nameof(IdeVersion), "ideVersion");
    
    [Required]
    [JsonPropertyName("ideVersion")]
    public string IdeVersion
    {
        get => _ideVersion.GetValue(InlineErrors);
        set => _ideVersion.SetValue(value);
    }

    private PropertyValue<string?> _ideQuality = new PropertyValue<string?>(nameof(RdWarmupExec), nameof(IdeQuality), "ideQuality");
    
    [JsonPropertyName("ideQuality")]
    public string? IdeQuality
    {
        get => _ideQuality.GetValue(InlineErrors);
        set => _ideQuality.SetValue(value);
    }

    private PropertyValue<string> _computeTaskId = new PropertyValue<string>(nameof(RdWarmupExec), nameof(ComputeTaskId), "computeTaskId");
    
    [Required]
    [JsonPropertyName("computeTaskId")]
    public string ComputeTaskId
    {
        get => _computeTaskId.GetValue(InlineErrors);
        set => _computeTaskId.SetValue(value);
    }

    private PropertyValue<WarmupExecutionTrigger> _trigger = new PropertyValue<WarmupExecutionTrigger>(nameof(RdWarmupExec), nameof(Trigger), "trigger");
    
    [Required]
    [JsonPropertyName("trigger")]
    public WarmupExecutionTrigger Trigger
    {
        get => _trigger.GetValue(InlineErrors);
        set => _trigger.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(RdWarmupExec), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositoryName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _branch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _revision.SetAccessPath(parentChainPath, validateHasBeenSet);
        _devfile.SetAccessPath(parentChainPath, validateHasBeenSet);
        _status.SetAccessPath(parentChainPath, validateHasBeenSet);
        _startedAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _finishedAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _ideType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _ideVersion.SetAccessPath(parentChainPath, validateHasBeenSet);
        _ideQuality.SetAccessPath(parentChainPath, validateHasBeenSet);
        _computeTaskId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _trigger.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

