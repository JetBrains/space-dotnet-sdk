// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class SubjectResponsibilitiesTable
     : IPropagatePropertyAccessPath
{
    public SubjectResponsibilitiesTable() { }
    
    public SubjectResponsibilitiesTable(string subjectId, List<string> reusedInProjects, List<ResponsibilityRecord> responsibilityRecords, string? name = null)
    {
        SubjectId = subjectId;
        Name = name;
        ReusedInProjects = reusedInProjects;
        ResponsibilityRecords = responsibilityRecords;
    }
    
    private PropertyValue<string> _subjectId = new PropertyValue<string>(nameof(SubjectResponsibilitiesTable), nameof(SubjectId), "subjectId");
    
    [Required]
    [JsonPropertyName("subjectId")]
    public string SubjectId
    {
        get => _subjectId.GetValue(InlineErrors);
        set => _subjectId.SetValue(value);
    }

    private PropertyValue<string?> _name = new PropertyValue<string?>(nameof(SubjectResponsibilitiesTable), nameof(Name), "name");
    
    [JsonPropertyName("name")]
    public string? Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<List<string>> _reusedInProjects = new PropertyValue<List<string>>(nameof(SubjectResponsibilitiesTable), nameof(ReusedInProjects), "reusedInProjects", new List<string>());
    
    [Required]
    [JsonPropertyName("reusedInProjects")]
    public List<string> ReusedInProjects
    {
        get => _reusedInProjects.GetValue(InlineErrors);
        set => _reusedInProjects.SetValue(value);
    }

    private PropertyValue<List<ResponsibilityRecord>> _responsibilityRecords = new PropertyValue<List<ResponsibilityRecord>>(nameof(SubjectResponsibilitiesTable), nameof(ResponsibilityRecords), "responsibilityRecords", new List<ResponsibilityRecord>());
    
    [Required]
    [JsonPropertyName("responsibilityRecords")]
    public List<ResponsibilityRecord> ResponsibilityRecords
    {
        get => _responsibilityRecords.GetValue(InlineErrors);
        set => _responsibilityRecords.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _subjectId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _reusedInProjects.SetAccessPath(parentChainPath, validateHasBeenSet);
        _responsibilityRecords.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

