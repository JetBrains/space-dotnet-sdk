// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class CodeIssueFeedback
     : IPropagatePropertyAccessPath
{
    public CodeIssueFeedback() { }
    
    public CodeIssueFeedback(string reviewId, MergeRequestCodeIssueAnchor anchor, string message, string ruleId, List<string> codeSnippet, bool dismissed, int upvotesCount)
    {
        ReviewId = reviewId;
        Anchor = anchor;
        Message = message;
        RuleId = ruleId;
        CodeSnippet = codeSnippet;
        IsDismissed = dismissed;
        UpvotesCount = upvotesCount;
    }
    
    private PropertyValue<string> _reviewId = new PropertyValue<string>(nameof(CodeIssueFeedback), nameof(ReviewId), "reviewId");
    
    [Required]
    [JsonPropertyName("reviewId")]
    public string ReviewId
    {
        get => _reviewId.GetValue(InlineErrors);
        set => _reviewId.SetValue(value);
    }

    private PropertyValue<MergeRequestCodeIssueAnchor> _anchor = new PropertyValue<MergeRequestCodeIssueAnchor>(nameof(CodeIssueFeedback), nameof(Anchor), "anchor");
    
    [Required]
    [JsonPropertyName("anchor")]
    public MergeRequestCodeIssueAnchor Anchor
    {
        get => _anchor.GetValue(InlineErrors);
        set => _anchor.SetValue(value);
    }

    private PropertyValue<string> _message = new PropertyValue<string>(nameof(CodeIssueFeedback), nameof(Message), "message");
    
    [Required]
    [JsonPropertyName("message")]
    public string Message
    {
        get => _message.GetValue(InlineErrors);
        set => _message.SetValue(value);
    }

    private PropertyValue<string> _ruleId = new PropertyValue<string>(nameof(CodeIssueFeedback), nameof(RuleId), "ruleId");
    
    [Required]
    [JsonPropertyName("ruleId")]
    public string RuleId
    {
        get => _ruleId.GetValue(InlineErrors);
        set => _ruleId.SetValue(value);
    }

    private PropertyValue<List<string>> _codeSnippet = new PropertyValue<List<string>>(nameof(CodeIssueFeedback), nameof(CodeSnippet), "codeSnippet", new List<string>());
    
    [Required]
    [JsonPropertyName("codeSnippet")]
    public List<string> CodeSnippet
    {
        get => _codeSnippet.GetValue(InlineErrors);
        set => _codeSnippet.SetValue(value);
    }

    private PropertyValue<bool> _dismissed = new PropertyValue<bool>(nameof(CodeIssueFeedback), nameof(IsDismissed), "dismissed");
    
    [Required]
    [JsonPropertyName("dismissed")]
    public bool IsDismissed
    {
        get => _dismissed.GetValue(InlineErrors);
        set => _dismissed.SetValue(value);
    }

    private PropertyValue<int> _upvotesCount = new PropertyValue<int>(nameof(CodeIssueFeedback), nameof(UpvotesCount), "upvotesCount");
    
    [Required]
    [JsonPropertyName("upvotesCount")]
    public int UpvotesCount
    {
        get => _upvotesCount.GetValue(InlineErrors);
        set => _upvotesCount.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _reviewId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _anchor.SetAccessPath(parentChainPath, validateHasBeenSet);
        _message.SetAccessPath(parentChainPath, validateHasBeenSet);
        _ruleId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _codeSnippet.SetAccessPath(parentChainPath, validateHasBeenSet);
        _dismissed.SetAccessPath(parentChainPath, validateHasBeenSet);
        _upvotesCount.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

