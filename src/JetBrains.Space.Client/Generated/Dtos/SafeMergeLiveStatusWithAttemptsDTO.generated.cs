// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class SafeMergeLiveStatusWithAttemptsDTO
     : M2ItemContentDetails, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "SafeMergeLiveStatusWithAttemptsDTO";
    
    public SafeMergeLiveStatusWithAttemptsDTO() { }
    
    public SafeMergeLiveStatusWithAttemptsDTO(bool dryRun, int? totalAttempts = null, List<SafeMergeAttemptLiveStatusDTO>? attempts = null, string? cancellationReason = null, List<AttachmentInfo>? attachments = null)
    {
        IsDryRun = dryRun;
        TotalAttempts = totalAttempts;
        Attempts = attempts;
        CancellationReason = cancellationReason;
        Attachments = attachments;
    }
    
    private PropertyValue<bool> _dryRun = new PropertyValue<bool>(nameof(SafeMergeLiveStatusWithAttemptsDTO), nameof(IsDryRun), "dryRun");
    
    [Required]
    [JsonPropertyName("dryRun")]
    public bool IsDryRun
    {
        get => _dryRun.GetValue(InlineErrors);
        set => _dryRun.SetValue(value);
    }

    private PropertyValue<int?> _totalAttempts = new PropertyValue<int?>(nameof(SafeMergeLiveStatusWithAttemptsDTO), nameof(TotalAttempts), "totalAttempts");
    
    [JsonPropertyName("totalAttempts")]
    public int? TotalAttempts
    {
        get => _totalAttempts.GetValue(InlineErrors);
        set => _totalAttempts.SetValue(value);
    }

    private PropertyValue<List<SafeMergeAttemptLiveStatusDTO>?> _attempts = new PropertyValue<List<SafeMergeAttemptLiveStatusDTO>?>(nameof(SafeMergeLiveStatusWithAttemptsDTO), nameof(Attempts), "attempts");
    
    [JsonPropertyName("attempts")]
    public List<SafeMergeAttemptLiveStatusDTO>? Attempts
    {
        get => _attempts.GetValue(InlineErrors);
        set => _attempts.SetValue(value);
    }

    private PropertyValue<string?> _cancellationReason = new PropertyValue<string?>(nameof(SafeMergeLiveStatusWithAttemptsDTO), nameof(CancellationReason), "cancellationReason");
    
    [JsonPropertyName("cancellationReason")]
    public string? CancellationReason
    {
        get => _cancellationReason.GetValue(InlineErrors);
        set => _cancellationReason.SetValue(value);
    }

    private PropertyValue<List<AttachmentInfo>?> _attachments = new PropertyValue<List<AttachmentInfo>?>(nameof(SafeMergeLiveStatusWithAttemptsDTO), nameof(Attachments), "attachments");
    
    [JsonPropertyName("attachments")]
    public List<AttachmentInfo>? Attachments
    {
        get => _attachments.GetValue(InlineErrors);
        set => _attachments.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _dryRun.SetAccessPath(parentChainPath, validateHasBeenSet);
        _totalAttempts.SetAccessPath(parentChainPath, validateHasBeenSet);
        _attempts.SetAccessPath(parentChainPath, validateHasBeenSet);
        _cancellationReason.SetAccessPath(parentChainPath, validateHasBeenSet);
        _attachments.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

