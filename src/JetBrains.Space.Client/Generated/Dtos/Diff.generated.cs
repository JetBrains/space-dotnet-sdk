// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class Diff
     : IPropagatePropertyAccessPath
{
    public Diff() { }
    
    public Diff(List<string> added, List<string> removed, bool removeAll)
    {
        Added = added;
        Removed = removed;
        IsRemoveAll = removeAll;
    }
    
    private PropertyValue<List<string>> _added = new PropertyValue<List<string>>(nameof(Diff), nameof(Added), "added", new List<string>());
    
    [Required]
    [JsonPropertyName("added")]
    public List<string> Added
    {
        get => _added.GetValue(InlineErrors);
        set => _added.SetValue(value);
    }

    private PropertyValue<List<string>> _removed = new PropertyValue<List<string>>(nameof(Diff), nameof(Removed), "removed", new List<string>());
    
    [Required]
    [JsonPropertyName("removed")]
    public List<string> Removed
    {
        get => _removed.GetValue(InlineErrors);
        set => _removed.SetValue(value);
    }

    private PropertyValue<bool> _removeAll = new PropertyValue<bool>(nameof(Diff), nameof(IsRemoveAll), "removeAll");
    
    [Required]
    [JsonPropertyName("removeAll")]
    public bool IsRemoveAll
    {
        get => _removeAll.GetValue(InlineErrors);
        set => _removeAll.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _added.SetAccessPath(parentChainPath, validateHasBeenSet);
        _removed.SetAccessPath(parentChainPath, validateHasBeenSet);
        _removeAll.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

