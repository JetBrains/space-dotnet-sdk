// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class Role
     : IPropagatePropertyAccessPath
{
    public Role() { }
    
    public Role(string roleId, string title, string fullTitle, bool editable, bool resetToDefaultsAvailable, List<Right> rights, string? code = null, string? category = null, FeatureFlagInfo? featureFlag = null)
    {
        RoleId = roleId;
        Title = title;
        FullTitle = fullTitle;
        Code = code;
        Category = category;
        IsEditable = editable;
        IsResetToDefaultsAvailable = resetToDefaultsAvailable;
        FeatureFlag = featureFlag;
        Rights = rights;
    }
    
    private PropertyValue<string> _roleId = new PropertyValue<string>(nameof(Role), nameof(RoleId), "roleId");
    
    [Required]
    [JsonPropertyName("roleId")]
    public string RoleId
    {
        get => _roleId.GetValue(InlineErrors);
        set => _roleId.SetValue(value);
    }

    private PropertyValue<string> _title = new PropertyValue<string>(nameof(Role), nameof(Title), "title");
    
    [Required]
    [JsonPropertyName("title")]
    public string Title
    {
        get => _title.GetValue(InlineErrors);
        set => _title.SetValue(value);
    }

    private PropertyValue<string> _fullTitle = new PropertyValue<string>(nameof(Role), nameof(FullTitle), "fullTitle");
    
    [Required]
    [JsonPropertyName("fullTitle")]
    public string FullTitle
    {
        get => _fullTitle.GetValue(InlineErrors);
        set => _fullTitle.SetValue(value);
    }

    private PropertyValue<string?> _code = new PropertyValue<string?>(nameof(Role), nameof(Code), "code");
    
    [JsonPropertyName("code")]
    public string? Code
    {
        get => _code.GetValue(InlineErrors);
        set => _code.SetValue(value);
    }

    private PropertyValue<string?> _category = new PropertyValue<string?>(nameof(Role), nameof(Category), "category");
    
    [JsonPropertyName("category")]
    public string? Category
    {
        get => _category.GetValue(InlineErrors);
        set => _category.SetValue(value);
    }

    private PropertyValue<bool> _editable = new PropertyValue<bool>(nameof(Role), nameof(IsEditable), "editable");
    
    [Required]
    [JsonPropertyName("editable")]
    public bool IsEditable
    {
        get => _editable.GetValue(InlineErrors);
        set => _editable.SetValue(value);
    }

    private PropertyValue<bool> _resetToDefaultsAvailable = new PropertyValue<bool>(nameof(Role), nameof(IsResetToDefaultsAvailable), "resetToDefaultsAvailable");
    
    [Required]
    [JsonPropertyName("resetToDefaultsAvailable")]
    public bool IsResetToDefaultsAvailable
    {
        get => _resetToDefaultsAvailable.GetValue(InlineErrors);
        set => _resetToDefaultsAvailable.SetValue(value);
    }

    private PropertyValue<FeatureFlagInfo?> _featureFlag = new PropertyValue<FeatureFlagInfo?>(nameof(Role), nameof(FeatureFlag), "featureFlag");
    
    [JsonPropertyName("featureFlag")]
    public FeatureFlagInfo? FeatureFlag
    {
        get => _featureFlag.GetValue(InlineErrors);
        set => _featureFlag.SetValue(value);
    }

    private PropertyValue<List<Right>> _rights = new PropertyValue<List<Right>>(nameof(Role), nameof(Rights), "rights", new List<Right>());
    
    [Required]
    [JsonPropertyName("rights")]
    public List<Right> Rights
    {
        get => _rights.GetValue(InlineErrors);
        set => _rights.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _roleId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _title.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fullTitle.SetAccessPath(parentChainPath, validateHasBeenSet);
        _code.SetAccessPath(parentChainPath, validateHasBeenSet);
        _category.SetAccessPath(parentChainPath, validateHasBeenSet);
        _editable.SetAccessPath(parentChainPath, validateHasBeenSet);
        _resetToDefaultsAvailable.SetAccessPath(parentChainPath, validateHasBeenSet);
        _featureFlag.SetAccessPath(parentChainPath, validateHasBeenSet);
        _rights.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

