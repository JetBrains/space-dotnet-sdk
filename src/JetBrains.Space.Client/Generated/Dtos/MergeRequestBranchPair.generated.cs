// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class MergeRequestBranchPair
     : IPropagatePropertyAccessPath
{
    public MergeRequestBranchPair() { }
    
    public MergeRequestBranchPair(string repository, string sourceBranch, string targetBranch, string sourceBranchRef, string? repositoryId = null, MergeRequestBranch? sourceBranchInfo = null, MergeRequestBranch? targetBranchInfo = null, bool? isMerged = null, bool? isStale = null)
    {
        RepositoryId = repositoryId;
        Repository = repository;
        SourceBranch = sourceBranch;
        TargetBranch = targetBranch;
        SourceBranchRef = sourceBranchRef;
        SourceBranchInfo = sourceBranchInfo;
        TargetBranchInfo = targetBranchInfo;
        IsMerged = isMerged;
        IsStale = isStale;
    }
    
    private PropertyValue<string?> _repositoryId = new PropertyValue<string?>(nameof(MergeRequestBranchPair), nameof(RepositoryId), "repositoryId");
    
    [JsonPropertyName("repositoryId")]
    public string? RepositoryId
    {
        get => _repositoryId.GetValue(InlineErrors);
        set => _repositoryId.SetValue(value);
    }

    private PropertyValue<string> _repository = new PropertyValue<string>(nameof(MergeRequestBranchPair), nameof(Repository), "repository");
    
    [Required]
    [JsonPropertyName("repository")]
    public string Repository
    {
        get => _repository.GetValue(InlineErrors);
        set => _repository.SetValue(value);
    }

    private PropertyValue<string> _sourceBranch = new PropertyValue<string>(nameof(MergeRequestBranchPair), nameof(SourceBranch), "sourceBranch");
    
    [Required]
    [JsonPropertyName("sourceBranch")]
    public string SourceBranch
    {
        get => _sourceBranch.GetValue(InlineErrors);
        set => _sourceBranch.SetValue(value);
    }

    private PropertyValue<string> _targetBranch = new PropertyValue<string>(nameof(MergeRequestBranchPair), nameof(TargetBranch), "targetBranch");
    
    [Required]
    [JsonPropertyName("targetBranch")]
    public string TargetBranch
    {
        get => _targetBranch.GetValue(InlineErrors);
        set => _targetBranch.SetValue(value);
    }

    private PropertyValue<string> _sourceBranchRef = new PropertyValue<string>(nameof(MergeRequestBranchPair), nameof(SourceBranchRef), "sourceBranchRef");
    
    [Required]
    [JsonPropertyName("sourceBranchRef")]
    public string SourceBranchRef
    {
        get => _sourceBranchRef.GetValue(InlineErrors);
        set => _sourceBranchRef.SetValue(value);
    }

    private PropertyValue<MergeRequestBranch?> _sourceBranchInfo = new PropertyValue<MergeRequestBranch?>(nameof(MergeRequestBranchPair), nameof(SourceBranchInfo), "sourceBranchInfo");
    
    [JsonPropertyName("sourceBranchInfo")]
    public MergeRequestBranch? SourceBranchInfo
    {
        get => _sourceBranchInfo.GetValue(InlineErrors);
        set => _sourceBranchInfo.SetValue(value);
    }

    private PropertyValue<MergeRequestBranch?> _targetBranchInfo = new PropertyValue<MergeRequestBranch?>(nameof(MergeRequestBranchPair), nameof(TargetBranchInfo), "targetBranchInfo");
    
    [JsonPropertyName("targetBranchInfo")]
    public MergeRequestBranch? TargetBranchInfo
    {
        get => _targetBranchInfo.GetValue(InlineErrors);
        set => _targetBranchInfo.SetValue(value);
    }

    private PropertyValue<bool?> _isMerged = new PropertyValue<bool?>(nameof(MergeRequestBranchPair), nameof(IsMerged), "isMerged");
    
    [JsonPropertyName("isMerged")]
    public bool? IsMerged
    {
        get => _isMerged.GetValue(InlineErrors);
        set => _isMerged.SetValue(value);
    }

    private PropertyValue<bool?> _isStale = new PropertyValue<bool?>(nameof(MergeRequestBranchPair), nameof(IsStale), "isStale");
    
    [JsonPropertyName("isStale")]
    public bool? IsStale
    {
        get => _isStale.GetValue(InlineErrors);
        set => _isStale.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _repositoryId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repository.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sourceBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sourceBranchRef.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sourceBranchInfo.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetBranchInfo.SetAccessPath(parentChainPath, validateHasBeenSet);
        _isMerged.SetAccessPath(parentChainPath, validateHasBeenSet);
        _isStale.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

