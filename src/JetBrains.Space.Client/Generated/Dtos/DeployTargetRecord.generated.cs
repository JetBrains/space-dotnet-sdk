// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class DeployTargetRecord
     : IPropagatePropertyAccessPath
{
    public DeployTargetRecord() { }
    
    public DeployTargetRecord(string id, string projectId, string name, string key, string description, string createdAt, M2ChannelRecord channel, bool archived, string channelId, List<DeployTargetLink> links, bool manualControl, List<DeployTargetRepositoryDTO> repositories, List<TDTeam> teams, List<TDMemberProfile> users, string? lastUpdated = null, string? lastDeployed = null, int? number = null, string? fullNumberId = null, string? connectedChannelId = null, CPrincipal? createdBy = null, DeploymentInfo? current = null, int? failTimeoutMinutes = null, int? hangTimeoutMinutes = null, DeploymentInfo? next = null)
    {
        Id = id;
        ProjectId = projectId;
        Name = name;
        Key = key;
        Description = description;
        CreatedAt = createdAt;
        LastUpdated = lastUpdated;
        LastDeployed = lastDeployed;
        Channel = channel;
        Number = number;
        FullNumberId = fullNumberId;
        IsArchived = archived;
        ChannelId = channelId;
        ConnectedChannelId = connectedChannelId;
        CreatedBy = createdBy;
        Current = current;
        FailTimeoutMinutes = failTimeoutMinutes;
        HangTimeoutMinutes = hangTimeoutMinutes;
        Links = links;
        IsManualControl = manualControl;
        Next = next;
        Repositories = repositories;
        Teams = teams;
        Users = users;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(DeployTargetRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _projectId = new PropertyValue<string>(nameof(DeployTargetRecord), nameof(ProjectId), "projectId");
    
    [Required]
    [JsonPropertyName("projectId")]
    public string ProjectId
    {
        get => _projectId.GetValue(InlineErrors);
        set => _projectId.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(DeployTargetRecord), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string> _key = new PropertyValue<string>(nameof(DeployTargetRecord), nameof(Key), "key");
    
    [Required]
    [JsonPropertyName("key")]
    public string Key
    {
        get => _key.GetValue(InlineErrors);
        set => _key.SetValue(value);
    }

    private PropertyValue<string> _description = new PropertyValue<string>(nameof(DeployTargetRecord), nameof(Description), "description");
    
    [Required]
    [JsonPropertyName("description")]
    public string Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<string> _createdAt = new PropertyValue<string>(nameof(DeployTargetRecord), nameof(CreatedAt), "createdAt");
    
    [Required]
    [JsonPropertyName("createdAt")]
    public string CreatedAt
    {
        get => _createdAt.GetValue(InlineErrors);
        set => _createdAt.SetValue(value);
    }

    private PropertyValue<string?> _lastUpdated = new PropertyValue<string?>(nameof(DeployTargetRecord), nameof(LastUpdated), "lastUpdated");
    
    [JsonPropertyName("lastUpdated")]
    public string? LastUpdated
    {
        get => _lastUpdated.GetValue(InlineErrors);
        set => _lastUpdated.SetValue(value);
    }

    private PropertyValue<string?> _lastDeployed = new PropertyValue<string?>(nameof(DeployTargetRecord), nameof(LastDeployed), "lastDeployed");
    
    [JsonPropertyName("lastDeployed")]
    public string? LastDeployed
    {
        get => _lastDeployed.GetValue(InlineErrors);
        set => _lastDeployed.SetValue(value);
    }

    private PropertyValue<M2ChannelRecord> _channel = new PropertyValue<M2ChannelRecord>(nameof(DeployTargetRecord), nameof(Channel), "channel");
    
    [Required]
    [JsonPropertyName("channel")]
    public M2ChannelRecord Channel
    {
        get => _channel.GetValue(InlineErrors);
        set => _channel.SetValue(value);
    }

    private PropertyValue<int?> _number = new PropertyValue<int?>(nameof(DeployTargetRecord), nameof(Number), "number");
    
    [JsonPropertyName("number")]
    public int? Number
    {
        get => _number.GetValue(InlineErrors);
        set => _number.SetValue(value);
    }

    private PropertyValue<string?> _fullNumberId = new PropertyValue<string?>(nameof(DeployTargetRecord), nameof(FullNumberId), "fullNumberId");
    
    [JsonPropertyName("fullNumberId")]
    public string? FullNumberId
    {
        get => _fullNumberId.GetValue(InlineErrors);
        set => _fullNumberId.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(DeployTargetRecord), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<string> _channelId = new PropertyValue<string>(nameof(DeployTargetRecord), nameof(ChannelId), "channelId");
    
    [Required]
    [JsonPropertyName("channelId")]
    public string ChannelId
    {
        get => _channelId.GetValue(InlineErrors);
        set => _channelId.SetValue(value);
    }

    private PropertyValue<string?> _connectedChannelId = new PropertyValue<string?>(nameof(DeployTargetRecord), nameof(ConnectedChannelId), "connectedChannelId");
    
    [JsonPropertyName("connectedChannelId")]
    public string? ConnectedChannelId
    {
        get => _connectedChannelId.GetValue(InlineErrors);
        set => _connectedChannelId.SetValue(value);
    }

    private PropertyValue<CPrincipal?> _createdBy = new PropertyValue<CPrincipal?>(nameof(DeployTargetRecord), nameof(CreatedBy), "createdBy");
    
    [JsonPropertyName("createdBy")]
    public CPrincipal? CreatedBy
    {
        get => _createdBy.GetValue(InlineErrors);
        set => _createdBy.SetValue(value);
    }

    private PropertyValue<DeploymentInfo?> _current = new PropertyValue<DeploymentInfo?>(nameof(DeployTargetRecord), nameof(Current), "current");
    
    [JsonPropertyName("current")]
    public DeploymentInfo? Current
    {
        get => _current.GetValue(InlineErrors);
        set => _current.SetValue(value);
    }

    private PropertyValue<int?> _failTimeoutMinutes = new PropertyValue<int?>(nameof(DeployTargetRecord), nameof(FailTimeoutMinutes), "failTimeoutMinutes");
    
    [JsonPropertyName("failTimeoutMinutes")]
    public int? FailTimeoutMinutes
    {
        get => _failTimeoutMinutes.GetValue(InlineErrors);
        set => _failTimeoutMinutes.SetValue(value);
    }

    private PropertyValue<int?> _hangTimeoutMinutes = new PropertyValue<int?>(nameof(DeployTargetRecord), nameof(HangTimeoutMinutes), "hangTimeoutMinutes");
    
    [JsonPropertyName("hangTimeoutMinutes")]
    public int? HangTimeoutMinutes
    {
        get => _hangTimeoutMinutes.GetValue(InlineErrors);
        set => _hangTimeoutMinutes.SetValue(value);
    }

    private PropertyValue<List<DeployTargetLink>> _links = new PropertyValue<List<DeployTargetLink>>(nameof(DeployTargetRecord), nameof(Links), "links", new List<DeployTargetLink>());
    
    [Required]
    [JsonPropertyName("links")]
    public List<DeployTargetLink> Links
    {
        get => _links.GetValue(InlineErrors);
        set => _links.SetValue(value);
    }

    private PropertyValue<bool> _manualControl = new PropertyValue<bool>(nameof(DeployTargetRecord), nameof(IsManualControl), "manualControl");
    
    [Required]
    [JsonPropertyName("manualControl")]
    public bool IsManualControl
    {
        get => _manualControl.GetValue(InlineErrors);
        set => _manualControl.SetValue(value);
    }

    private PropertyValue<DeploymentInfo?> _next = new PropertyValue<DeploymentInfo?>(nameof(DeployTargetRecord), nameof(Next), "next");
    
    [JsonPropertyName("next")]
    public DeploymentInfo? Next
    {
        get => _next.GetValue(InlineErrors);
        set => _next.SetValue(value);
    }

    private PropertyValue<List<DeployTargetRepositoryDTO>> _repositories = new PropertyValue<List<DeployTargetRepositoryDTO>>(nameof(DeployTargetRecord), nameof(Repositories), "repositories", new List<DeployTargetRepositoryDTO>());
    
    [Required]
    [JsonPropertyName("repositories")]
    public List<DeployTargetRepositoryDTO> Repositories
    {
        get => _repositories.GetValue(InlineErrors);
        set => _repositories.SetValue(value);
    }

    private PropertyValue<List<TDTeam>> _teams = new PropertyValue<List<TDTeam>>(nameof(DeployTargetRecord), nameof(Teams), "teams", new List<TDTeam>());
    
    [Required]
    [JsonPropertyName("teams")]
    public List<TDTeam> Teams
    {
        get => _teams.GetValue(InlineErrors);
        set => _teams.SetValue(value);
    }

    private PropertyValue<List<TDMemberProfile>> _users = new PropertyValue<List<TDMemberProfile>>(nameof(DeployTargetRecord), nameof(Users), "users", new List<TDMemberProfile>());
    
    [Required]
    [JsonPropertyName("users")]
    public List<TDMemberProfile> Users
    {
        get => _users.GetValue(InlineErrors);
        set => _users.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _key.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lastUpdated.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lastDeployed.SetAccessPath(parentChainPath, validateHasBeenSet);
        _channel.SetAccessPath(parentChainPath, validateHasBeenSet);
        _number.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fullNumberId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _channelId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _connectedChannelId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _current.SetAccessPath(parentChainPath, validateHasBeenSet);
        _failTimeoutMinutes.SetAccessPath(parentChainPath, validateHasBeenSet);
        _hangTimeoutMinutes.SetAccessPath(parentChainPath, validateHasBeenSet);
        _links.SetAccessPath(parentChainPath, validateHasBeenSet);
        _manualControl.SetAccessPath(parentChainPath, validateHasBeenSet);
        _next.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositories.SetAccessPath(parentChainPath, validateHasBeenSet);
        _teams.SetAccessPath(parentChainPath, validateHasBeenSet);
        _users.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

