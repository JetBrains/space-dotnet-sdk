// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class RepositoryMirrorOptions
     : IPropagatePropertyAccessPath
{
    public RepositoryMirrorOptions() { }
    
    public RepositoryMirrorOptions(bool syncPeriodically, bool syncOnFetch, bool? allowPush = null, bool? allowAtomicPush = null, bool? mirrorPullRequest = null)
    {
        IsSyncPeriodically = syncPeriodically;
        IsSyncOnFetch = syncOnFetch;
        IsAllowPush = allowPush;
        IsAllowAtomicPush = allowAtomicPush;
        IsMirrorPullRequest = mirrorPullRequest;
    }
    
    private PropertyValue<bool> _syncPeriodically = new PropertyValue<bool>(nameof(RepositoryMirrorOptions), nameof(IsSyncPeriodically), "syncPeriodically");
    
    [Required]
    [JsonPropertyName("syncPeriodically")]
    public bool IsSyncPeriodically
    {
        get => _syncPeriodically.GetValue(InlineErrors);
        set => _syncPeriodically.SetValue(value);
    }

    private PropertyValue<bool> _syncOnFetch = new PropertyValue<bool>(nameof(RepositoryMirrorOptions), nameof(IsSyncOnFetch), "syncOnFetch");
    
    [Required]
    [JsonPropertyName("syncOnFetch")]
    public bool IsSyncOnFetch
    {
        get => _syncOnFetch.GetValue(InlineErrors);
        set => _syncOnFetch.SetValue(value);
    }

    private PropertyValue<bool?> _allowPush = new PropertyValue<bool?>(nameof(RepositoryMirrorOptions), nameof(IsAllowPush), "allowPush");
    
    [JsonPropertyName("allowPush")]
    public bool? IsAllowPush
    {
        get => _allowPush.GetValue(InlineErrors);
        set => _allowPush.SetValue(value);
    }

    private PropertyValue<bool?> _allowAtomicPush = new PropertyValue<bool?>(nameof(RepositoryMirrorOptions), nameof(IsAllowAtomicPush), "allowAtomicPush");
    
    [JsonPropertyName("allowAtomicPush")]
    public bool? IsAllowAtomicPush
    {
        get => _allowAtomicPush.GetValue(InlineErrors);
        set => _allowAtomicPush.SetValue(value);
    }

    private PropertyValue<bool?> _mirrorPullRequest = new PropertyValue<bool?>(nameof(RepositoryMirrorOptions), nameof(IsMirrorPullRequest), "mirrorPullRequest");
    
    [JsonPropertyName("mirrorPullRequest")]
    public bool? IsMirrorPullRequest
    {
        get => _mirrorPullRequest.GetValue(InlineErrors);
        set => _mirrorPullRequest.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _syncPeriodically.SetAccessPath(parentChainPath, validateHasBeenSet);
        _syncOnFetch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _allowPush.SetAccessPath(parentChainPath, validateHasBeenSet);
        _allowAtomicPush.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mirrorPullRequest.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

