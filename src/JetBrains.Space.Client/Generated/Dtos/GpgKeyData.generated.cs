// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GpgKeyData
     : IPropagatePropertyAccessPath
{
    public GpgKeyData() { }
    
    public GpgKeyData(string fingerprint, string publicKey, string userId, bool verified, string comment, DateTime created, DateTime added, bool revoked, DateTime? expires = null, DateTime? revokedAt = null, string? revokeComment = null)
    {
        Fingerprint = fingerprint;
        PublicKey = publicKey;
        UserId = userId;
        IsVerified = verified;
        Comment = comment;
        Created = created;
        Added = added;
        Expires = expires;
        IsRevoked = revoked;
        RevokedAt = revokedAt;
        RevokeComment = revokeComment;
    }
    
    private PropertyValue<string> _fingerprint = new PropertyValue<string>(nameof(GpgKeyData), nameof(Fingerprint), "fingerprint");
    
    [Required]
    [JsonPropertyName("fingerprint")]
    public string Fingerprint
    {
        get => _fingerprint.GetValue(InlineErrors);
        set => _fingerprint.SetValue(value);
    }

    private PropertyValue<string> _publicKey = new PropertyValue<string>(nameof(GpgKeyData), nameof(PublicKey), "publicKey");
    
    [Required]
    [JsonPropertyName("publicKey")]
    public string PublicKey
    {
        get => _publicKey.GetValue(InlineErrors);
        set => _publicKey.SetValue(value);
    }

    private PropertyValue<string> _userId = new PropertyValue<string>(nameof(GpgKeyData), nameof(UserId), "userId");
    
    [Required]
    [JsonPropertyName("userId")]
    public string UserId
    {
        get => _userId.GetValue(InlineErrors);
        set => _userId.SetValue(value);
    }

    private PropertyValue<bool> _verified = new PropertyValue<bool>(nameof(GpgKeyData), nameof(IsVerified), "verified");
    
    [Required]
    [JsonPropertyName("verified")]
    public bool IsVerified
    {
        get => _verified.GetValue(InlineErrors);
        set => _verified.SetValue(value);
    }

    private PropertyValue<string> _comment = new PropertyValue<string>(nameof(GpgKeyData), nameof(Comment), "comment");
    
    [Required]
    [JsonPropertyName("comment")]
    public string Comment
    {
        get => _comment.GetValue(InlineErrors);
        set => _comment.SetValue(value);
    }

    private PropertyValue<DateTime> _created = new PropertyValue<DateTime>(nameof(GpgKeyData), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<DateTime> _added = new PropertyValue<DateTime>(nameof(GpgKeyData), nameof(Added), "added");
    
    [Required]
    [JsonPropertyName("added")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Added
    {
        get => _added.GetValue(InlineErrors);
        set => _added.SetValue(value);
    }

    private PropertyValue<DateTime?> _expires = new PropertyValue<DateTime?>(nameof(GpgKeyData), nameof(Expires), "expires");
    
    [JsonPropertyName("expires")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? Expires
    {
        get => _expires.GetValue(InlineErrors);
        set => _expires.SetValue(value);
    }

    private PropertyValue<bool> _revoked = new PropertyValue<bool>(nameof(GpgKeyData), nameof(IsRevoked), "revoked");
    
    [Required]
    [JsonPropertyName("revoked")]
    public bool IsRevoked
    {
        get => _revoked.GetValue(InlineErrors);
        set => _revoked.SetValue(value);
    }

    private PropertyValue<DateTime?> _revokedAt = new PropertyValue<DateTime?>(nameof(GpgKeyData), nameof(RevokedAt), "revokedAt");
    
    [JsonPropertyName("revokedAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? RevokedAt
    {
        get => _revokedAt.GetValue(InlineErrors);
        set => _revokedAt.SetValue(value);
    }

    private PropertyValue<string?> _revokeComment = new PropertyValue<string?>(nameof(GpgKeyData), nameof(RevokeComment), "revokeComment");
    
    [JsonPropertyName("revokeComment")]
    public string? RevokeComment
    {
        get => _revokeComment.GetValue(InlineErrors);
        set => _revokeComment.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _fingerprint.SetAccessPath(parentChainPath, validateHasBeenSet);
        _publicKey.SetAccessPath(parentChainPath, validateHasBeenSet);
        _userId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _verified.SetAccessPath(parentChainPath, validateHasBeenSet);
        _comment.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _added.SetAccessPath(parentChainPath, validateHasBeenSet);
        _expires.SetAccessPath(parentChainPath, validateHasBeenSet);
        _revoked.SetAccessPath(parentChainPath, validateHasBeenSet);
        _revokedAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _revokeComment.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

