// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class PackageRepositoryConnectionSpace
     : PackageRepositoryConnection, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public override string? ClassName => "PackageRepositoryConnection.Space";
    
    public PackageRepositoryConnectionSpace() { }
    
    public PackageRepositoryConnectionSpace(string id, bool enableCaching, bool stickyPackages, ProjectPackageRepository repository, List<string>? packageNameFilters = null)
    {
        Id = id;
        IsEnableCaching = enableCaching;
        IsStickyPackages = stickyPackages;
        PackageNameFilters = packageNameFilters;
        Repository = repository;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(PackageRepositoryConnectionSpace), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _enableCaching = new PropertyValue<bool>(nameof(PackageRepositoryConnectionSpace), nameof(IsEnableCaching), "enableCaching");
    
    [Required]
    [JsonPropertyName("enableCaching")]
    public bool IsEnableCaching
    {
        get => _enableCaching.GetValue(InlineErrors);
        set => _enableCaching.SetValue(value);
    }

    private PropertyValue<bool> _stickyPackages = new PropertyValue<bool>(nameof(PackageRepositoryConnectionSpace), nameof(IsStickyPackages), "stickyPackages");
    
    [Required]
    [JsonPropertyName("stickyPackages")]
    public bool IsStickyPackages
    {
        get => _stickyPackages.GetValue(InlineErrors);
        set => _stickyPackages.SetValue(value);
    }

    private PropertyValue<List<string>?> _packageNameFilters = new PropertyValue<List<string>?>(nameof(PackageRepositoryConnectionSpace), nameof(PackageNameFilters), "packageNameFilters");
    
    [JsonPropertyName("packageNameFilters")]
    public List<string>? PackageNameFilters
    {
        get => _packageNameFilters.GetValue(InlineErrors);
        set => _packageNameFilters.SetValue(value);
    }

    private PropertyValue<ProjectPackageRepository> _repository = new PropertyValue<ProjectPackageRepository>(nameof(PackageRepositoryConnectionSpace), nameof(Repository), "repository");
    
    [Required]
    [JsonPropertyName("repository")]
    public ProjectPackageRepository Repository
    {
        get => _repository.GetValue(InlineErrors);
        set => _repository.SetValue(value);
    }

    public override void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _enableCaching.SetAccessPath(parentChainPath, validateHasBeenSet);
        _stickyPackages.SetAccessPath(parentChainPath, validateHasBeenSet);
        _packageNameFilters.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repository.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

