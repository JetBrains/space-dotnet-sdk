// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class CertificateInfo
     : IPropagatePropertyAccessPath
{
    public CertificateInfo() { }
    
    public CertificateInfo(string certificateType, int version, string serialNumber, string issuedBy, string issuedTo, DateTime validFrom, DateTime validTo, string algorithm, Fingerprint fingerprint)
    {
        CertificateType = certificateType;
        Version = version;
        SerialNumber = serialNumber;
        IssuedBy = issuedBy;
        IssuedTo = issuedTo;
        ValidFrom = validFrom;
        ValidTo = validTo;
        Algorithm = algorithm;
        Fingerprint = fingerprint;
    }
    
    private PropertyValue<string> _certificateType = new PropertyValue<string>(nameof(CertificateInfo), nameof(CertificateType), "certificateType");
    
    [Required]
    [JsonPropertyName("certificateType")]
    public string CertificateType
    {
        get => _certificateType.GetValue(InlineErrors);
        set => _certificateType.SetValue(value);
    }

    private PropertyValue<int> _version = new PropertyValue<int>(nameof(CertificateInfo), nameof(Version), "version");
    
    [Required]
    [JsonPropertyName("version")]
    public int Version
    {
        get => _version.GetValue(InlineErrors);
        set => _version.SetValue(value);
    }

    private PropertyValue<string> _serialNumber = new PropertyValue<string>(nameof(CertificateInfo), nameof(SerialNumber), "serialNumber");
    
    [Required]
    [JsonPropertyName("serialNumber")]
    public string SerialNumber
    {
        get => _serialNumber.GetValue(InlineErrors);
        set => _serialNumber.SetValue(value);
    }

    private PropertyValue<string> _issuedBy = new PropertyValue<string>(nameof(CertificateInfo), nameof(IssuedBy), "issuedBy");
    
    [Required]
    [JsonPropertyName("issuedBy")]
    public string IssuedBy
    {
        get => _issuedBy.GetValue(InlineErrors);
        set => _issuedBy.SetValue(value);
    }

    private PropertyValue<string> _issuedTo = new PropertyValue<string>(nameof(CertificateInfo), nameof(IssuedTo), "issuedTo");
    
    [Required]
    [JsonPropertyName("issuedTo")]
    public string IssuedTo
    {
        get => _issuedTo.GetValue(InlineErrors);
        set => _issuedTo.SetValue(value);
    }

    private PropertyValue<DateTime> _validFrom = new PropertyValue<DateTime>(nameof(CertificateInfo), nameof(ValidFrom), "validFrom");
    
    [Required]
    [JsonPropertyName("validFrom")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime ValidFrom
    {
        get => _validFrom.GetValue(InlineErrors);
        set => _validFrom.SetValue(value);
    }

    private PropertyValue<DateTime> _validTo = new PropertyValue<DateTime>(nameof(CertificateInfo), nameof(ValidTo), "validTo");
    
    [Required]
    [JsonPropertyName("validTo")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime ValidTo
    {
        get => _validTo.GetValue(InlineErrors);
        set => _validTo.SetValue(value);
    }

    private PropertyValue<string> _algorithm = new PropertyValue<string>(nameof(CertificateInfo), nameof(Algorithm), "algorithm");
    
    [Required]
    [JsonPropertyName("algorithm")]
    public string Algorithm
    {
        get => _algorithm.GetValue(InlineErrors);
        set => _algorithm.SetValue(value);
    }

    private PropertyValue<Fingerprint> _fingerprint = new PropertyValue<Fingerprint>(nameof(CertificateInfo), nameof(Fingerprint), "fingerprint");
    
    [Required]
    [JsonPropertyName("fingerprint")]
    public Fingerprint Fingerprint
    {
        get => _fingerprint.GetValue(InlineErrors);
        set => _fingerprint.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _certificateType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _version.SetAccessPath(parentChainPath, validateHasBeenSet);
        _serialNumber.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issuedBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issuedTo.SetAccessPath(parentChainPath, validateHasBeenSet);
        _validFrom.SetAccessPath(parentChainPath, validateHasBeenSet);
        _validTo.SetAccessPath(parentChainPath, validateHasBeenSet);
        _algorithm.SetAccessPath(parentChainPath, validateHasBeenSet);
        _fingerprint.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

