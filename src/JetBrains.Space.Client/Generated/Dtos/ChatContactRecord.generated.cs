// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ChatContactRecord
     : IPropagatePropertyAccessPath
{
    public ChatContactRecord() { }
    
    public ChatContactRecord(string id, bool archived, string key, ChatContactDetails details, string channelType, DateTime subscribedSince, bool pinned, MessageInfo? lastMessage = null, M2UnreadStatus? unreadStatus = null, DateTime? readTime = null, string? pinnedPrevId = null, string? draft = null, long? draftTime = null, long? lastChildMessageTime = null, bool? deleted = null, bool? muted = null)
    {
        Id = id;
        IsArchived = archived;
        Key = key;
        Details = details;
        ChannelType = channelType;
        LastMessage = lastMessage;
        UnreadStatus = unreadStatus;
        ReadTime = readTime;
        SubscribedSince = subscribedSince;
        IsPinned = pinned;
        PinnedPrevId = pinnedPrevId;
        Draft = draft;
        DraftTime = draftTime;
        LastChildMessageTime = lastChildMessageTime;
        IsDeleted = deleted;
        IsMuted = muted;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(ChatContactRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(ChatContactRecord), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<string> _key = new PropertyValue<string>(nameof(ChatContactRecord), nameof(Key), "key");
    
    [Required]
    [JsonPropertyName("key")]
    public string Key
    {
        get => _key.GetValue(InlineErrors);
        set => _key.SetValue(value);
    }

    private PropertyValue<ChatContactDetails> _details = new PropertyValue<ChatContactDetails>(nameof(ChatContactRecord), nameof(Details), "details");
    
    [Required]
    [JsonPropertyName("details")]
    public ChatContactDetails Details
    {
        get => _details.GetValue(InlineErrors);
        set => _details.SetValue(value);
    }

    private PropertyValue<string> _channelType = new PropertyValue<string>(nameof(ChatContactRecord), nameof(ChannelType), "channelType");
    
    [Required]
    [JsonPropertyName("channelType")]
    public string ChannelType
    {
        get => _channelType.GetValue(InlineErrors);
        set => _channelType.SetValue(value);
    }

    private PropertyValue<MessageInfo?> _lastMessage = new PropertyValue<MessageInfo?>(nameof(ChatContactRecord), nameof(LastMessage), "lastMessage");
    
    [JsonPropertyName("lastMessage")]
    public MessageInfo? LastMessage
    {
        get => _lastMessage.GetValue(InlineErrors);
        set => _lastMessage.SetValue(value);
    }

    private PropertyValue<M2UnreadStatus?> _unreadStatus = new PropertyValue<M2UnreadStatus?>(nameof(ChatContactRecord), nameof(UnreadStatus), "unreadStatus");
    
    [JsonPropertyName("unreadStatus")]
    public M2UnreadStatus? UnreadStatus
    {
        get => _unreadStatus.GetValue(InlineErrors);
        set => _unreadStatus.SetValue(value);
    }

    private PropertyValue<DateTime?> _readTime = new PropertyValue<DateTime?>(nameof(ChatContactRecord), nameof(ReadTime), "readTime");
    
    [JsonPropertyName("readTime")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? ReadTime
    {
        get => _readTime.GetValue(InlineErrors);
        set => _readTime.SetValue(value);
    }

    private PropertyValue<DateTime> _subscribedSince = new PropertyValue<DateTime>(nameof(ChatContactRecord), nameof(SubscribedSince), "subscribedSince");
    
    [Required]
    [JsonPropertyName("subscribedSince")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime SubscribedSince
    {
        get => _subscribedSince.GetValue(InlineErrors);
        set => _subscribedSince.SetValue(value);
    }

    private PropertyValue<bool> _pinned = new PropertyValue<bool>(nameof(ChatContactRecord), nameof(IsPinned), "pinned");
    
    [Required]
    [JsonPropertyName("pinned")]
    public bool IsPinned
    {
        get => _pinned.GetValue(InlineErrors);
        set => _pinned.SetValue(value);
    }

    private PropertyValue<string?> _pinnedPrevId = new PropertyValue<string?>(nameof(ChatContactRecord), nameof(PinnedPrevId), "pinnedPrevId");
    
    [JsonPropertyName("pinnedPrevId")]
    public string? PinnedPrevId
    {
        get => _pinnedPrevId.GetValue(InlineErrors);
        set => _pinnedPrevId.SetValue(value);
    }

    private PropertyValue<string?> _draft = new PropertyValue<string?>(nameof(ChatContactRecord), nameof(Draft), "draft");
    
    [JsonPropertyName("draft")]
    public string? Draft
    {
        get => _draft.GetValue(InlineErrors);
        set => _draft.SetValue(value);
    }

    private PropertyValue<long?> _draftTime = new PropertyValue<long?>(nameof(ChatContactRecord), nameof(DraftTime), "draftTime");
    
    [JsonPropertyName("draftTime")]
    public long? DraftTime
    {
        get => _draftTime.GetValue(InlineErrors);
        set => _draftTime.SetValue(value);
    }

    private PropertyValue<long?> _lastChildMessageTime = new PropertyValue<long?>(nameof(ChatContactRecord), nameof(LastChildMessageTime), "lastChildMessageTime");
    
    [JsonPropertyName("lastChildMessageTime")]
    public long? LastChildMessageTime
    {
        get => _lastChildMessageTime.GetValue(InlineErrors);
        set => _lastChildMessageTime.SetValue(value);
    }

    private PropertyValue<bool?> _deleted = new PropertyValue<bool?>(nameof(ChatContactRecord), nameof(IsDeleted), "deleted");
    
    [JsonPropertyName("deleted")]
    public bool? IsDeleted
    {
        get => _deleted.GetValue(InlineErrors);
        set => _deleted.SetValue(value);
    }

    private PropertyValue<bool?> _muted = new PropertyValue<bool?>(nameof(ChatContactRecord), nameof(IsMuted), "muted");
    
    [JsonPropertyName("muted")]
    public bool? IsMuted
    {
        get => _muted.GetValue(InlineErrors);
        set => _muted.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _key.SetAccessPath(parentChainPath, validateHasBeenSet);
        _details.SetAccessPath(parentChainPath, validateHasBeenSet);
        _channelType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lastMessage.SetAccessPath(parentChainPath, validateHasBeenSet);
        _unreadStatus.SetAccessPath(parentChainPath, validateHasBeenSet);
        _readTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _subscribedSince.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pinned.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pinnedPrevId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _draft.SetAccessPath(parentChainPath, validateHasBeenSet);
        _draftTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lastChildMessageTime.SetAccessPath(parentChainPath, validateHasBeenSet);
        _deleted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _muted.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

