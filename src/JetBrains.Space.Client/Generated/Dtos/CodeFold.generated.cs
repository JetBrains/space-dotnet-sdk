// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class CodeFold
     : IPropagatePropertyAccessPath
{
    public CodeFold() { }
    
    public CodeFold(int startLine, int linesCount, string foldedText, List<SyntaxMarkup> foldedSyntax)
    {
        StartLine = startLine;
        LinesCount = linesCount;
        FoldedText = foldedText;
        FoldedSyntax = foldedSyntax;
    }
    
    private PropertyValue<int> _startLine = new PropertyValue<int>(nameof(CodeFold), nameof(StartLine), "startLine");
    
    [Required]
    [JsonPropertyName("startLine")]
    public int StartLine
    {
        get => _startLine.GetValue(InlineErrors);
        set => _startLine.SetValue(value);
    }

    private PropertyValue<int> _linesCount = new PropertyValue<int>(nameof(CodeFold), nameof(LinesCount), "linesCount");
    
    [Required]
    [JsonPropertyName("linesCount")]
    public int LinesCount
    {
        get => _linesCount.GetValue(InlineErrors);
        set => _linesCount.SetValue(value);
    }

    private PropertyValue<string> _foldedText = new PropertyValue<string>(nameof(CodeFold), nameof(FoldedText), "foldedText");
    
    [Required]
    [JsonPropertyName("foldedText")]
    public string FoldedText
    {
        get => _foldedText.GetValue(InlineErrors);
        set => _foldedText.SetValue(value);
    }

    private PropertyValue<List<SyntaxMarkup>> _foldedSyntax = new PropertyValue<List<SyntaxMarkup>>(nameof(CodeFold), nameof(FoldedSyntax), "foldedSyntax", new List<SyntaxMarkup>());
    
    [Required]
    [JsonPropertyName("foldedSyntax")]
    public List<SyntaxMarkup> FoldedSyntax
    {
        get => _foldedSyntax.GetValue(InlineErrors);
        set => _foldedSyntax.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _startLine.SetAccessPath(parentChainPath, validateHasBeenSet);
        _linesCount.SetAccessPath(parentChainPath, validateHasBeenSet);
        _foldedText.SetAccessPath(parentChainPath, validateHasBeenSet);
        _foldedSyntax.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

