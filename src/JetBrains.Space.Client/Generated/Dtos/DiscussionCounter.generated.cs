// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class DiscussionCounter
     : IPropagatePropertyAccessPath
{
    public DiscussionCounter() { }
    
    public DiscussionCounter(int resolved, int unresolved, int unresolvedSuggestedEdits, int acceptedSuggestedEdits, int rejectedSuggestedEdits)
    {
        Resolved = resolved;
        Unresolved = unresolved;
        UnresolvedSuggestedEdits = unresolvedSuggestedEdits;
        AcceptedSuggestedEdits = acceptedSuggestedEdits;
        RejectedSuggestedEdits = rejectedSuggestedEdits;
    }
    
    private PropertyValue<int> _resolved = new PropertyValue<int>(nameof(DiscussionCounter), nameof(Resolved), "resolved");
    
    [Required]
    [JsonPropertyName("resolved")]
    public int Resolved
    {
        get => _resolved.GetValue(InlineErrors);
        set => _resolved.SetValue(value);
    }

    private PropertyValue<int> _unresolved = new PropertyValue<int>(nameof(DiscussionCounter), nameof(Unresolved), "unresolved");
    
    [Required]
    [JsonPropertyName("unresolved")]
    public int Unresolved
    {
        get => _unresolved.GetValue(InlineErrors);
        set => _unresolved.SetValue(value);
    }

    private PropertyValue<int> _unresolvedSuggestedEdits = new PropertyValue<int>(nameof(DiscussionCounter), nameof(UnresolvedSuggestedEdits), "unresolvedSuggestedEdits");
    
    [Required]
    [JsonPropertyName("unresolvedSuggestedEdits")]
    public int UnresolvedSuggestedEdits
    {
        get => _unresolvedSuggestedEdits.GetValue(InlineErrors);
        set => _unresolvedSuggestedEdits.SetValue(value);
    }

    private PropertyValue<int> _acceptedSuggestedEdits = new PropertyValue<int>(nameof(DiscussionCounter), nameof(AcceptedSuggestedEdits), "acceptedSuggestedEdits");
    
    [Required]
    [JsonPropertyName("acceptedSuggestedEdits")]
    public int AcceptedSuggestedEdits
    {
        get => _acceptedSuggestedEdits.GetValue(InlineErrors);
        set => _acceptedSuggestedEdits.SetValue(value);
    }

    private PropertyValue<int> _rejectedSuggestedEdits = new PropertyValue<int>(nameof(DiscussionCounter), nameof(RejectedSuggestedEdits), "rejectedSuggestedEdits");
    
    [Required]
    [JsonPropertyName("rejectedSuggestedEdits")]
    public int RejectedSuggestedEdits
    {
        get => _rejectedSuggestedEdits.GetValue(InlineErrors);
        set => _rejectedSuggestedEdits.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _resolved.SetAccessPath(parentChainPath, validateHasBeenSet);
        _unresolved.SetAccessPath(parentChainPath, validateHasBeenSet);
        _unresolvedSuggestedEdits.SetAccessPath(parentChainPath, validateHasBeenSet);
        _acceptedSuggestedEdits.SetAccessPath(parentChainPath, validateHasBeenSet);
        _rejectedSuggestedEdits.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

