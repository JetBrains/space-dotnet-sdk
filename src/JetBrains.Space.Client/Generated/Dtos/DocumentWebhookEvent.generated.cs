// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class DocumentWebhookEvent
     : WebhookEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "DocumentWebhookEvent";
    
    public DocumentWebhookEvent() { }
    
    public DocumentWebhookEvent(KMetaMod meta, string document, List<CPrincipal> changeAuthors, DateTime version, DateTime @base, Document? documentRef = null)
    {
        Meta = meta;
        Document = document;
        DocumentRef = documentRef;
        ChangeAuthors = changeAuthors;
        Version = version;
        Base = @base;
    }
    
    private PropertyValue<KMetaMod> _meta = new PropertyValue<KMetaMod>(nameof(DocumentWebhookEvent), nameof(Meta), "meta");
    
    [Required]
    [JsonPropertyName("meta")]
    public KMetaMod Meta
    {
        get => _meta.GetValue(InlineErrors);
        set => _meta.SetValue(value);
    }

    private PropertyValue<string> _document = new PropertyValue<string>(nameof(DocumentWebhookEvent), nameof(Document), "document");
    
    [Required]
    [JsonPropertyName("document")]
    public string Document
    {
        get => _document.GetValue(InlineErrors);
        set => _document.SetValue(value);
    }

    private PropertyValue<Document?> _documentRef = new PropertyValue<Document?>(nameof(DocumentWebhookEvent), nameof(DocumentRef), "documentRef");
    
    [JsonPropertyName("documentRef")]
    public Document? DocumentRef
    {
        get => _documentRef.GetValue(InlineErrors);
        set => _documentRef.SetValue(value);
    }

    private PropertyValue<List<CPrincipal>> _changeAuthors = new PropertyValue<List<CPrincipal>>(nameof(DocumentWebhookEvent), nameof(ChangeAuthors), "changeAuthors", new List<CPrincipal>());
    
    [Required]
    [JsonPropertyName("changeAuthors")]
    public List<CPrincipal> ChangeAuthors
    {
        get => _changeAuthors.GetValue(InlineErrors);
        set => _changeAuthors.SetValue(value);
    }

    private PropertyValue<DateTime> _version = new PropertyValue<DateTime>(nameof(DocumentWebhookEvent), nameof(Version), "version");
    
    [Required]
    [JsonPropertyName("version")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Version
    {
        get => _version.GetValue(InlineErrors);
        set => _version.SetValue(value);
    }

    private PropertyValue<DateTime> _base = new PropertyValue<DateTime>(nameof(DocumentWebhookEvent), nameof(Base), "base");
    
    [Required]
    [JsonPropertyName("base")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Base
    {
        get => _base.GetValue(InlineErrors);
        set => _base.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _meta.SetAccessPath(parentChainPath, validateHasBeenSet);
        _document.SetAccessPath(parentChainPath, validateHasBeenSet);
        _documentRef.SetAccessPath(parentChainPath, validateHasBeenSet);
        _changeAuthors.SetAccessPath(parentChainPath, validateHasBeenSet);
        _version.SetAccessPath(parentChainPath, validateHasBeenSet);
        _base.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

