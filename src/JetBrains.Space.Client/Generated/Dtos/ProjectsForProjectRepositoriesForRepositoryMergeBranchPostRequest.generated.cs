// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public class ProjectsForProjectRepositoriesForRepositoryMergeBranchPostRequest
     : IPropagatePropertyAccessPath
{
    public ProjectsForProjectRepositoriesForRepositoryMergeBranchPostRequest() { }
    
    public ProjectsForProjectRepositoriesForRepositoryMergeBranchPostRequest(string sourceBranch, GitMergeMode mergeMode, string? targetBranch = null, string? commitMessage = null)
    {
        SourceBranch = sourceBranch;
        TargetBranch = targetBranch;
        CommitMessage = commitMessage;
        MergeMode = mergeMode;
    }
    
    private PropertyValue<string> _sourceBranch = new PropertyValue<string>(nameof(ProjectsForProjectRepositoriesForRepositoryMergeBranchPostRequest), nameof(SourceBranch), "sourceBranch");
    
    [Required]
    [JsonPropertyName("sourceBranch")]
    public string SourceBranch
    {
        get => _sourceBranch.GetValue(InlineErrors);
        set => _sourceBranch.SetValue(value);
    }

    private PropertyValue<string?> _targetBranch = new PropertyValue<string?>(nameof(ProjectsForProjectRepositoriesForRepositoryMergeBranchPostRequest), nameof(TargetBranch), "targetBranch");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("targetBranch")]
    public string? TargetBranch
    {
        get => _targetBranch.GetValue(InlineErrors);
        set => _targetBranch.SetValue(value);
    }

    private PropertyValue<string?> _commitMessage = new PropertyValue<string?>(nameof(ProjectsForProjectRepositoriesForRepositoryMergeBranchPostRequest), nameof(CommitMessage), "commitMessage");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("commitMessage")]
    public string? CommitMessage
    {
        get => _commitMessage.GetValue(InlineErrors);
        set => _commitMessage.SetValue(value);
    }

    private PropertyValue<GitMergeMode> _mergeMode = new PropertyValue<GitMergeMode>(nameof(ProjectsForProjectRepositoriesForRepositoryMergeBranchPostRequest), nameof(MergeMode), "mergeMode");
    
    [Required]
    [JsonPropertyName("mergeMode")]
    public GitMergeMode MergeMode
    {
        get => _mergeMode.GetValue(InlineErrors);
        set => _mergeMode.SetValue(value);
    }

    public virtual void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _sourceBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _commitMessage.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mergeMode.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

