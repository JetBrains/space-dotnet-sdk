// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public class ProjectsForProjectPlanningIssuesImportPostRequest
     : IPropagatePropertyAccessPath
{
    public ProjectsForProjectPlanningIssuesImportPostRequest() { }
    
    public ProjectsForProjectPlanningIssuesImportPostRequest(ImportMetadata metadata, List<ExternalIssue> issues, ImportMissingPolicy assigneeMissingPolicy, ImportMissingPolicy statusMissingPolicy, ImportExistsPolicy onExistsPolicy, bool dryRun, bool notifySubscribers = true)
    {
        Metadata = metadata;
        Issues = issues;
        AssigneeMissingPolicy = assigneeMissingPolicy;
        StatusMissingPolicy = statusMissingPolicy;
        OnExistsPolicy = onExistsPolicy;
        IsDryRun = dryRun;
        IsNotifySubscribers = notifySubscribers;
    }
    
    private PropertyValue<ImportMetadata> _metadata = new PropertyValue<ImportMetadata>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(Metadata), "metadata");
    
    [Required]
    [JsonPropertyName("metadata")]
    public ImportMetadata Metadata
    {
        get => _metadata.GetValue(InlineErrors);
        set => _metadata.SetValue(value);
    }

    private PropertyValue<List<ExternalIssue>> _issues = new PropertyValue<List<ExternalIssue>>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(Issues), "issues", new List<ExternalIssue>());
    
    [Required]
    [JsonPropertyName("issues")]
    public List<ExternalIssue> Issues
    {
        get => _issues.GetValue(InlineErrors);
        set => _issues.SetValue(value);
    }

    private PropertyValue<ImportMissingPolicy> _assigneeMissingPolicy = new PropertyValue<ImportMissingPolicy>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(AssigneeMissingPolicy), "assigneeMissingPolicy");
    
    [JsonPropertyName("assigneeMissingPolicy")]
    public ImportMissingPolicy AssigneeMissingPolicy
    {
        get => _assigneeMissingPolicy.GetValue(InlineErrors);
        set => _assigneeMissingPolicy.SetValue(value);
    }

    private PropertyValue<ImportMissingPolicy> _statusMissingPolicy = new PropertyValue<ImportMissingPolicy>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(StatusMissingPolicy), "statusMissingPolicy");
    
    [JsonPropertyName("statusMissingPolicy")]
    public ImportMissingPolicy StatusMissingPolicy
    {
        get => _statusMissingPolicy.GetValue(InlineErrors);
        set => _statusMissingPolicy.SetValue(value);
    }

    private PropertyValue<ImportExistsPolicy> _onExistsPolicy = new PropertyValue<ImportExistsPolicy>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(OnExistsPolicy), "onExistsPolicy");
    
    [JsonPropertyName("onExistsPolicy")]
    public ImportExistsPolicy OnExistsPolicy
    {
        get => _onExistsPolicy.GetValue(InlineErrors);
        set => _onExistsPolicy.SetValue(value);
    }

    private PropertyValue<bool> _dryRun = new PropertyValue<bool>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(IsDryRun), "dryRun");
    
    [Required]
    [JsonPropertyName("dryRun")]
    public bool IsDryRun
    {
        get => _dryRun.GetValue(InlineErrors);
        set => _dryRun.SetValue(value);
    }

    private PropertyValue<bool> _notifySubscribers = new PropertyValue<bool>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(IsNotifySubscribers), "notifySubscribers");
    
    [JsonPropertyName("notifySubscribers")]
    public bool IsNotifySubscribers
    {
        get => _notifySubscribers.GetValue(InlineErrors);
        set => _notifySubscribers.SetValue(value);
    }

    public virtual void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _metadata.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issues.SetAccessPath(parentChainPath, validateHasBeenSet);
        _assigneeMissingPolicy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _statusMissingPolicy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _onExistsPolicy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _dryRun.SetAccessPath(parentChainPath, validateHasBeenSet);
        _notifySubscribers.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

