// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public class ProjectsForProjectPlanningIssuesImportPostRequest
         : IPropagatePropertyAccessPath
    {
        public ProjectsForProjectPlanningIssuesImportPostRequest() { }
        
        public ProjectsForProjectPlanningIssuesImportPostRequest(ImportMetadata metadata, List<ExternalIssue> issues, ImportMissingPolicy assigneeMissingPolicy, ImportMissingPolicy statusMissingPolicy, ImportExistsPolicy onExistsPolicy, bool dryRun)
        {
            Metadata = metadata;
            Issues = issues;
            AssigneeMissingPolicy = assigneeMissingPolicy;
            StatusMissingPolicy = statusMissingPolicy;
            OnExistsPolicy = onExistsPolicy;
            IsDryRun = dryRun;
        }
        
        private PropertyValue<ImportMetadata> _metadata = new PropertyValue<ImportMetadata>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(Metadata));
        
        [Required]
        [JsonPropertyName("metadata")]
        public ImportMetadata Metadata
        {
            get => _metadata.GetValue();
            set => _metadata.SetValue(value);
        }
    
        private PropertyValue<List<ExternalIssue>> _issues = new PropertyValue<List<ExternalIssue>>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(Issues));
        
        [Required]
        [JsonPropertyName("issues")]
        public List<ExternalIssue> Issues
        {
            get => _issues.GetValue();
            set => _issues.SetValue(value);
        }
    
        private PropertyValue<ImportMissingPolicy> _assigneeMissingPolicy = new PropertyValue<ImportMissingPolicy>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(AssigneeMissingPolicy));
        
        [JsonPropertyName("assigneeMissingPolicy")]
        public ImportMissingPolicy AssigneeMissingPolicy
        {
            get => _assigneeMissingPolicy.GetValue();
            set => _assigneeMissingPolicy.SetValue(value);
        }
    
        private PropertyValue<ImportMissingPolicy> _statusMissingPolicy = new PropertyValue<ImportMissingPolicy>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(StatusMissingPolicy));
        
        [JsonPropertyName("statusMissingPolicy")]
        public ImportMissingPolicy StatusMissingPolicy
        {
            get => _statusMissingPolicy.GetValue();
            set => _statusMissingPolicy.SetValue(value);
        }
    
        private PropertyValue<ImportExistsPolicy> _onExistsPolicy = new PropertyValue<ImportExistsPolicy>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(OnExistsPolicy));
        
        [JsonPropertyName("onExistsPolicy")]
        public ImportExistsPolicy OnExistsPolicy
        {
            get => _onExistsPolicy.GetValue();
            set => _onExistsPolicy.SetValue(value);
        }
    
        private PropertyValue<bool> _dryRun = new PropertyValue<bool>(nameof(ProjectsForProjectPlanningIssuesImportPostRequest), nameof(IsDryRun));
        
        [Required]
        [JsonPropertyName("dryRun")]
        public bool IsDryRun
        {
            get => _dryRun.GetValue();
            set => _dryRun.SetValue(value);
        }
    
        public virtual void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _metadata.SetAccessPath(path, validateHasBeenSet);
            _issues.SetAccessPath(path, validateHasBeenSet);
            _assigneeMissingPolicy.SetAccessPath(path, validateHasBeenSet);
            _statusMissingPolicy.SetAccessPath(path, validateHasBeenSet);
            _onExistsPolicy.SetAccessPath(path, validateHasBeenSet);
            _dryRun.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
