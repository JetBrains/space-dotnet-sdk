// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public class ProjectsForProjectRepositoriesForRepositoryRebaseBranchPostRequest
     : IPropagatePropertyAccessPath
{
    public ProjectsForProjectRepositoriesForRepositoryRebaseBranchPostRequest() { }
    
    public ProjectsForProjectRepositoriesForRepositoryRebaseBranchPostRequest(string sourceBranch, GitRebaseMode rebaseMode, GitSquashMode squash, string? targetBranch = null, string? squashedCommitMessage = null)
    {
        SourceBranch = sourceBranch;
        TargetBranch = targetBranch;
        RebaseMode = rebaseMode;
        Squash = squash;
        SquashedCommitMessage = squashedCommitMessage;
    }
    
    private PropertyValue<string> _sourceBranch = new PropertyValue<string>(nameof(ProjectsForProjectRepositoriesForRepositoryRebaseBranchPostRequest), nameof(SourceBranch), "sourceBranch");
    
    [Required]
    [JsonPropertyName("sourceBranch")]
    public string SourceBranch
    {
        get => _sourceBranch.GetValue(InlineErrors);
        set => _sourceBranch.SetValue(value);
    }

    private PropertyValue<string?> _targetBranch = new PropertyValue<string?>(nameof(ProjectsForProjectRepositoriesForRepositoryRebaseBranchPostRequest), nameof(TargetBranch), "targetBranch");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("targetBranch")]
    public string? TargetBranch
    {
        get => _targetBranch.GetValue(InlineErrors);
        set => _targetBranch.SetValue(value);
    }

    private PropertyValue<GitRebaseMode> _rebaseMode = new PropertyValue<GitRebaseMode>(nameof(ProjectsForProjectRepositoriesForRepositoryRebaseBranchPostRequest), nameof(RebaseMode), "rebaseMode");
    
    [Required]
    [JsonPropertyName("rebaseMode")]
    public GitRebaseMode RebaseMode
    {
        get => _rebaseMode.GetValue(InlineErrors);
        set => _rebaseMode.SetValue(value);
    }

    private PropertyValue<GitSquashMode> _squash = new PropertyValue<GitSquashMode>(nameof(ProjectsForProjectRepositoriesForRepositoryRebaseBranchPostRequest), nameof(Squash), "squash");
    
    [Required]
    [JsonPropertyName("squash")]
    public GitSquashMode Squash
    {
        get => _squash.GetValue(InlineErrors);
        set => _squash.SetValue(value);
    }

    private PropertyValue<string?> _squashedCommitMessage = new PropertyValue<string?>(nameof(ProjectsForProjectRepositoriesForRepositoryRebaseBranchPostRequest), nameof(SquashedCommitMessage), "squashedCommitMessage");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("squashedCommitMessage")]
    public string? SquashedCommitMessage
    {
        get => _squashedCommitMessage.GetValue(InlineErrors);
        set => _squashedCommitMessage.SetValue(value);
    }

    public virtual void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _sourceBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _rebaseMode.SetAccessPath(parentChainPath, validateHasBeenSet);
        _squash.SetAccessPath(parentChainPath, validateHasBeenSet);
        _squashedCommitMessage.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

