// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitRebaseResult
     : IPropagatePropertyAccessPath
{
    public GitRebaseResult() { }
    
    public GitRebaseResult(bool success, string message, List<string> resultCommitIds, List<GitUpdatedHead>? updatedHeads = null)
    {
        IsSuccess = success;
        Message = message;
        ResultCommitIds = resultCommitIds;
        UpdatedHeads = updatedHeads;
    }
    
    private PropertyValue<bool> _success = new PropertyValue<bool>(nameof(GitRebaseResult), nameof(IsSuccess), "success");
    
    [Required]
    [JsonPropertyName("success")]
    public bool IsSuccess
    {
        get => _success.GetValue(InlineErrors);
        set => _success.SetValue(value);
    }

    private PropertyValue<string> _message = new PropertyValue<string>(nameof(GitRebaseResult), nameof(Message), "message");
    
    [Required]
    [JsonPropertyName("message")]
    public string Message
    {
        get => _message.GetValue(InlineErrors);
        set => _message.SetValue(value);
    }

    private PropertyValue<List<string>> _resultCommitIds = new PropertyValue<List<string>>(nameof(GitRebaseResult), nameof(ResultCommitIds), "resultCommitIds", new List<string>());
    
    [Required]
    [JsonPropertyName("resultCommitIds")]
    public List<string> ResultCommitIds
    {
        get => _resultCommitIds.GetValue(InlineErrors);
        set => _resultCommitIds.SetValue(value);
    }

    private PropertyValue<List<GitUpdatedHead>?> _updatedHeads = new PropertyValue<List<GitUpdatedHead>?>(nameof(GitRebaseResult), nameof(UpdatedHeads), "updatedHeads");
    
    [JsonPropertyName("updatedHeads")]
    public List<GitUpdatedHead>? UpdatedHeads
    {
        get => _updatedHeads.GetValue(InlineErrors);
        set => _updatedHeads.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _success.SetAccessPath(parentChainPath, validateHasBeenSet);
        _message.SetAccessPath(parentChainPath, validateHasBeenSet);
        _resultCommitIds.SetAccessPath(parentChainPath, validateHasBeenSet);
        _updatedHeads.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

