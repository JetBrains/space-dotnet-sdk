// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class SRepoPushWebhookEvent
     : WebhookEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "SRepoPushWebhookEvent";
    
    public SRepoPushWebhookEvent() { }
    
    public SRepoPushWebhookEvent(ProjectKey projectKey, string repository, string head, bool created, bool deleted, bool forced, bool hasMoreCommits, string? oldCommitId = null, string? newCommitId = null, List<GitCommitInfo>? commits = null)
    {
        ProjectKey = projectKey;
        Repository = repository;
        Head = head;
        OldCommitId = oldCommitId;
        NewCommitId = newCommitId;
        IsCreated = created;
        IsDeleted = deleted;
        IsForced = forced;
        Commits = commits;
        IsHasMoreCommits = hasMoreCommits;
    }
    
    private PropertyValue<ProjectKey> _projectKey = new PropertyValue<ProjectKey>(nameof(SRepoPushWebhookEvent), nameof(ProjectKey), "projectKey");
    
    [Required]
    [JsonPropertyName("projectKey")]
    public ProjectKey ProjectKey
    {
        get => _projectKey.GetValue(InlineErrors);
        set => _projectKey.SetValue(value);
    }

    private PropertyValue<string> _repository = new PropertyValue<string>(nameof(SRepoPushWebhookEvent), nameof(Repository), "repository");
    
    [Required]
    [JsonPropertyName("repository")]
    public string Repository
    {
        get => _repository.GetValue(InlineErrors);
        set => _repository.SetValue(value);
    }

    private PropertyValue<string> _head = new PropertyValue<string>(nameof(SRepoPushWebhookEvent), nameof(Head), "head");
    
    [Required]
    [JsonPropertyName("head")]
    public string Head
    {
        get => _head.GetValue(InlineErrors);
        set => _head.SetValue(value);
    }

    private PropertyValue<string?> _oldCommitId = new PropertyValue<string?>(nameof(SRepoPushWebhookEvent), nameof(OldCommitId), "oldCommitId");
    
    [JsonPropertyName("oldCommitId")]
    public string? OldCommitId
    {
        get => _oldCommitId.GetValue(InlineErrors);
        set => _oldCommitId.SetValue(value);
    }

    private PropertyValue<string?> _newCommitId = new PropertyValue<string?>(nameof(SRepoPushWebhookEvent), nameof(NewCommitId), "newCommitId");
    
    [JsonPropertyName("newCommitId")]
    public string? NewCommitId
    {
        get => _newCommitId.GetValue(InlineErrors);
        set => _newCommitId.SetValue(value);
    }

    private PropertyValue<bool> _created = new PropertyValue<bool>(nameof(SRepoPushWebhookEvent), nameof(IsCreated), "created");
    
    [Required]
    [JsonPropertyName("created")]
    public bool IsCreated
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<bool> _deleted = new PropertyValue<bool>(nameof(SRepoPushWebhookEvent), nameof(IsDeleted), "deleted");
    
    [Required]
    [JsonPropertyName("deleted")]
    public bool IsDeleted
    {
        get => _deleted.GetValue(InlineErrors);
        set => _deleted.SetValue(value);
    }

    private PropertyValue<bool> _forced = new PropertyValue<bool>(nameof(SRepoPushWebhookEvent), nameof(IsForced), "forced");
    
    [Required]
    [JsonPropertyName("forced")]
    public bool IsForced
    {
        get => _forced.GetValue(InlineErrors);
        set => _forced.SetValue(value);
    }

    private PropertyValue<List<GitCommitInfo>?> _commits = new PropertyValue<List<GitCommitInfo>?>(nameof(SRepoPushWebhookEvent), nameof(Commits), "commits");
    
    [JsonPropertyName("commits")]
    public List<GitCommitInfo>? Commits
    {
        get => _commits.GetValue(InlineErrors);
        set => _commits.SetValue(value);
    }

    private PropertyValue<bool> _hasMoreCommits = new PropertyValue<bool>(nameof(SRepoPushWebhookEvent), nameof(IsHasMoreCommits), "hasMoreCommits");
    
    [Required]
    [JsonPropertyName("hasMoreCommits")]
    public bool IsHasMoreCommits
    {
        get => _hasMoreCommits.GetValue(InlineErrors);
        set => _hasMoreCommits.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _projectKey.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repository.SetAccessPath(parentChainPath, validateHasBeenSet);
        _head.SetAccessPath(parentChainPath, validateHasBeenSet);
        _oldCommitId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _newCommitId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _deleted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _forced.SetAccessPath(parentChainPath, validateHasBeenSet);
        _commits.SetAccessPath(parentChainPath, validateHasBeenSet);
        _hasMoreCommits.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

