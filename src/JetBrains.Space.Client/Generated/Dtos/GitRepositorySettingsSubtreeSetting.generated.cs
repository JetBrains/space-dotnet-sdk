// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitRepositorySettingsSubtreeSetting
     : IPropagatePropertyAccessPath
{
    public GitRepositorySettingsSubtreeSetting() { }
    
    public GitRepositorySettingsSubtreeSetting(string localBranch, string localPath, string remoteRepo, string remoteBranch, string? remotePath = null, GitRepositorySettingsSubtreeDirection? direction = null)
    {
        LocalBranch = localBranch;
        LocalPath = localPath;
        RemoteRepo = remoteRepo;
        RemoteBranch = remoteBranch;
        RemotePath = remotePath;
        Direction = direction;
    }
    
    private PropertyValue<string> _localBranch = new PropertyValue<string>(nameof(GitRepositorySettingsSubtreeSetting), nameof(LocalBranch), "localBranch");
    
    [Required]
    [JsonPropertyName("localBranch")]
    public string LocalBranch
    {
        get => _localBranch.GetValue(InlineErrors);
        set => _localBranch.SetValue(value);
    }

    private PropertyValue<string> _localPath = new PropertyValue<string>(nameof(GitRepositorySettingsSubtreeSetting), nameof(LocalPath), "localPath");
    
    [Required]
    [JsonPropertyName("localPath")]
    public string LocalPath
    {
        get => _localPath.GetValue(InlineErrors);
        set => _localPath.SetValue(value);
    }

    private PropertyValue<string> _remoteRepo = new PropertyValue<string>(nameof(GitRepositorySettingsSubtreeSetting), nameof(RemoteRepo), "remoteRepo");
    
    [Required]
    [JsonPropertyName("remoteRepo")]
    public string RemoteRepo
    {
        get => _remoteRepo.GetValue(InlineErrors);
        set => _remoteRepo.SetValue(value);
    }

    private PropertyValue<string> _remoteBranch = new PropertyValue<string>(nameof(GitRepositorySettingsSubtreeSetting), nameof(RemoteBranch), "remoteBranch");
    
    [Required]
    [JsonPropertyName("remoteBranch")]
    public string RemoteBranch
    {
        get => _remoteBranch.GetValue(InlineErrors);
        set => _remoteBranch.SetValue(value);
    }

    private PropertyValue<string?> _remotePath = new PropertyValue<string?>(nameof(GitRepositorySettingsSubtreeSetting), nameof(RemotePath), "remotePath");
    
    [JsonPropertyName("remotePath")]
    public string? RemotePath
    {
        get => _remotePath.GetValue(InlineErrors);
        set => _remotePath.SetValue(value);
    }

    private PropertyValue<GitRepositorySettingsSubtreeDirection?> _direction = new PropertyValue<GitRepositorySettingsSubtreeDirection?>(nameof(GitRepositorySettingsSubtreeSetting), nameof(Direction), "direction");
    
    [JsonPropertyName("direction")]
    public GitRepositorySettingsSubtreeDirection? Direction
    {
        get => _direction.GetValue(InlineErrors);
        set => _direction.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _localBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _localPath.SetAccessPath(parentChainPath, validateHasBeenSet);
        _remoteRepo.SetAccessPath(parentChainPath, validateHasBeenSet);
        _remoteBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _remotePath.SetAccessPath(parentChainPath, validateHasBeenSet);
        _direction.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

