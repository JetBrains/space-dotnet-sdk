// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class OrganizationRecord
     : IPropagatePropertyAccessPath
{
    public OrganizationRecord() { }
    
    public OrganizationRecord(string id, string orgId, string name, string? slogan = null, string? logoId = null, bool? onboardingRequired = null, bool? allowDomainsEdit = null, long? createdAt = null, bool? createdWithNavigationV2 = null, ATimeZone? timezone = null, OrgSizeDTO? orgSize = null, OrgIndustryDTO? orgIndustry = null, bool? sendAnonymousDataAgreementAccepted = null, bool? marketplaceEnabled = null, string? slackWorkspace = null)
    {
        Id = id;
        OrgId = orgId;
        Name = name;
        Slogan = slogan;
        LogoId = logoId;
        IsOnboardingRequired = onboardingRequired;
        IsAllowDomainsEdit = allowDomainsEdit;
        CreatedAt = createdAt;
        IsCreatedWithNavigationV2 = createdWithNavigationV2;
        Timezone = timezone;
        OrgSize = orgSize;
        OrgIndustry = orgIndustry;
        IsSendAnonymousDataAgreementAccepted = sendAnonymousDataAgreementAccepted;
        IsMarketplaceEnabled = marketplaceEnabled;
        SlackWorkspace = slackWorkspace;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(OrganizationRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _orgId = new PropertyValue<string>(nameof(OrganizationRecord), nameof(OrgId), "orgId");
    
    [Required]
    [JsonPropertyName("orgId")]
    public string OrgId
    {
        get => _orgId.GetValue(InlineErrors);
        set => _orgId.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(OrganizationRecord), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string?> _slogan = new PropertyValue<string?>(nameof(OrganizationRecord), nameof(Slogan), "slogan");
    
    [JsonPropertyName("slogan")]
    public string? Slogan
    {
        get => _slogan.GetValue(InlineErrors);
        set => _slogan.SetValue(value);
    }

    private PropertyValue<string?> _logoId = new PropertyValue<string?>(nameof(OrganizationRecord), nameof(LogoId), "logoId");
    
    [JsonPropertyName("logoId")]
    public string? LogoId
    {
        get => _logoId.GetValue(InlineErrors);
        set => _logoId.SetValue(value);
    }

    private PropertyValue<bool?> _onboardingRequired = new PropertyValue<bool?>(nameof(OrganizationRecord), nameof(IsOnboardingRequired), "onboardingRequired");
    
    [JsonPropertyName("onboardingRequired")]
    public bool? IsOnboardingRequired
    {
        get => _onboardingRequired.GetValue(InlineErrors);
        set => _onboardingRequired.SetValue(value);
    }

    private PropertyValue<bool?> _allowDomainsEdit = new PropertyValue<bool?>(nameof(OrganizationRecord), nameof(IsAllowDomainsEdit), "allowDomainsEdit");
    
    [JsonPropertyName("allowDomainsEdit")]
    public bool? IsAllowDomainsEdit
    {
        get => _allowDomainsEdit.GetValue(InlineErrors);
        set => _allowDomainsEdit.SetValue(value);
    }

    private PropertyValue<long?> _createdAt = new PropertyValue<long?>(nameof(OrganizationRecord), nameof(CreatedAt), "createdAt");
    
    [JsonPropertyName("createdAt")]
    public long? CreatedAt
    {
        get => _createdAt.GetValue(InlineErrors);
        set => _createdAt.SetValue(value);
    }

    private PropertyValue<bool?> _createdWithNavigationV2 = new PropertyValue<bool?>(nameof(OrganizationRecord), nameof(IsCreatedWithNavigationV2), "createdWithNavigationV2");
    
    [JsonPropertyName("createdWithNavigationV2")]
    public bool? IsCreatedWithNavigationV2
    {
        get => _createdWithNavigationV2.GetValue(InlineErrors);
        set => _createdWithNavigationV2.SetValue(value);
    }

    private PropertyValue<ATimeZone?> _timezone = new PropertyValue<ATimeZone?>(nameof(OrganizationRecord), nameof(Timezone), "timezone");
    
    [JsonPropertyName("timezone")]
    public ATimeZone? Timezone
    {
        get => _timezone.GetValue(InlineErrors);
        set => _timezone.SetValue(value);
    }

    private PropertyValue<OrgSizeDTO?> _orgSize = new PropertyValue<OrgSizeDTO?>(nameof(OrganizationRecord), nameof(OrgSize), "orgSize");
    
    [JsonPropertyName("orgSize")]
    public OrgSizeDTO? OrgSize
    {
        get => _orgSize.GetValue(InlineErrors);
        set => _orgSize.SetValue(value);
    }

    private PropertyValue<OrgIndustryDTO?> _orgIndustry = new PropertyValue<OrgIndustryDTO?>(nameof(OrganizationRecord), nameof(OrgIndustry), "orgIndustry");
    
    [JsonPropertyName("orgIndustry")]
    public OrgIndustryDTO? OrgIndustry
    {
        get => _orgIndustry.GetValue(InlineErrors);
        set => _orgIndustry.SetValue(value);
    }

    private PropertyValue<bool?> _sendAnonymousDataAgreementAccepted = new PropertyValue<bool?>(nameof(OrganizationRecord), nameof(IsSendAnonymousDataAgreementAccepted), "sendAnonymousDataAgreementAccepted");
    
    [JsonPropertyName("sendAnonymousDataAgreementAccepted")]
    public bool? IsSendAnonymousDataAgreementAccepted
    {
        get => _sendAnonymousDataAgreementAccepted.GetValue(InlineErrors);
        set => _sendAnonymousDataAgreementAccepted.SetValue(value);
    }

    private PropertyValue<bool?> _marketplaceEnabled = new PropertyValue<bool?>(nameof(OrganizationRecord), nameof(IsMarketplaceEnabled), "marketplaceEnabled");
    
    [JsonPropertyName("marketplaceEnabled")]
    public bool? IsMarketplaceEnabled
    {
        get => _marketplaceEnabled.GetValue(InlineErrors);
        set => _marketplaceEnabled.SetValue(value);
    }

    private PropertyValue<string?> _slackWorkspace = new PropertyValue<string?>(nameof(OrganizationRecord), nameof(SlackWorkspace), "slackWorkspace");
    
    [Obsolete("Slack integration is no longer supported (since 2021-10-13) (will be removed in a future version)")]
    [JsonPropertyName("slackWorkspace")]
    public string? SlackWorkspace
    {
        get => _slackWorkspace.GetValue(InlineErrors);
        set => _slackWorkspace.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _orgId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _slogan.SetAccessPath(parentChainPath, validateHasBeenSet);
        _logoId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _onboardingRequired.SetAccessPath(parentChainPath, validateHasBeenSet);
        _allowDomainsEdit.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdWithNavigationV2.SetAccessPath(parentChainPath, validateHasBeenSet);
        _timezone.SetAccessPath(parentChainPath, validateHasBeenSet);
        _orgSize.SetAccessPath(parentChainPath, validateHasBeenSet);
        _orgIndustry.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sendAnonymousDataAgreementAccepted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _marketplaceEnabled.SetAccessPath(parentChainPath, validateHasBeenSet);
        _slackWorkspace.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

