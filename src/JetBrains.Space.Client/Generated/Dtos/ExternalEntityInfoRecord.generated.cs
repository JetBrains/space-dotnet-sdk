// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ExternalEntityInfoRecord
     : IPropagatePropertyAccessPath
{
    public ExternalEntityInfoRecord() { }
    
    public ExternalEntityInfoRecord(string id, bool archived, ImportTransactionRecord transaction, string? externalId = null, string? externalName = null, string? externalUrl = null)
    {
        Id = id;
        IsArchived = archived;
        ExternalId = externalId;
        ExternalName = externalName;
        ExternalUrl = externalUrl;
        Transaction = transaction;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(ExternalEntityInfoRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(ExternalEntityInfoRecord), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<string?> _externalId = new PropertyValue<string?>(nameof(ExternalEntityInfoRecord), nameof(ExternalId), "externalId");
    
    [JsonPropertyName("externalId")]
    public string? ExternalId
    {
        get => _externalId.GetValue(InlineErrors);
        set => _externalId.SetValue(value);
    }

    private PropertyValue<string?> _externalName = new PropertyValue<string?>(nameof(ExternalEntityInfoRecord), nameof(ExternalName), "externalName");
    
    [JsonPropertyName("externalName")]
    public string? ExternalName
    {
        get => _externalName.GetValue(InlineErrors);
        set => _externalName.SetValue(value);
    }

    private PropertyValue<string?> _externalUrl = new PropertyValue<string?>(nameof(ExternalEntityInfoRecord), nameof(ExternalUrl), "externalUrl");
    
    [JsonPropertyName("externalUrl")]
    public string? ExternalUrl
    {
        get => _externalUrl.GetValue(InlineErrors);
        set => _externalUrl.SetValue(value);
    }

    private PropertyValue<ImportTransactionRecord> _transaction = new PropertyValue<ImportTransactionRecord>(nameof(ExternalEntityInfoRecord), nameof(Transaction), "transaction");
    
    [Required]
    [JsonPropertyName("transaction")]
    public ImportTransactionRecord Transaction
    {
        get => _transaction.GetValue(InlineErrors);
        set => _transaction.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _externalId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _externalName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _externalUrl.SetAccessPath(parentChainPath, validateHasBeenSet);
        _transaction.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

