// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class ESApp
     : IPropagatePropertyAccessPath
{
    public ESApp() { }
    
    public ESApp(string id, string clientId, string name, bool archived, List<AppUiExtContextData> contexts, List<ApplicationUnfurlDomain> domains, List<ApplicationUnfurlPattern> patterns, ESAppSettings settings, TDMemberProfile? owner = null, ESApp? ownerApp = null, string? picture = null, string? defaultExternalPicture = null, DateTime? createdAt = null, string? kind = null, string? presentableName = null, ApplicationType? applicationType = null, bool? clientCredentialsFlowEnabled = null, bool? codeFlowEnabled = null, string? codeFlowRedirectURIs = null, bool? pkceRequired = null, bool? implicitFlowEnabled = null, string? implicitFlowRedirectURIs = null, string? endpointURI = null, bool? hasVerificationToken = null, bool? hasSigningKey = null, bool? hasPublicKeySignature = null, bool? endpointSslVerification = null, string? basicAuthUsername = null, bool? hasBearerToken = null, string? sslKeystoreAuth = null, ApplicationMetadata? metadata = null)
    {
        Id = id;
        Owner = owner;
        OwnerApp = ownerApp;
        ClientId = clientId;
        Name = name;
        Picture = picture;
        DefaultExternalPicture = defaultExternalPicture;
        CreatedAt = createdAt;
        Kind = kind;
        PresentableName = presentableName;
        ApplicationType = applicationType;
        IsClientCredentialsFlowEnabled = clientCredentialsFlowEnabled;
        IsCodeFlowEnabled = codeFlowEnabled;
        CodeFlowRedirectURIs = codeFlowRedirectURIs;
        IsPkceRequired = pkceRequired;
        IsImplicitFlowEnabled = implicitFlowEnabled;
        ImplicitFlowRedirectURIs = implicitFlowRedirectURIs;
        EndpointURI = endpointURI;
        IsHasVerificationToken = hasVerificationToken;
        IsHasSigningKey = hasSigningKey;
        IsHasPublicKeySignature = hasPublicKeySignature;
        IsEndpointSslVerification = endpointSslVerification;
        BasicAuthUsername = basicAuthUsername;
        IsHasBearerToken = hasBearerToken;
        SslKeystoreAuth = sslKeystoreAuth;
        IsArchived = archived;
        Contexts = contexts;
        Domains = domains;
        Metadata = metadata;
        Patterns = patterns;
        Settings = settings;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(ESApp), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<TDMemberProfile?> _owner = new PropertyValue<TDMemberProfile?>(nameof(ESApp), nameof(Owner), "owner");
    
    /// <summary>
    /// User that created/installed the application. `null` if the application was created/installed by another application, See `ownerApp`.
    /// </summary>
    [JsonPropertyName("owner")]
    public TDMemberProfile? Owner
    {
        get => _owner.GetValue(InlineErrors);
        set => _owner.SetValue(value);
    }

    private PropertyValue<ESApp?> _ownerApp = new PropertyValue<ESApp?>(nameof(ESApp), nameof(OwnerApp), "ownerApp");
    
    /// <summary>
    /// Application that created/installed the application. `null` if the application was created/installed by a user, See `owner`.
    /// </summary>
    [JsonPropertyName("ownerApp")]
    public ESApp? OwnerApp
    {
        get => _ownerApp.GetValue(InlineErrors);
        set => _ownerApp.SetValue(value);
    }

    private PropertyValue<string> _clientId = new PropertyValue<string>(nameof(ESApp), nameof(ClientId), "clientId");
    
    [Required]
    [JsonPropertyName("clientId")]
    public string ClientId
    {
        get => _clientId.GetValue(InlineErrors);
        set => _clientId.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(ESApp), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string?> _picture = new PropertyValue<string?>(nameof(ESApp), nameof(Picture), "picture");
    
    [JsonPropertyName("picture")]
    public string? Picture
    {
        get => _picture.GetValue(InlineErrors);
        set => _picture.SetValue(value);
    }

    private PropertyValue<string?> _defaultExternalPicture = new PropertyValue<string?>(nameof(ESApp), nameof(DefaultExternalPicture), "defaultExternalPicture");
    
    [JsonPropertyName("defaultExternalPicture")]
    public string? DefaultExternalPicture
    {
        get => _defaultExternalPicture.GetValue(InlineErrors);
        set => _defaultExternalPicture.SetValue(value);
    }

    private PropertyValue<DateTime?> _createdAt = new PropertyValue<DateTime?>(nameof(ESApp), nameof(CreatedAt), "createdAt");
    
    [JsonPropertyName("createdAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? CreatedAt
    {
        get => _createdAt.GetValue(InlineErrors);
        set => _createdAt.SetValue(value);
    }

    private PropertyValue<string?> _kind = new PropertyValue<string?>(nameof(ESApp), nameof(Kind), "kind");
    
    [JsonPropertyName("kind")]
    public string? Kind
    {
        get => _kind.GetValue(InlineErrors);
        set => _kind.SetValue(value);
    }

    private PropertyValue<string?> _presentableName = new PropertyValue<string?>(nameof(ESApp), nameof(PresentableName), "presentableName");
    
    [JsonPropertyName("presentableName")]
    public string? PresentableName
    {
        get => _presentableName.GetValue(InlineErrors);
        set => _presentableName.SetValue(value);
    }

    private PropertyValue<ApplicationType?> _applicationType = new PropertyValue<ApplicationType?>(nameof(ESApp), nameof(ApplicationType), "applicationType");
    
    [JsonPropertyName("applicationType")]
    public ApplicationType? ApplicationType
    {
        get => _applicationType.GetValue(InlineErrors);
        set => _applicationType.SetValue(value);
    }

    private PropertyValue<bool?> _clientCredentialsFlowEnabled = new PropertyValue<bool?>(nameof(ESApp), nameof(IsClientCredentialsFlowEnabled), "clientCredentialsFlowEnabled");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("clientCredentialsFlowEnabled")]
    public bool? IsClientCredentialsFlowEnabled
    {
        get => _clientCredentialsFlowEnabled.GetValue(InlineErrors);
        set => _clientCredentialsFlowEnabled.SetValue(value);
    }

    private PropertyValue<bool?> _codeFlowEnabled = new PropertyValue<bool?>(nameof(ESApp), nameof(IsCodeFlowEnabled), "codeFlowEnabled");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("codeFlowEnabled")]
    public bool? IsCodeFlowEnabled
    {
        get => _codeFlowEnabled.GetValue(InlineErrors);
        set => _codeFlowEnabled.SetValue(value);
    }

    private PropertyValue<string?> _codeFlowRedirectURIs = new PropertyValue<string?>(nameof(ESApp), nameof(CodeFlowRedirectURIs), "codeFlowRedirectURIs");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("codeFlowRedirectURIs")]
    public string? CodeFlowRedirectURIs
    {
        get => _codeFlowRedirectURIs.GetValue(InlineErrors);
        set => _codeFlowRedirectURIs.SetValue(value);
    }

    private PropertyValue<bool?> _pkceRequired = new PropertyValue<bool?>(nameof(ESApp), nameof(IsPkceRequired), "pkceRequired");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("pkceRequired")]
    public bool? IsPkceRequired
    {
        get => _pkceRequired.GetValue(InlineErrors);
        set => _pkceRequired.SetValue(value);
    }

    private PropertyValue<bool?> _implicitFlowEnabled = new PropertyValue<bool?>(nameof(ESApp), nameof(IsImplicitFlowEnabled), "implicitFlowEnabled");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("implicitFlowEnabled")]
    public bool? IsImplicitFlowEnabled
    {
        get => _implicitFlowEnabled.GetValue(InlineErrors);
        set => _implicitFlowEnabled.SetValue(value);
    }

    private PropertyValue<string?> _implicitFlowRedirectURIs = new PropertyValue<string?>(nameof(ESApp), nameof(ImplicitFlowRedirectURIs), "implicitFlowRedirectURIs");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("implicitFlowRedirectURIs")]
    public string? ImplicitFlowRedirectURIs
    {
        get => _implicitFlowRedirectURIs.GetValue(InlineErrors);
        set => _implicitFlowRedirectURIs.SetValue(value);
    }

    private PropertyValue<string?> _endpointURI = new PropertyValue<string?>(nameof(ESApp), nameof(EndpointURI), "endpointURI");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("endpointURI")]
    public string? EndpointURI
    {
        get => _endpointURI.GetValue(InlineErrors);
        set => _endpointURI.SetValue(value);
    }

    private PropertyValue<bool?> _hasVerificationToken = new PropertyValue<bool?>(nameof(ESApp), nameof(IsHasVerificationToken), "hasVerificationToken");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("hasVerificationToken")]
    public bool? IsHasVerificationToken
    {
        get => _hasVerificationToken.GetValue(InlineErrors);
        set => _hasVerificationToken.SetValue(value);
    }

    private PropertyValue<bool?> _hasSigningKey = new PropertyValue<bool?>(nameof(ESApp), nameof(IsHasSigningKey), "hasSigningKey");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("hasSigningKey")]
    public bool? IsHasSigningKey
    {
        get => _hasSigningKey.GetValue(InlineErrors);
        set => _hasSigningKey.SetValue(value);
    }

    private PropertyValue<bool?> _hasPublicKeySignature = new PropertyValue<bool?>(nameof(ESApp), nameof(IsHasPublicKeySignature), "hasPublicKeySignature");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("hasPublicKeySignature")]
    public bool? IsHasPublicKeySignature
    {
        get => _hasPublicKeySignature.GetValue(InlineErrors);
        set => _hasPublicKeySignature.SetValue(value);
    }

    private PropertyValue<bool?> _endpointSslVerification = new PropertyValue<bool?>(nameof(ESApp), nameof(IsEndpointSslVerification), "endpointSslVerification");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("endpointSslVerification")]
    public bool? IsEndpointSslVerification
    {
        get => _endpointSslVerification.GetValue(InlineErrors);
        set => _endpointSslVerification.SetValue(value);
    }

    private PropertyValue<string?> _basicAuthUsername = new PropertyValue<string?>(nameof(ESApp), nameof(BasicAuthUsername), "basicAuthUsername");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("basicAuthUsername")]
    public string? BasicAuthUsername
    {
        get => _basicAuthUsername.GetValue(InlineErrors);
        set => _basicAuthUsername.SetValue(value);
    }

    private PropertyValue<bool?> _hasBearerToken = new PropertyValue<bool?>(nameof(ESApp), nameof(IsHasBearerToken), "hasBearerToken");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("hasBearerToken")]
    public bool? IsHasBearerToken
    {
        get => _hasBearerToken.GetValue(InlineErrors);
        set => _hasBearerToken.SetValue(value);
    }

    private PropertyValue<string?> _sslKeystoreAuth = new PropertyValue<string?>(nameof(ESApp), nameof(SslKeystoreAuth), "sslKeystoreAuth");
    
    [Obsolete("Use settings instead (since 2021-08-20) (will be removed in a future version)")]
    [JsonPropertyName("sslKeystoreAuth")]
    public string? SslKeystoreAuth
    {
        get => _sslKeystoreAuth.GetValue(InlineErrors);
        set => _sslKeystoreAuth.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(ESApp), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<List<AppUiExtContextData>> _contexts = new PropertyValue<List<AppUiExtContextData>>(nameof(ESApp), nameof(Contexts), "contexts", new List<AppUiExtContextData>());
    
    [Required]
    [JsonPropertyName("contexts")]
    public List<AppUiExtContextData> Contexts
    {
        get => _contexts.GetValue(InlineErrors);
        set => _contexts.SetValue(value);
    }

    private PropertyValue<List<ApplicationUnfurlDomain>> _domains = new PropertyValue<List<ApplicationUnfurlDomain>>(nameof(ESApp), nameof(Domains), "domains", new List<ApplicationUnfurlDomain>());
    
    [Required]
    [JsonPropertyName("domains")]
    public List<ApplicationUnfurlDomain> Domains
    {
        get => _domains.GetValue(InlineErrors);
        set => _domains.SetValue(value);
    }

    private PropertyValue<ApplicationMetadata?> _metadata = new PropertyValue<ApplicationMetadata?>(nameof(ESApp), nameof(Metadata), "metadata");
    
    [JsonPropertyName("metadata")]
    public ApplicationMetadata? Metadata
    {
        get => _metadata.GetValue(InlineErrors);
        set => _metadata.SetValue(value);
    }

    private PropertyValue<List<ApplicationUnfurlPattern>> _patterns = new PropertyValue<List<ApplicationUnfurlPattern>>(nameof(ESApp), nameof(Patterns), "patterns", new List<ApplicationUnfurlPattern>());
    
    [Required]
    [JsonPropertyName("patterns")]
    public List<ApplicationUnfurlPattern> Patterns
    {
        get => _patterns.GetValue(InlineErrors);
        set => _patterns.SetValue(value);
    }

    private PropertyValue<ESAppSettings> _settings = new PropertyValue<ESAppSettings>(nameof(ESApp), nameof(Settings), "settings");
    
    [Required]
    [JsonPropertyName("settings")]
    public ESAppSettings Settings
    {
        get => _settings.GetValue(InlineErrors);
        set => _settings.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _owner.SetAccessPath(parentChainPath, validateHasBeenSet);
        _ownerApp.SetAccessPath(parentChainPath, validateHasBeenSet);
        _clientId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _picture.SetAccessPath(parentChainPath, validateHasBeenSet);
        _defaultExternalPicture.SetAccessPath(parentChainPath, validateHasBeenSet);
        _createdAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _kind.SetAccessPath(parentChainPath, validateHasBeenSet);
        _presentableName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _applicationType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _clientCredentialsFlowEnabled.SetAccessPath(parentChainPath, validateHasBeenSet);
        _codeFlowEnabled.SetAccessPath(parentChainPath, validateHasBeenSet);
        _codeFlowRedirectURIs.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pkceRequired.SetAccessPath(parentChainPath, validateHasBeenSet);
        _implicitFlowEnabled.SetAccessPath(parentChainPath, validateHasBeenSet);
        _implicitFlowRedirectURIs.SetAccessPath(parentChainPath, validateHasBeenSet);
        _endpointURI.SetAccessPath(parentChainPath, validateHasBeenSet);
        _hasVerificationToken.SetAccessPath(parentChainPath, validateHasBeenSet);
        _hasSigningKey.SetAccessPath(parentChainPath, validateHasBeenSet);
        _hasPublicKeySignature.SetAccessPath(parentChainPath, validateHasBeenSet);
        _endpointSslVerification.SetAccessPath(parentChainPath, validateHasBeenSet);
        _basicAuthUsername.SetAccessPath(parentChainPath, validateHasBeenSet);
        _hasBearerToken.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sslKeystoreAuth.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _contexts.SetAccessPath(parentChainPath, validateHasBeenSet);
        _domains.SetAccessPath(parentChainPath, validateHasBeenSet);
        _metadata.SetAccessPath(parentChainPath, validateHasBeenSet);
        _patterns.SetAccessPath(parentChainPath, validateHasBeenSet);
        _settings.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

