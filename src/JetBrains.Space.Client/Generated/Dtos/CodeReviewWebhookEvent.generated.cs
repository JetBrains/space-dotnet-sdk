// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class CodeReviewWebhookEvent
     : WebhookEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "CodeReviewWebhookEvent";
    
    public CodeReviewWebhookEvent() { }
    
    public CodeReviewWebhookEvent(ProjectKey projectKey, string repository, string reviewId, string title, bool isMergeRequest, KMetaMod? meta = null, CodeReviewRecord? review = null)
    {
        Meta = meta;
        Review = review;
        ProjectKey = projectKey;
        Repository = repository;
        ReviewId = reviewId;
        Title = title;
        IsMergeRequest = isMergeRequest;
    }
    
    private PropertyValue<KMetaMod?> _meta = new PropertyValue<KMetaMod?>(nameof(CodeReviewWebhookEvent), nameof(Meta), "meta");
    
    [JsonPropertyName("meta")]
    public KMetaMod? Meta
    {
        get => _meta.GetValue(InlineErrors);
        set => _meta.SetValue(value);
    }

    private PropertyValue<CodeReviewRecord?> _review = new PropertyValue<CodeReviewRecord?>(nameof(CodeReviewWebhookEvent), nameof(Review), "review");
    
    [JsonPropertyName("review")]
    public CodeReviewRecord? Review
    {
        get => _review.GetValue(InlineErrors);
        set => _review.SetValue(value);
    }

    private PropertyValue<ProjectKey> _projectKey = new PropertyValue<ProjectKey>(nameof(CodeReviewWebhookEvent), nameof(ProjectKey), "projectKey");
    
    [Required]
    [Obsolete("Use review.project instead (since 2023.01.11)")]
    [JsonPropertyName("projectKey")]
    public ProjectKey ProjectKey
    {
        get => _projectKey.GetValue(InlineErrors);
        set => _projectKey.SetValue(value);
    }

    private PropertyValue<string> _repository = new PropertyValue<string>(nameof(CodeReviewWebhookEvent), nameof(Repository), "repository");
    
    [Required]
    [JsonPropertyName("repository")]
    public string Repository
    {
        get => _repository.GetValue(InlineErrors);
        set => _repository.SetValue(value);
    }

    private PropertyValue<string> _reviewId = new PropertyValue<string>(nameof(CodeReviewWebhookEvent), nameof(ReviewId), "reviewId");
    
    [Required]
    [Obsolete("Use review.id instead (since 2023.01.11)")]
    [JsonPropertyName("reviewId")]
    public string ReviewId
    {
        get => _reviewId.GetValue(InlineErrors);
        set => _reviewId.SetValue(value);
    }

    private PropertyValue<string> _title = new PropertyValue<string>(nameof(CodeReviewWebhookEvent), nameof(Title), "title");
    
    [Required]
    [Obsolete("Use review.title instead (since 2023.01.11)")]
    [JsonPropertyName("title")]
    public string Title
    {
        get => _title.GetValue(InlineErrors);
        set => _title.SetValue(value);
    }

    private PropertyValue<bool> _isMergeRequest = new PropertyValue<bool>(nameof(CodeReviewWebhookEvent), nameof(IsMergeRequest), "isMergeRequest");
    
    [Required]
    [Obsolete("Use `review is MergeRequestRecord` instead (since 2023.01.11)")]
    [JsonPropertyName("isMergeRequest")]
    public bool IsMergeRequest
    {
        get => _isMergeRequest.GetValue(InlineErrors);
        set => _isMergeRequest.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _meta.SetAccessPath(parentChainPath, validateHasBeenSet);
        _review.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectKey.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repository.SetAccessPath(parentChainPath, validateHasBeenSet);
        _reviewId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _title.SetAccessPath(parentChainPath, validateHasBeenSet);
        _isMergeRequest.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

