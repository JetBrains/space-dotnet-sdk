// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

internal class TeamDirectoryProfilesForProfilePatchRequest
     : IPropagatePropertyAccessPath
{
    public TeamDirectoryProfilesForProfilePatchRequest() { }
    
    public TeamDirectoryProfilesForProfilePatchRequest(string? username = null, string? firstName = null, string? lastName = null, List<string>? emails = null, List<string>? phones = null, DateTime? birthday = null, string? about = null, List<string>? messengers = null, List<string>? links = null, bool? notAMember = null, DateTime? joined = null, DateTime? left = null, DateTime? leftAt = null, bool? speaksEnglish = null, string? pictureAttachmentId = null, AvatarCropSquare? avatarCropSquare = null, List<CustomFieldInputValue>? customFieldValues = null, string? externalId = null)
    {
        Username = username;
        FirstName = firstName;
        LastName = lastName;
        Emails = emails;
        Phones = phones;
        Birthday = birthday;
        About = about;
        Messengers = messengers;
        Links = links;
        IsNotAMember = notAMember;
        Joined = joined;
        Left = left;
        LeftAt = leftAt;
        IsSpeaksEnglish = speaksEnglish;
        PictureAttachmentId = pictureAttachmentId;
        AvatarCropSquare = avatarCropSquare;
        CustomFieldValues = customFieldValues;
        ExternalId = externalId;
    }
    
    private PropertyValue<string?> _username = new PropertyValue<string?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(Username), "username");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("username")]
    public string? Username
    {
        get => _username.GetValue(InlineErrors);
        set => _username.SetValue(value);
    }

    private PropertyValue<string?> _firstName = new PropertyValue<string?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(FirstName), "firstName");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("firstName")]
    public string? FirstName
    {
        get => _firstName.GetValue(InlineErrors);
        set => _firstName.SetValue(value);
    }

    private PropertyValue<string?> _lastName = new PropertyValue<string?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(LastName), "lastName");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("lastName")]
    public string? LastName
    {
        get => _lastName.GetValue(InlineErrors);
        set => _lastName.SetValue(value);
    }

    private PropertyValue<List<string>?> _emails = new PropertyValue<List<string>?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(Emails), "emails");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("emails")]
    public List<string>? Emails
    {
        get => _emails.GetValue(InlineErrors);
        set => _emails.SetValue(value);
    }

    private PropertyValue<List<string>?> _phones = new PropertyValue<List<string>?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(Phones), "phones");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("phones")]
    public List<string>? Phones
    {
        get => _phones.GetValue(InlineErrors);
        set => _phones.SetValue(value);
    }

    private PropertyValue<DateTime?> _birthday = new PropertyValue<DateTime?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(Birthday), "birthday");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("birthday")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? Birthday
    {
        get => _birthday.GetValue(InlineErrors);
        set => _birthday.SetValue(value);
    }

    private PropertyValue<string?> _about = new PropertyValue<string?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(About), "about");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("about")]
    public string? About
    {
        get => _about.GetValue(InlineErrors);
        set => _about.SetValue(value);
    }

    private PropertyValue<List<string>?> _messengers = new PropertyValue<List<string>?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(Messengers), "messengers");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("messengers")]
    public List<string>? Messengers
    {
        get => _messengers.GetValue(InlineErrors);
        set => _messengers.SetValue(value);
    }

    private PropertyValue<List<string>?> _links = new PropertyValue<List<string>?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(Links), "links");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("links")]
    public List<string>? Links
    {
        get => _links.GetValue(InlineErrors);
        set => _links.SetValue(value);
    }

    private PropertyValue<bool?> _notAMember = new PropertyValue<bool?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(IsNotAMember), "notAMember");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("notAMember")]
    public bool? IsNotAMember
    {
        get => _notAMember.GetValue(InlineErrors);
        set => _notAMember.SetValue(value);
    }

    private PropertyValue<DateTime?> _joined = new PropertyValue<DateTime?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(Joined), "joined");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("joined")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? Joined
    {
        get => _joined.GetValue(InlineErrors);
        set => _joined.SetValue(value);
    }

    private PropertyValue<DateTime?> _left = new PropertyValue<DateTime?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(Left), "left");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("left")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? Left
    {
        get => _left.GetValue(InlineErrors);
        set => _left.SetValue(value);
    }

    private PropertyValue<DateTime?> _leftAt = new PropertyValue<DateTime?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(LeftAt), "leftAt");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("leftAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? LeftAt
    {
        get => _leftAt.GetValue(InlineErrors);
        set => _leftAt.SetValue(value);
    }

    private PropertyValue<bool?> _speaksEnglish = new PropertyValue<bool?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(IsSpeaksEnglish), "speaksEnglish");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("speaksEnglish")]
    public bool? IsSpeaksEnglish
    {
        get => _speaksEnglish.GetValue(InlineErrors);
        set => _speaksEnglish.SetValue(value);
    }

    private PropertyValue<string?> _pictureAttachmentId = new PropertyValue<string?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(PictureAttachmentId), "pictureAttachmentId");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("pictureAttachmentId")]
    public string? PictureAttachmentId
    {
        get => _pictureAttachmentId.GetValue(InlineErrors);
        set => _pictureAttachmentId.SetValue(value);
    }

    private PropertyValue<AvatarCropSquare?> _avatarCropSquare = new PropertyValue<AvatarCropSquare?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(AvatarCropSquare), "avatarCropSquare");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("avatarCropSquare")]
    public AvatarCropSquare? AvatarCropSquare
    {
        get => _avatarCropSquare.GetValue(InlineErrors);
        set => _avatarCropSquare.SetValue(value);
    }

    private PropertyValue<List<CustomFieldInputValue>?> _customFieldValues = new PropertyValue<List<CustomFieldInputValue>?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(CustomFieldValues), "customFieldValues");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("customFieldValues")]
    public List<CustomFieldInputValue>? CustomFieldValues
    {
        get => _customFieldValues.GetValue(InlineErrors);
        set => _customFieldValues.SetValue(value);
    }

    private PropertyValue<string?> _externalId = new PropertyValue<string?>(nameof(TeamDirectoryProfilesForProfilePatchRequest), nameof(ExternalId), "externalId");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("externalId")]
    public string? ExternalId
    {
        get => _externalId.GetValue(InlineErrors);
        set => _externalId.SetValue(value);
    }

    public virtual void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _username.SetAccessPath(parentChainPath, validateHasBeenSet);
        _firstName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lastName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _emails.SetAccessPath(parentChainPath, validateHasBeenSet);
        _phones.SetAccessPath(parentChainPath, validateHasBeenSet);
        _birthday.SetAccessPath(parentChainPath, validateHasBeenSet);
        _about.SetAccessPath(parentChainPath, validateHasBeenSet);
        _messengers.SetAccessPath(parentChainPath, validateHasBeenSet);
        _links.SetAccessPath(parentChainPath, validateHasBeenSet);
        _notAMember.SetAccessPath(parentChainPath, validateHasBeenSet);
        _joined.SetAccessPath(parentChainPath, validateHasBeenSet);
        _left.SetAccessPath(parentChainPath, validateHasBeenSet);
        _leftAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _speaksEnglish.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pictureAttachmentId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _avatarCropSquare.SetAccessPath(parentChainPath, validateHasBeenSet);
        _customFieldValues.SetAccessPath(parentChainPath, validateHasBeenSet);
        _externalId.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

