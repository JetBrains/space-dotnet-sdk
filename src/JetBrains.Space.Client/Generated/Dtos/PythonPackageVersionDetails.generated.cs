// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class PythonPackageVersionDetails
     : PackageVersionDetails, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "PythonPackageVersionDetails";
    
    public PythonPackageVersionDetails() { }
    
    public PythonPackageVersionDetails(string repository, string name, string version, long created, long downloads, bool pinned, long diskSize, string notNormalizedName, List<string> keywords, List<string> classifiers, List<PythonPackageUrl> projectUrls, List<string> requiresDist, List<PythonPackageFile> files, List<string>? tags = null, long? accessed = null, string? comment = null, CPrincipal? author = null, List<CPrincipal>? authors = null, PackageOrigin? origin = null, Dictionary<string, string>? metadata = null, string? platform = null, string? summary = null, string? description = null, string? descriptionContentType = null, string? homePage = null, string? authorFromPackageDetails = null, string? authorEmail = null, string? maintainer = null, string? maintainerEmail = null, string? license = null, string? requiresPython = null)
    {
        Repository = repository;
        Name = name;
        Version = version;
        Tags = tags;
        Created = created;
        Accessed = accessed;
        Downloads = downloads;
        IsPinned = pinned;
        Comment = comment;
        DiskSize = diskSize;
        Author = author;
        Authors = authors;
        Origin = origin;
        Metadata = metadata;
        NotNormalizedName = notNormalizedName;
        Platform = platform;
        Summary = summary;
        Description = description;
        DescriptionContentType = descriptionContentType;
        Keywords = keywords;
        HomePage = homePage;
        AuthorFromPackageDetails = authorFromPackageDetails;
        AuthorEmail = authorEmail;
        Maintainer = maintainer;
        MaintainerEmail = maintainerEmail;
        License = license;
        Classifiers = classifiers;
        ProjectUrls = projectUrls;
        RequiresDist = requiresDist;
        RequiresPython = requiresPython;
        Files = files;
    }
    
    private PropertyValue<string> _repository = new PropertyValue<string>(nameof(PythonPackageVersionDetails), nameof(Repository), "repository");
    
    [Required]
    [JsonPropertyName("repository")]
    public string Repository
    {
        get => _repository.GetValue(InlineErrors);
        set => _repository.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(PythonPackageVersionDetails), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string> _version = new PropertyValue<string>(nameof(PythonPackageVersionDetails), nameof(Version), "version");
    
    [Required]
    [JsonPropertyName("version")]
    public string Version
    {
        get => _version.GetValue(InlineErrors);
        set => _version.SetValue(value);
    }

    private PropertyValue<List<string>?> _tags = new PropertyValue<List<string>?>(nameof(PythonPackageVersionDetails), nameof(Tags), "tags");
    
    [JsonPropertyName("tags")]
    public List<string>? Tags
    {
        get => _tags.GetValue(InlineErrors);
        set => _tags.SetValue(value);
    }

    private PropertyValue<long> _created = new PropertyValue<long>(nameof(PythonPackageVersionDetails), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    public long Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<long?> _accessed = new PropertyValue<long?>(nameof(PythonPackageVersionDetails), nameof(Accessed), "accessed");
    
    [JsonPropertyName("accessed")]
    public long? Accessed
    {
        get => _accessed.GetValue(InlineErrors);
        set => _accessed.SetValue(value);
    }

    private PropertyValue<long> _downloads = new PropertyValue<long>(nameof(PythonPackageVersionDetails), nameof(Downloads), "downloads");
    
    [Required]
    [JsonPropertyName("downloads")]
    public long Downloads
    {
        get => _downloads.GetValue(InlineErrors);
        set => _downloads.SetValue(value);
    }

    private PropertyValue<bool> _pinned = new PropertyValue<bool>(nameof(PythonPackageVersionDetails), nameof(IsPinned), "pinned");
    
    [Required]
    [JsonPropertyName("pinned")]
    public bool IsPinned
    {
        get => _pinned.GetValue(InlineErrors);
        set => _pinned.SetValue(value);
    }

    private PropertyValue<string?> _comment = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(Comment), "comment");
    
    [JsonPropertyName("comment")]
    public string? Comment
    {
        get => _comment.GetValue(InlineErrors);
        set => _comment.SetValue(value);
    }

    private PropertyValue<long> _diskSize = new PropertyValue<long>(nameof(PythonPackageVersionDetails), nameof(DiskSize), "diskSize");
    
    [Required]
    [JsonPropertyName("diskSize")]
    public long DiskSize
    {
        get => _diskSize.GetValue(InlineErrors);
        set => _diskSize.SetValue(value);
    }

    private PropertyValue<CPrincipal?> _author = new PropertyValue<CPrincipal?>(nameof(PythonPackageVersionDetails), nameof(Author), "author");
    
    [JsonPropertyName("author")]
    public CPrincipal? Author
    {
        get => _author.GetValue(InlineErrors);
        set => _author.SetValue(value);
    }

    private PropertyValue<List<CPrincipal>?> _authors = new PropertyValue<List<CPrincipal>?>(nameof(PythonPackageVersionDetails), nameof(Authors), "authors");
    
    [JsonPropertyName("authors")]
    public List<CPrincipal>? Authors
    {
        get => _authors.GetValue(InlineErrors);
        set => _authors.SetValue(value);
    }

    private PropertyValue<PackageOrigin?> _origin = new PropertyValue<PackageOrigin?>(nameof(PythonPackageVersionDetails), nameof(Origin), "origin");
    
    [JsonPropertyName("origin")]
    public PackageOrigin? Origin
    {
        get => _origin.GetValue(InlineErrors);
        set => _origin.SetValue(value);
    }

    private PropertyValue<Dictionary<string, string>?> _metadata = new PropertyValue<Dictionary<string, string>?>(nameof(PythonPackageVersionDetails), nameof(Metadata), "metadata");
    
    [JsonPropertyName("metadata")]
    public Dictionary<string, string>? Metadata
    {
        get => _metadata.GetValue(InlineErrors);
        set => _metadata.SetValue(value);
    }

    private PropertyValue<string> _notNormalizedName = new PropertyValue<string>(nameof(PythonPackageVersionDetails), nameof(NotNormalizedName), "notNormalizedName");
    
    [Required]
    [JsonPropertyName("notNormalizedName")]
    public string NotNormalizedName
    {
        get => _notNormalizedName.GetValue(InlineErrors);
        set => _notNormalizedName.SetValue(value);
    }

    private PropertyValue<string?> _platform = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(Platform), "platform");
    
    [JsonPropertyName("platform")]
    public string? Platform
    {
        get => _platform.GetValue(InlineErrors);
        set => _platform.SetValue(value);
    }

    private PropertyValue<string?> _summary = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(Summary), "summary");
    
    [JsonPropertyName("summary")]
    public string? Summary
    {
        get => _summary.GetValue(InlineErrors);
        set => _summary.SetValue(value);
    }

    private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(Description), "description");
    
    [JsonPropertyName("description")]
    public string? Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<string?> _descriptionContentType = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(DescriptionContentType), "descriptionContentType");
    
    [JsonPropertyName("descriptionContentType")]
    public string? DescriptionContentType
    {
        get => _descriptionContentType.GetValue(InlineErrors);
        set => _descriptionContentType.SetValue(value);
    }

    private PropertyValue<List<string>> _keywords = new PropertyValue<List<string>>(nameof(PythonPackageVersionDetails), nameof(Keywords), "keywords", new List<string>());
    
    [Required]
    [JsonPropertyName("keywords")]
    public List<string> Keywords
    {
        get => _keywords.GetValue(InlineErrors);
        set => _keywords.SetValue(value);
    }

    private PropertyValue<string?> _homePage = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(HomePage), "homePage");
    
    [JsonPropertyName("homePage")]
    public string? HomePage
    {
        get => _homePage.GetValue(InlineErrors);
        set => _homePage.SetValue(value);
    }

    private PropertyValue<string?> _authorFromPackageDetails = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(AuthorFromPackageDetails), "authorFromPackageDetails");
    
    [JsonPropertyName("authorFromPackageDetails")]
    public string? AuthorFromPackageDetails
    {
        get => _authorFromPackageDetails.GetValue(InlineErrors);
        set => _authorFromPackageDetails.SetValue(value);
    }

    private PropertyValue<string?> _authorEmail = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(AuthorEmail), "authorEmail");
    
    [JsonPropertyName("authorEmail")]
    public string? AuthorEmail
    {
        get => _authorEmail.GetValue(InlineErrors);
        set => _authorEmail.SetValue(value);
    }

    private PropertyValue<string?> _maintainer = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(Maintainer), "maintainer");
    
    [JsonPropertyName("maintainer")]
    public string? Maintainer
    {
        get => _maintainer.GetValue(InlineErrors);
        set => _maintainer.SetValue(value);
    }

    private PropertyValue<string?> _maintainerEmail = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(MaintainerEmail), "maintainerEmail");
    
    [JsonPropertyName("maintainerEmail")]
    public string? MaintainerEmail
    {
        get => _maintainerEmail.GetValue(InlineErrors);
        set => _maintainerEmail.SetValue(value);
    }

    private PropertyValue<string?> _license = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(License), "license");
    
    [JsonPropertyName("license")]
    public string? License
    {
        get => _license.GetValue(InlineErrors);
        set => _license.SetValue(value);
    }

    private PropertyValue<List<string>> _classifiers = new PropertyValue<List<string>>(nameof(PythonPackageVersionDetails), nameof(Classifiers), "classifiers", new List<string>());
    
    [Required]
    [JsonPropertyName("classifiers")]
    public List<string> Classifiers
    {
        get => _classifiers.GetValue(InlineErrors);
        set => _classifiers.SetValue(value);
    }

    private PropertyValue<List<PythonPackageUrl>> _projectUrls = new PropertyValue<List<PythonPackageUrl>>(nameof(PythonPackageVersionDetails), nameof(ProjectUrls), "projectUrls", new List<PythonPackageUrl>());
    
    [Required]
    [JsonPropertyName("projectUrls")]
    public List<PythonPackageUrl> ProjectUrls
    {
        get => _projectUrls.GetValue(InlineErrors);
        set => _projectUrls.SetValue(value);
    }

    private PropertyValue<List<string>> _requiresDist = new PropertyValue<List<string>>(nameof(PythonPackageVersionDetails), nameof(RequiresDist), "requiresDist", new List<string>());
    
    [Required]
    [JsonPropertyName("requiresDist")]
    public List<string> RequiresDist
    {
        get => _requiresDist.GetValue(InlineErrors);
        set => _requiresDist.SetValue(value);
    }

    private PropertyValue<string?> _requiresPython = new PropertyValue<string?>(nameof(PythonPackageVersionDetails), nameof(RequiresPython), "requiresPython");
    
    [JsonPropertyName("requiresPython")]
    public string? RequiresPython
    {
        get => _requiresPython.GetValue(InlineErrors);
        set => _requiresPython.SetValue(value);
    }

    private PropertyValue<List<PythonPackageFile>> _files = new PropertyValue<List<PythonPackageFile>>(nameof(PythonPackageVersionDetails), nameof(Files), "files", new List<PythonPackageFile>());
    
    [Required]
    [JsonPropertyName("files")]
    public List<PythonPackageFile> Files
    {
        get => _files.GetValue(InlineErrors);
        set => _files.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _repository.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _version.SetAccessPath(parentChainPath, validateHasBeenSet);
        _tags.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _accessed.SetAccessPath(parentChainPath, validateHasBeenSet);
        _downloads.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pinned.SetAccessPath(parentChainPath, validateHasBeenSet);
        _comment.SetAccessPath(parentChainPath, validateHasBeenSet);
        _diskSize.SetAccessPath(parentChainPath, validateHasBeenSet);
        _author.SetAccessPath(parentChainPath, validateHasBeenSet);
        _authors.SetAccessPath(parentChainPath, validateHasBeenSet);
        _origin.SetAccessPath(parentChainPath, validateHasBeenSet);
        _metadata.SetAccessPath(parentChainPath, validateHasBeenSet);
        _notNormalizedName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _platform.SetAccessPath(parentChainPath, validateHasBeenSet);
        _summary.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _descriptionContentType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _keywords.SetAccessPath(parentChainPath, validateHasBeenSet);
        _homePage.SetAccessPath(parentChainPath, validateHasBeenSet);
        _authorFromPackageDetails.SetAccessPath(parentChainPath, validateHasBeenSet);
        _authorEmail.SetAccessPath(parentChainPath, validateHasBeenSet);
        _maintainer.SetAccessPath(parentChainPath, validateHasBeenSet);
        _maintainerEmail.SetAccessPath(parentChainPath, validateHasBeenSet);
        _license.SetAccessPath(parentChainPath, validateHasBeenSet);
        _classifiers.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectUrls.SetAccessPath(parentChainPath, validateHasBeenSet);
        _requiresDist.SetAccessPath(parentChainPath, validateHasBeenSet);
        _requiresPython.SetAccessPath(parentChainPath, validateHasBeenSet);
        _files.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

