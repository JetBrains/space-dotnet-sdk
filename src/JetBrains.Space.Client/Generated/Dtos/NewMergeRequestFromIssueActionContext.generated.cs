// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class NewMergeRequestFromIssueActionContext
     : ClientSideActionContext, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "NewMergeRequestFromIssueActionContext";
    
    public NewMergeRequestFromIssueActionContext() { }
    
    public NewMergeRequestFromIssueActionContext(ProjectKey projectKey, string repository, string commitId, int issueNumber, ProjectReposRecord projectRepos, CommitLinksContainer issueCommitsRef)
    {
        ProjectKey = projectKey;
        Repository = repository;
        CommitId = commitId;
        IssueNumber = issueNumber;
        ProjectRepos = projectRepos;
        IssueCommitsRef = issueCommitsRef;
    }
    
    private PropertyValue<ProjectKey> _projectKey = new PropertyValue<ProjectKey>(nameof(NewMergeRequestFromIssueActionContext), nameof(ProjectKey), "projectKey");
    
    [Required]
    [JsonPropertyName("projectKey")]
    public ProjectKey ProjectKey
    {
        get => _projectKey.GetValue(InlineErrors);
        set => _projectKey.SetValue(value);
    }

    private PropertyValue<string> _repository = new PropertyValue<string>(nameof(NewMergeRequestFromIssueActionContext), nameof(Repository), "repository");
    
    [Required]
    [JsonPropertyName("repository")]
    public string Repository
    {
        get => _repository.GetValue(InlineErrors);
        set => _repository.SetValue(value);
    }

    private PropertyValue<string> _commitId = new PropertyValue<string>(nameof(NewMergeRequestFromIssueActionContext), nameof(CommitId), "commitId");
    
    [Required]
    [JsonPropertyName("commitId")]
    public string CommitId
    {
        get => _commitId.GetValue(InlineErrors);
        set => _commitId.SetValue(value);
    }

    private PropertyValue<int> _issueNumber = new PropertyValue<int>(nameof(NewMergeRequestFromIssueActionContext), nameof(IssueNumber), "issueNumber");
    
    [Required]
    [JsonPropertyName("issueNumber")]
    public int IssueNumber
    {
        get => _issueNumber.GetValue(InlineErrors);
        set => _issueNumber.SetValue(value);
    }

    private PropertyValue<ProjectReposRecord> _projectRepos = new PropertyValue<ProjectReposRecord>(nameof(NewMergeRequestFromIssueActionContext), nameof(ProjectRepos), "projectRepos");
    
    [Required]
    [JsonPropertyName("projectRepos")]
    public ProjectReposRecord ProjectRepos
    {
        get => _projectRepos.GetValue(InlineErrors);
        set => _projectRepos.SetValue(value);
    }

    private PropertyValue<CommitLinksContainer> _issueCommitsRef = new PropertyValue<CommitLinksContainer>(nameof(NewMergeRequestFromIssueActionContext), nameof(IssueCommitsRef), "issueCommitsRef");
    
    [Required]
    [JsonPropertyName("issueCommitsRef")]
    public CommitLinksContainer IssueCommitsRef
    {
        get => _issueCommitsRef.GetValue(InlineErrors);
        set => _issueCommitsRef.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _projectKey.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repository.SetAccessPath(parentChainPath, validateHasBeenSet);
        _commitId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issueNumber.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectRepos.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issueCommitsRef.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

