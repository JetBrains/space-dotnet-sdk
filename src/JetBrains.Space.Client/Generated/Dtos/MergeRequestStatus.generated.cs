// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class MergeRequestStatus
     : IPropagatePropertyAccessPath
{
    public MergeRequestStatus() { }
    
    public MergeRequestStatus(string sourceRef, string targetRef, GitMergeStatus mergeStatus, bool hasCodeOwnersFile, bool? sourceHeadDeleted = null, bool? targetHeadDeleted = null, MergeRequestQualityGate? qualityGate = null, string? mergeStatusMessage = null)
    {
        SourceRef = sourceRef;
        IsSourceHeadDeleted = sourceHeadDeleted;
        TargetRef = targetRef;
        IsTargetHeadDeleted = targetHeadDeleted;
        QualityGate = qualityGate;
        MergeStatus = mergeStatus;
        MergeStatusMessage = mergeStatusMessage;
        IsHasCodeOwnersFile = hasCodeOwnersFile;
    }
    
    private PropertyValue<string> _sourceRef = new PropertyValue<string>(nameof(MergeRequestStatus), nameof(SourceRef), "sourceRef");
    
    [Required]
    [JsonPropertyName("sourceRef")]
    public string SourceRef
    {
        get => _sourceRef.GetValue(InlineErrors);
        set => _sourceRef.SetValue(value);
    }

    private PropertyValue<bool?> _sourceHeadDeleted = new PropertyValue<bool?>(nameof(MergeRequestStatus), nameof(IsSourceHeadDeleted), "sourceHeadDeleted");
    
    [JsonPropertyName("sourceHeadDeleted")]
    public bool? IsSourceHeadDeleted
    {
        get => _sourceHeadDeleted.GetValue(InlineErrors);
        set => _sourceHeadDeleted.SetValue(value);
    }

    private PropertyValue<string> _targetRef = new PropertyValue<string>(nameof(MergeRequestStatus), nameof(TargetRef), "targetRef");
    
    [Required]
    [JsonPropertyName("targetRef")]
    public string TargetRef
    {
        get => _targetRef.GetValue(InlineErrors);
        set => _targetRef.SetValue(value);
    }

    private PropertyValue<bool?> _targetHeadDeleted = new PropertyValue<bool?>(nameof(MergeRequestStatus), nameof(IsTargetHeadDeleted), "targetHeadDeleted");
    
    [JsonPropertyName("targetHeadDeleted")]
    public bool? IsTargetHeadDeleted
    {
        get => _targetHeadDeleted.GetValue(InlineErrors);
        set => _targetHeadDeleted.SetValue(value);
    }

    private PropertyValue<MergeRequestQualityGate?> _qualityGate = new PropertyValue<MergeRequestQualityGate?>(nameof(MergeRequestStatus), nameof(QualityGate), "qualityGate");
    
    [JsonPropertyName("qualityGate")]
    public MergeRequestQualityGate? QualityGate
    {
        get => _qualityGate.GetValue(InlineErrors);
        set => _qualityGate.SetValue(value);
    }

    private PropertyValue<GitMergeStatus> _mergeStatus = new PropertyValue<GitMergeStatus>(nameof(MergeRequestStatus), nameof(MergeStatus), "mergeStatus");
    
    [Required]
    [JsonPropertyName("mergeStatus")]
    public GitMergeStatus MergeStatus
    {
        get => _mergeStatus.GetValue(InlineErrors);
        set => _mergeStatus.SetValue(value);
    }

    private PropertyValue<string?> _mergeStatusMessage = new PropertyValue<string?>(nameof(MergeRequestStatus), nameof(MergeStatusMessage), "mergeStatusMessage");
    
    [JsonPropertyName("mergeStatusMessage")]
    public string? MergeStatusMessage
    {
        get => _mergeStatusMessage.GetValue(InlineErrors);
        set => _mergeStatusMessage.SetValue(value);
    }

    private PropertyValue<bool> _hasCodeOwnersFile = new PropertyValue<bool>(nameof(MergeRequestStatus), nameof(IsHasCodeOwnersFile), "hasCodeOwnersFile");
    
    [Required]
    [JsonPropertyName("hasCodeOwnersFile")]
    public bool IsHasCodeOwnersFile
    {
        get => _hasCodeOwnersFile.GetValue(InlineErrors);
        set => _hasCodeOwnersFile.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _sourceRef.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sourceHeadDeleted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetRef.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetHeadDeleted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _qualityGate.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mergeStatus.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mergeStatusMessage.SetAccessPath(parentChainPath, validateHasBeenSet);
        _hasCodeOwnersFile.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

