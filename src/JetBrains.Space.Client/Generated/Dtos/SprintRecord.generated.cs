// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class SprintRecord
     : IPropagatePropertyAccessPath
{
    public SprintRecord() { }
    
    public SprintRecord(string id, bool archived, BoardRecord board, string name, SprintState state, DateTime from, DateTime to, string? description = null)
    {
        Id = id;
        IsArchived = archived;
        Board = board;
        Name = name;
        State = state;
        From = from;
        To = to;
        Description = description;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(SprintRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(SprintRecord), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<BoardRecord> _board = new PropertyValue<BoardRecord>(nameof(SprintRecord), nameof(Board), "board");
    
    [Required]
    [JsonPropertyName("board")]
    public BoardRecord Board
    {
        get => _board.GetValue(InlineErrors);
        set => _board.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(SprintRecord), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<SprintState> _state = new PropertyValue<SprintState>(nameof(SprintRecord), nameof(State), "state");
    
    [Required]
    [JsonPropertyName("state")]
    public SprintState State
    {
        get => _state.GetValue(InlineErrors);
        set => _state.SetValue(value);
    }

    private PropertyValue<DateTime> _from = new PropertyValue<DateTime>(nameof(SprintRecord), nameof(From), "from");
    
    [Required]
    [JsonPropertyName("from")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime From
    {
        get => _from.GetValue(InlineErrors);
        set => _from.SetValue(value);
    }

    private PropertyValue<DateTime> _to = new PropertyValue<DateTime>(nameof(SprintRecord), nameof(To), "to");
    
    [Required]
    [JsonPropertyName("to")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime To
    {
        get => _to.GetValue(InlineErrors);
        set => _to.SetValue(value);
    }

    private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(SprintRecord), nameof(Description), "description");
    
    [JsonPropertyName("description")]
    public string? Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _board.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _state.SetAccessPath(parentChainPath, validateHasBeenSet);
        _from.SetAccessPath(parentChainPath, validateHasBeenSet);
        _to.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

