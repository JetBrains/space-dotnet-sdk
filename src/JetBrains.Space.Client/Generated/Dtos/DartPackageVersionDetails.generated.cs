// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class DartPackageVersionDetails
     : PackageVersionDetails, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "DartPackageVersionDetails";
    
    public DartPackageVersionDetails() { }
    
    public DartPackageVersionDetails(string repository, string name, string version, long created, long downloads, bool pinned, long diskSize, string description, string homePage, string repositoryUrl, string issueTracker, string documentation, string license, string readme, string changelog, List<string>? tags = null, long? accessed = null, string? comment = null, CPrincipal? author = null, List<CPrincipal>? authors = null, PackageOrigin? origin = null, Dictionary<string, string>? metadata = null, List<DartPackageDependency>? dependencies = null, List<DartPackageDependency>? devDependencies = null, List<DartPackageDependency>? dependencyOverrides = null, List<DartPackageDependency>? environment = null)
    {
        Repository = repository;
        Name = name;
        Version = version;
        Tags = tags;
        Created = created;
        Accessed = accessed;
        Downloads = downloads;
        IsPinned = pinned;
        Comment = comment;
        DiskSize = diskSize;
        Author = author;
        Authors = authors;
        Origin = origin;
        Metadata = metadata;
        Description = description;
        HomePage = homePage;
        RepositoryUrl = repositoryUrl;
        IssueTracker = issueTracker;
        Documentation = documentation;
        License = license;
        Readme = readme;
        Changelog = changelog;
        Dependencies = dependencies;
        DevDependencies = devDependencies;
        DependencyOverrides = dependencyOverrides;
        Environment = environment;
    }
    
    private PropertyValue<string> _repository = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(Repository), "repository");
    
    [Required]
    [JsonPropertyName("repository")]
    public string Repository
    {
        get => _repository.GetValue(InlineErrors);
        set => _repository.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string> _version = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(Version), "version");
    
    [Required]
    [JsonPropertyName("version")]
    public string Version
    {
        get => _version.GetValue(InlineErrors);
        set => _version.SetValue(value);
    }

    private PropertyValue<List<string>?> _tags = new PropertyValue<List<string>?>(nameof(DartPackageVersionDetails), nameof(Tags), "tags");
    
    [JsonPropertyName("tags")]
    public List<string>? Tags
    {
        get => _tags.GetValue(InlineErrors);
        set => _tags.SetValue(value);
    }

    private PropertyValue<long> _created = new PropertyValue<long>(nameof(DartPackageVersionDetails), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    public long Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<long?> _accessed = new PropertyValue<long?>(nameof(DartPackageVersionDetails), nameof(Accessed), "accessed");
    
    [JsonPropertyName("accessed")]
    public long? Accessed
    {
        get => _accessed.GetValue(InlineErrors);
        set => _accessed.SetValue(value);
    }

    private PropertyValue<long> _downloads = new PropertyValue<long>(nameof(DartPackageVersionDetails), nameof(Downloads), "downloads");
    
    [Required]
    [JsonPropertyName("downloads")]
    public long Downloads
    {
        get => _downloads.GetValue(InlineErrors);
        set => _downloads.SetValue(value);
    }

    private PropertyValue<bool> _pinned = new PropertyValue<bool>(nameof(DartPackageVersionDetails), nameof(IsPinned), "pinned");
    
    [Required]
    [JsonPropertyName("pinned")]
    public bool IsPinned
    {
        get => _pinned.GetValue(InlineErrors);
        set => _pinned.SetValue(value);
    }

    private PropertyValue<string?> _comment = new PropertyValue<string?>(nameof(DartPackageVersionDetails), nameof(Comment), "comment");
    
    [JsonPropertyName("comment")]
    public string? Comment
    {
        get => _comment.GetValue(InlineErrors);
        set => _comment.SetValue(value);
    }

    private PropertyValue<long> _diskSize = new PropertyValue<long>(nameof(DartPackageVersionDetails), nameof(DiskSize), "diskSize");
    
    [Required]
    [JsonPropertyName("diskSize")]
    public long DiskSize
    {
        get => _diskSize.GetValue(InlineErrors);
        set => _diskSize.SetValue(value);
    }

    private PropertyValue<CPrincipal?> _author = new PropertyValue<CPrincipal?>(nameof(DartPackageVersionDetails), nameof(Author), "author");
    
    [JsonPropertyName("author")]
    public CPrincipal? Author
    {
        get => _author.GetValue(InlineErrors);
        set => _author.SetValue(value);
    }

    private PropertyValue<List<CPrincipal>?> _authors = new PropertyValue<List<CPrincipal>?>(nameof(DartPackageVersionDetails), nameof(Authors), "authors");
    
    [JsonPropertyName("authors")]
    public List<CPrincipal>? Authors
    {
        get => _authors.GetValue(InlineErrors);
        set => _authors.SetValue(value);
    }

    private PropertyValue<PackageOrigin?> _origin = new PropertyValue<PackageOrigin?>(nameof(DartPackageVersionDetails), nameof(Origin), "origin");
    
    [JsonPropertyName("origin")]
    public PackageOrigin? Origin
    {
        get => _origin.GetValue(InlineErrors);
        set => _origin.SetValue(value);
    }

    private PropertyValue<Dictionary<string, string>?> _metadata = new PropertyValue<Dictionary<string, string>?>(nameof(DartPackageVersionDetails), nameof(Metadata), "metadata");
    
    [JsonPropertyName("metadata")]
    public Dictionary<string, string>? Metadata
    {
        get => _metadata.GetValue(InlineErrors);
        set => _metadata.SetValue(value);
    }

    private PropertyValue<string> _description = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(Description), "description");
    
    [Required]
    [JsonPropertyName("description")]
    public string Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<string> _homePage = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(HomePage), "homePage");
    
    [Required]
    [JsonPropertyName("homePage")]
    public string HomePage
    {
        get => _homePage.GetValue(InlineErrors);
        set => _homePage.SetValue(value);
    }

    private PropertyValue<string> _repositoryUrl = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(RepositoryUrl), "repositoryUrl");
    
    [Required]
    [JsonPropertyName("repositoryUrl")]
    public string RepositoryUrl
    {
        get => _repositoryUrl.GetValue(InlineErrors);
        set => _repositoryUrl.SetValue(value);
    }

    private PropertyValue<string> _issueTracker = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(IssueTracker), "issueTracker");
    
    [Required]
    [JsonPropertyName("issueTracker")]
    public string IssueTracker
    {
        get => _issueTracker.GetValue(InlineErrors);
        set => _issueTracker.SetValue(value);
    }

    private PropertyValue<string> _documentation = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(Documentation), "documentation");
    
    [Required]
    [JsonPropertyName("documentation")]
    public string Documentation
    {
        get => _documentation.GetValue(InlineErrors);
        set => _documentation.SetValue(value);
    }

    private PropertyValue<string> _license = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(License), "license");
    
    [Required]
    [JsonPropertyName("license")]
    public string License
    {
        get => _license.GetValue(InlineErrors);
        set => _license.SetValue(value);
    }

    private PropertyValue<string> _readme = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(Readme), "readme");
    
    [Required]
    [JsonPropertyName("readme")]
    public string Readme
    {
        get => _readme.GetValue(InlineErrors);
        set => _readme.SetValue(value);
    }

    private PropertyValue<string> _changelog = new PropertyValue<string>(nameof(DartPackageVersionDetails), nameof(Changelog), "changelog");
    
    [Required]
    [JsonPropertyName("changelog")]
    public string Changelog
    {
        get => _changelog.GetValue(InlineErrors);
        set => _changelog.SetValue(value);
    }

    private PropertyValue<List<DartPackageDependency>?> _dependencies = new PropertyValue<List<DartPackageDependency>?>(nameof(DartPackageVersionDetails), nameof(Dependencies), "dependencies");
    
    [JsonPropertyName("dependencies")]
    public List<DartPackageDependency>? Dependencies
    {
        get => _dependencies.GetValue(InlineErrors);
        set => _dependencies.SetValue(value);
    }

    private PropertyValue<List<DartPackageDependency>?> _devDependencies = new PropertyValue<List<DartPackageDependency>?>(nameof(DartPackageVersionDetails), nameof(DevDependencies), "devDependencies");
    
    [JsonPropertyName("devDependencies")]
    public List<DartPackageDependency>? DevDependencies
    {
        get => _devDependencies.GetValue(InlineErrors);
        set => _devDependencies.SetValue(value);
    }

    private PropertyValue<List<DartPackageDependency>?> _dependencyOverrides = new PropertyValue<List<DartPackageDependency>?>(nameof(DartPackageVersionDetails), nameof(DependencyOverrides), "dependencyOverrides");
    
    [JsonPropertyName("dependencyOverrides")]
    public List<DartPackageDependency>? DependencyOverrides
    {
        get => _dependencyOverrides.GetValue(InlineErrors);
        set => _dependencyOverrides.SetValue(value);
    }

    private PropertyValue<List<DartPackageDependency>?> _environment = new PropertyValue<List<DartPackageDependency>?>(nameof(DartPackageVersionDetails), nameof(Environment), "environment");
    
    [JsonPropertyName("environment")]
    public List<DartPackageDependency>? Environment
    {
        get => _environment.GetValue(InlineErrors);
        set => _environment.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _repository.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _version.SetAccessPath(parentChainPath, validateHasBeenSet);
        _tags.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _accessed.SetAccessPath(parentChainPath, validateHasBeenSet);
        _downloads.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pinned.SetAccessPath(parentChainPath, validateHasBeenSet);
        _comment.SetAccessPath(parentChainPath, validateHasBeenSet);
        _diskSize.SetAccessPath(parentChainPath, validateHasBeenSet);
        _author.SetAccessPath(parentChainPath, validateHasBeenSet);
        _authors.SetAccessPath(parentChainPath, validateHasBeenSet);
        _origin.SetAccessPath(parentChainPath, validateHasBeenSet);
        _metadata.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _homePage.SetAccessPath(parentChainPath, validateHasBeenSet);
        _repositoryUrl.SetAccessPath(parentChainPath, validateHasBeenSet);
        _issueTracker.SetAccessPath(parentChainPath, validateHasBeenSet);
        _documentation.SetAccessPath(parentChainPath, validateHasBeenSet);
        _license.SetAccessPath(parentChainPath, validateHasBeenSet);
        _readme.SetAccessPath(parentChainPath, validateHasBeenSet);
        _changelog.SetAccessPath(parentChainPath, validateHasBeenSet);
        _dependencies.SetAccessPath(parentChainPath, validateHasBeenSet);
        _devDependencies.SetAccessPath(parentChainPath, validateHasBeenSet);
        _dependencyOverrides.SetAccessPath(parentChainPath, validateHasBeenSet);
        _environment.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

