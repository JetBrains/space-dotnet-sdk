// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public class TeamDirectoryLocationsPostRequest
         : IPropagatePropertyAccessPath
    {
        public TeamDirectoryLocationsPostRequest() { }
        
        public TeamDirectoryLocationsPostRequest(string name, string? timezone = null, List<int>? workdays = null, List<string>? phones = null, List<string>? emails = null, List<string>? equipment = null, string? description = null, string? address = null, string? type = null, string? parentId = null, int? capacity = null)
        {
            Name = name;
            Timezone = timezone;
            Workdays = workdays;
            Phones = phones;
            Emails = emails;
            Equipment = equipment;
            Description = description;
            Address = address;
            Type = type;
            ParentId = parentId;
            Capacity = capacity;
        }
        
        private PropertyValue<string> _name = new PropertyValue<string>(nameof(TeamDirectoryLocationsPostRequest), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public string Name
        {
            get => _name.GetValue();
            set => _name.SetValue(value);
        }
    
        private PropertyValue<string?> _timezone = new PropertyValue<string?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Timezone));
        
        [JsonPropertyName("timezone")]
        public string? Timezone
        {
            get => _timezone.GetValue();
            set => _timezone.SetValue(value);
        }
    
        private PropertyValue<List<int>?> _workdays = new PropertyValue<List<int>?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Workdays));
        
        [JsonPropertyName("workdays")]
        public List<int>? Workdays
        {
            get => _workdays.GetValue();
            set => _workdays.SetValue(value);
        }
    
        private PropertyValue<List<string>?> _phones = new PropertyValue<List<string>?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Phones));
        
        [JsonPropertyName("phones")]
        public List<string>? Phones
        {
            get => _phones.GetValue();
            set => _phones.SetValue(value);
        }
    
        private PropertyValue<List<string>?> _emails = new PropertyValue<List<string>?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Emails));
        
        [JsonPropertyName("emails")]
        public List<string>? Emails
        {
            get => _emails.GetValue();
            set => _emails.SetValue(value);
        }
    
        private PropertyValue<List<string>?> _equipment = new PropertyValue<List<string>?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Equipment));
        
        [JsonPropertyName("equipment")]
        public List<string>? Equipment
        {
            get => _equipment.GetValue();
            set => _equipment.SetValue(value);
        }
    
        private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Description));
        
        [JsonPropertyName("description")]
        public string? Description
        {
            get => _description.GetValue();
            set => _description.SetValue(value);
        }
    
        private PropertyValue<string?> _address = new PropertyValue<string?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Address));
        
        [JsonPropertyName("address")]
        public string? Address
        {
            get => _address.GetValue();
            set => _address.SetValue(value);
        }
    
        private PropertyValue<string?> _type = new PropertyValue<string?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Type));
        
        [JsonPropertyName("type")]
        public string? Type
        {
            get => _type.GetValue();
            set => _type.SetValue(value);
        }
    
        private PropertyValue<string?> _parentId = new PropertyValue<string?>(nameof(TeamDirectoryLocationsPostRequest), nameof(ParentId));
        
        [JsonPropertyName("parentId")]
        public string? ParentId
        {
            get => _parentId.GetValue();
            set => _parentId.SetValue(value);
        }
    
        private PropertyValue<int?> _capacity = new PropertyValue<int?>(nameof(TeamDirectoryLocationsPostRequest), nameof(Capacity));
        
        [JsonPropertyName("capacity")]
        public int? Capacity
        {
            get => _capacity.GetValue();
            set => _capacity.SetValue(value);
        }
    
        public virtual void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _name.SetAccessPath(path, validateHasBeenSet);
            _timezone.SetAccessPath(path, validateHasBeenSet);
            _workdays.SetAccessPath(path, validateHasBeenSet);
            _phones.SetAccessPath(path, validateHasBeenSet);
            _emails.SetAccessPath(path, validateHasBeenSet);
            _equipment.SetAccessPath(path, validateHasBeenSet);
            _description.SetAccessPath(path, validateHasBeenSet);
            _address.SetAccessPath(path, validateHasBeenSet);
            _type.SetAccessPath(path, validateHasBeenSet);
            _parentId.SetAccessPath(path, validateHasBeenSet);
            _capacity.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
