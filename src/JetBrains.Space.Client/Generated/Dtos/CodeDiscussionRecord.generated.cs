// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class CodeDiscussionRecord
     : IPropagatePropertyAccessPath
{
    public CodeDiscussionRecord() { }
    
    public CodeDiscussionRecord(string id, string projectId, CodeDiscussionAnchor anchor, DateTime created, M2ChannelRecord channel, bool resolved, bool archived, PRProject? project = null, CodeDiscussionAnchor? endAnchor = null, bool? resolvable = null, CodeDiscussionSnippet? snippet = null, CodeDiscussionSuggestedEdit? suggestedEdit = null, CPrincipal? resolvedBy = null, bool? pending = null, CodeReviewRecord? review = null, string? feedItemId = null, List<CodeReviewRecord>? reviews = null)
    {
        Id = id;
        ProjectId = projectId;
        Project = project;
        Anchor = anchor;
        EndAnchor = endAnchor;
        Created = created;
        Channel = channel;
        IsResolvable = resolvable;
        IsResolved = resolved;
        Snippet = snippet;
        SuggestedEdit = suggestedEdit;
        ResolvedBy = resolvedBy;
        IsPending = pending;
        Review = review;
        FeedItemId = feedItemId;
        Reviews = reviews;
        IsArchived = archived;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(CodeDiscussionRecord), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<string> _projectId = new PropertyValue<string>(nameof(CodeDiscussionRecord), nameof(ProjectId), "projectId");
    
    [Required]
    [Obsolete("Use project instead (since 2020-01-18)")]
    [JsonPropertyName("projectId")]
    public string ProjectId
    {
        get => _projectId.GetValue(InlineErrors);
        set => _projectId.SetValue(value);
    }

    private PropertyValue<PRProject?> _project = new PropertyValue<PRProject?>(nameof(CodeDiscussionRecord), nameof(Project), "project");
    
    [JsonPropertyName("project")]
    public PRProject? Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<CodeDiscussionAnchor> _anchor = new PropertyValue<CodeDiscussionAnchor>(nameof(CodeDiscussionRecord), nameof(Anchor), "anchor");
    
    [Required]
    [JsonPropertyName("anchor")]
    public CodeDiscussionAnchor Anchor
    {
        get => _anchor.GetValue(InlineErrors);
        set => _anchor.SetValue(value);
    }

    private PropertyValue<CodeDiscussionAnchor?> _endAnchor = new PropertyValue<CodeDiscussionAnchor?>(nameof(CodeDiscussionRecord), nameof(EndAnchor), "endAnchor");
    
    [JsonPropertyName("endAnchor")]
    public CodeDiscussionAnchor? EndAnchor
    {
        get => _endAnchor.GetValue(InlineErrors);
        set => _endAnchor.SetValue(value);
    }

    private PropertyValue<DateTime> _created = new PropertyValue<DateTime>(nameof(CodeDiscussionRecord), nameof(Created), "created");
    
    [Required]
    [JsonPropertyName("created")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime Created
    {
        get => _created.GetValue(InlineErrors);
        set => _created.SetValue(value);
    }

    private PropertyValue<M2ChannelRecord> _channel = new PropertyValue<M2ChannelRecord>(nameof(CodeDiscussionRecord), nameof(Channel), "channel");
    
    [Required]
    [JsonPropertyName("channel")]
    public M2ChannelRecord Channel
    {
        get => _channel.GetValue(InlineErrors);
        set => _channel.SetValue(value);
    }

    private PropertyValue<bool?> _resolvable = new PropertyValue<bool?>(nameof(CodeDiscussionRecord), nameof(IsResolvable), "resolvable");
    
    [JsonPropertyName("resolvable")]
    public bool? IsResolvable
    {
        get => _resolvable.GetValue(InlineErrors);
        set => _resolvable.SetValue(value);
    }

    private PropertyValue<bool> _resolved = new PropertyValue<bool>(nameof(CodeDiscussionRecord), nameof(IsResolved), "resolved");
    
    [Required]
    [JsonPropertyName("resolved")]
    public bool IsResolved
    {
        get => _resolved.GetValue(InlineErrors);
        set => _resolved.SetValue(value);
    }

    private PropertyValue<CodeDiscussionSnippet?> _snippet = new PropertyValue<CodeDiscussionSnippet?>(nameof(CodeDiscussionRecord), nameof(Snippet), "snippet");
    
    [JsonPropertyName("snippet")]
    public CodeDiscussionSnippet? Snippet
    {
        get => _snippet.GetValue(InlineErrors);
        set => _snippet.SetValue(value);
    }

    private PropertyValue<CodeDiscussionSuggestedEdit?> _suggestedEdit = new PropertyValue<CodeDiscussionSuggestedEdit?>(nameof(CodeDiscussionRecord), nameof(SuggestedEdit), "suggestedEdit");
    
    [JsonPropertyName("suggestedEdit")]
    public CodeDiscussionSuggestedEdit? SuggestedEdit
    {
        get => _suggestedEdit.GetValue(InlineErrors);
        set => _suggestedEdit.SetValue(value);
    }

    private PropertyValue<CPrincipal?> _resolvedBy = new PropertyValue<CPrincipal?>(nameof(CodeDiscussionRecord), nameof(ResolvedBy), "resolvedBy");
    
    [JsonPropertyName("resolvedBy")]
    public CPrincipal? ResolvedBy
    {
        get => _resolvedBy.GetValue(InlineErrors);
        set => _resolvedBy.SetValue(value);
    }

    private PropertyValue<bool?> _pending = new PropertyValue<bool?>(nameof(CodeDiscussionRecord), nameof(IsPending), "pending");
    
    [JsonPropertyName("pending")]
    public bool? IsPending
    {
        get => _pending.GetValue(InlineErrors);
        set => _pending.SetValue(value);
    }

    private PropertyValue<CodeReviewRecord?> _review = new PropertyValue<CodeReviewRecord?>(nameof(CodeDiscussionRecord), nameof(Review), "review");
    
    [JsonPropertyName("review")]
    public CodeReviewRecord? Review
    {
        get => _review.GetValue(InlineErrors);
        set => _review.SetValue(value);
    }

    private PropertyValue<string?> _feedItemId = new PropertyValue<string?>(nameof(CodeDiscussionRecord), nameof(FeedItemId), "feedItemId");
    
    [JsonPropertyName("feedItemId")]
    public string? FeedItemId
    {
        get => _feedItemId.GetValue(InlineErrors);
        set => _feedItemId.SetValue(value);
    }

    private PropertyValue<List<CodeReviewRecord>?> _reviews = new PropertyValue<List<CodeReviewRecord>?>(nameof(CodeDiscussionRecord), nameof(Reviews), "reviews");
    
    [JsonPropertyName("reviews")]
    public List<CodeReviewRecord>? Reviews
    {
        get => _reviews.GetValue(InlineErrors);
        set => _reviews.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(CodeDiscussionRecord), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _anchor.SetAccessPath(parentChainPath, validateHasBeenSet);
        _endAnchor.SetAccessPath(parentChainPath, validateHasBeenSet);
        _created.SetAccessPath(parentChainPath, validateHasBeenSet);
        _channel.SetAccessPath(parentChainPath, validateHasBeenSet);
        _resolvable.SetAccessPath(parentChainPath, validateHasBeenSet);
        _resolved.SetAccessPath(parentChainPath, validateHasBeenSet);
        _snippet.SetAccessPath(parentChainPath, validateHasBeenSet);
        _suggestedEdit.SetAccessPath(parentChainPath, validateHasBeenSet);
        _resolvedBy.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pending.SetAccessPath(parentChainPath, validateHasBeenSet);
        _review.SetAccessPath(parentChainPath, validateHasBeenSet);
        _feedItemId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _reviews.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

