// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class RightDescriptorDTO
     : IPropagatePropertyAccessPath
{
    public RightDescriptorDTO() { }
    
    public RightDescriptorDTO(PermissionIdentifier rightCode, string name, string group, string description, string targetName, List<string> dependencies)
    {
        RightCode = rightCode;
        Name = name;
        Group = group;
        Description = description;
        TargetName = targetName;
        Dependencies = dependencies;
    }
    
    private PropertyValue<PermissionIdentifier> _rightCode = new PropertyValue<PermissionIdentifier>(nameof(RightDescriptorDTO), nameof(RightCode), "rightCode");
    
    [Required]
    [JsonPropertyName("rightCode")]
    public PermissionIdentifier RightCode
    {
        get => _rightCode.GetValue(InlineErrors);
        set => _rightCode.SetValue(value);
    }

    private PropertyValue<string> _name = new PropertyValue<string>(nameof(RightDescriptorDTO), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string> _group = new PropertyValue<string>(nameof(RightDescriptorDTO), nameof(Group), "group");
    
    [Required]
    [JsonPropertyName("group")]
    public string Group
    {
        get => _group.GetValue(InlineErrors);
        set => _group.SetValue(value);
    }

    private PropertyValue<string> _description = new PropertyValue<string>(nameof(RightDescriptorDTO), nameof(Description), "description");
    
    [Required]
    [JsonPropertyName("description")]
    public string Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<string> _targetName = new PropertyValue<string>(nameof(RightDescriptorDTO), nameof(TargetName), "targetName");
    
    [Required]
    [JsonPropertyName("targetName")]
    public string TargetName
    {
        get => _targetName.GetValue(InlineErrors);
        set => _targetName.SetValue(value);
    }

    private PropertyValue<List<string>> _dependencies = new PropertyValue<List<string>>(nameof(RightDescriptorDTO), nameof(Dependencies), "dependencies", new List<string>());
    
    [Required]
    [JsonPropertyName("dependencies")]
    public List<string> Dependencies
    {
        get => _dependencies.GetValue(InlineErrors);
        set => _dependencies.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _rightCode.SetAccessPath(parentChainPath, validateHasBeenSet);
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _group.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _dependencies.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

