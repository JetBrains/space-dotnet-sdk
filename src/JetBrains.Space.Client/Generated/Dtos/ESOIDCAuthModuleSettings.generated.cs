// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class ESOIDCAuthModuleSettings
         : ESOAuth2AuthModuleSettings, IClassNameConvertible, IPropagatePropertyAccessPath
    {
        [JsonPropertyName("className")]
        public override string? ClassName => "ES_OIDCAuthModuleSettings";
        
        public ESOIDCAuthModuleSettings() { }
        
        public ESOIDCAuthModuleSettings(string clientId, string clientSecret, bool registerNewUsers, string issuer, string authorizationEndpoint, string tokenEndpoint, string tokenKeysEndpoint, string userInfoEndpoint, List<string> domains, string? discoveryUrl = null)
        {
            ClientId = clientId;
            ClientSecret = clientSecret;
            IsRegisterNewUsers = registerNewUsers;
            DiscoveryUrl = discoveryUrl;
            Issuer = issuer;
            AuthorizationEndpoint = authorizationEndpoint;
            TokenEndpoint = tokenEndpoint;
            TokenKeysEndpoint = tokenKeysEndpoint;
            UserInfoEndpoint = userInfoEndpoint;
            Domains = domains;
        }
        
        private PropertyValue<string> _clientId = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettings), nameof(ClientId));
        
        [Required]
        [JsonPropertyName("clientId")]
        public string ClientId
        {
            get => _clientId.GetValue();
            set => _clientId.SetValue(value);
        }
    
        private PropertyValue<string> _clientSecret = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettings), nameof(ClientSecret));
        
        [Required]
        [JsonPropertyName("clientSecret")]
        public string ClientSecret
        {
            get => _clientSecret.GetValue();
            set => _clientSecret.SetValue(value);
        }
    
        private PropertyValue<bool> _registerNewUsers = new PropertyValue<bool>(nameof(ESOIDCAuthModuleSettings), nameof(IsRegisterNewUsers));
        
        [Required]
        [JsonPropertyName("registerNewUsers")]
        public bool IsRegisterNewUsers
        {
            get => _registerNewUsers.GetValue();
            set => _registerNewUsers.SetValue(value);
        }
    
        private PropertyValue<string?> _discoveryUrl = new PropertyValue<string?>(nameof(ESOIDCAuthModuleSettings), nameof(DiscoveryUrl));
        
        [JsonPropertyName("discoveryUrl")]
        public string? DiscoveryUrl
        {
            get => _discoveryUrl.GetValue();
            set => _discoveryUrl.SetValue(value);
        }
    
        private PropertyValue<string> _issuer = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettings), nameof(Issuer));
        
        [Required]
        [JsonPropertyName("issuer")]
        public string Issuer
        {
            get => _issuer.GetValue();
            set => _issuer.SetValue(value);
        }
    
        private PropertyValue<string> _authorizationEndpoint = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettings), nameof(AuthorizationEndpoint));
        
        [Required]
        [JsonPropertyName("authorizationEndpoint")]
        public string AuthorizationEndpoint
        {
            get => _authorizationEndpoint.GetValue();
            set => _authorizationEndpoint.SetValue(value);
        }
    
        private PropertyValue<string> _tokenEndpoint = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettings), nameof(TokenEndpoint));
        
        [Required]
        [JsonPropertyName("tokenEndpoint")]
        public string TokenEndpoint
        {
            get => _tokenEndpoint.GetValue();
            set => _tokenEndpoint.SetValue(value);
        }
    
        private PropertyValue<string> _tokenKeysEndpoint = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettings), nameof(TokenKeysEndpoint));
        
        [Required]
        [JsonPropertyName("tokenKeysEndpoint")]
        public string TokenKeysEndpoint
        {
            get => _tokenKeysEndpoint.GetValue();
            set => _tokenKeysEndpoint.SetValue(value);
        }
    
        private PropertyValue<string> _userInfoEndpoint = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettings), nameof(UserInfoEndpoint));
        
        [Required]
        [JsonPropertyName("userInfoEndpoint")]
        public string UserInfoEndpoint
        {
            get => _userInfoEndpoint.GetValue();
            set => _userInfoEndpoint.SetValue(value);
        }
    
        private PropertyValue<List<string>> _domains = new PropertyValue<List<string>>(nameof(ESOIDCAuthModuleSettings), nameof(Domains));
        
        [Required]
        [JsonPropertyName("domains")]
        public List<string> Domains
        {
            get => _domains.GetValue();
            set => _domains.SetValue(value);
        }
    
        public override void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _clientId.SetAccessPath(path, validateHasBeenSet);
            _clientSecret.SetAccessPath(path, validateHasBeenSet);
            _registerNewUsers.SetAccessPath(path, validateHasBeenSet);
            _discoveryUrl.SetAccessPath(path, validateHasBeenSet);
            _issuer.SetAccessPath(path, validateHasBeenSet);
            _authorizationEndpoint.SetAccessPath(path, validateHasBeenSet);
            _tokenEndpoint.SetAccessPath(path, validateHasBeenSet);
            _tokenKeysEndpoint.SetAccessPath(path, validateHasBeenSet);
            _userInfoEndpoint.SetAccessPath(path, validateHasBeenSet);
            _domains.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
