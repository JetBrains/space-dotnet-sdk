// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

internal class TeamDirectoryProfilesPostRequest
     : IPropagatePropertyAccessPath
{
    public TeamDirectoryProfilesPostRequest() { }
    
    public TeamDirectoryProfilesPostRequest(string username, string firstName, string lastName, List<string>? emails = null, List<string>? phones = null, List<string>? messengers = null, List<string>? links = null, bool notAMember = false, List<CustomFieldInputValue>? customFieldValues = null, DateTime? birthday = null, string? about = null, DateTime? joined = null, DateTime? left = null, DateTime? leftAt = null, bool? speaksEnglish = null, string? pictureAttachmentId = null, AvatarCropSquare? avatarCropSquare = null, string? externalId = null, string? location = null, bool? guest = null, GuestType? guestType = null, ProjectIdentifier? project = null, ProjectTeamRole? projectRole = null)
    {
        Username = username;
        FirstName = firstName;
        LastName = lastName;
        Emails = (emails ?? new List<string>());
        Phones = (phones ?? new List<string>());
        Birthday = birthday;
        About = about;
        Messengers = (messengers ?? new List<string>());
        Links = (links ?? new List<string>());
        IsNotAMember = notAMember;
        Joined = joined;
        Left = left;
        LeftAt = leftAt;
        IsSpeaksEnglish = speaksEnglish;
        PictureAttachmentId = pictureAttachmentId;
        AvatarCropSquare = avatarCropSquare;
        CustomFieldValues = (customFieldValues ?? new List<CustomFieldInputValue>());
        ExternalId = externalId;
        Location = location;
        IsGuest = guest;
        GuestType = guestType;
        Project = project;
        ProjectRole = projectRole;
    }
    
    private PropertyValue<string> _username = new PropertyValue<string>(nameof(TeamDirectoryProfilesPostRequest), nameof(Username), "username");
    
    [Required]
    [JsonPropertyName("username")]
    public string Username
    {
        get => _username.GetValue(InlineErrors);
        set => _username.SetValue(value);
    }

    private PropertyValue<string> _firstName = new PropertyValue<string>(nameof(TeamDirectoryProfilesPostRequest), nameof(FirstName), "firstName");
    
    [Required]
    [JsonPropertyName("firstName")]
    public string FirstName
    {
        get => _firstName.GetValue(InlineErrors);
        set => _firstName.SetValue(value);
    }

    private PropertyValue<string> _lastName = new PropertyValue<string>(nameof(TeamDirectoryProfilesPostRequest), nameof(LastName), "lastName");
    
    [Required]
    [JsonPropertyName("lastName")]
    public string LastName
    {
        get => _lastName.GetValue(InlineErrors);
        set => _lastName.SetValue(value);
    }

    private PropertyValue<List<string>> _emails = new PropertyValue<List<string>>(nameof(TeamDirectoryProfilesPostRequest), nameof(Emails), "emails", new List<string>());
    
    [JsonPropertyName("emails")]
    public List<string> Emails
    {
        get => _emails.GetValue(InlineErrors);
        set => _emails.SetValue(value);
    }

    private PropertyValue<List<string>> _phones = new PropertyValue<List<string>>(nameof(TeamDirectoryProfilesPostRequest), nameof(Phones), "phones", new List<string>());
    
    [JsonPropertyName("phones")]
    public List<string> Phones
    {
        get => _phones.GetValue(InlineErrors);
        set => _phones.SetValue(value);
    }

    private PropertyValue<DateTime?> _birthday = new PropertyValue<DateTime?>(nameof(TeamDirectoryProfilesPostRequest), nameof(Birthday), "birthday");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("birthday")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? Birthday
    {
        get => _birthday.GetValue(InlineErrors);
        set => _birthday.SetValue(value);
    }

    private PropertyValue<string?> _about = new PropertyValue<string?>(nameof(TeamDirectoryProfilesPostRequest), nameof(About), "about");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("about")]
    public string? About
    {
        get => _about.GetValue(InlineErrors);
        set => _about.SetValue(value);
    }

    private PropertyValue<List<string>> _messengers = new PropertyValue<List<string>>(nameof(TeamDirectoryProfilesPostRequest), nameof(Messengers), "messengers", new List<string>());
    
    [JsonPropertyName("messengers")]
    public List<string> Messengers
    {
        get => _messengers.GetValue(InlineErrors);
        set => _messengers.SetValue(value);
    }

    private PropertyValue<List<string>> _links = new PropertyValue<List<string>>(nameof(TeamDirectoryProfilesPostRequest), nameof(Links), "links", new List<string>());
    
    [JsonPropertyName("links")]
    public List<string> Links
    {
        get => _links.GetValue(InlineErrors);
        set => _links.SetValue(value);
    }

    private PropertyValue<bool> _notAMember = new PropertyValue<bool>(nameof(TeamDirectoryProfilesPostRequest), nameof(IsNotAMember), "notAMember");
    
    [JsonPropertyName("notAMember")]
    public bool IsNotAMember
    {
        get => _notAMember.GetValue(InlineErrors);
        set => _notAMember.SetValue(value);
    }

    private PropertyValue<DateTime?> _joined = new PropertyValue<DateTime?>(nameof(TeamDirectoryProfilesPostRequest), nameof(Joined), "joined");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("joined")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? Joined
    {
        get => _joined.GetValue(InlineErrors);
        set => _joined.SetValue(value);
    }

    private PropertyValue<DateTime?> _left = new PropertyValue<DateTime?>(nameof(TeamDirectoryProfilesPostRequest), nameof(Left), "left");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("left")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? Left
    {
        get => _left.GetValue(InlineErrors);
        set => _left.SetValue(value);
    }

    private PropertyValue<DateTime?> _leftAt = new PropertyValue<DateTime?>(nameof(TeamDirectoryProfilesPostRequest), nameof(LeftAt), "leftAt");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("leftAt")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? LeftAt
    {
        get => _leftAt.GetValue(InlineErrors);
        set => _leftAt.SetValue(value);
    }

    private PropertyValue<bool?> _speaksEnglish = new PropertyValue<bool?>(nameof(TeamDirectoryProfilesPostRequest), nameof(IsSpeaksEnglish), "speaksEnglish");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("speaksEnglish")]
    public bool? IsSpeaksEnglish
    {
        get => _speaksEnglish.GetValue(InlineErrors);
        set => _speaksEnglish.SetValue(value);
    }

    private PropertyValue<string?> _pictureAttachmentId = new PropertyValue<string?>(nameof(TeamDirectoryProfilesPostRequest), nameof(PictureAttachmentId), "pictureAttachmentId");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("pictureAttachmentId")]
    public string? PictureAttachmentId
    {
        get => _pictureAttachmentId.GetValue(InlineErrors);
        set => _pictureAttachmentId.SetValue(value);
    }

    private PropertyValue<AvatarCropSquare?> _avatarCropSquare = new PropertyValue<AvatarCropSquare?>(nameof(TeamDirectoryProfilesPostRequest), nameof(AvatarCropSquare), "avatarCropSquare");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("avatarCropSquare")]
    public AvatarCropSquare? AvatarCropSquare
    {
        get => _avatarCropSquare.GetValue(InlineErrors);
        set => _avatarCropSquare.SetValue(value);
    }

    private PropertyValue<List<CustomFieldInputValue>> _customFieldValues = new PropertyValue<List<CustomFieldInputValue>>(nameof(TeamDirectoryProfilesPostRequest), nameof(CustomFieldValues), "customFieldValues", new List<CustomFieldInputValue>());
    
    [JsonPropertyName("customFieldValues")]
    public List<CustomFieldInputValue> CustomFieldValues
    {
        get => _customFieldValues.GetValue(InlineErrors);
        set => _customFieldValues.SetValue(value);
    }

    private PropertyValue<string?> _externalId = new PropertyValue<string?>(nameof(TeamDirectoryProfilesPostRequest), nameof(ExternalId), "externalId");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("externalId")]
    public string? ExternalId
    {
        get => _externalId.GetValue(InlineErrors);
        set => _externalId.SetValue(value);
    }

    private PropertyValue<string?> _location = new PropertyValue<string?>(nameof(TeamDirectoryProfilesPostRequest), nameof(Location), "location");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("location")]
    public string? Location
    {
        get => _location.GetValue(InlineErrors);
        set => _location.SetValue(value);
    }

    private PropertyValue<bool?> _guest = new PropertyValue<bool?>(nameof(TeamDirectoryProfilesPostRequest), nameof(IsGuest), "guest");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("guest")]
    public bool? IsGuest
    {
        get => _guest.GetValue(InlineErrors);
        set => _guest.SetValue(value);
    }

    private PropertyValue<GuestType?> _guestType = new PropertyValue<GuestType?>(nameof(TeamDirectoryProfilesPostRequest), nameof(GuestType), "guestType");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("guestType")]
    public GuestType? GuestType
    {
        get => _guestType.GetValue(InlineErrors);
        set => _guestType.SetValue(value);
    }

    private PropertyValue<ProjectIdentifier?> _project = new PropertyValue<ProjectIdentifier?>(nameof(TeamDirectoryProfilesPostRequest), nameof(Project), "project");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("project")]
    public ProjectIdentifier? Project
    {
        get => _project.GetValue(InlineErrors);
        set => _project.SetValue(value);
    }

    private PropertyValue<ProjectTeamRole?> _projectRole = new PropertyValue<ProjectTeamRole?>(nameof(TeamDirectoryProfilesPostRequest), nameof(ProjectRole), "projectRole");
    
#if NET6_0_OR_GREATER
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
#endif
    [JsonPropertyName("projectRole")]
    public ProjectTeamRole? ProjectRole
    {
        get => _projectRole.GetValue(InlineErrors);
        set => _projectRole.SetValue(value);
    }

    public virtual void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _username.SetAccessPath(parentChainPath, validateHasBeenSet);
        _firstName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lastName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _emails.SetAccessPath(parentChainPath, validateHasBeenSet);
        _phones.SetAccessPath(parentChainPath, validateHasBeenSet);
        _birthday.SetAccessPath(parentChainPath, validateHasBeenSet);
        _about.SetAccessPath(parentChainPath, validateHasBeenSet);
        _messengers.SetAccessPath(parentChainPath, validateHasBeenSet);
        _links.SetAccessPath(parentChainPath, validateHasBeenSet);
        _notAMember.SetAccessPath(parentChainPath, validateHasBeenSet);
        _joined.SetAccessPath(parentChainPath, validateHasBeenSet);
        _left.SetAccessPath(parentChainPath, validateHasBeenSet);
        _leftAt.SetAccessPath(parentChainPath, validateHasBeenSet);
        _speaksEnglish.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pictureAttachmentId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _avatarCropSquare.SetAccessPath(parentChainPath, validateHasBeenSet);
        _customFieldValues.SetAccessPath(parentChainPath, validateHasBeenSet);
        _externalId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _location.SetAccessPath(parentChainPath, validateHasBeenSet);
        _guest.SetAccessPath(parentChainPath, validateHasBeenSet);
        _guestType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _project.SetAccessPath(parentChainPath, validateHasBeenSet);
        _projectRole.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

