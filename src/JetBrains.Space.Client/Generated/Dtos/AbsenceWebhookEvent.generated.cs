// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class AbsenceWebhookEvent
     : WebhookEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "AbsenceWebhookEvent";
    
    public AbsenceWebhookEvent() { }
    
    public AbsenceWebhookEvent(KMetaMod meta, AbsenceRecord absence, TDMemberProfile member, Modification<string>? icon = null, Modification<AbsenceReasonRecord>? reason = null, Modification<string>? description = null, Modification<DateTime>? since = null, Modification<DateTime>? till = null, Modification<TDLocation>? location = null, Modification<bool>? available = null)
    {
        Meta = meta;
        Absence = absence;
        Member = member;
        Icon = icon;
        Reason = reason;
        Description = description;
        Since = since;
        Till = till;
        Location = location;
        Available = available;
    }
    
    private PropertyValue<KMetaMod> _meta = new PropertyValue<KMetaMod>(nameof(AbsenceWebhookEvent), nameof(Meta), "meta");
    
    [Required]
    [JsonPropertyName("meta")]
    public KMetaMod Meta
    {
        get => _meta.GetValue(InlineErrors);
        set => _meta.SetValue(value);
    }

    private PropertyValue<AbsenceRecord> _absence = new PropertyValue<AbsenceRecord>(nameof(AbsenceWebhookEvent), nameof(Absence), "absence");
    
    [Required]
    [JsonPropertyName("absence")]
    public AbsenceRecord Absence
    {
        get => _absence.GetValue(InlineErrors);
        set => _absence.SetValue(value);
    }

    private PropertyValue<TDMemberProfile> _member = new PropertyValue<TDMemberProfile>(nameof(AbsenceWebhookEvent), nameof(Member), "member");
    
    [Required]
    [JsonPropertyName("member")]
    public TDMemberProfile Member
    {
        get => _member.GetValue(InlineErrors);
        set => _member.SetValue(value);
    }

    private PropertyValue<Modification<string>?> _icon = new PropertyValue<Modification<string>?>(nameof(AbsenceWebhookEvent), nameof(Icon), "icon");
    
    [JsonPropertyName("icon")]
    public Modification<string>? Icon
    {
        get => _icon.GetValue(InlineErrors);
        set => _icon.SetValue(value);
    }

    private PropertyValue<Modification<AbsenceReasonRecord>?> _reason = new PropertyValue<Modification<AbsenceReasonRecord>?>(nameof(AbsenceWebhookEvent), nameof(Reason), "reason");
    
    [JsonPropertyName("reason")]
    public Modification<AbsenceReasonRecord>? Reason
    {
        get => _reason.GetValue(InlineErrors);
        set => _reason.SetValue(value);
    }

    private PropertyValue<Modification<string>?> _description = new PropertyValue<Modification<string>?>(nameof(AbsenceWebhookEvent), nameof(Description), "description");
    
    [JsonPropertyName("description")]
    public Modification<string>? Description
    {
        get => _description.GetValue(InlineErrors);
        set => _description.SetValue(value);
    }

    private PropertyValue<Modification<DateTime>?> _since = new PropertyValue<Modification<DateTime>?>(nameof(AbsenceWebhookEvent), nameof(Since), "since");
    
    [JsonPropertyName("since")]
    public Modification<DateTime>? Since
    {
        get => _since.GetValue(InlineErrors);
        set => _since.SetValue(value);
    }

    private PropertyValue<Modification<DateTime>?> _till = new PropertyValue<Modification<DateTime>?>(nameof(AbsenceWebhookEvent), nameof(Till), "till");
    
    [JsonPropertyName("till")]
    public Modification<DateTime>? Till
    {
        get => _till.GetValue(InlineErrors);
        set => _till.SetValue(value);
    }

    private PropertyValue<Modification<TDLocation>?> _location = new PropertyValue<Modification<TDLocation>?>(nameof(AbsenceWebhookEvent), nameof(Location), "location");
    
    [JsonPropertyName("location")]
    public Modification<TDLocation>? Location
    {
        get => _location.GetValue(InlineErrors);
        set => _location.SetValue(value);
    }

    private PropertyValue<Modification<bool>?> _available = new PropertyValue<Modification<bool>?>(nameof(AbsenceWebhookEvent), nameof(Available), "available");
    
    [JsonPropertyName("available")]
    public Modification<bool>? Available
    {
        get => _available.GetValue(InlineErrors);
        set => _available.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _meta.SetAccessPath(parentChainPath, validateHasBeenSet);
        _absence.SetAccessPath(parentChainPath, validateHasBeenSet);
        _member.SetAccessPath(parentChainPath, validateHasBeenSet);
        _icon.SetAccessPath(parentChainPath, validateHasBeenSet);
        _reason.SetAccessPath(parentChainPath, validateHasBeenSet);
        _description.SetAccessPath(parentChainPath, validateHasBeenSet);
        _since.SetAccessPath(parentChainPath, validateHasBeenSet);
        _till.SetAccessPath(parentChainPath, validateHasBeenSet);
        _location.SetAccessPath(parentChainPath, validateHasBeenSet);
        _available.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

