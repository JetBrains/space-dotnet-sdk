// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class AbsenceWebhookEvent
         : WebhookEvent, IClassNameConvertible, IPropagatePropertyAccessPath
    {
        [JsonPropertyName("className")]
        public  string? ClassName => "AbsenceWebhookEvent";
        
        public AbsenceWebhookEvent() { }
        
        public AbsenceWebhookEvent(KMetaMod meta, AbsenceRecord absence, TDMemberProfile member, Modification<string>? icon = null, Modification<AbsenceReasonRecord>? reason = null, Modification<string>? description = null, Modification<DateTime>? since = null, Modification<DateTime>? till = null, Modification<TDLocation>? location = null, Modification<bool>? available = null)
        {
            Meta = meta;
            Absence = absence;
            Member = member;
            Icon = icon;
            Reason = reason;
            Description = description;
            Since = since;
            Till = till;
            Location = location;
            Available = available;
        }
        
        private PropertyValue<KMetaMod> _meta = new PropertyValue<KMetaMod>(nameof(AbsenceWebhookEvent), nameof(Meta));
        
        [Required]
        [JsonPropertyName("meta")]
        public KMetaMod Meta
        {
            get => _meta.GetValue();
            set => _meta.SetValue(value);
        }
    
        private PropertyValue<AbsenceRecord> _absence = new PropertyValue<AbsenceRecord>(nameof(AbsenceWebhookEvent), nameof(Absence));
        
        [Required]
        [JsonPropertyName("absence")]
        public AbsenceRecord Absence
        {
            get => _absence.GetValue();
            set => _absence.SetValue(value);
        }
    
        private PropertyValue<TDMemberProfile> _member = new PropertyValue<TDMemberProfile>(nameof(AbsenceWebhookEvent), nameof(Member));
        
        [Required]
        [JsonPropertyName("member")]
        public TDMemberProfile Member
        {
            get => _member.GetValue();
            set => _member.SetValue(value);
        }
    
        private PropertyValue<Modification<string>?> _icon = new PropertyValue<Modification<string>?>(nameof(AbsenceWebhookEvent), nameof(Icon));
        
        [JsonPropertyName("icon")]
        public Modification<string>? Icon
        {
            get => _icon.GetValue();
            set => _icon.SetValue(value);
        }
    
        private PropertyValue<Modification<AbsenceReasonRecord>?> _reason = new PropertyValue<Modification<AbsenceReasonRecord>?>(nameof(AbsenceWebhookEvent), nameof(Reason));
        
        [JsonPropertyName("reason")]
        public Modification<AbsenceReasonRecord>? Reason
        {
            get => _reason.GetValue();
            set => _reason.SetValue(value);
        }
    
        private PropertyValue<Modification<string>?> _description = new PropertyValue<Modification<string>?>(nameof(AbsenceWebhookEvent), nameof(Description));
        
        [JsonPropertyName("description")]
        public Modification<string>? Description
        {
            get => _description.GetValue();
            set => _description.SetValue(value);
        }
    
        private PropertyValue<Modification<DateTime>?> _since = new PropertyValue<Modification<DateTime>?>(nameof(AbsenceWebhookEvent), nameof(Since));
        
        [JsonPropertyName("since")]
        public Modification<DateTime>? Since
        {
            get => _since.GetValue();
            set => _since.SetValue(value);
        }
    
        private PropertyValue<Modification<DateTime>?> _till = new PropertyValue<Modification<DateTime>?>(nameof(AbsenceWebhookEvent), nameof(Till));
        
        [JsonPropertyName("till")]
        public Modification<DateTime>? Till
        {
            get => _till.GetValue();
            set => _till.SetValue(value);
        }
    
        private PropertyValue<Modification<TDLocation>?> _location = new PropertyValue<Modification<TDLocation>?>(nameof(AbsenceWebhookEvent), nameof(Location));
        
        [JsonPropertyName("location")]
        public Modification<TDLocation>? Location
        {
            get => _location.GetValue();
            set => _location.SetValue(value);
        }
    
        private PropertyValue<Modification<bool>?> _available = new PropertyValue<Modification<bool>?>(nameof(AbsenceWebhookEvent), nameof(Available));
        
        [JsonPropertyName("available")]
        public Modification<bool>? Available
        {
            get => _available.GetValue();
            set => _available.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _meta.SetAccessPath(path, validateHasBeenSet);
            _absence.SetAccessPath(path, validateHasBeenSet);
            _member.SetAccessPath(path, validateHasBeenSet);
            _icon.SetAccessPath(path, validateHasBeenSet);
            _reason.SetAccessPath(path, validateHasBeenSet);
            _description.SetAccessPath(path, validateHasBeenSet);
            _since.SetAccessPath(path, validateHasBeenSet);
            _till.SetAccessPath(path, validateHasBeenSet);
            _location.SetAccessPath(path, validateHasBeenSet);
            _available.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
