// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client
{
    public sealed class EventSubjectInfo
         : IPropagatePropertyAccessPath
    {
        public EventSubjectInfo() { }
        
        public EventSubjectInfo(string code, string name, string description, List<EventTypeInfo> events, List<SubscriptionFilter> defaultFilters, string? parentCode = null, string? featureFlag = null)
        {
            Code = code;
            ParentCode = parentCode;
            Name = name;
            Description = description;
            Events = events;
            DefaultFilters = defaultFilters;
            FeatureFlag = featureFlag;
        }
        
        private PropertyValue<string> _code = new PropertyValue<string>(nameof(EventSubjectInfo), nameof(Code));
        
        [Required]
        [JsonPropertyName("code")]
        public string Code
        {
            get => _code.GetValue();
            set => _code.SetValue(value);
        }
    
        private PropertyValue<string?> _parentCode = new PropertyValue<string?>(nameof(EventSubjectInfo), nameof(ParentCode));
        
        [JsonPropertyName("parentCode")]
        public string? ParentCode
        {
            get => _parentCode.GetValue();
            set => _parentCode.SetValue(value);
        }
    
        private PropertyValue<string> _name = new PropertyValue<string>(nameof(EventSubjectInfo), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public string Name
        {
            get => _name.GetValue();
            set => _name.SetValue(value);
        }
    
        private PropertyValue<string> _description = new PropertyValue<string>(nameof(EventSubjectInfo), nameof(Description));
        
        [Required]
        [JsonPropertyName("description")]
        public string Description
        {
            get => _description.GetValue();
            set => _description.SetValue(value);
        }
    
        private PropertyValue<List<EventTypeInfo>> _events = new PropertyValue<List<EventTypeInfo>>(nameof(EventSubjectInfo), nameof(Events), new List<EventTypeInfo>());
        
        [Required]
        [JsonPropertyName("events")]
        public List<EventTypeInfo> Events
        {
            get => _events.GetValue();
            set => _events.SetValue(value);
        }
    
        private PropertyValue<List<SubscriptionFilter>> _defaultFilters = new PropertyValue<List<SubscriptionFilter>>(nameof(EventSubjectInfo), nameof(DefaultFilters), new List<SubscriptionFilter>());
        
        [Required]
        [JsonPropertyName("defaultFilters")]
        public List<SubscriptionFilter> DefaultFilters
        {
            get => _defaultFilters.GetValue();
            set => _defaultFilters.SetValue(value);
        }
    
        private PropertyValue<string?> _featureFlag = new PropertyValue<string?>(nameof(EventSubjectInfo), nameof(FeatureFlag));
        
        [JsonPropertyName("featureFlag")]
        public string? FeatureFlag
        {
            get => _featureFlag.GetValue();
            set => _featureFlag.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _code.SetAccessPath(path, validateHasBeenSet);
            _parentCode.SetAccessPath(path, validateHasBeenSet);
            _name.SetAccessPath(path, validateHasBeenSet);
            _description.SetAccessPath(path, validateHasBeenSet);
            _events.SetAccessPath(path, validateHasBeenSet);
            _defaultFilters.SetAccessPath(path, validateHasBeenSet);
            _featureFlag.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
