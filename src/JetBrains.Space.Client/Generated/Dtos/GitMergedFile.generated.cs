// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class GitMergedFile
     : IPropagatePropertyAccessPath
{
    public GitMergedFile() { }
    
    public GitMergedFile(string name, GitEntryType entryType, bool conflicting, string? oldName = null, string? baseId = null, string? sourceId = null, string? targetId = null, GitDiffSize? diffSize = null, GitFileProperties? properties = null, GitFileProperties? oldProperties = null)
    {
        Name = name;
        OldName = oldName;
        BaseId = baseId;
        SourceId = sourceId;
        TargetId = targetId;
        DiffSize = diffSize;
        EntryType = entryType;
        IsConflicting = conflicting;
        Properties = properties;
        OldProperties = oldProperties;
    }
    
    private PropertyValue<string> _name = new PropertyValue<string>(nameof(GitMergedFile), nameof(Name), "name");
    
    [Required]
    [JsonPropertyName("name")]
    public string Name
    {
        get => _name.GetValue(InlineErrors);
        set => _name.SetValue(value);
    }

    private PropertyValue<string?> _oldName = new PropertyValue<string?>(nameof(GitMergedFile), nameof(OldName), "oldName");
    
    [JsonPropertyName("oldName")]
    public string? OldName
    {
        get => _oldName.GetValue(InlineErrors);
        set => _oldName.SetValue(value);
    }

    private PropertyValue<string?> _baseId = new PropertyValue<string?>(nameof(GitMergedFile), nameof(BaseId), "baseId");
    
    [JsonPropertyName("baseId")]
    public string? BaseId
    {
        get => _baseId.GetValue(InlineErrors);
        set => _baseId.SetValue(value);
    }

    private PropertyValue<string?> _sourceId = new PropertyValue<string?>(nameof(GitMergedFile), nameof(SourceId), "sourceId");
    
    [JsonPropertyName("sourceId")]
    public string? SourceId
    {
        get => _sourceId.GetValue(InlineErrors);
        set => _sourceId.SetValue(value);
    }

    private PropertyValue<string?> _targetId = new PropertyValue<string?>(nameof(GitMergedFile), nameof(TargetId), "targetId");
    
    [JsonPropertyName("targetId")]
    public string? TargetId
    {
        get => _targetId.GetValue(InlineErrors);
        set => _targetId.SetValue(value);
    }

    private PropertyValue<GitDiffSize?> _diffSize = new PropertyValue<GitDiffSize?>(nameof(GitMergedFile), nameof(DiffSize), "diffSize");
    
    [JsonPropertyName("diffSize")]
    public GitDiffSize? DiffSize
    {
        get => _diffSize.GetValue(InlineErrors);
        set => _diffSize.SetValue(value);
    }

    private PropertyValue<GitEntryType> _entryType = new PropertyValue<GitEntryType>(nameof(GitMergedFile), nameof(EntryType), "entryType");
    
    [Required]
    [JsonPropertyName("entryType")]
    public GitEntryType EntryType
    {
        get => _entryType.GetValue(InlineErrors);
        set => _entryType.SetValue(value);
    }

    private PropertyValue<bool> _conflicting = new PropertyValue<bool>(nameof(GitMergedFile), nameof(IsConflicting), "conflicting");
    
    [Required]
    [JsonPropertyName("conflicting")]
    public bool IsConflicting
    {
        get => _conflicting.GetValue(InlineErrors);
        set => _conflicting.SetValue(value);
    }

    private PropertyValue<GitFileProperties?> _properties = new PropertyValue<GitFileProperties?>(nameof(GitMergedFile), nameof(Properties), "properties");
    
    [JsonPropertyName("properties")]
    public GitFileProperties? Properties
    {
        get => _properties.GetValue(InlineErrors);
        set => _properties.SetValue(value);
    }

    private PropertyValue<GitFileProperties?> _oldProperties = new PropertyValue<GitFileProperties?>(nameof(GitMergedFile), nameof(OldProperties), "oldProperties");
    
    [JsonPropertyName("oldProperties")]
    public GitFileProperties? OldProperties
    {
        get => _oldProperties.GetValue(InlineErrors);
        set => _oldProperties.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _name.SetAccessPath(parentChainPath, validateHasBeenSet);
        _oldName.SetAccessPath(parentChainPath, validateHasBeenSet);
        _baseId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sourceId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetId.SetAccessPath(parentChainPath, validateHasBeenSet);
        _diffSize.SetAccessPath(parentChainPath, validateHasBeenSet);
        _entryType.SetAccessPath(parentChainPath, validateHasBeenSet);
        _conflicting.SetAccessPath(parentChainPath, validateHasBeenSet);
        _properties.SetAccessPath(parentChainPath, validateHasBeenSet);
        _oldProperties.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

