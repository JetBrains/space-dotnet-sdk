// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class TDMembership
     : IPropagatePropertyAccessPath
{
    public TDMembership() { }
    
    public TDMembership(string id, TDMemberProfile member, TDTeam team, TDRole role, bool lead, bool requiresApproval, bool archived, Dictionary<string, CFValue> customFields, TDMemberProfile? manager = null, DateTime? since = null, DateTime? till = null, DateTime? activeSince = null, DateTime? activeTill = null, TDMembership? editFor = null, TDMembership? pendingEdit = null, TDMemberProfile? approver = null)
    {
        Id = id;
        Member = member;
        Team = team;
        Role = role;
        IsLead = lead;
        Manager = manager;
        Since = since;
        Till = till;
        ActiveSince = activeSince;
        ActiveTill = activeTill;
        IsRequiresApproval = requiresApproval;
        IsArchived = archived;
        EditFor = editFor;
        PendingEdit = pendingEdit;
        Approver = approver;
        CustomFields = customFields;
    }
    
    private PropertyValue<string> _id = new PropertyValue<string>(nameof(TDMembership), nameof(Id), "id");
    
    [Required]
    [JsonPropertyName("id")]
    public string Id
    {
        get => _id.GetValue(InlineErrors);
        set => _id.SetValue(value);
    }

    private PropertyValue<TDMemberProfile> _member = new PropertyValue<TDMemberProfile>(nameof(TDMembership), nameof(Member), "member");
    
    [Required]
    [JsonPropertyName("member")]
    public TDMemberProfile Member
    {
        get => _member.GetValue(InlineErrors);
        set => _member.SetValue(value);
    }

    private PropertyValue<TDTeam> _team = new PropertyValue<TDTeam>(nameof(TDMembership), nameof(Team), "team");
    
    [Required]
    [JsonPropertyName("team")]
    public TDTeam Team
    {
        get => _team.GetValue(InlineErrors);
        set => _team.SetValue(value);
    }

    private PropertyValue<TDRole> _role = new PropertyValue<TDRole>(nameof(TDMembership), nameof(Role), "role");
    
    [Required]
    [JsonPropertyName("role")]
    public TDRole Role
    {
        get => _role.GetValue(InlineErrors);
        set => _role.SetValue(value);
    }

    private PropertyValue<bool> _lead = new PropertyValue<bool>(nameof(TDMembership), nameof(IsLead), "lead");
    
    [Required]
    [JsonPropertyName("lead")]
    public bool IsLead
    {
        get => _lead.GetValue(InlineErrors);
        set => _lead.SetValue(value);
    }

    private PropertyValue<TDMemberProfile?> _manager = new PropertyValue<TDMemberProfile?>(nameof(TDMembership), nameof(Manager), "manager");
    
    [JsonPropertyName("manager")]
    public TDMemberProfile? Manager
    {
        get => _manager.GetValue(InlineErrors);
        set => _manager.SetValue(value);
    }

    private PropertyValue<DateTime?> _since = new PropertyValue<DateTime?>(nameof(TDMembership), nameof(Since), "since");
    
    [JsonPropertyName("since")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? Since
    {
        get => _since.GetValue(InlineErrors);
        set => _since.SetValue(value);
    }

    private PropertyValue<DateTime?> _till = new PropertyValue<DateTime?>(nameof(TDMembership), nameof(Till), "till");
    
    [JsonPropertyName("till")]
    [JsonConverter(typeof(SpaceDateConverter))]
    public DateTime? Till
    {
        get => _till.GetValue(InlineErrors);
        set => _till.SetValue(value);
    }

    private PropertyValue<DateTime?> _activeSince = new PropertyValue<DateTime?>(nameof(TDMembership), nameof(ActiveSince), "activeSince");
    
    [JsonPropertyName("activeSince")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? ActiveSince
    {
        get => _activeSince.GetValue(InlineErrors);
        set => _activeSince.SetValue(value);
    }

    private PropertyValue<DateTime?> _activeTill = new PropertyValue<DateTime?>(nameof(TDMembership), nameof(ActiveTill), "activeTill");
    
    [JsonPropertyName("activeTill")]
    [JsonConverter(typeof(SpaceDateTimeConverter))]
    public DateTime? ActiveTill
    {
        get => _activeTill.GetValue(InlineErrors);
        set => _activeTill.SetValue(value);
    }

    private PropertyValue<bool> _requiresApproval = new PropertyValue<bool>(nameof(TDMembership), nameof(IsRequiresApproval), "requiresApproval");
    
    [Required]
    [JsonPropertyName("requiresApproval")]
    public bool IsRequiresApproval
    {
        get => _requiresApproval.GetValue(InlineErrors);
        set => _requiresApproval.SetValue(value);
    }

    private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(TDMembership), nameof(IsArchived), "archived");
    
    [Required]
    [JsonPropertyName("archived")]
    public bool IsArchived
    {
        get => _archived.GetValue(InlineErrors);
        set => _archived.SetValue(value);
    }

    private PropertyValue<TDMembership?> _editFor = new PropertyValue<TDMembership?>(nameof(TDMembership), nameof(EditFor), "editFor");
    
    [JsonPropertyName("editFor")]
    public TDMembership? EditFor
    {
        get => _editFor.GetValue(InlineErrors);
        set => _editFor.SetValue(value);
    }

    private PropertyValue<TDMembership?> _pendingEdit = new PropertyValue<TDMembership?>(nameof(TDMembership), nameof(PendingEdit), "pendingEdit");
    
    [JsonPropertyName("pendingEdit")]
    public TDMembership? PendingEdit
    {
        get => _pendingEdit.GetValue(InlineErrors);
        set => _pendingEdit.SetValue(value);
    }

    private PropertyValue<TDMemberProfile?> _approver = new PropertyValue<TDMemberProfile?>(nameof(TDMembership), nameof(Approver), "approver");
    
    [JsonPropertyName("approver")]
    public TDMemberProfile? Approver
    {
        get => _approver.GetValue(InlineErrors);
        set => _approver.SetValue(value);
    }

    private PropertyValue<Dictionary<string, CFValue>> _customFields = new PropertyValue<Dictionary<string, CFValue>>(nameof(TDMembership), nameof(CustomFields), "customFields", new Dictionary<string, CFValue>());
    
    [Required]
    [JsonPropertyName("customFields")]
    public Dictionary<string, CFValue> CustomFields
    {
        get => _customFields.GetValue(InlineErrors);
        set => _customFields.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _id.SetAccessPath(parentChainPath, validateHasBeenSet);
        _member.SetAccessPath(parentChainPath, validateHasBeenSet);
        _team.SetAccessPath(parentChainPath, validateHasBeenSet);
        _role.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lead.SetAccessPath(parentChainPath, validateHasBeenSet);
        _manager.SetAccessPath(parentChainPath, validateHasBeenSet);
        _since.SetAccessPath(parentChainPath, validateHasBeenSet);
        _till.SetAccessPath(parentChainPath, validateHasBeenSet);
        _activeSince.SetAccessPath(parentChainPath, validateHasBeenSet);
        _activeTill.SetAccessPath(parentChainPath, validateHasBeenSet);
        _requiresApproval.SetAccessPath(parentChainPath, validateHasBeenSet);
        _archived.SetAccessPath(parentChainPath, validateHasBeenSet);
        _editFor.SetAccessPath(parentChainPath, validateHasBeenSet);
        _pendingEdit.SetAccessPath(parentChainPath, validateHasBeenSet);
        _approver.SetAccessPath(parentChainPath, validateHasBeenSet);
        _customFields.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

