// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class MergeRequestClosed
     : CompactFeedEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "MergeRequestClosed";
    
    public MergeRequestClosed() { }
    
    public MergeRequestClosed(bool isMerged, string sourceBranch, bool sourceBranchDeleted, string targetBranch, bool targetBranchDeleted, bool? mergeDetected = null)
    {
        IsMerged = isMerged;
        SourceBranch = sourceBranch;
        IsSourceBranchDeleted = sourceBranchDeleted;
        TargetBranch = targetBranch;
        IsTargetBranchDeleted = targetBranchDeleted;
        IsMergeDetected = mergeDetected;
    }
    
    private PropertyValue<bool> _isMerged = new PropertyValue<bool>(nameof(MergeRequestClosed), nameof(IsMerged), "isMerged");
    
    [Required]
    [JsonPropertyName("isMerged")]
    public bool IsMerged
    {
        get => _isMerged.GetValue(InlineErrors);
        set => _isMerged.SetValue(value);
    }

    private PropertyValue<string> _sourceBranch = new PropertyValue<string>(nameof(MergeRequestClosed), nameof(SourceBranch), "sourceBranch");
    
    [Required]
    [JsonPropertyName("sourceBranch")]
    public string SourceBranch
    {
        get => _sourceBranch.GetValue(InlineErrors);
        set => _sourceBranch.SetValue(value);
    }

    private PropertyValue<bool> _sourceBranchDeleted = new PropertyValue<bool>(nameof(MergeRequestClosed), nameof(IsSourceBranchDeleted), "sourceBranchDeleted");
    
    [Required]
    [JsonPropertyName("sourceBranchDeleted")]
    public bool IsSourceBranchDeleted
    {
        get => _sourceBranchDeleted.GetValue(InlineErrors);
        set => _sourceBranchDeleted.SetValue(value);
    }

    private PropertyValue<string> _targetBranch = new PropertyValue<string>(nameof(MergeRequestClosed), nameof(TargetBranch), "targetBranch");
    
    [Required]
    [JsonPropertyName("targetBranch")]
    public string TargetBranch
    {
        get => _targetBranch.GetValue(InlineErrors);
        set => _targetBranch.SetValue(value);
    }

    private PropertyValue<bool> _targetBranchDeleted = new PropertyValue<bool>(nameof(MergeRequestClosed), nameof(IsTargetBranchDeleted), "targetBranchDeleted");
    
    [Required]
    [JsonPropertyName("targetBranchDeleted")]
    public bool IsTargetBranchDeleted
    {
        get => _targetBranchDeleted.GetValue(InlineErrors);
        set => _targetBranchDeleted.SetValue(value);
    }

    private PropertyValue<bool?> _mergeDetected = new PropertyValue<bool?>(nameof(MergeRequestClosed), nameof(IsMergeDetected), "mergeDetected");
    
    [JsonPropertyName("mergeDetected")]
    public bool? IsMergeDetected
    {
        get => _mergeDetected.GetValue(InlineErrors);
        set => _mergeDetected.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _isMerged.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sourceBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _sourceBranchDeleted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetBranch.SetAccessPath(parentChainPath, validateHasBeenSet);
        _targetBranchDeleted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _mergeDetected.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

