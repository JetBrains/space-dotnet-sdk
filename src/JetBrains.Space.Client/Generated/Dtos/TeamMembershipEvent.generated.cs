// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public sealed class TeamMembershipEvent
     : WebhookEvent, IClassNameConvertible, IPropagatePropertyAccessPath
{
    [JsonPropertyName("className")]
    public  string? ClassName => "TeamMembershipEvent";
    
    public TeamMembershipEvent() { }
    
    public TeamMembershipEvent(KMetaMod meta, TDMembership membership, Modification<TDTeam>? team = null, Modification<TDRole>? role = null, Modification<bool>? lead = null, Modification<TDMemberProfile>? manager = null, Modification<DateTime>? since = null, Modification<DateTime>? till = null, Modification<bool>? deleted = null, Modification<TDMemberProfile>? approvedBy = null)
    {
        Meta = meta;
        Membership = membership;
        Team = team;
        Role = role;
        Lead = lead;
        Manager = manager;
        Since = since;
        Till = till;
        Deleted = deleted;
        ApprovedBy = approvedBy;
    }
    
    private PropertyValue<KMetaMod> _meta = new PropertyValue<KMetaMod>(nameof(TeamMembershipEvent), nameof(Meta), "meta");
    
    [Required]
    [JsonPropertyName("meta")]
    public KMetaMod Meta
    {
        get => _meta.GetValue(InlineErrors);
        set => _meta.SetValue(value);
    }

    private PropertyValue<TDMembership> _membership = new PropertyValue<TDMembership>(nameof(TeamMembershipEvent), nameof(Membership), "membership");
    
    [Required]
    [JsonPropertyName("membership")]
    public TDMembership Membership
    {
        get => _membership.GetValue(InlineErrors);
        set => _membership.SetValue(value);
    }

    private PropertyValue<Modification<TDTeam>?> _team = new PropertyValue<Modification<TDTeam>?>(nameof(TeamMembershipEvent), nameof(Team), "team");
    
    [JsonPropertyName("team")]
    public Modification<TDTeam>? Team
    {
        get => _team.GetValue(InlineErrors);
        set => _team.SetValue(value);
    }

    private PropertyValue<Modification<TDRole>?> _role = new PropertyValue<Modification<TDRole>?>(nameof(TeamMembershipEvent), nameof(Role), "role");
    
    [JsonPropertyName("role")]
    public Modification<TDRole>? Role
    {
        get => _role.GetValue(InlineErrors);
        set => _role.SetValue(value);
    }

    private PropertyValue<Modification<bool>?> _lead = new PropertyValue<Modification<bool>?>(nameof(TeamMembershipEvent), nameof(Lead), "lead");
    
    [JsonPropertyName("lead")]
    public Modification<bool>? Lead
    {
        get => _lead.GetValue(InlineErrors);
        set => _lead.SetValue(value);
    }

    private PropertyValue<Modification<TDMemberProfile>?> _manager = new PropertyValue<Modification<TDMemberProfile>?>(nameof(TeamMembershipEvent), nameof(Manager), "manager");
    
    [JsonPropertyName("manager")]
    public Modification<TDMemberProfile>? Manager
    {
        get => _manager.GetValue(InlineErrors);
        set => _manager.SetValue(value);
    }

    private PropertyValue<Modification<DateTime>?> _since = new PropertyValue<Modification<DateTime>?>(nameof(TeamMembershipEvent), nameof(Since), "since");
    
    [JsonPropertyName("since")]
    public Modification<DateTime>? Since
    {
        get => _since.GetValue(InlineErrors);
        set => _since.SetValue(value);
    }

    private PropertyValue<Modification<DateTime>?> _till = new PropertyValue<Modification<DateTime>?>(nameof(TeamMembershipEvent), nameof(Till), "till");
    
    [JsonPropertyName("till")]
    public Modification<DateTime>? Till
    {
        get => _till.GetValue(InlineErrors);
        set => _till.SetValue(value);
    }

    private PropertyValue<Modification<bool>?> _deleted = new PropertyValue<Modification<bool>?>(nameof(TeamMembershipEvent), nameof(Deleted), "deleted");
    
    [JsonPropertyName("deleted")]
    public Modification<bool>? Deleted
    {
        get => _deleted.GetValue(InlineErrors);
        set => _deleted.SetValue(value);
    }

    private PropertyValue<Modification<TDMemberProfile>?> _approvedBy = new PropertyValue<Modification<TDMemberProfile>?>(nameof(TeamMembershipEvent), nameof(ApprovedBy), "approvedBy");
    
    [JsonPropertyName("approvedBy")]
    public Modification<TDMemberProfile>? ApprovedBy
    {
        get => _approvedBy.GetValue(InlineErrors);
        set => _approvedBy.SetValue(value);
    }

    public  void SetAccessPath(string parentChainPath, bool validateHasBeenSet)
    {
        _meta.SetAccessPath(parentChainPath, validateHasBeenSet);
        _membership.SetAccessPath(parentChainPath, validateHasBeenSet);
        _team.SetAccessPath(parentChainPath, validateHasBeenSet);
        _role.SetAccessPath(parentChainPath, validateHasBeenSet);
        _lead.SetAccessPath(parentChainPath, validateHasBeenSet);
        _manager.SetAccessPath(parentChainPath, validateHasBeenSet);
        _since.SetAccessPath(parentChainPath, validateHasBeenSet);
        _till.SetAccessPath(parentChainPath, validateHasBeenSet);
        _deleted.SetAccessPath(parentChainPath, validateHasBeenSet);
        _approvedBy.SetAccessPath(parentChainPath, validateHasBeenSet);
    }
    
    /// <inheritdoc />
    [JsonPropertyName("$errors")]
    public List<ApiInlineError> InlineErrors { get; set; } = new();

}

