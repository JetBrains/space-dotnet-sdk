// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public partial class PublicHolidayClient : ISpaceClient
{
    private readonly Connection _connection;
    
    public PublicHolidayClient(Connection connection)
    {
        _connection = connection;
    }
    
    public CalendarClient Calendars => new CalendarClient(_connection);
    
    public partial class CalendarClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public CalendarClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create a public holiday calendar for a location
        /// </summary>
        public async Task<PublicHolidayCalendarRecord> CreateCalendarAsync(string name, string location, Func<Partial<PublicHolidayCalendarRecord>, Partial<PublicHolidayCalendarRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<PublicHolidayCalendarRecord>()) : Partial<PublicHolidayCalendarRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<PublicHolidaysCalendarsPostRequest, PublicHolidayCalendarRecord>("POST", $"api/http/public-holidays/calendars{queryParameters.ToQueryString()}", 
                new PublicHolidaysCalendarsPostRequest
                { 
                    Name = name,
                    Location = location,
                }, requestHeaders: null, functionName: "CreateCalendar", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Import holidays in a public holiday calendar, using an attachment (.ics format) as the source
        /// </summary>
        public async Task<string> ImportCalendarAsync(string calendar, string attachmentId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            return await _connection.RequestResourceAsync<PublicHolidaysCalendarsImportPostRequest, string>("POST", $"api/http/public-holidays/calendars/import{queryParameters.ToQueryString()}", 
                new PublicHolidaysCalendarsImportPostRequest
                { 
                    Calendar = calendar,
                    AttachmentId = attachmentId,
                }, requestHeaders: null, functionName: "ImportCalendar", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get all public holiday calendars
        /// </summary>
        public async Task<Batch<PublicHolidayCalendarRecord>> GetAllCalendarsAsync(string? skip = null, int? top = 100, Func<Partial<Batch<PublicHolidayCalendarRecord>>, Partial<Batch<PublicHolidayCalendarRecord>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<PublicHolidayCalendarRecord>>()) : Partial<Batch<PublicHolidayCalendarRecord>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<PublicHolidayCalendarRecord>>("GET", $"api/http/public-holidays/calendars{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllCalendars", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get all public holiday calendars
        /// </summary>
        public IAsyncEnumerable<PublicHolidayCalendarRecord> GetAllCalendarsAsyncEnumerable(string? skip = null, int? top = 100, Func<Partial<PublicHolidayCalendarRecord>, Partial<PublicHolidayCalendarRecord>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllCalendarsAsync(top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PublicHolidayCalendarRecord>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PublicHolidayCalendarRecord>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Update an existing public holiday calendar
        /// </summary>
        public async Task<PublicHolidayCalendarRecord> UpdateCalendarAsync(string id, string name, string location, Func<Partial<PublicHolidayCalendarRecord>, Partial<PublicHolidayCalendarRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<PublicHolidayCalendarRecord>()) : Partial<PublicHolidayCalendarRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<PublicHolidaysCalendarsForIdPatchRequest, PublicHolidayCalendarRecord>("PATCH", $"api/http/public-holidays/calendars/{id}{queryParameters.ToQueryString()}", 
                new PublicHolidaysCalendarsForIdPatchRequest
                { 
                    Name = name,
                    Location = location,
                }, requestHeaders: null, functionName: "UpdateCalendar", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Delete a public holiday calendar
        /// </summary>
        public async Task DeleteCalendarAsync(string id, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/public-holidays/calendars/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteCalendar", cancellationToken: cancellationToken);
        }
        
    
    }

    public HolidayClient Holidays => new HolidayClient(_connection);
    
    public partial class HolidayClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public HolidayClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Add a holiday to a public holiday calendar and specify if it is a working day or not
        /// </summary>
        public async Task<PublicHoliday> CreateHolidayAsync(string calendar, string name, DateTime date, bool workingDay, bool? halfDay = false, Func<Partial<PublicHoliday>, Partial<PublicHoliday>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<PublicHoliday>()) : Partial<PublicHoliday>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<PublicHolidaysHolidaysPostRequest, PublicHoliday>("POST", $"api/http/public-holidays/holidays{queryParameters.ToQueryString()}", 
                new PublicHolidaysHolidaysPostRequest
                { 
                    Calendar = calendar,
                    Name = name,
                    Date = date,
                    IsWorkingDay = workingDay,
                    IsHalfDay = halfDay,
                }, requestHeaders: null, functionName: "CreateHoliday", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get/search all holidays in a public holiday calendar. Parameters are applied as 'AND' filters.
        /// </summary>
        public async Task<Batch<PublicHoliday>> GetAllHolidaysAsync(string? skip = null, int? top = 100, string? calendar = null, string? location = null, DateTime? startDate = null, DateTime? endDate = null, Func<Partial<Batch<PublicHoliday>>, Partial<Batch<PublicHoliday>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            if (calendar != null) queryParameters.Append("calendar", calendar);
            if (location != null) queryParameters.Append("location", location);
            if (startDate != null) queryParameters.Append("startDate", startDate?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
            if (endDate != null) queryParameters.Append("endDate", endDate?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<PublicHoliday>>()) : Partial<Batch<PublicHoliday>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<PublicHoliday>>("GET", $"api/http/public-holidays/holidays{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllHolidays", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get/search all holidays in a public holiday calendar. Parameters are applied as 'AND' filters.
        /// </summary>
        public IAsyncEnumerable<PublicHoliday> GetAllHolidaysAsyncEnumerable(string? skip = null, int? top = 100, string? calendar = null, string? location = null, DateTime? startDate = null, DateTime? endDate = null, Func<Partial<PublicHoliday>, Partial<PublicHoliday>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllHolidaysAsync(top: top, calendar: calendar, location: location, startDate: startDate, endDate: endDate, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PublicHoliday>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PublicHoliday>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Update a holiday in a public holiday calendar. Optional parameters will be ignored when not specified and updated otherwise.
        /// </summary>
        public async Task<PublicHoliday> UpdateHolidayAsync(string id, string? calendar = null, string? name = null, DateTime? date = null, bool? workingDay = null, bool? halfDay = null, Func<Partial<PublicHoliday>, Partial<PublicHoliday>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<PublicHoliday>()) : Partial<PublicHoliday>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<PublicHolidaysHolidaysForIdPatchRequest, PublicHoliday>("PATCH", $"api/http/public-holidays/holidays/{id}{queryParameters.ToQueryString()}", 
                new PublicHolidaysHolidaysForIdPatchRequest
                { 
                    Calendar = calendar,
                    Name = name,
                    Date = date,
                    IsWorkingDay = workingDay,
                    IsHalfDay = halfDay,
                }, requestHeaders: null, functionName: "UpdateHoliday", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Delete a holiday from a public holiday calendar
        /// </summary>
        public async Task DeleteHolidayAsync(string id, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/public-holidays/holidays/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteHoliday", cancellationToken: cancellationToken);
        }
        
    
        public ProfileHolidayClient ProfileHolidays => new ProfileHolidayClient(_connection);
        
        public partial class ProfileHolidayClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public ProfileHolidayClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get holidays observed in the location(s) of the current profile during the selected period
            /// </summary>
            public async Task<List<PublicHoliday>> GetAllProfileHolidaysAsync(DateTime startDate, DateTime endDate, string profile, bool? workingDays = null, Func<Partial<PublicHoliday>, Partial<PublicHoliday>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("startDate", startDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("endDate", endDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("profile", profile);
                if (workingDays != null) queryParameters.Append("workingDays", workingDays?.ToString("l"));
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<PublicHoliday>()) : Partial<PublicHoliday>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<PublicHoliday>>("GET", $"api/http/public-holidays/holidays/profile-holidays{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllProfileHolidays", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public RelatedHolidayClient RelatedHolidays => new RelatedHolidayClient(_connection);
        
        public partial class RelatedHolidayClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public RelatedHolidayClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Search related holidays in all public holiday calendars, during the selected period
            /// </summary>
            public async Task<Batch<PublicHoliday>> GetAllRelatedHolidaysAsync(string? skip = null, int? top = 100, DateTime? startDate = null, DateTime? endDate = null, Func<Partial<Batch<PublicHoliday>>, Partial<Batch<PublicHoliday>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                if (startDate != null) queryParameters.Append("startDate", startDate?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                if (endDate != null) queryParameters.Append("endDate", endDate?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<PublicHoliday>>()) : Partial<Batch<PublicHoliday>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<PublicHoliday>>("GET", $"api/http/public-holidays/holidays/related-holidays{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllRelatedHolidays", cancellationToken: cancellationToken);
            }
            
            /// <summary>
            /// Search related holidays in all public holiday calendars, during the selected period
            /// </summary>
            public IAsyncEnumerable<PublicHoliday> GetAllRelatedHolidaysAsyncEnumerable(string? skip = null, int? top = 100, DateTime? startDate = null, DateTime? endDate = null, Func<Partial<PublicHoliday>, Partial<PublicHoliday>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllRelatedHolidaysAsync(top: top, startDate: startDate, endDate: endDate, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<PublicHoliday>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PublicHoliday>.Default())), skip, cancellationToken);
        
        }
    
    }

}

