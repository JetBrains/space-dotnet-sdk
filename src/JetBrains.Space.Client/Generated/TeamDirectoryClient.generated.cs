// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108
#pragma warning disable 618

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Space.Common;
using JetBrains.Space.Common.Json.Serialization;
using JetBrains.Space.Common.Json.Serialization.Polymorphism;
using JetBrains.Space.Common.Types;

namespace JetBrains.Space.Client;

public partial class TeamDirectoryClient : ISpaceClient
{
    private readonly Connection _connection;
    
    public TeamDirectoryClient(Connection connection)
    {
        _connection = connection;
    }
    
    public CalendarEventClient CalendarEvents => new CalendarEventClient(_connection);
    
    public partial class CalendarEventClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public CalendarEventClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Get calendar events attached to an article in a specific time period
        /// </summary>
        [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
        public async Task<List<MeetingRecord>> GetAllCalendarEventsAsync(DateTime dateFrom, DateTime dateTo, Func<Partial<MeetingRecord>, Partial<MeetingRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("dateFrom", dateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
            queryParameters.Append("dateTo", dateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<MeetingRecord>()) : Partial<MeetingRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<MeetingRecord>>("GET", $"api/http/team-directory/calendar-events{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllCalendarEvents", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get a calendar event attached to an article
        /// </summary>
        [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
        public async Task<MeetingRecord> GetCalendarEventAsync(string id, Func<Partial<MeetingRecord>, Partial<MeetingRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<MeetingRecord>()) : Partial<MeetingRecord>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<MeetingRecord>("GET", $"api/http/team-directory/calendar-events/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetCalendarEvent", cancellationToken: cancellationToken);
        }
        
    
        public AbsenceEventClient AbsenceEvents => new AbsenceEventClient(_connection);
        
        public partial class AbsenceEventClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public AbsenceEventClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get/search absences. Parameters are applied as 'AND' filters.
            /// </summary>
            [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
            public async Task<List<AbsenceEvent>> GetAllAbsenceEventsAsync(DateTime dateFrom, DateTime dateTo, string? team = null, string? location = null, string? role = null, Func<Partial<AbsenceEvent>, Partial<AbsenceEvent>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("dateFrom", dateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("dateTo", dateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                if (team != null) queryParameters.Append("team", team);
                if (location != null) queryParameters.Append("location", location);
                if (role != null) queryParameters.Append("role", role);
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<AbsenceEvent>()) : Partial<AbsenceEvent>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<AbsenceEvent>>("GET", $"api/http/team-directory/calendar-events/absence-events{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllAbsenceEvents", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public BirthdayEventClient BirthdayEvents => new BirthdayEventClient(_connection);
        
        public partial class BirthdayEventClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public BirthdayEventClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get/search birthdays. Parameters are applied as 'AND' filters.
            /// </summary>
            [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
            public async Task<List<BirthdayEvent>> GetAllBirthdayEventsAsync(DateTime dateFrom, DateTime dateTo, string? team = null, string? location = null, string? role = null, Func<Partial<BirthdayEvent>, Partial<BirthdayEvent>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("dateFrom", dateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("dateTo", dateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                if (team != null) queryParameters.Append("team", team);
                if (location != null) queryParameters.Append("location", location);
                if (role != null) queryParameters.Append("role", role);
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<BirthdayEvent>()) : Partial<BirthdayEvent>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<BirthdayEvent>>("GET", $"api/http/team-directory/calendar-events/birthday-events{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllBirthdayEvents", cancellationToken: cancellationToken);
            }
            
        
            public StarredClient Starred => new StarredClient(_connection);
            
            public partial class StarredClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public StarredClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get/search birthdays in a specific time period for starred profiles.
                /// </summary>
                [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
                public async Task<List<BirthdayEvent>> GetAllStarredBirthdayEventsAsync(DateTime dateFrom, DateTime dateTo, Func<Partial<BirthdayEvent>, Partial<BirthdayEvent>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("dateFrom", dateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                    queryParameters.Append("dateTo", dateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<BirthdayEvent>()) : Partial<BirthdayEvent>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<List<BirthdayEvent>>("GET", $"api/http/team-directory/calendar-events/birthday-events/starred{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllStarredBirthdayEvents", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
        public HolidayClient Holidays => new HolidayClient(_connection);
        
        public partial class HolidayClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public HolidayClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get/search holidays. Parameters are applied as 'AND' filters.
            /// </summary>
            [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
            public async Task<List<HolidaysEvent>> GetAllHolidaysAsync(DateTime startDate, DateTime endDate, string? team = null, string? location = null, string? role = null, bool? workingDays = null, Func<Partial<HolidaysEvent>, Partial<HolidaysEvent>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("startDate", startDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("endDate", endDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                if (team != null) queryParameters.Append("team", team);
                if (location != null) queryParameters.Append("location", location);
                if (role != null) queryParameters.Append("role", role);
                if (workingDays != null) queryParameters.Append("workingDays", workingDays?.ToString("l"));
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<HolidaysEvent>()) : Partial<HolidaysEvent>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<HolidaysEvent>>("GET", $"api/http/team-directory/calendar-events/holidays{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllHolidays", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public MeetingParticipationClient MeetingParticipations => new MeetingParticipationClient(_connection);
        
        public partial class MeetingParticipationClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public MeetingParticipationClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Update RSVP / calendar event participation status for a calendar event attached to an article
            /// </summary>
            [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
            public async Task<MeetingRecord> UpdateMeetingParticipationAsync(string id, EventParticipationStatus newStatus, Func<Partial<MeetingRecord>, Partial<MeetingRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<MeetingRecord>()) : Partial<MeetingRecord>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryCalendarEventsMeetingParticipationsForIdPatchRequest, MeetingRecord>("PATCH", $"api/http/team-directory/calendar-events/meeting-participations/{id}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryCalendarEventsMeetingParticipationsForIdPatchRequest
                    { 
                        NewStatus = newStatus,
                    }, requestHeaders: null, functionName: "UpdateMeetingParticipation", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public MembershipEventClient MembershipEvents => new MembershipEventClient(_connection);
        
        public partial class MembershipEventClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public MembershipEventClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get/search membership events. Parameters are applied as 'AND' filters.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View memberships</term>
            /// </item>
            /// </list>
            /// </remarks>
            [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
            public async Task<List<MembershipEvent>> GetAllMembershipEventsAsync(DateTime dateFrom, DateTime dateTo, string? team = null, string? location = null, string? role = null, Func<Partial<MembershipEvent>, Partial<MembershipEvent>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("dateFrom", dateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("dateTo", dateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                if (team != null) queryParameters.Append("team", team);
                if (location != null) queryParameters.Append("location", location);
                if (role != null) queryParameters.Append("role", role);
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<MembershipEvent>()) : Partial<MembershipEvent>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<MembershipEvent>>("GET", $"api/http/team-directory/calendar-events/membership-events{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllMembershipEvents", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public NonWorkingDaysEventClient NonWorkingDaysEvents => new NonWorkingDaysEventClient(_connection);
        
        public partial class NonWorkingDaysEventClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public NonWorkingDaysEventClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get/search non-working day events. Parameters are applied as 'AND' filters.
            /// </summary>
            [Obsolete("Use endpoints from 'calendars' resource (since 2020-10-14) (will be removed in a future version)")]
            public async Task<List<NonWorkingDaysEvent>> GetAllNonWorkingDaysEventsAsync(DateTime dateFrom, DateTime dateTo, string? member = null, string? team = null, string? location = null, string? role = null, Func<Partial<NonWorkingDaysEvent>, Partial<NonWorkingDaysEvent>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("dateFrom", dateFrom.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("dateTo", dateTo.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                if (member != null) queryParameters.Append("member", member);
                if (team != null) queryParameters.Append("team", team);
                if (location != null) queryParameters.Append("location", location);
                if (role != null) queryParameters.Append("role", role);
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<NonWorkingDaysEvent>()) : Partial<NonWorkingDaysEvent>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<NonWorkingDaysEvent>>("GET", $"api/http/team-directory/calendar-events/non-working-days-events{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllNonWorkingDaysEvents", cancellationToken: cancellationToken);
            }
            
        
        }
    
    }

    public InvitationLinkClient InvitationLinks => new InvitationLinkClient(_connection);
    
    public partial class InvitationLinkClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public InvitationLinkClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create an organization-wide invitation link
        /// </summary>
        public async Task<Pair<string, InvitationLink>> CreateInvitationLinkAsync(string name, DateTime expiresAt, int inviteeLimit, string? team = null, string? role = null, ProjectIdentifier? project = null, ProjectTeamRole? projectRole = null, GlobalRole? globalRole = null, Func<Partial<Pair<string, InvitationLink>>, Partial<Pair<string, InvitationLink>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Pair<string, InvitationLink>>()) : Partial<Pair<string, InvitationLink>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryInvitationLinksPostRequest, Pair<string, InvitationLink>>("POST", $"api/http/team-directory/invitation-links{queryParameters.ToQueryString()}", 
                new TeamDirectoryInvitationLinksPostRequest
                { 
                    Name = name,
                    ExpiresAt = expiresAt,
                    InviteeLimit = inviteeLimit,
                    Team = team,
                    Role = role,
                    Project = project,
                    ProjectRole = projectRole,
                    GlobalRole = globalRole,
                }, requestHeaders: null, functionName: "CreateInvitationLink", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get organization-wide invitation links
        /// </summary>
        public async Task<Batch<InvitationLink>> GetAllInvitationLinksAsync(bool withDeleted = false, string? skip = null, int? top = 100, List<ProjectIdentifier>? projects = null, List<string>? teams = null, Func<Partial<Batch<InvitationLink>>, Partial<Batch<InvitationLink>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("withDeleted", withDeleted.ToString("l"));
            if (projects != null) queryParameters.Append("projects", projects.Select(it => it.ToString()));
            if (teams != null) queryParameters.Append("teams", teams.Select(it => it));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<InvitationLink>>()) : Partial<Batch<InvitationLink>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<InvitationLink>>("GET", $"api/http/team-directory/invitation-links{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllInvitationLinks", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get organization-wide invitation links
        /// </summary>
        public IAsyncEnumerable<InvitationLink> GetAllInvitationLinksAsyncEnumerable(bool withDeleted = false, string? skip = null, int? top = 100, List<ProjectIdentifier>? projects = null, List<string>? teams = null, Func<Partial<InvitationLink>, Partial<InvitationLink>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllInvitationLinksAsync(withDeleted: withDeleted, top: top, projects: projects, teams: teams, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<InvitationLink>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<InvitationLink>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Update an organization-wide invitation link
        /// </summary>
        public async Task UpdateInvitationLinkAsync(string invitationLinkId, string? name = null, DateTime? expiresAt = null, int? inviteeLimit = null, string? team = null, string? position = null, ProjectIdentifier? project = null, ProjectTeamRole? projectRole = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/invitation-links/{invitationLinkId}{queryParameters.ToQueryString()}", 
                new TeamDirectoryInvitationLinksForInvitationLinkIdPatchRequest
                { 
                    Name = name,
                    ExpiresAt = expiresAt,
                    InviteeLimit = inviteeLimit,
                    Team = team,
                    Position = position,
                    Project = project,
                    ProjectRole = projectRole,
                }, requestHeaders: null, functionName: "UpdateInvitationLink", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Delete currently active organization-wide invitation link
        /// </summary>
        public async Task DeleteInvitationLinkAsync(string invitationLinkId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/invitation-links/{invitationLinkId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteInvitationLink", cancellationToken: cancellationToken);
        }
        
    
    }

    public InvitationClient Invitations => new InvitationClient(_connection);
    
    public partial class InvitationClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public InvitationClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create an invitation to join the current organization. Optionally, the team and/or role to join when accepting the invitation can be specified.
        /// </summary>
        public async Task<Invitation> CreateInvitationAsync(string inviteeEmail, string? inviteeFirstName = null, string? inviteeLastName = null, string? team = null, string? role = null, ProjectIdentifier? project = null, ProjectTeamRole? projectRole = null, GlobalRole? globalRole = null, Func<Partial<Invitation>, Partial<Invitation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Invitation>()) : Partial<Invitation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryInvitationsPostRequest, Invitation>("POST", $"api/http/team-directory/invitations{queryParameters.ToQueryString()}", 
                new TeamDirectoryInvitationsPostRequest
                { 
                    InviteeEmail = inviteeEmail,
                    InviteeFirstName = inviteeFirstName,
                    InviteeLastName = inviteeLastName,
                    Team = team,
                    Role = role,
                    Project = project,
                    ProjectRole = projectRole,
                    GlobalRole = globalRole,
                }, requestHeaders: null, functionName: "CreateInvitation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get a list of invitations
        /// </summary>
        public async Task<Batch<Invitation>> GetAllInvitationsAsync(bool withDeleted = false, string? skip = null, int? top = 100, List<ProjectIdentifier>? projects = null, List<string>? teams = null, Func<Partial<Batch<Invitation>>, Partial<Batch<Invitation>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("withDeleted", withDeleted.ToString("l"));
            if (projects != null) queryParameters.Append("projects", projects.Select(it => it.ToString()));
            if (teams != null) queryParameters.Append("teams", teams.Select(it => it));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<Invitation>>()) : Partial<Batch<Invitation>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<Invitation>>("GET", $"api/http/team-directory/invitations{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllInvitations", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get a list of invitations
        /// </summary>
        public IAsyncEnumerable<Invitation> GetAllInvitationsAsyncEnumerable(bool withDeleted = false, string? skip = null, int? top = 100, List<ProjectIdentifier>? projects = null, List<string>? teams = null, Func<Partial<Invitation>, Partial<Invitation>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllInvitationsAsync(withDeleted: withDeleted, top: top, projects: projects, teams: teams, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<Invitation>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<Invitation>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Update an invitation. Optional parameters will be ignored when not specified and updated otherwise.
        /// </summary>
        public async Task UpdateInvitationAsync(string id, string? inviteeEmail = null, string? inviteeFirstName = null, string? inviteeLastName = null, string? team = null, string? role = null, ProjectIdentifier? project = null, ProjectTeamRole? projectRole = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/invitations/{id}{queryParameters.ToQueryString()}", 
                new TeamDirectoryInvitationsForIdPatchRequest
                { 
                    InviteeEmail = inviteeEmail,
                    InviteeFirstName = inviteeFirstName,
                    InviteeLastName = inviteeLastName,
                    Team = team,
                    Role = role,
                    Project = project,
                    ProjectRole = projectRole,
                }, requestHeaders: null, functionName: "UpdateInvitation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Delete an invitation. Deleted invitations can no longer be used to join the organization.
        /// </summary>
        public async Task DeleteInvitationAsync(string id, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/invitations/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteInvitation", cancellationToken: cancellationToken);
        }
        
    
    }

    public LanguageClient Languages => new LanguageClient(_connection);
    
    public partial class LanguageClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public LanguageClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Get all languages
        /// </summary>
        public async Task<List<TDLanguage>> GetAllLanguagesAsync(Func<Partial<TDLanguage>, Partial<TDLanguage>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLanguage>()) : Partial<TDLanguage>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<TDLanguage>>("GET", $"api/http/team-directory/languages{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllLanguages", cancellationToken: cancellationToken);
        }
        
    
    }

    public LocationEquipmentTypeClient LocationEquipmentTypes => new LocationEquipmentTypeClient(_connection);
    
    public partial class LocationEquipmentTypeClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public LocationEquipmentTypeClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Get all equipment types
        /// </summary>
        public async Task<List<TDLocationEquipmentType>> GetAllLocationEquipmentTypesAsync(bool withArchived = false, Func<Partial<TDLocationEquipmentType>, Partial<TDLocationEquipmentType>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("withArchived", withArchived.ToString("l"));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocationEquipmentType>()) : Partial<TDLocationEquipmentType>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<TDLocationEquipmentType>>("GET", $"api/http/team-directory/location-equipment-types{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllLocationEquipmentTypes", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Archive/restore location equipment type. Setting delete to true will archive the equipment type, false will restore it.
        /// </summary>
        public async Task DeleteLocationEquipmentTypeByNameAsync(string name, bool delete, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("delete", delete.ToString("l"));
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/location-equipment-types/name:{name}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteLocationEquipmentTypeByName", cancellationToken: cancellationToken);
        }
        
    
    }

    public LocationMapMemberPointClient LocationMapMemberPoints => new LocationMapMemberPointClient(_connection);
    
    public partial class LocationMapMemberPointClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public LocationMapMemberPointClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Mark member location on a map
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDLocationMapPoint> CreateLocationMapMemberPointAsync(string memberLocationId, int x, int y, string mapId, Func<Partial<TDLocationMapPoint>, Partial<TDLocationMapPoint>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocationMapPoint>()) : Partial<TDLocationMapPoint>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryLocationMapMemberPointsPostRequest, TDLocationMapPoint>("POST", $"api/http/team-directory/location-map-member-points{queryParameters.ToQueryString()}", 
                new TeamDirectoryLocationMapMemberPointsPostRequest
                { 
                    MemberLocationId = memberLocationId,
                    X = x,
                    Y = y,
                    MapId = mapId,
                }, requestHeaders: null, functionName: "CreateLocationMapMemberPoint", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get members on a map for a location ID
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View location map points</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<Batch<TDMemberInLocationMap>> GetAllLocationMapMemberPointsAsync(string locationId, bool includeUnmarked = true, string? skip = null, int? top = 100, Func<Partial<Batch<TDMemberInLocationMap>>, Partial<Batch<TDMemberInLocationMap>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("locationId", locationId);
            queryParameters.Append("includeUnmarked", includeUnmarked.ToString("l"));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDMemberInLocationMap>>()) : Partial<Batch<TDMemberInLocationMap>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<TDMemberInLocationMap>>("GET", $"api/http/team-directory/location-map-member-points{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllLocationMapMemberPoints", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get members on a map for a location ID
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View location map points</term>
        /// </item>
        /// </list>
        /// </remarks>
        public IAsyncEnumerable<TDMemberInLocationMap> GetAllLocationMapMemberPointsAsyncEnumerable(string locationId, bool includeUnmarked = true, string? skip = null, int? top = 100, Func<Partial<TDMemberInLocationMap>, Partial<TDMemberInLocationMap>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllLocationMapMemberPointsAsync(locationId: locationId, includeUnmarked: includeUnmarked, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMemberInLocationMap>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberInLocationMap>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Update member location on a map
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDLocationMapPoint> UpdateLocationMapMemberPointAsync(string locationPointId, int? x = null, int? y = null, Func<Partial<TDLocationMapPoint>, Partial<TDLocationMapPoint>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocationMapPoint>()) : Partial<TDLocationMapPoint>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryLocationMapMemberPointsForLocationPointIdPatchRequest, TDLocationMapPoint>("PATCH", $"api/http/team-directory/location-map-member-points/{locationPointId}{queryParameters.ToQueryString()}", 
                new TeamDirectoryLocationMapMemberPointsForLocationPointIdPatchRequest
                { 
                    X = x,
                    Y = y,
                }, requestHeaders: null, functionName: "UpdateLocationMapMemberPoint", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Delete member location from a map
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task DeleteLocationMapMemberPointAsync(string locationPointId, bool delete, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("delete", delete.ToString("l"));
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/location-map-member-points/{locationPointId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteLocationMapMemberPoint", cancellationToken: cancellationToken);
        }
        
    
    }

    public LocationClient Locations => new LocationClient(_connection);
    
    public partial class LocationClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public LocationClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create a location
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDLocation> CreateLocationAsync(string name, string? timezone = null, List<int>? workdays = null, List<string>? phones = null, List<string>? emails = null, List<string>? equipment = null, string? description = null, string? address = null, string? type = null, string? parentId = null, int? capacity = null, Func<Partial<TDLocation>, Partial<TDLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocation>()) : Partial<TDLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryLocationsPostRequest, TDLocation>("POST", $"api/http/team-directory/locations{queryParameters.ToQueryString()}", 
                new TeamDirectoryLocationsPostRequest
                { 
                    Name = name,
                    Timezone = timezone,
                    Workdays = workdays,
                    Phones = phones,
                    Emails = emails,
                    Equipment = equipment,
                    Description = description,
                    Address = address,
                    Type = type,
                    ParentId = parentId,
                    Capacity = capacity,
                }, requestHeaders: null, functionName: "CreateLocation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Restore one or more archived locations
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<List<TDLocation>> RestoreMultipleLocationsAsync(List<string> ids, Func<Partial<TDLocation>, Partial<TDLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocation>()) : Partial<TDLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryLocationsRestorePostRequest, List<TDLocation>>("POST", $"api/http/team-directory/locations/restore{queryParameters.ToQueryString()}", 
                new TeamDirectoryLocationsRestorePostRequest
                { 
                    Ids = ids,
                }, requestHeaders: null, functionName: "RestoreMultipleLocations", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Restore an archived location
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDLocation> RestoreLocationAsync(string id, Func<Partial<TDLocation>, Partial<TDLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocation>()) : Partial<TDLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDLocation>("POST", $"api/http/team-directory/locations/{id}/restore{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RestoreLocation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get/search all locations. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<List<TDLocation>> GetAllLocationsAsync(string query = "", bool withArchived = false, string? type = null, Func<Partial<TDLocation>, Partial<TDLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("query", query);
            if (type != null) queryParameters.Append("type", type);
            queryParameters.Append("withArchived", withArchived.ToString("l"));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocation>()) : Partial<TDLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<TDLocation>>("GET", $"api/http/team-directory/locations{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllLocations", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get a location by ID
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDLocation> GetLocationAsync(string id, Func<Partial<TDLocation>, Partial<TDLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocation>()) : Partial<TDLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDLocation>("GET", $"api/http/team-directory/locations/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetLocation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Update a location. Optional parameters will be ignored when null and updated otherwise.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDLocation> UpdateLocationAsync(string id, string? name = null, string? timezone = null, bool? customWorkdays = null, List<int>? workdays = null, List<string>? phones = null, List<string>? emails = null, List<string>? equipment = null, string? description = null, string? address = null, string? type = null, string? parentId = null, string? mapId = null, int? capacity = null, Func<Partial<TDLocation>, Partial<TDLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocation>()) : Partial<TDLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryLocationsForIdPatchRequest, TDLocation>("PATCH", $"api/http/team-directory/locations/{id}{queryParameters.ToQueryString()}", 
                new TeamDirectoryLocationsForIdPatchRequest
                { 
                    Name = name,
                    Timezone = timezone,
                    IsCustomWorkdays = customWorkdays,
                    Workdays = workdays,
                    Phones = phones,
                    Emails = emails,
                    Equipment = equipment,
                    Description = description,
                    Address = address,
                    Type = type,
                    ParentId = parentId,
                    MapId = mapId,
                    Capacity = capacity,
                }, requestHeaders: null, functionName: "UpdateLocation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Archive a location
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<List<TDLocation>> ArchiveLocationAsync(string id, Func<Partial<TDLocation>, Partial<TDLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocation>()) : Partial<TDLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<TDLocation>>("DELETE", $"api/http/team-directory/locations/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ArchiveLocation", cancellationToken: cancellationToken);
        }
        
    
        public MapClient Map => new MapClient(_connection);
        
        public partial class MapClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public MapClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get map for a location ID
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View locations</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<TDLocationMap> GetMapAsync(string id, Func<Partial<TDLocationMap>, Partial<TDLocationMap>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocationMap>()) : Partial<TDLocationMap>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TDLocationMap>("GET", $"api/http/team-directory/locations/{id}/map{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetMap", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Update the map for a location
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update locations</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<TDLocationMap> UpdateMapAsync(string id, string mapPictureId, Func<Partial<TDLocationMap>, Partial<TDLocationMap>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocationMap>()) : Partial<TDLocationMap>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryLocationsForIdMapPatchRequest, TDLocationMap>("PATCH", $"api/http/team-directory/locations/{id}/map{queryParameters.ToQueryString()}", 
                    new TeamDirectoryLocationsForIdMapPatchRequest
                    { 
                        MapPictureId = mapPictureId,
                    }, requestHeaders: null, functionName: "UpdateMap", cancellationToken: cancellationToken);
            }
            
        
        }
    
    }

    public LocationsWithTimezoneClient LocationsWithTimezone => new LocationsWithTimezoneClient(_connection);
    
    public partial class LocationsWithTimezoneClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public LocationsWithTimezoneClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Get all locations with their time zone
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<List<TDLocationWithTimeZone>> GetAllLocationsWithTimezoneAsync(Func<Partial<TDLocationWithTimeZone>, Partial<TDLocationWithTimeZone>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocationWithTimeZone>()) : Partial<TDLocationWithTimeZone>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<TDLocationWithTimeZone>>("GET", $"api/http/team-directory/locations-with-timezone{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllLocationsWithTimezone", cancellationToken: cancellationToken);
        }
        
    
    }

    public MemberLocationClient MemberLocations => new MemberLocationClient(_connection);
    
    public partial class MemberLocationClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public MemberLocationClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Add a member location, optionally from/until a given date
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Edit locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberLocation> CreateMemberLocationAsync(ProfileIdentifier member, string location, DateTime? since = null, DateTime? till = null, string? previousLocation = null, Func<Partial<TDMemberLocation>, Partial<TDMemberLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberLocation>()) : Partial<TDMemberLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryMemberLocationsPostRequest, TDMemberLocation>("POST", $"api/http/team-directory/member-locations{queryParameters.ToQueryString()}", 
                new TeamDirectoryMemberLocationsPostRequest
                { 
                    Member = member,
                    Location = location,
                    Since = since,
                    Till = till,
                    PreviousLocation = previousLocation,
                }, requestHeaders: null, functionName: "CreateMemberLocation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get/search member locations. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View member locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<Batch<TDMemberLocation>> GetAllMemberLocationsAsync(bool withArchived = false, string? skip = null, int? top = 100, List<ProfileIdentifier>? profiles = null, List<string>? locations = null, DateTime? since = null, DateTime? till = null, Func<Partial<Batch<TDMemberLocation>>, Partial<Batch<TDMemberLocation>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            if (profiles != null) queryParameters.Append("profiles", profiles.Select(it => it.ToString()));
            if (locations != null) queryParameters.Append("locations", locations.Select(it => it));
            if (since != null) queryParameters.Append("since", since?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
            if (till != null) queryParameters.Append("till", till?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
            queryParameters.Append("withArchived", withArchived.ToString("l"));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDMemberLocation>>()) : Partial<Batch<TDMemberLocation>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<TDMemberLocation>>("GET", $"api/http/team-directory/member-locations{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllMemberLocations", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get/search member locations. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View member locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public IAsyncEnumerable<TDMemberLocation> GetAllMemberLocationsAsyncEnumerable(bool withArchived = false, string? skip = null, int? top = 100, List<ProfileIdentifier>? profiles = null, List<string>? locations = null, DateTime? since = null, DateTime? till = null, Func<Partial<TDMemberLocation>, Partial<TDMemberLocation>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllMemberLocationsAsync(withArchived: withArchived, top: top, profiles: profiles, locations: locations, since: since, till: till, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMemberLocation>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberLocation>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Get a member location by its ID
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View member locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberLocation> GetMemberLocationAsync(string memberLocationId, Func<Partial<TDMemberLocation>, Partial<TDMemberLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberLocation>()) : Partial<TDMemberLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDMemberLocation>("GET", $"api/http/team-directory/member-locations/{memberLocationId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetMemberLocation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Update member location. Optional parameters will be ignored when null and updated otherwise.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Edit locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberLocation> UpdateMemberLocationAsync(string memberLocationId, string? location = null, DateTime? since = null, DateTime? till = null, Func<Partial<TDMemberLocation>, Partial<TDMemberLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberLocation>()) : Partial<TDMemberLocation>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryMemberLocationsForMemberLocationIdPatchRequest, TDMemberLocation>("PATCH", $"api/http/team-directory/member-locations/{memberLocationId}{queryParameters.ToQueryString()}", 
                new TeamDirectoryMemberLocationsForMemberLocationIdPatchRequest
                { 
                    Location = location,
                    Since = since,
                    Till = till,
                }, requestHeaders: null, functionName: "UpdateMemberLocation", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Archive/unarchive a member location. Setting delete to true will archive the member location, false will restore it.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Edit locations</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task DeleteMemberLocationAsync(string memberLocationId, bool delete = true, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("delete", delete.ToString("l"));
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/member-locations/{memberLocationId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteMemberLocation", cancellationToken: cancellationToken);
        }
        
    
    }

    public MembershipEventClient MembershipEvents => new MembershipEventClient(_connection);
    
    public partial class MembershipEventClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public MembershipEventClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Get/search membership events. Parameters are applied as 'AND' filters.
        /// </summary>
        public async Task<Batch<TDMergedEvent>> GetAllMembershipEventsAsync(string? skip = null, int? top = 100, string? teamId = null, string? locationId = null, string? roleId = null, Func<Partial<Batch<TDMergedEvent>>, Partial<Batch<TDMergedEvent>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            if (teamId != null) queryParameters.Append("teamId", teamId);
            if (locationId != null) queryParameters.Append("locationId", locationId);
            if (roleId != null) queryParameters.Append("roleId", roleId);
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDMergedEvent>>()) : Partial<Batch<TDMergedEvent>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<TDMergedEvent>>("GET", $"api/http/team-directory/membership-events{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllMembershipEvents", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get/search membership events. Parameters are applied as 'AND' filters.
        /// </summary>
        public IAsyncEnumerable<TDMergedEvent> GetAllMembershipEventsAsyncEnumerable(string? skip = null, int? top = 100, string? teamId = null, string? locationId = null, string? roleId = null, Func<Partial<TDMergedEvent>, Partial<TDMergedEvent>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllMembershipEventsAsync(top: top, teamId: teamId, locationId: locationId, roleId: roleId, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMergedEvent>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMergedEvent>.Default())), skip, cancellationToken);
    
    }

    public MembershipClient Memberships => new MembershipClient(_connection);
    
    public partial class MembershipClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public MembershipClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create a team membership
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMembership> CreateMembershipAsync(ProfileIdentifier member, string teamId, string roleId, bool lead = false, bool requiresApproval = false, ProfileIdentifier? manager = null, DateTime? activeSince = null, DateTime? activeTill = null, string? previousMembershipId = null, List<CustomFieldInputValue>? customFieldValues = null, Func<Partial<TDMembership>, Partial<TDMembership>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMembership>()) : Partial<TDMembership>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryMembershipsPostRequest, TDMembership>("POST", $"api/http/team-directory/memberships{queryParameters.ToQueryString()}", 
                new TeamDirectoryMembershipsPostRequest
                { 
                    Member = member,
                    TeamId = teamId,
                    RoleId = roleId,
                    IsLead = lead,
                    Manager = manager,
                    ActiveSince = activeSince,
                    ActiveTill = activeTill,
                    PreviousMembershipId = previousMembershipId,
                    IsRequiresApproval = requiresApproval,
                    CustomFieldValues = customFieldValues,
                }, requestHeaders: null, functionName: "CreateMembership", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get/search team memberships. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View memberships</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<Batch<TDMembership>> GetAllMembershipsAsync(bool directTeams = false, bool directRoles = false, bool withArchived = false, string? skip = null, int? top = 100, List<TeamMembershipIdentifier>? identifiers = null, List<ProfileIdentifier>? profiles = null, List<string>? teams = null, List<string>? roles = null, DateTime? since = null, DateTime? till = null, bool? requiresApproval = null, Func<Partial<Batch<TDMembership>>, Partial<Batch<TDMembership>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            if (identifiers != null) queryParameters.Append("identifiers", identifiers.Select(it => it.ToString()));
            if (profiles != null) queryParameters.Append("profiles", profiles.Select(it => it.ToString()));
            if (teams != null) queryParameters.Append("teams", teams.Select(it => it));
            queryParameters.Append("directTeams", directTeams.ToString("l"));
            if (roles != null) queryParameters.Append("roles", roles.Select(it => it));
            queryParameters.Append("directRoles", directRoles.ToString("l"));
            if (since != null) queryParameters.Append("since", since?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", CultureInfo.InvariantCulture));
            if (till != null) queryParameters.Append("till", till?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", CultureInfo.InvariantCulture));
            if (requiresApproval != null) queryParameters.Append("requiresApproval", requiresApproval?.ToString("l"));
            queryParameters.Append("withArchived", withArchived.ToString("l"));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDMembership>>()) : Partial<Batch<TDMembership>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<TDMembership>>("GET", $"api/http/team-directory/memberships{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllMemberships", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get/search team memberships. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View memberships</term>
        /// </item>
        /// </list>
        /// </remarks>
        public IAsyncEnumerable<TDMembership> GetAllMembershipsAsyncEnumerable(bool directTeams = false, bool directRoles = false, bool withArchived = false, string? skip = null, int? top = 100, List<TeamMembershipIdentifier>? identifiers = null, List<ProfileIdentifier>? profiles = null, List<string>? teams = null, List<string>? roles = null, DateTime? since = null, DateTime? till = null, bool? requiresApproval = null, Func<Partial<TDMembership>, Partial<TDMembership>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllMembershipsAsync(directTeams: directTeams, directRoles: directRoles, withArchived: withArchived, top: top, identifiers: identifiers, profiles: profiles, teams: teams, roles: roles, since: since, till: till, requiresApproval: requiresApproval, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMembership>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMembership>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Get memberships for synchronization with third-party system. Memberships with etag greater than specified value are returned. Read more in the <a href="https://www.jetbrains.com/help/space/sync-api.html">documentation</a>.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View memberships</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<SyncBatch<TDMembership>> GetSyncBatchAsync(SyncBatchInfo batchInfo, Func<Partial<SyncBatch<TDMembership>>, Partial<SyncBatch<TDMembership>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("batchInfo", batchInfo.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<SyncBatch<TDMembership>>()) : Partial<SyncBatch<TDMembership>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<SyncBatch<TDMembership>>("GET", $"api/http/team-directory/memberships/sync-batch{queryParameters.ToQueryString()}", requestHeaders: EpochTrackerHeaders.GenerateFrom(_connection.ServerUrl, EpochTracker.Instance), functionName: "GetSyncBatch", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get a single membership by its identifier
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View memberships</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMembership> GetMembershipAsync(TeamMembershipIdentifier membershipId, Func<Partial<TDMembership>, Partial<TDMembership>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMembership>()) : Partial<TDMembership>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDMembership>("GET", $"api/http/team-directory/memberships/{membershipId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetMembership", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Update a team membership. Optional parameters will be ignored when null and updated otherwise.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMembership> UpdateMembershipAsync(string membershipId, bool requiresApproval = false, string? teamId = null, string? roleId = null, bool? lead = null, ProfileIdentifier? manager = null, DateTime? activeSince = null, DateTime? activeTill = null, List<CustomFieldInputValue>? customFieldValues = null, Func<Partial<TDMembership>, Partial<TDMembership>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMembership>()) : Partial<TDMembership>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryMembershipsForMembershipIdPatchRequest, TDMembership>("PATCH", $"api/http/team-directory/memberships/{membershipId}{queryParameters.ToQueryString()}", 
                new TeamDirectoryMembershipsForMembershipIdPatchRequest
                { 
                    TeamId = teamId,
                    RoleId = roleId,
                    IsLead = lead,
                    Manager = manager,
                    ActiveSince = activeSince,
                    ActiveTill = activeTill,
                    IsRequiresApproval = requiresApproval,
                    CustomFieldValues = customFieldValues,
                }, requestHeaders: null, functionName: "UpdateMembership", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Archive/unarchive a team membership. Setting delete to true will archive the membership, false will restore it.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task DeleteMembershipAsync(string membershipId, bool delete = true, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("delete", delete.ToString("l"));
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/memberships/{membershipId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteMembership", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Revoke a team membership to end at a given date/time
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task RevokeMembershipAsync(string membershipId, DateTime? till = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (till != null) queryParameters.Append("till", till?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", CultureInfo.InvariantCulture));
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/memberships/{membershipId}/revoke{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RevokeMembership", cancellationToken: cancellationToken);
        }
        
    
        public ManagerCandidateClient ManagerCandidates => new ManagerCandidateClient(_connection);
        
        public partial class ManagerCandidateClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public ManagerCandidateClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Query profiles that can be a manager
            /// </summary>
            public async Task<Batch<TDMemberProfile>> GetManagerCandidateAsync(string term, string? skip = null, int? top = 100, string? teamId = null, string? excludedMemberId = null, Func<Partial<Batch<TDMemberProfile>>, Partial<Batch<TDMemberProfile>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                queryParameters.Append("term", term);
                if (teamId != null) queryParameters.Append("teamId", teamId);
                if (excludedMemberId != null) queryParameters.Append("excludedMemberId", excludedMemberId);
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDMemberProfile>>()) : Partial<Batch<TDMemberProfile>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<TDMemberProfile>>("GET", $"api/http/team-directory/memberships/manager-candidates{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetManagerCandidate", cancellationToken: cancellationToken);
            }
            
            /// <summary>
            /// Query profiles that can be a manager
            /// </summary>
            public IAsyncEnumerable<TDMemberProfile> GetManagerCandidateAsyncEnumerable(string term, string? skip = null, int? top = 100, string? teamId = null, string? excludedMemberId = null, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetManagerCandidateAsync(term: term, top: top, teamId: teamId, excludedMemberId: excludedMemberId, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfile>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfile>.Default())), skip, cancellationToken);
        
        }
    
        public RequestClient Requests => new RequestClient(_connection);
        
        public partial class RequestClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public RequestClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get/search all membership requests. Parameters are applied as 'AND' filters.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update teams</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<Pair<TDMemberProfile, TDMembership>>> GetAllRequestsAsync(string? skip = null, int? top = 100, string? teamId = null, bool? direct = true, Func<Partial<Batch<Pair<TDMemberProfile, TDMembership>>>, Partial<Batch<Pair<TDMemberProfile, TDMembership>>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                if (teamId != null) queryParameters.Append("teamId", teamId);
                if (direct != null) queryParameters.Append("direct", direct?.ToString("l"));
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<Pair<TDMemberProfile, TDMembership>>>()) : Partial<Batch<Pair<TDMemberProfile, TDMembership>>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<Pair<TDMemberProfile, TDMembership>>>("GET", $"api/http/team-directory/memberships/requests{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllRequests", cancellationToken: cancellationToken);
            }
            
            /// <summary>
            /// Get/search all membership requests. Parameters are applied as 'AND' filters.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update teams</term>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<Pair<TDMemberProfile, TDMembership>> GetAllRequestsAsyncEnumerable(string? skip = null, int? top = 100, string? teamId = null, bool? direct = true, Func<Partial<Pair<TDMemberProfile, TDMembership>>, Partial<Pair<TDMemberProfile, TDMembership>>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllRequestsAsync(top: top, teamId: teamId, direct: direct, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<Pair<TDMemberProfile, TDMembership>>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<Pair<TDMemberProfile, TDMembership>>.Default())), skip, cancellationToken);
        
            /// <summary>
            /// Approve/reject a team membership request. Setting approved to true will approve the membership request, false will reject it.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update teams</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task UpdateRequestAsync(string membershipRequestId, bool approved, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/memberships/requests/{membershipRequestId}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryMembershipsRequestsForMembershipRequestIdPatchRequest
                    { 
                        IsApproved = approved,
                    }, requestHeaders: null, functionName: "UpdateRequest", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Delete a team membership request
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update member profiles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<TDMembership> DeleteRequestAsync(string membershipRequestId, Func<Partial<TDMembership>, Partial<TDMembership>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMembership>()) : Partial<TDMembership>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TDMembership>("DELETE", $"api/http/team-directory/memberships/requests/{membershipRequestId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteRequest", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public RequestRevokeClient RequestRevoke => new RequestRevokeClient(_connection);
        
        public partial class RequestRevokeClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public RequestRevokeClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Request a team membership to end at a given date/time. Will need approval.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update teams</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task RequestMembershipRevocationAsync(string membershipId, DateTime till, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/memberships/{membershipId}/request-revoke{queryParameters.ToQueryString()}", 
                    new TeamDirectoryMembershipsForMembershipIdRequestRevokePatchRequest
                    { 
                        Till = till,
                    }, requestHeaders: null, functionName: "RequestMembershipRevocation", cancellationToken: cancellationToken);
            }
            
        
        }
    
    }

    public ProfileClient Profiles => new ProfileClient(_connection);
    
    public partial class ProfileClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public ProfileClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create a profile
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Add members</term>
        /// </item>
        /// <item>
        /// <term>Add new external user</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> CreateProfileAsync(string username, string firstName, string lastName, List<string>? emails = null, List<string>? phones = null, List<string>? messengers = null, List<string>? links = null, bool notAMember = false, List<CustomFieldInputValue>? customFieldValues = null, DateTime? birthday = null, string? about = null, DateTime? joined = null, DateTime? left = null, DateTime? leftAt = null, bool? speaksEnglish = null, string? pictureAttachmentId = null, AvatarCropSquare? avatarCropSquare = null, string? externalId = null, string? location = null, bool? guest = null, GuestType? guestType = null, ProjectIdentifier? project = null, ProjectTeamRole? projectRole = null, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryProfilesPostRequest, TDMemberProfile>("POST", $"api/http/team-directory/profiles{queryParameters.ToQueryString()}", 
                new TeamDirectoryProfilesPostRequest
                { 
                    Username = username,
                    FirstName = firstName,
                    LastName = lastName,
                    Emails = (emails ?? new List<string>()),
                    Phones = (phones ?? new List<string>()),
                    Birthday = birthday,
                    About = about,
                    Messengers = (messengers ?? new List<string>()),
                    Links = (links ?? new List<string>()),
                    IsNotAMember = notAMember,
                    Joined = joined,
                    Left = left,
                    LeftAt = leftAt,
                    IsSpeaksEnglish = speaksEnglish,
                    PictureAttachmentId = pictureAttachmentId,
                    AvatarCropSquare = avatarCropSquare,
                    CustomFieldValues = (customFieldValues ?? new List<CustomFieldInputValue>()),
                    ExternalId = externalId,
                    Location = location,
                    IsGuest = guest,
                    GuestType = guestType,
                    Project = project,
                    ProjectRole = projectRole,
                }, requestHeaders: null, functionName: "CreateProfile", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get/search all profiles. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <param name="profiles">
        /// No more than 100 profiles can be returned in a single request.
        /// </param>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<Batch<TDMemberProfile>> GetAllProfilesAsync(string query = "", bool reportPastMembers = false, bool meOnTop = false, ProfileOrgRelation orgRelation = ProfileOrgRelation.MEMBER, string? skip = null, int? top = 100, bool? reportFutureMembers = false, bool? reportCurrentMembers = true, string? teamId = null, string? locationId = null, string? roleId = null, ProfileOrder? order = null, List<ProfileIdentifier>? profiles = null, Func<Partial<Batch<TDMemberProfile>>, Partial<Batch<TDMemberProfile>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("query", query);
            queryParameters.Append("reportPastMembers", reportPastMembers.ToString("l"));
            if (reportFutureMembers != null) queryParameters.Append("reportFutureMembers", reportFutureMembers?.ToString("l"));
            if (reportCurrentMembers != null) queryParameters.Append("reportCurrentMembers", reportCurrentMembers?.ToString("l"));
            if (teamId != null) queryParameters.Append("teamId", teamId);
            if (locationId != null) queryParameters.Append("locationId", locationId);
            if (roleId != null) queryParameters.Append("roleId", roleId);
            queryParameters.Append("meOnTop", meOnTop.ToString("l"));
            queryParameters.Append("order", order.ToEnumString());
            queryParameters.Append("orgRelation", orgRelation.ToEnumString());
            if (profiles != null) queryParameters.Append("profiles", profiles.Select(it => it.ToString()));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDMemberProfile>>()) : Partial<Batch<TDMemberProfile>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<TDMemberProfile>>("GET", $"api/http/team-directory/profiles{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllProfiles", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get/search all profiles. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <param name="profiles">
        /// No more than 100 profiles can be returned in a single request.
        /// </param>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public IAsyncEnumerable<TDMemberProfile> GetAllProfilesAsyncEnumerable(string query = "", bool reportPastMembers = false, bool meOnTop = false, ProfileOrgRelation orgRelation = ProfileOrgRelation.MEMBER, string? skip = null, int? top = 100, bool? reportFutureMembers = false, bool? reportCurrentMembers = true, string? teamId = null, string? locationId = null, string? roleId = null, ProfileOrder? order = null, List<ProfileIdentifier>? profiles = null, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllProfilesAsync(query: query, reportPastMembers: reportPastMembers, meOnTop: meOnTop, orgRelation: orgRelation, top: top, reportFutureMembers: reportFutureMembers, reportCurrentMembers: reportCurrentMembers, teamId: teamId, locationId: locationId, roleId: roleId, order: order, profiles: profiles, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfile>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfile>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Get profile information by email address
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> GetProfileByEmailAsync(string email, bool verified = true, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("verified", verified.ToString("l"));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDMemberProfile>("GET", $"api/http/team-directory/profiles/email:{email}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetProfileByEmail", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get profile information
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> GetProfileAsync(ProfileIdentifier profile, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDMemberProfile>("GET", $"api/http/team-directory/profiles/{profile}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetProfile", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Check if a user profile is a member of one or more teams
        /// </summary>
        public async Task<bool> CheckIfProfileIsTeamMemberAsync(ProfileIdentifier profile, List<string> teamIds, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("teamIds", teamIds.Select(it => it));
            
            return await _connection.RequestResourceAsync<bool>("GET", $"api/http/team-directory/profiles/{profile}/is-team-member{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "CheckIfProfileIsTeamMember", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Update a profile. Optional parameters will be ignored when null and updated otherwise.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> UpdateProfileAsync(ProfileIdentifier profile, string? username = null, string? firstName = null, string? lastName = null, List<string>? emails = null, List<string>? phones = null, DateTime? birthday = null, string? about = null, List<string>? messengers = null, List<string>? links = null, bool? notAMember = null, DateTime? joined = null, DateTime? left = null, DateTime? leftAt = null, bool? speaksEnglish = null, string? pictureAttachmentId = null, AvatarCropSquare? avatarCropSquare = null, List<CustomFieldInputValue>? customFieldValues = null, string? externalId = null, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfilePatchRequest, TDMemberProfile>("PATCH", $"api/http/team-directory/profiles/{profile}{queryParameters.ToQueryString()}", 
                new TeamDirectoryProfilesForProfilePatchRequest
                { 
                    Username = username,
                    FirstName = firstName,
                    LastName = lastName,
                    Emails = emails,
                    Phones = phones,
                    Birthday = birthday,
                    About = about,
                    Messengers = messengers,
                    Links = links,
                    IsNotAMember = notAMember,
                    Joined = joined,
                    Left = left,
                    LeftAt = leftAt,
                    IsSpeaksEnglish = speaksEnglish,
                    PictureAttachmentId = pictureAttachmentId,
                    AvatarCropSquare = avatarCropSquare,
                    CustomFieldValues = customFieldValues,
                    ExternalId = externalId,
                }, requestHeaders: null, functionName: "UpdateProfile", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Convert to guest profile
        /// </summary>
        /// <remarks>
        /// Light guests
        /// </remarks>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
#if NET6_0_OR_GREATER
        [Obsolete("Light guests", DiagnosticId = "SPC001")]
#else
        [Obsolete("Light guests")]
#endif
        
        public async Task<DryRunResult> ConvertOrganizationMemberIntoGuestUserAsync(ProfileIdentifier profile, bool dryrun, GuestType? guestType = null, Func<Partial<DryRunResult>, Partial<DryRunResult>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<DryRunResult>()) : Partial<DryRunResult>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileConvertToGuestPatchRequest, DryRunResult>("PATCH", $"api/http/team-directory/profiles/{profile}/convert-to-guest{queryParameters.ToQueryString()}", 
                new TeamDirectoryProfilesForProfileConvertToGuestPatchRequest
                { 
                    IsDryrun = dryrun,
                    GuestType = guestType,
                }, requestHeaders: null, functionName: "ConvertOrganizationMemberIntoGuestUser", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Convert to organization member
        /// </summary>
        /// <remarks>
        /// Light guests
        /// </remarks>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
#if NET6_0_OR_GREATER
        [Obsolete("Light guests", DiagnosticId = "SPC001")]
#else
        [Obsolete("Light guests")]
#endif
        
        public async Task<DryRunResult> ConvertGuestUserIntoOrganizationMemberAsync(ProfileIdentifier profile, bool dryrun, Func<Partial<DryRunResult>, Partial<DryRunResult>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<DryRunResult>()) : Partial<DryRunResult>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileConvertToMemberPatchRequest, DryRunResult>("PATCH", $"api/http/team-directory/profiles/{profile}/convert-to-member{queryParameters.ToQueryString()}", 
                new TeamDirectoryProfilesForProfileConvertToMemberPatchRequest
                { 
                    IsDryrun = dryrun,
                }, requestHeaders: null, functionName: "ConvertGuestUserIntoOrganizationMember", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Reactivate a user profile
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> ReactivateUserProfileAsync(ProfileIdentifier profile, DateTime? joined = null, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileReactivatePatchRequest, TDMemberProfile>("PATCH", $"api/http/team-directory/profiles/{profile}/reactivate{queryParameters.ToQueryString()}", 
                new TeamDirectoryProfilesForProfileReactivatePatchRequest
                { 
                    Joined = joined,
                }, requestHeaders: null, functionName: "ReactivateUserProfile", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Restore a suspended user profile
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> RestoreSuspendedUserProfileAsync(ProfileIdentifier profile, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDMemberProfile>("PATCH", $"api/http/team-directory/profiles/{profile}/restore{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RestoreSuspendedUserProfile", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Suspend a user profile
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> SuspendUserProfileAsync(ProfileIdentifier profile, DateTime? at = null, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileSuspendPatchRequest, TDMemberProfile>("PATCH", $"api/http/team-directory/profiles/{profile}/suspend{queryParameters.ToQueryString()}", 
                new TeamDirectoryProfilesForProfileSuspendPatchRequest
                { 
                    At = at,
                }, requestHeaders: null, functionName: "SuspendUserProfile", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Delete a profile
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Delete member profile</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> DeleteProfileAsync(ProfileIdentifier profile, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDMemberProfile>("DELETE", $"api/http/team-directory/profiles/{profile}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteProfile", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Deactivate a user profile
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update member profiles</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDMemberProfile> DeactivateUserProfileAsync(ProfileIdentifier profile, DateTime at, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("at", at.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", CultureInfo.InvariantCulture));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDMemberProfile>("DELETE", $"api/http/team-directory/profiles/{profile}/deactivate{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeactivateUserProfile", cancellationToken: cancellationToken);
        }
        
    
        public AuthenticationSessionClient AuthenticationSessions => new AuthenticationSessionClient(_connection);
        
        public partial class AuthenticationSessionClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public AuthenticationSessionClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get the current authentication sessions for a given profile ID
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage authentication sessions</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<List<ESAuthenticationSession>> GetAllAuthenticationSessionsAsync(ProfileIdentifier owner, Func<Partial<ESAuthenticationSession>, Partial<ESAuthenticationSession>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<ESAuthenticationSession>()) : Partial<ESAuthenticationSession>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<ESAuthenticationSession>>("GET", $"api/http/team-directory/profiles/authentication-sessions/{owner}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllAuthenticationSessions", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Terminate an existing authentication session. Doing so will close the session and log out.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage authentication sessions</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task TerminateOwnAuthenticationSessionAsync(ProfileIdentifier owner, string sessionId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/authentication-sessions/{owner}/{sessionId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "TerminateOwnAuthenticationSession", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public DashboardClient Dashboards => new DashboardClient(_connection);
        
        public partial class DashboardClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public DashboardClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<DashboardPreferencesRecord> GetDashboardAsync(DashboardIdentifier dashboard, Func<Partial<DashboardPreferencesRecord>, Partial<DashboardPreferencesRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<DashboardPreferencesRecord>()) : Partial<DashboardPreferencesRecord>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<DashboardPreferencesRecord>("GET", $"api/http/team-directory/profiles/dashboards/{dashboard}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetDashboard", cancellationToken: cancellationToken);
            }
            
        
            public async Task UpdateDashboardAsync(DashboardIdentifier dashboard, List<List<DashboardItemData>> data, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/dashboards/{dashboard}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesDashboardsForDashboardPatchRequest
                    { 
                        Data = data,
                    }, requestHeaders: null, functionName: "UpdateDashboard", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public FavoriteClient Favorites => new FavoriteClient(_connection);
        
        public partial class FavoriteClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public FavoriteClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Add an entity with the given `id` and of the given `kind` to favorites. For profiles this operation is called “follow” in the user interface.
            /// </summary>
            public async Task AddFavoriteAsync(string id, StarredItemKind kind, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("POST", $"api/http/team-directory/profiles/favorites{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesFavoritesPostRequest
                    { 
                        Id = id,
                        Kind = kind,
                    }, requestHeaders: null, functionName: "AddFavorite", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// IDs of favorite deployment targets
            /// </summary>
            public async Task<List<string>> GetFavoriteDeploymentTargetsAsync(Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                return await _connection.RequestResourceAsync<List<string>>("GET", $"api/http/team-directory/profiles/favorites/deployment-targets{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFavoriteDeploymentTargets", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// IDs of favorite documents
            /// </summary>
            public async Task<List<string>> GetFavoriteDocumentsAsync(Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                return await _connection.RequestResourceAsync<List<string>>("GET", $"api/http/team-directory/profiles/favorites/documents{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFavoriteDocuments", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// IDs of favorite jobs
            /// </summary>
            public async Task<List<string>> GetFavoriteJobsAsync(Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                return await _connection.RequestResourceAsync<List<string>>("GET", $"api/http/team-directory/profiles/favorites/jobs{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFavoriteJobs", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Favorite locations
            /// </summary>
            public async Task<List<TDLocation>> GetFavoriteLocationsAsync(Func<Partial<TDLocation>, Partial<TDLocation>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDLocation>()) : Partial<TDLocation>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<TDLocation>>("GET", $"api/http/team-directory/profiles/favorites/locations{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFavoriteLocations", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Followed profiles
            /// </summary>
            public async Task<List<TDMemberProfile>> GetFollowedProfilesAsync(Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<TDMemberProfile>>("GET", $"api/http/team-directory/profiles/favorites/profiles{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFollowedProfiles", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Favorite projects
            /// </summary>
            public async Task<List<PRProject>> GetFavoriteProjectsAsync(Func<Partial<PRProject>, Partial<PRProject>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<PRProject>()) : Partial<PRProject>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<PRProject>>("GET", $"api/http/team-directory/profiles/favorites/projects{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFavoriteProjects", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// IDs of favorite code repositories
            /// </summary>
            public async Task<List<string>> GetFavoriteRepositoriesAsync(Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                return await _connection.RequestResourceAsync<List<string>>("GET", $"api/http/team-directory/profiles/favorites/repositories{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFavoriteRepositories", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Favorite teams
            /// </summary>
            public async Task<List<TDTeam>> GetFavoriteTeamsAsync(Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDTeam>()) : Partial<TDTeam>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<TDTeam>>("GET", $"api/http/team-directory/profiles/favorites/teams{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFavoriteTeams", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Remove an entity with the given `id` and of the given `kind` from favorites. For profiles this operation is called “unfollow” in the user interface.
            /// </summary>
            public async Task RemoveFavoriteAsync(string id, StarredItemKind kind, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("kind", kind.ToEnumString());
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/favorites/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RemoveFavorite", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public GrammarDictionaryClient GrammarDictionary => new GrammarDictionaryClient(_connection);
        
        public partial class GrammarDictionaryClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public GrammarDictionaryClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// This endpoint will return user's personal grammar dictionary entries
            /// </summary>
            /// <remarks>
            /// Grammar error corrections and text completion with Grazie
            /// </remarks>
#if NET6_0_OR_GREATER
            [Obsolete("Grammar error corrections and text completion with Grazie", DiagnosticId = "SPC001")]
#else
            [Obsolete("Grammar error corrections and text completion with Grazie")]
#endif
            
            public async Task<List<GrammarDictionaryEntryDTO>> GetThePersonalDictionaryEntriesAsync(ProfileIdentifier profileId, GrammarDictionaryType dictionaryType, Func<Partial<GrammarDictionaryEntryDTO>, Partial<GrammarDictionaryEntryDTO>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("profileId", profileId.ToString());
                queryParameters.Append("dictionaryType", dictionaryType.ToEnumString());
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<GrammarDictionaryEntryDTO>()) : Partial<GrammarDictionaryEntryDTO>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<GrammarDictionaryEntryDTO>>("GET", $"api/http/team-directory/profiles/grammar-dictionary{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetThePersonalDictionaryEntries", cancellationToken: cancellationToken);
            }
            
        
            public AddClient Add => new AddClient(_connection);
            
            public partial class AddClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public AddClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// This endpoint will try to add an entry to the user's personal grammar dictionary and return true if the value is valid for dictionary, were not present before and then added and false otherwise.
                /// </summary>
                /// <remarks>
                /// Grammar error corrections and text completion with Grazie
                /// </remarks>
#if NET6_0_OR_GREATER
                [Obsolete("Grammar error corrections and text completion with Grazie", DiagnosticId = "SPC001")]
#else
                [Obsolete("Grammar error corrections and text completion with Grazie")]
#endif
                
                public async Task<bool> AddTheEntryToThePersonalDictionaryAsync(ProfileIdentifier profileId, GrammarDictionaryType dictionaryType, GrammarDictionaryEntryDTO entry, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    return await _connection.RequestResourceAsync<TeamDirectoryProfilesGrammarDictionaryAddPostRequest, bool>("POST", $"api/http/team-directory/profiles/grammar-dictionary/add{queryParameters.ToQueryString()}", 
                        new TeamDirectoryProfilesGrammarDictionaryAddPostRequest
                        { 
                            ProfileId = profileId,
                            DictionaryType = dictionaryType,
                            Entry = entry,
                        }, requestHeaders: null, functionName: "AddTheEntryToThePersonalDictionary", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public RemoveClient Remove => new RemoveClient(_connection);
            
            public partial class RemoveClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public RemoveClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// This endpoint will try to remove an entry from the user's personal grammar dictionary and return true if the value was present and removed and false otherwise.
                /// </summary>
                /// <remarks>
                /// Grammar error corrections and text completion with Grazie
                /// </remarks>
#if NET6_0_OR_GREATER
                [Obsolete("Grammar error corrections and text completion with Grazie", DiagnosticId = "SPC001")]
#else
                [Obsolete("Grammar error corrections and text completion with Grazie")]
#endif
                
                public async Task<bool> RemoveTheEntryFromThePersonalDictionaryAsync(ProfileIdentifier profileId, GrammarDictionaryType dictionaryType, string entryValue, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("profileId", profileId.ToString());
                    queryParameters.Append("dictionaryType", dictionaryType.ToEnumString());
                    queryParameters.Append("entryValue", entryValue);
                    
                    return await _connection.RequestResourceAsync<bool>("DELETE", $"api/http/team-directory/profiles/grammar-dictionary/remove{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RemoveTheEntryFromThePersonalDictionary", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
        public OAuthConsentClient OAuthConsents => new OAuthConsentClient(_connection);
        
        public partial class OAuthConsentClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public OAuthConsentClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get all OAuth consents for a given profile ID
            /// </summary>
            public async Task<List<ESOAuthConsent>> GetOauthConsentsAsync(ProfileIdentifier owner, Func<Partial<ESOAuthConsent>, Partial<ESOAuthConsent>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<ESOAuthConsent>()) : Partial<ESOAuthConsent>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<ESOAuthConsent>>("GET", $"api/http/team-directory/profiles/oauth-consents/{owner}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetOauthConsents", cancellationToken: cancellationToken);
            }
            
        
            public MeClient Me => new MeClient(_connection);
            
            public partial class MeClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public MeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public RefreshTokenClient RefreshTokens => new RefreshTokenClient(_connection);
                
                public partial class RefreshTokenClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public RefreshTokenClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public SelfClient Self => new SelfClient(_connection);
                    
                    public partial class SelfClient : ISpaceClient
                    {
                        private readonly Connection _connection;
                        
                        public SelfClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        /// <summary>
                        /// Remove caller's own refresh token. This will require the client to re-authenticate.
                        /// </summary>
                        public async Task DeleteSelfAsync(Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                        {
                            var queryParameters = new NameValueCollection();
                            
                            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/me/refresh-tokens/self{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteSelf", cancellationToken: cancellationToken);
                        }
                        
                    
                    }
                
                }
            
            }
        
            public ApplicationClient Applications => new ApplicationClient(_connection);
            
            public partial class ApplicationClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public ApplicationClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Remove a previously approved application
                /// </summary>
                public async Task DeleteApplicationAsync(ProfileIdentifier owner, ApplicationIdentifier application, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/{owner}/applications/{application}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteApplication", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public ApprovedScopeClient ApprovedScopes => new ApprovedScopeClient(_connection);
            
            public partial class ApprovedScopeClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public ApprovedScopeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Remove a previously approved scope
                /// </summary>
                public async Task DeleteApprovedScopeAsync(ProfileIdentifier owner, string id, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/{owner}/approved-scopes/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteApprovedScope", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public InternalApplicationClient InternalApplications => new InternalApplicationClient(_connection);
            
            public partial class InternalApplicationClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public InternalApplicationClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Remove a previously approved internal application
                /// </summary>
                public async Task DeleteInternalApplicationAsync(ProfileIdentifier owner, string clientId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/{owner}/internal-applications/{clientId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteInternalApplication", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public RefreshTokenClient RefreshTokens => new RefreshTokenClient(_connection);
            
            public partial class RefreshTokenClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public RefreshTokenClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Remove a refresh token. This will require the client to re-authenticate.
                /// </summary>
                public async Task DeleteRefreshTokenAsync(ProfileIdentifier owner, string id, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/{owner}/refresh-tokens/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteRefreshToken", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
        public WidgetSettingClient WidgetSettings => new WidgetSettingClient(_connection);
        
        public partial class WidgetSettingClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public WidgetSettingClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<WidgetSettingsRecord> GetWidgetSettingAsync(WidgetSettingsIdentifier widget, Func<Partial<WidgetSettingsRecord>, Partial<WidgetSettingsRecord>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<WidgetSettingsRecord>()) : Partial<WidgetSettingsRecord>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<WidgetSettingsRecord>("GET", $"api/http/team-directory/profiles/widget-settings/{widget}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetWidgetSetting", cancellationToken: cancellationToken);
            }
            
        
            public async Task UpdateWidgetSettingAsync(WidgetSettingsIdentifier widget, WidgetSettingsDTO settings, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/widget-settings/{widget}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesWidgetSettingsForWidgetPatchRequest
                    { 
                        Settings = settings,
                    }, requestHeaders: null, functionName: "UpdateWidgetSetting", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public WorkingDayClient WorkingDays => new WorkingDayClient(_connection);
        
        public partial class WorkingDayClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public WorkingDayClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Returns pairs of profiles and their working days. If several working days settings are defined for the same profile then several pairs are returned.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View working hours</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<TDProfileWorkingDays>> QueryAllWorkingDaysAsync(List<ProfileIdentifier>? profiles = null, string? skip = null, int? top = 100, DateTime? since = null, DateTime? till = null, Func<Partial<Batch<TDProfileWorkingDays>>, Partial<Batch<TDProfileWorkingDays>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                queryParameters.Append("profiles", (profiles ?? new List<ProfileIdentifier>()).Select(it => it.ToString()));
                if (since != null) queryParameters.Append("since", since?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                if (till != null) queryParameters.Append("till", till?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDProfileWorkingDays>>()) : Partial<Batch<TDProfileWorkingDays>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<TDProfileWorkingDays>>("GET", $"api/http/team-directory/profiles/working-days{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "QueryAllWorkingDays", cancellationToken: cancellationToken);
            }
            
            /// <summary>
            /// Returns pairs of profiles and their working days. If several working days settings are defined for the same profile then several pairs are returned.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View working hours</term>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<TDProfileWorkingDays> QueryAllWorkingDaysAsyncEnumerable(List<ProfileIdentifier>? profiles = null, string? skip = null, int? top = 100, DateTime? since = null, DateTime? till = null, Func<Partial<TDProfileWorkingDays>, Partial<TDProfileWorkingDays>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => QueryAllWorkingDaysAsync(profiles: profiles, top: top, since: since, till: till, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDProfileWorkingDays>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDProfileWorkingDays>.Default())), skip, cancellationToken);
        
        }
    
        public partial class WorkingDayClient : ISpaceClient
        {
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update working hours</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<TDWorkingDays> AddWorkingDaysAsync(ProfileIdentifier profile, WorkingDaysSpec workingDaysSpec, DateTime? dateStart = null, DateTime? dateEnd = null, Func<Partial<TDWorkingDays>, Partial<TDWorkingDays>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDWorkingDays>()) : Partial<TDWorkingDays>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileWorkingDaysPostRequest, TDWorkingDays>("POST", $"api/http/team-directory/profiles/{profile}/working-days{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileWorkingDaysPostRequest
                    { 
                        DateStart = dateStart,
                        DateEnd = dateEnd,
                        WorkingDaysSpec = workingDaysSpec,
                    }, requestHeaders: null, functionName: "AddWorkingDays", cancellationToken: cancellationToken);
            }
            
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View working hours</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<TDWorkingDays>> QueryWorkingDaysForAProfileAsync(ProfileIdentifier profile, string? skip = null, int? top = 100, Func<Partial<Batch<TDWorkingDays>>, Partial<Batch<TDWorkingDays>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDWorkingDays>>()) : Partial<Batch<TDWorkingDays>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<TDWorkingDays>>("GET", $"api/http/team-directory/profiles/{profile}/working-days{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "QueryWorkingDaysForAProfile", cancellationToken: cancellationToken);
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View working hours</term>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<TDWorkingDays> QueryWorkingDaysForAProfileAsyncEnumerable(ProfileIdentifier profile, string? skip = null, int? top = 100, Func<Partial<TDWorkingDays>, Partial<TDWorkingDays>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => QueryWorkingDaysForAProfileAsync(profile: profile, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDWorkingDays>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDWorkingDays>.Default())), skip, cancellationToken);
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update working hours</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<TDWorkingDays> UpdateWorkingDaysAsync(ProfileIdentifier profile, string workingDaysId, WorkingDaysSpec workingDaysSpec, DateTime? dateStart = null, DateTime? dateEnd = null, Func<Partial<TDWorkingDays>, Partial<TDWorkingDays>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDWorkingDays>()) : Partial<TDWorkingDays>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileWorkingDaysForWorkingDaysIdPatchRequest, TDWorkingDays>("PATCH", $"api/http/team-directory/profiles/{profile}/working-days/{workingDaysId}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileWorkingDaysForWorkingDaysIdPatchRequest
                    { 
                        DateStart = dateStart,
                        DateEnd = dateEnd,
                        WorkingDaysSpec = workingDaysSpec,
                    }, requestHeaders: null, functionName: "UpdateWorkingDays", cancellationToken: cancellationToken);
            }
            
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update working hours</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task DeleteWorkingDaysAsync(ProfileIdentifier profile, string workingDaysId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/working-days/{workingDaysId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteWorkingDays", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public TwoFaClient TwoFa => new TwoFaClient(_connection);
        
        public partial class TwoFaClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public TwoFaClient(Connection connection)
            {
                _connection = connection;
            }
            
            public RequirementClient Requirements => new RequirementClient(_connection);
            
            public partial class RequirementClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public RequirementClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get two-factor authentication requirements for a given profile ID. The response indicates whether two-factor authentication is required by participation in some permission roles.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View member profiles</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<List<Profile2FARequirement>> TwoFactorAuthenticationRequirementsAsync(ProfileIdentifier profile, Func<Partial<Profile2FARequirement>, Partial<Profile2FARequirement>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Profile2FARequirement>()) : Partial<Profile2FARequirement>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<List<Profile2FARequirement>>("GET", $"api/http/team-directory/profiles/{profile}/2-fa/requirements{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "TwoFactorAuthenticationRequirements", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public StatuClient Status => new StatuClient(_connection);
            
            public partial class StatuClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public StatuClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get two-factor authentication status for a given profile ID. The response indicates whether two-factor authentication is active, not active, or not set up yet.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View member profiles</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<TwoFactorAuthenticationStatus> TwoFactorAuthenticationStatusAsync(ProfileIdentifier profile, Func<Partial<TwoFactorAuthenticationStatus>, Partial<TwoFactorAuthenticationStatus>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<TwoFactorAuthenticationStatus>()) : Partial<TwoFactorAuthenticationStatus>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<TwoFactorAuthenticationStatus>("GET", $"api/http/team-directory/profiles/{profile}/2-fa/status{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "TwoFactorAuthenticationStatus", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public TotpClient Totp => new TotpClient(_connection);
            
            public partial class TotpClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public TotpClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Set up two-factor authentication using TOTP (Time-based One-time Password) for a given profile ID. The response will return a QR code (base64 encoded) that can be scanned with an app to setup two-factor authentication. The code that the app generates has to be confirmed in Space to enable TOTP.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Set up two-factor authentication for yourself and create application passwords</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<TwoFactorAuthenticationSecret> SetUpTotpTwoFactorAuthenticationAsync(ProfileIdentifier profile, Func<Partial<TwoFactorAuthenticationSecret>, Partial<TwoFactorAuthenticationSecret>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<TwoFactorAuthenticationSecret>()) : Partial<TwoFactorAuthenticationSecret>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<TwoFactorAuthenticationSecret>("POST", $"api/http/team-directory/profiles/{profile}/2-fa/totp{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "SetUpTotpTwoFactorAuthentication", cancellationToken: cancellationToken);
                }
                
            
                /// <summary>
                /// Confirm two-factor authentication for a given profile ID using a TOTP (Time-based One-time Password) code from an app.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Set up two-factor authentication for yourself and create application passwords</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task ConfirmTotpTwoFactorAuthenticationSettingsAsync(ProfileIdentifier profile, int code, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("POST", $"api/http/team-directory/profiles/{profile}/2-fa/totp/confirm{queryParameters.ToQueryString()}", 
                        new TeamDirectoryProfilesForProfile2FaTotpConfirmPostRequest
                        { 
                            Code = code,
                        }, requestHeaders: null, functionName: "ConfirmTotpTwoFactorAuthenticationSettings", cancellationToken: cancellationToken);
                }
                
            
                /// <summary>
                /// Enable/disable two-factor authentication settings for a given profile ID
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Manage two-factor authentication and application passwords</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task UpdateTotpTwoFactorAuthenticationSettingsAsync(ProfileIdentifier profile, bool enabled, int? code = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/2-fa/totp{queryParameters.ToQueryString()}", 
                        new TeamDirectoryProfilesForProfile2FaTotpPatchRequest
                        { 
                            IsEnabled = enabled,
                            Code = code,
                        }, requestHeaders: null, functionName: "UpdateTotpTwoFactorAuthenticationSettings", cancellationToken: cancellationToken);
                }
                
            
                /// <summary>
                /// Remove two-factor authentication settings for a given profile ID. Previously generated TOTP (Time-based One-time Password) are rendered invalid.
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Manage two-factor authentication and application passwords</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task DeleteCurrentTotpTwoFactorAuthenticationSettingsAsync(ProfileIdentifier profile, int? code = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    if (code != null) queryParameters.Append("code", code?.ToString());
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/2-fa/totp{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteCurrentTotpTwoFactorAuthenticationSettings", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
        public ApplicationPasswordClient ApplicationPasswords => new ApplicationPasswordClient(_connection);
        
        public partial class ApplicationPasswordClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public ApplicationPasswordClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Pair<ESApplicationPassword, string>> CreateApplicationPasswordAsync(ProfileIdentifier profile, string name, PermissionScope scope, Func<Partial<Pair<ESApplicationPassword, string>>, Partial<Pair<ESApplicationPassword, string>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Pair<ESApplicationPassword, string>>()) : Partial<Pair<ESApplicationPassword, string>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileApplicationPasswordsPostRequest, Pair<ESApplicationPassword, string>>("POST", $"api/http/team-directory/profiles/{profile}/application-passwords{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileApplicationPasswordsPostRequest
                    { 
                        Name = name,
                        Scope = scope,
                    }, requestHeaders: null, functionName: "CreateApplicationPassword", cancellationToken: cancellationToken);
            }
            
        
            public async Task<Batch<ESApplicationPassword>> GetAllApplicationPasswordsAsync(ProfileIdentifier profile, string? skip = null, int? top = 100, Func<Partial<Batch<ESApplicationPassword>>, Partial<Batch<ESApplicationPassword>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ESApplicationPassword>>()) : Partial<Batch<ESApplicationPassword>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<ESApplicationPassword>>("GET", $"api/http/team-directory/profiles/{profile}/application-passwords{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllApplicationPasswords", cancellationToken: cancellationToken);
            }
            
            public IAsyncEnumerable<ESApplicationPassword> GetAllApplicationPasswordsAsyncEnumerable(ProfileIdentifier profile, string? skip = null, int? top = 100, Func<Partial<ESApplicationPassword>, Partial<ESApplicationPassword>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllApplicationPasswordsAsync(profile: profile, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ESApplicationPassword>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ESApplicationPassword>.Default())), skip, cancellationToken);
        
            public async Task UpdateApplicationPasswordAsync(ProfileIdentifier profile, string passwordId, string? name = null, PermissionScope? scope = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/application-passwords/{passwordId}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileApplicationPasswordsForPasswordIdPatchRequest
                    { 
                        Name = name,
                        Scope = scope,
                    }, requestHeaders: null, functionName: "UpdateApplicationPassword", cancellationToken: cancellationToken);
            }
            
        
            public async Task DeleteApplicationPasswordAsync(ProfileIdentifier profile, string passwordId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/application-passwords/{passwordId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteApplicationPassword", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public ChecklistClient Checklists => new ChecklistClient(_connection);
        
        public partial class ChecklistClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public ChecklistClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a new checklist associated with the profile
            /// </summary>
            [Obsolete("Use POST on team-directory/profiles/{profile}/documents (since 2022-04-08) (will be removed in a future version)")]
            public async Task<Checklist> CreateChecklistAsync(ProfileIdentifier profile, string name, Func<Partial<Checklist>, Partial<Checklist>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Checklist>()) : Partial<Checklist>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileChecklistsPostRequest, Checklist>("POST", $"api/http/team-directory/profiles/{profile}/checklists{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileChecklistsPostRequest
                    { 
                        Name = name,
                    }, requestHeaders: null, functionName: "CreateChecklist", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Create a new checklist associated with the profile using tab indented lines as checkable items.
            /// The items with the same indent level will be placed one under the other.
            /// An issue URL will be converted into the corresponding issue.
            /// </summary>
            [Obsolete("Use POST on team-directory/profiles/{profile}/documents (since 2022-04-08) (will be removed in a future version)")]
            public async Task<Checklist> ImportChecklistAsync(ProfileIdentifier profile, string name, string tabIndentedLines, Func<Partial<Checklist>, Partial<Checklist>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Checklist>()) : Partial<Checklist>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileChecklistsImportPostRequest, Checklist>("POST", $"api/http/team-directory/profiles/{profile}/checklists/import{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileChecklistsImportPostRequest
                    { 
                        Name = name,
                        TabIndentedLines = tabIndentedLines,
                    }, requestHeaders: null, functionName: "ImportChecklist", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Tab indented lines are converted into checkable items following the same rules as in Import Checklist.
            /// The result is placed inside of the specified personal checklist.
            /// </summary>
            public async Task ImportChecklistLinesAsync(ProfileIdentifier profile, string checklistId, string targetParentId, string tabIndentedLines, string? afterItemId = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("POST", $"api/http/team-directory/profiles/{profile}/checklists/{checklistId}/import{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileChecklistsForChecklistIdImportPostRequest
                    { 
                        TargetParentId = targetParentId,
                        AfterItemId = afterItemId,
                        TabIndentedLines = tabIndentedLines,
                    }, requestHeaders: null, functionName: "ImportChecklistLines", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Update an existing checklist associated with the profile
            /// </summary>
            [Obsolete("Use PATCH on team-directory/profiles/{profile}/documents/{documentId} (since 2022-04-08) (will be removed in a future version)")]
            public async Task UpdateChecklistAsync(ProfileIdentifier profile, string checklistId, string? name = null, string? description = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/checklists/{checklistId}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileChecklistsForChecklistIdPatchRequest
                    { 
                        Name = name,
                        Description = description,
                    }, requestHeaders: null, functionName: "UpdateChecklist", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Delete an existing checklist associated with the profile
            /// </summary>
            [Obsolete("Use DELETE on profiles/{profile}/documents/{documentId} (since 2022-04-08) (will be removed in a future version)")]
            public async Task DeleteChecklistAsync(ProfileIdentifier profile, string checklistId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/checklists/{checklistId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteChecklist", cancellationToken: cancellationToken);
            }
            
        
            public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
            
            public partial class FullChecklistTreeClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public FullChecklistTreeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get the content of a checklist associated with the profile
                /// </summary>
                public async Task<List<PlanItemChildren>> GetFullChecklistTreeAsync(ProfileIdentifier profile, string checklistId, Func<Partial<PlanItemChildren>, Partial<PlanItemChildren>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<PlanItemChildren>()) : Partial<PlanItemChildren>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<List<PlanItemChildren>>("GET", $"api/http/team-directory/profiles/{profile}/checklists/{checklistId}/full-checklist-tree{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFullChecklistTree", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
        public DocumentClient Documents => new DocumentClient(_connection);
        
        public partial class DocumentClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public DocumentClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Document> CreateDocumentAsync(ProfileIdentifier profile, string name, FolderIdentifier folder, DocumentBodyCreateIn bodyIn, PublicationDetailsIn? publicationDetailsIn = null, Func<Partial<Document>, Partial<Document>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Document>()) : Partial<Document>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileDocumentsPostRequest, Document>("POST", $"api/http/team-directory/profiles/{profile}/documents{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileDocumentsPostRequest
                    { 
                        Name = name,
                        Folder = folder,
                        BodyIn = bodyIn,
                        PublicationDetailsIn = publicationDetailsIn,
                    }, requestHeaders: null, functionName: "CreateDocument", cancellationToken: cancellationToken);
            }
            
        
            public async Task<Document> GetDocumentAsync(ProfileIdentifier profile, string documentId, Func<Partial<Document>, Partial<Document>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Document>()) : Partial<Document>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Document>("GET", $"api/http/team-directory/profiles/{profile}/documents/{documentId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetDocument", cancellationToken: cancellationToken);
            }
            
        
            public async Task<Document> UpdateDocumentAsync(ProfileIdentifier profile, string documentId, string? name = null, DocumentBodyUpdateIn? updateIn = null, PublicationDetailsIn? publicationDetailsIn = null, Func<Partial<Document>, Partial<Document>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Document>()) : Partial<Document>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileDocumentsForDocumentIdPatchRequest, Document>("PATCH", $"api/http/team-directory/profiles/{profile}/documents/{documentId}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileDocumentsForDocumentIdPatchRequest
                    { 
                        Name = name,
                        UpdateIn = updateIn,
                        PublicationDetailsIn = publicationDetailsIn,
                    }, requestHeaders: null, functionName: "UpdateDocument", cancellationToken: cancellationToken);
            }
            
        
            public async Task ArchiveDocumentAsync(ProfileIdentifier profile, string documentId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/documents/{documentId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ArchiveDocument", cancellationToken: cancellationToken);
            }
            
        
            public FolderClient Folders => new FolderClient(_connection);
            
            public partial class FolderClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public FolderClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<DocumentFolder> CreateFolderAsync(ProfileIdentifier profile, string name, FolderIdentifier parentFolder, Func<Partial<DocumentFolder>, Partial<DocumentFolder>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<DocumentFolder>()) : Partial<DocumentFolder>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileDocumentsFoldersPostRequest, DocumentFolder>("POST", $"api/http/team-directory/profiles/{profile}/documents/folders{queryParameters.ToQueryString()}", 
                        new TeamDirectoryProfilesForProfileDocumentsFoldersPostRequest
                        { 
                            Name = name,
                            ParentFolder = parentFolder,
                        }, requestHeaders: null, functionName: "CreateFolder", cancellationToken: cancellationToken);
                }
                
            
                public async Task<DocumentFolder> GetFolderAsync(ProfileIdentifier profile, FolderIdentifier folder, Func<Partial<DocumentFolder>, Partial<DocumentFolder>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<DocumentFolder>()) : Partial<DocumentFolder>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<DocumentFolder>("GET", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetFolder", cancellationToken: cancellationToken);
                }
                
            
                public async Task RenameFolderAsync(ProfileIdentifier profile, FolderIdentifier folder, string name, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}{queryParameters.ToQueryString()}", 
                        new TeamDirectoryProfilesForProfileDocumentsFoldersForFolderPatchRequest
                        { 
                            Name = name,
                        }, requestHeaders: null, functionName: "RenameFolder", cancellationToken: cancellationToken);
                }
                
            
                public async Task ArchiveFolderAsync(ProfileIdentifier profile, FolderIdentifier folder, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ArchiveFolder", cancellationToken: cancellationToken);
                }
                
            
                public AccesClient Access => new AccesClient(_connection);
                
                public partial class AccesClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public AccesClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<FolderAccess> FolderOwnAccessPermissionsAsync(ProfileIdentifier profile, FolderIdentifier folder, Func<Partial<FolderAccess>, Partial<FolderAccess>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                    {
                        var queryParameters = new NameValueCollection();
                        queryParameters.Append("$fields", (partial != null ? partial(new Partial<FolderAccess>()) : Partial<FolderAccess>.Default()).ToString());
                        
                        return await _connection.RequestResourceAsync<FolderAccess>("GET", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}/access{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "FolderOwnAccessPermissions", cancellationToken: cancellationToken);
                    }
                    
                
                    public async Task UpdateFolderAccessPermissionsAsync(ProfileIdentifier profile, FolderIdentifier folder, UpdateFolderAccessIn accessChange, bool silent = false, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                    {
                        var queryParameters = new NameValueCollection();
                        
                        await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}/access{queryParameters.ToQueryString()}", 
                            new TeamDirectoryProfilesForProfileDocumentsFoldersForFolderAccessPatchRequest
                            { 
                                AccessChange = accessChange,
                                IsSilent = silent,
                            }, requestHeaders: null, functionName: "UpdateFolderAccessPermissions", cancellationToken: cancellationToken);
                    }
                    
                
                }
            
                public DocumentClient Documents => new DocumentClient(_connection);
                
                public partial class DocumentClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public DocumentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<Batch<Document>> ListDocumentsInFolderAsync(ProfileIdentifier profile, FolderIdentifier folder, bool withArchived = false, string? sortBy = null, ColumnSortOrder? order = null, string? skip = null, int? top = 100, Func<Partial<Batch<Document>>, Partial<Batch<Document>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                    {
                        var queryParameters = new NameValueCollection();
                        queryParameters.Append("withArchived", withArchived.ToString("l"));
                        if (sortBy != null) queryParameters.Append("sortBy", sortBy);
                        queryParameters.Append("order", order.ToEnumString());
                        if (skip != null) queryParameters.Append("$skip", skip);
                        if (top != null) queryParameters.Append("$top", top?.ToString());
                        queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<Document>>()) : Partial<Batch<Document>>.Default()).ToString());
                        
                        return await _connection.RequestResourceAsync<Batch<Document>>("GET", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}/documents{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListDocumentsInFolder", cancellationToken: cancellationToken);
                    }
                    
                    public IAsyncEnumerable<Document> ListDocumentsInFolderAsyncEnumerable(ProfileIdentifier profile, FolderIdentifier folder, bool withArchived = false, string? sortBy = null, ColumnSortOrder? order = null, string? skip = null, int? top = 100, Func<Partial<Document>, Partial<Document>>? partial = null, CancellationToken cancellationToken = default)
                        => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListDocumentsInFolderAsync(profile: profile, folder: folder, withArchived: withArchived, sortBy: sortBy, order: order, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<Document>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<Document>.Default())), skip, cancellationToken);
                
                }
            
                public IntroductionClient Introduction => new IntroductionClient(_connection);
                
                public partial class IntroductionClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public IntroductionClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddFolderIntroductionAsync(ProfileIdentifier profile, FolderIdentifier folder, string documentId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                    {
                        var queryParameters = new NameValueCollection();
                        
                        await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}/introduction/{documentId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "AddFolderIntroduction", cancellationToken: cancellationToken);
                    }
                    
                
                    public async Task RemoveFolderIntroductionAsync(ProfileIdentifier profile, FolderIdentifier folder, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                    {
                        var queryParameters = new NameValueCollection();
                        
                        await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}/introduction{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RemoveFolderIntroduction", cancellationToken: cancellationToken);
                    }
                    
                
                }
            
                public MoveClient Move => new MoveClient(_connection);
                
                public partial class MoveClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public MoveClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<DocumentFolder> MoveFolderAsync(ProfileIdentifier profile, FolderIdentifier folder, FolderIdentifier parentFolder, Func<Partial<DocumentFolder>, Partial<DocumentFolder>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                    {
                        var queryParameters = new NameValueCollection();
                        queryParameters.Append("$fields", (partial != null ? partial(new Partial<DocumentFolder>()) : Partial<DocumentFolder>.Default()).ToString());
                        
                        return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileDocumentsFoldersForFolderMovePatchRequest, DocumentFolder>("PATCH", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}/move{queryParameters.ToQueryString()}", 
                            new TeamDirectoryProfilesForProfileDocumentsFoldersForFolderMovePatchRequest
                            { 
                                ParentFolder = parentFolder,
                            }, requestHeaders: null, functionName: "MoveFolder", cancellationToken: cancellationToken);
                    }
                    
                
                }
            
                public SearchClient Search => new SearchClient(_connection);
                
                public partial class SearchClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public SearchClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Executes search for personal documents and folders in specified folder
                    /// </summary>
                    public async Task<Batch<DocumentFolderItem>> SearchDocumentsAndFoldersAsync(ProfileIdentifier profile, FolderIdentifier folder, string query, bool? includeBody = null, bool? foldersOnly = false, string? skip = null, int? top = 100, Func<Partial<Batch<DocumentFolderItem>>, Partial<Batch<DocumentFolderItem>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                    {
                        var queryParameters = new NameValueCollection();
                        queryParameters.Append("query", query);
                        if (includeBody != null) queryParameters.Append("includeBody", includeBody?.ToString("l"));
                        if (foldersOnly != null) queryParameters.Append("foldersOnly", foldersOnly?.ToString("l"));
                        if (skip != null) queryParameters.Append("$skip", skip);
                        if (top != null) queryParameters.Append("$top", top?.ToString());
                        queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<DocumentFolderItem>>()) : Partial<Batch<DocumentFolderItem>>.Default()).ToString());
                        
                        return await _connection.RequestResourceAsync<Batch<DocumentFolderItem>>("GET", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}/search{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "SearchDocumentsAndFolders", cancellationToken: cancellationToken);
                    }
                    
                    /// <summary>
                    /// Executes search for personal documents and folders in specified folder
                    /// </summary>
                    public IAsyncEnumerable<DocumentFolderItem> SearchDocumentsAndFoldersAsyncEnumerable(ProfileIdentifier profile, FolderIdentifier folder, string query, bool? includeBody = null, bool? foldersOnly = false, string? skip = null, int? top = 100, Func<Partial<DocumentFolderItem>, Partial<DocumentFolderItem>>? partial = null, CancellationToken cancellationToken = default)
                        => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => SearchDocumentsAndFoldersAsync(profile: profile, folder: folder, query: query, includeBody: includeBody, foldersOnly: foldersOnly, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<DocumentFolderItem>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<DocumentFolderItem>.Default())), skip, cancellationToken);
                
                }
            
                public SubfolderClient Subfolders => new SubfolderClient(_connection);
                
                public partial class SubfolderClient : ISpaceClient
                {
                    private readonly Connection _connection;
                    
                    public SubfolderClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<Batch<DocumentFolder>> ListSubfoldersAsync(ProfileIdentifier profile, FolderIdentifier folder, bool withArchived = false, string? sortBy = null, ColumnSortOrder? order = null, string? skip = null, int? top = 100, Func<Partial<Batch<DocumentFolder>>, Partial<Batch<DocumentFolder>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                    {
                        var queryParameters = new NameValueCollection();
                        queryParameters.Append("withArchived", withArchived.ToString("l"));
                        if (sortBy != null) queryParameters.Append("sortBy", sortBy);
                        queryParameters.Append("order", order.ToEnumString());
                        if (skip != null) queryParameters.Append("$skip", skip);
                        if (top != null) queryParameters.Append("$top", top?.ToString());
                        queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<DocumentFolder>>()) : Partial<Batch<DocumentFolder>>.Default()).ToString());
                        
                        return await _connection.RequestResourceAsync<Batch<DocumentFolder>>("GET", $"api/http/team-directory/profiles/{profile}/documents/folders/{folder}/subfolders{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListSubfolders", cancellationToken: cancellationToken);
                    }
                    
                    public IAsyncEnumerable<DocumentFolder> ListSubfoldersAsyncEnumerable(ProfileIdentifier profile, FolderIdentifier folder, bool withArchived = false, string? sortBy = null, ColumnSortOrder? order = null, string? skip = null, int? top = 100, Func<Partial<DocumentFolder>, Partial<DocumentFolder>>? partial = null, CancellationToken cancellationToken = default)
                        => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => ListSubfoldersAsync(profile: profile, folder: folder, withArchived: withArchived, sortBy: sortBy, order: order, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<DocumentFolder>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<DocumentFolder>.Default())), skip, cancellationToken);
                
                }
            
            }
        
            public AccesClient Access => new AccesClient(_connection);
            
            public partial class AccesClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public AccesClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<DocumentAccess> DocumentOwnAccessPermissionsAsync(ProfileIdentifier profile, string documentId, Func<Partial<DocumentAccess>, Partial<DocumentAccess>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<DocumentAccess>()) : Partial<DocumentAccess>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<DocumentAccess>("GET", $"api/http/team-directory/profiles/{profile}/documents/{documentId}/access{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DocumentOwnAccessPermissions", cancellationToken: cancellationToken);
                }
                
            
                public async Task UpdateDocumentAccessPermissionsAsync(ProfileIdentifier profile, string documentId, UpdateDocumentAccessIn accessChange, bool silent = false, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/documents/{documentId}/access{queryParameters.ToQueryString()}", 
                        new TeamDirectoryProfilesForProfileDocumentsForDocumentIdAccessPatchRequest
                        { 
                            AccessChange = accessChange,
                            IsSilent = silent,
                        }, requestHeaders: null, functionName: "UpdateDocumentAccessPermissions", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public CopyClient Copy => new CopyClient(_connection);
            
            public partial class CopyClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public CopyClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Document> CopyDocumentAsync(ProfileIdentifier profile, string documentId, string name, FolderIdentifier folder, Func<Partial<Document>, Partial<Document>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Document>()) : Partial<Document>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileDocumentsForDocumentIdCopyPostRequest, Document>("POST", $"api/http/team-directory/profiles/{profile}/documents/{documentId}/copy{queryParameters.ToQueryString()}", 
                        new TeamDirectoryProfilesForProfileDocumentsForDocumentIdCopyPostRequest
                        { 
                            Name = name,
                            Folder = folder,
                        }, requestHeaders: null, functionName: "CopyDocument", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public DeleteForeverClient DeleteForever => new DeleteForeverClient(_connection);
            
            public partial class DeleteForeverClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public DeleteForeverClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task DeleteDocumentForeverAsync(ProfileIdentifier profile, string documentId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/documents/{documentId}/delete-forever{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteDocumentForever", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public MoveClient Move => new MoveClient(_connection);
            
            public partial class MoveClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public MoveClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Document> MoveDocumentAsync(ProfileIdentifier profile, string documentId, FolderIdentifier folder, Func<Partial<Document>, Partial<Document>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Document>()) : Partial<Document>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileDocumentsForDocumentIdMovePatchRequest, Document>("PATCH", $"api/http/team-directory/profiles/{profile}/documents/{documentId}/move{queryParameters.ToQueryString()}", 
                        new TeamDirectoryProfilesForProfileDocumentsForDocumentIdMovePatchRequest
                        { 
                            Folder = folder,
                        }, requestHeaders: null, functionName: "MoveDocument", cancellationToken: cancellationToken);
                }
                
            
            }
        
            public UnarchiveClient Unarchive => new UnarchiveClient(_connection);
            
            public partial class UnarchiveClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public UnarchiveClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Document> UnarchiveDocumentAsync(ProfileIdentifier profile, string documentId, Func<Partial<Document>, Partial<Document>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    queryParameters.Append("$fields", (partial != null ? partial(new Partial<Document>()) : Partial<Document>.Default()).ToString());
                    
                    return await _connection.RequestResourceAsync<Document>("PATCH", $"api/http/team-directory/profiles/{profile}/documents/{documentId}/unarchive{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "UnarchiveDocument", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
        public GpgKeyClient GpgKeys => new GpgKeyClient(_connection);
        
        public partial class GpgKeyClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public GpgKeyClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update member profiles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<GpgKeyData> AddPublicGpgKeyAsync(ProfileIdentifier profile, string key, string comment = "", Func<Partial<GpgKeyData>, Partial<GpgKeyData>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<GpgKeyData>()) : Partial<GpgKeyData>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileGpgKeysPostRequest, GpgKeyData>("POST", $"api/http/team-directory/profiles/{profile}/gpg-keys{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileGpgKeysPostRequest
                    { 
                        Key = key,
                        Comment = comment,
                    }, requestHeaders: null, functionName: "AddPublicGpgKey", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// List GPG public keys associated with a profile
            /// </summary>
            public async Task<List<GpgKeyData>> ListPublicGpgKeysAsync(ProfileIdentifier profile, Func<Partial<GpgKeyData>, Partial<GpgKeyData>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<GpgKeyData>()) : Partial<GpgKeyData>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<GpgKeyData>>("GET", $"api/http/team-directory/profiles/{profile}/gpg-keys{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ListPublicGpgKeys", cancellationToken: cancellationToken);
            }
            
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update member profiles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task RevokePublicGpgKeyAsync(ProfileIdentifier profile, string fingerprint, string comment = "", Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/gpg-keys/{fingerprint}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileGpgKeysForFingerprintPatchRequest
                    { 
                        Comment = comment,
                    }, requestHeaders: null, functionName: "RevokePublicGpgKey", cancellationToken: cancellationToken);
            }
            
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update member profiles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task DeletePublicGpgKeyAsync(ProfileIdentifier profile, string fingerprint, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/gpg-keys/{fingerprint}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeletePublicGpgKey", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public LeadClient Leads => new LeadClient(_connection);
        
        public partial class LeadClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public LeadClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get team leads for a given profile ID
            /// </summary>
            [Obsolete("To be removed (since 2020-12-01) (will be removed in a future version)")]
            public async Task<List<TDMemberProfile>> GetAllLeadsAsync(ProfileIdentifier profile, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDMemberProfile>()) : Partial<TDMemberProfile>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<TDMemberProfile>>("GET", $"api/http/team-directory/profiles/{profile}/leads{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllLeads", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public NavBarMenuItemClient NavBarMenuItems => new NavBarMenuItemClient(_connection);
        
        public partial class NavBarMenuItemClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public NavBarMenuItemClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<NavBarMenuItem>> GetAllNavBarMenuItemsAsync(ProfileIdentifier profile, Func<Partial<NavBarMenuItem>, Partial<NavBarMenuItem>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<NavBarMenuItem>()) : Partial<NavBarMenuItem>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<NavBarMenuItem>>("GET", $"api/http/team-directory/profiles/{profile}/nav-bar-menu-items{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllNavBarMenuItems", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Toggle visibility for a given navigation bar item
            /// </summary>
            public async Task UpdateNavBarMenuItemAsync(ProfileIdentifier profile, string item, bool enabled, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/nav-bar-menu-items{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileNavBarMenuItemsPatchRequest
                    { 
                        Item = item,
                        IsEnabled = enabled,
                    }, requestHeaders: null, functionName: "UpdateNavBarMenuItem", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public NavBarProjectClient NavBarProjects => new NavBarProjectClient(_connection);
        
        public partial class NavBarProjectClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public NavBarProjectClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Add a project to the navigation bar
            /// </summary>
            public async Task CreateNavBarProjectAsync(ProfileIdentifier profile, ProjectIdentifier project, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("POST", $"api/http/team-directory/profiles/{profile}/nav-bar-projects{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileNavBarProjectsPostRequest
                    { 
                        Project = project,
                    }, requestHeaders: null, functionName: "CreateNavBarProject", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Add a project to the navigation bar
            /// </summary>
            public async Task<List<PRProject>> GetAllNavBarProjectsAsync(ProfileIdentifier profile, Func<Partial<PRProject>, Partial<PRProject>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<PRProject>()) : Partial<PRProject>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<PRProject>>("GET", $"api/http/team-directory/profiles/{profile}/nav-bar-projects{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllNavBarProjects", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Remove a project from the navigation bar
            /// </summary>
            public async Task DeleteNavBarProjectAsync(ProfileIdentifier profile, ProjectIdentifier project, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/nav-bar-projects/{project}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteNavBarProject", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public NotificationSettingClient NotificationSettings => new NotificationSettingClient(_connection);
        
        public partial class NotificationSettingClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public NotificationSettingClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<GlobalNotificationSettings> GetSpaceGlobalNotificationSettingsForAProfileAsync(ProfileIdentifier profile, Func<Partial<GlobalNotificationSettings>, Partial<GlobalNotificationSettings>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<GlobalNotificationSettings>()) : Partial<GlobalNotificationSettings>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<GlobalNotificationSettings>("GET", $"api/http/team-directory/profiles/{profile}/notification-settings{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetSpaceGlobalNotificationSettingsForAProfile", cancellationToken: cancellationToken);
            }
            
        
            public async Task SetSpaceGlobalNotificationSettingsForAProfileAsync(ProfileIdentifier profile, bool? emailNotificationsEnabled = null, string? notificationEmail = null, bool? pushNotificationEnabled = null, int? desktopInactivityTimeout = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/notification-settings{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileNotificationSettingsPatchRequest
                    { 
                        IsEmailNotificationsEnabled = emailNotificationsEnabled,
                        NotificationEmail = notificationEmail,
                        IsPushNotificationEnabled = pushNotificationEnabled,
                        DesktopInactivityTimeout = desktopInactivityTimeout,
                    }, requestHeaders: null, functionName: "SetSpaceGlobalNotificationSettingsForAProfile", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public PermanentTokenClient PermanentTokens => new PermanentTokenClient(_connection);
        
        public partial class PermanentTokenClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public PermanentTokenClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a personal token for the given profile that can be used to access the current organization
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Create permanent tokens for yourself</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Pair<ESPersonalToken, string>> CreatePermanentTokenAsync(ProfileIdentifier profile, string name, PermissionScope scope, DateTime? expires = null, Func<Partial<Pair<ESPersonalToken, string>>, Partial<Pair<ESPersonalToken, string>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Pair<ESPersonalToken, string>>()) : Partial<Pair<ESPersonalToken, string>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfilePermanentTokensPostRequest, Pair<ESPersonalToken, string>>("POST", $"api/http/team-directory/profiles/{profile}/permanent-tokens{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfilePermanentTokensPostRequest
                    { 
                        Name = name,
                        Scope = scope,
                        Expires = expires,
                    }, requestHeaders: null, functionName: "CreatePermanentToken", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Get personal tokens used to access the current organization for the given profile
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage permanent tokens</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<ESPersonalToken>> GetAllPermanentTokensAsync(ProfileIdentifier profile, string? skip = null, int? top = 100, Func<Partial<Batch<ESPersonalToken>>, Partial<Batch<ESPersonalToken>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<ESPersonalToken>>()) : Partial<Batch<ESPersonalToken>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<ESPersonalToken>>("GET", $"api/http/team-directory/profiles/{profile}/permanent-tokens{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllPermanentTokens", cancellationToken: cancellationToken);
            }
            
            /// <summary>
            /// Get personal tokens used to access the current organization for the given profile
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage permanent tokens</term>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<ESPersonalToken> GetAllPermanentTokensAsyncEnumerable(ProfileIdentifier profile, string? skip = null, int? top = 100, Func<Partial<ESPersonalToken>, Partial<ESPersonalToken>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllPermanentTokensAsync(profile: profile, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ESPersonalToken>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ESPersonalToken>.Default())), skip, cancellationToken);
        
            /// <summary>
            /// Update an existing personal token used to access the current organization. The name and/or scope of the personal token can be updated.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage permanent tokens</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task UpdatePermanentTokenAsync(ProfileIdentifier profile, string tokenId, string? name = null, PermissionScope? scope = null, DateTime? expires = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/permanent-tokens/{tokenId}{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfilePermanentTokensForTokenIdPatchRequest
                    { 
                        Name = name,
                        Scope = scope,
                        Expires = expires,
                    }, requestHeaders: null, functionName: "UpdatePermanentToken", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Delete a specific personal token used to access the current organization
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Manage permanent tokens</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task DeletePermanentTokenAsync(ProfileIdentifier profile, string tokenId, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/permanent-tokens/{tokenId}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeletePermanentToken", cancellationToken: cancellationToken);
            }
            
        
            public CurrentClient Current => new CurrentClient(_connection);
            
            public partial class CurrentClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public CurrentClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Delete personal token of the given profile
                /// </summary>
                public async Task DeleteCurrentPermanentTokenAsync(ProfileIdentifier profile, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
                {
                    var queryParameters = new NameValueCollection();
                    
                    await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/permanent-tokens/current{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteCurrentPermanentToken", cancellationToken: cancellationToken);
                }
                
            
            }
        
        }
    
        public SettingClient Settings => new SettingClient(_connection);
        
        public partial class SettingClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public SettingClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// This endpoint will return profile information and Space personalisation data such as projects in the navigation bar, etc.
            /// </summary>
            public async Task<SettingsValue> GetSpacePersonalizationDataForAProfileAsync(ProfileIdentifier profile, Func<Partial<SettingsValue>, Partial<SettingsValue>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<SettingsValue>()) : Partial<SettingsValue>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<SettingsValue>("GET", $"api/http/team-directory/profiles/{profile}/settings{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetSpacePersonalizationDataForAProfile", cancellationToken: cancellationToken);
            }
            
        
            public async Task SetSpacePersonalizationDataForAProfileAsync(ProfileIdentifier profile, DarkTheme? darkTheme = null, string? themeName = null, Weekday? firstDayOfWeek = null, DraftDocumentType? draftType = null, TypographySettings? typographySettings = null, bool? todoFilters = null, string? calendarView = null, bool? emailNotificationsEnabled = null, string? notificationEmail = null, string? preferredLanguage = null, ProjectIdentifier? defaultProject = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/settings{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileSettingsPatchRequest
                    { 
                        DarkTheme = darkTheme,
                        ThemeName = themeName,
                        FirstDayOfWeek = firstDayOfWeek,
                        DraftType = draftType,
                        TypographySettings = typographySettings,
                        IsTodoFilters = todoFilters,
                        CalendarView = calendarView,
                        IsEmailNotificationsEnabled = emailNotificationsEnabled,
                        NotificationEmail = notificationEmail,
                        PreferredLanguage = preferredLanguage,
                        DefaultProject = defaultProject,
                    }, requestHeaders: null, functionName: "SetSpacePersonalizationDataForAProfile", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public SpokenLanguageClient SpokenLanguages => new SpokenLanguageClient(_connection);
        
        public partial class SpokenLanguageClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public SpokenLanguageClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Update spoken language for a profile. Optionally, firstName and lastName can be specified to add a localized name to the profile.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update languages</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<TDProfileLanguage> CreateSpokenLanguageAsync(ProfileIdentifier profile, string language, string? firstName = null, string? lastName = null, Func<Partial<TDProfileLanguage>, Partial<TDProfileLanguage>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDProfileLanguage>()) : Partial<TDProfileLanguage>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileSpokenLanguagesPostRequest, TDProfileLanguage>("POST", $"api/http/team-directory/profiles/{profile}/spoken-languages{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileSpokenLanguagesPostRequest
                    { 
                        Language = language,
                        FirstName = firstName,
                        LastName = lastName,
                    }, requestHeaders: null, functionName: "CreateSpokenLanguage", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Get spoken language of a profile
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View member locations</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<List<TDProfileLanguage>> GetAllSpokenLanguagesAsync(ProfileIdentifier profile, Func<Partial<TDProfileLanguage>, Partial<TDProfileLanguage>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDProfileLanguage>()) : Partial<TDProfileLanguage>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<TDProfileLanguage>>("GET", $"api/http/team-directory/profiles/{profile}/spoken-languages{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllSpokenLanguages", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Delete spoken language for a profile
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update languages</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task DeleteSpokenLanguageAsync(ProfileIdentifier profile, string language, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/spoken-languages/{language}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteSpokenLanguage", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public SshKeyClient SshKeys => new SshKeyClient(_connection);
        
        public partial class SshKeyClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public SshKeyClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Associate an SSH public key with the profile
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update member profiles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task AddSshKeyAsync(ProfileIdentifier profile, string key, string comment = "", Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("POST", $"api/http/team-directory/profiles/{profile}/ssh-keys{queryParameters.ToQueryString()}", 
                    new TeamDirectoryProfilesForProfileSshKeysPostRequest
                    { 
                        Key = key,
                        Comment = comment,
                    }, requestHeaders: null, functionName: "AddSshKey", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// List SSH public keys associated with the profile
            /// </summary>
            public async Task<List<SshKeyData>> SshKeysAsync(ProfileIdentifier profile, Func<Partial<SshKeyData>, Partial<SshKeyData>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<SshKeyData>()) : Partial<SshKeyData>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<List<SshKeyData>>("GET", $"api/http/team-directory/profiles/{profile}/ssh-keys{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "SshKeys", cancellationToken: cancellationToken);
            }
            
        
            /// <summary>
            /// Remove association between the profile and the SSH public key
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Update member profiles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task DeleteSshKeyAsync(ProfileIdentifier profile, string fingerprint, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                
                await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/ssh-keys/{fingerprint}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DeleteSshKey", cancellationToken: cancellationToken);
            }
            
        
        }
    
        public TimezoneClient Timezone => new TimezoneClient(_connection);
        
        public partial class TimezoneClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public TimezoneClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get profile timezone. Returns profile's working hours timezone, location timezone or device timezone, whichever is present first in this list.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View member profiles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<ATimeZone> GetTimezoneAsync(ProfileIdentifier profile, Func<Partial<ATimeZone>, Partial<ATimeZone>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<ATimeZone>()) : Partial<ATimeZone>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<ATimeZone>("GET", $"api/http/team-directory/profiles/{profile}/timezone{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetTimezone", cancellationToken: cancellationToken);
            }
            
        
        }
    
    }

    public RoleClient Roles => new RoleClient(_connection);
    
    public partial class RoleClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public RoleClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create a role
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update positions</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDRole> CreateRoleAsync(string name, string? parentId = null, Func<Partial<TDRole>, Partial<TDRole>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDRole>()) : Partial<TDRole>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryRolesPostRequest, TDRole>("POST", $"api/http/team-directory/roles{queryParameters.ToQueryString()}", 
                new TeamDirectoryRolesPostRequest
                { 
                    Name = name,
                    ParentId = parentId,
                }, requestHeaders: null, functionName: "CreateRole", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Restore an archived role
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update positions</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDRole> RestoreRoleAsync(string id, Func<Partial<TDRole>, Partial<TDRole>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDRole>()) : Partial<TDRole>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDRole>("POST", $"api/http/team-directory/roles/{id}/restore{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RestoreRole", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get/search all roles. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View positions</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<List<TDRole>> GetAllRolesAsync(string query = "", bool withArchived = false, Func<Partial<TDRole>, Partial<TDRole>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("query", query);
            queryParameters.Append("withArchived", withArchived.ToString("l"));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDRole>()) : Partial<TDRole>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<TDRole>>("GET", $"api/http/team-directory/roles{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllRoles", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get a role by ID
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View positions</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDRole> GetRoleAsync(string id, Func<Partial<TDRole>, Partial<TDRole>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDRole>()) : Partial<TDRole>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDRole>("GET", $"api/http/team-directory/roles/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetRole", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Update a role. Optional parameters will be ignored when null and updated otherwise.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update positions</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDRole> UpdateRoleAsync(string id, string? name = null, string? parentId = null, Func<Partial<TDRole>, Partial<TDRole>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDRole>()) : Partial<TDRole>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryRolesForIdPatchRequest, TDRole>("PATCH", $"api/http/team-directory/roles/{id}{queryParameters.ToQueryString()}", 
                new TeamDirectoryRolesForIdPatchRequest
                { 
                    Name = name,
                    ParentId = parentId,
                }, requestHeaders: null, functionName: "UpdateRole", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Archive a role
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update positions</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task ArchiveRoleAsync(string id, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/roles/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ArchiveRole", cancellationToken: cancellationToken);
        }
        
    
    }

    public StatClient Stats => new StatClient(_connection);
    
    public partial class StatClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public StatClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Get statistics of total members, as well as members per location, role, and team. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View teams</term>
        /// </item>
        /// <item>
        /// <term>View locations</term>
        /// </item>
        /// <item>
        /// <term>View positions</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDStats> GetAllStatsAsync(string? teamId = null, string? locationId = null, string? roleId = null, Func<Partial<TDStats>, Partial<TDStats>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (teamId != null) queryParameters.Append("teamId", teamId);
            if (locationId != null) queryParameters.Append("locationId", locationId);
            if (roleId != null) queryParameters.Append("roleId", roleId);
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDStats>()) : Partial<TDStats>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDStats>("GET", $"api/http/team-directory/stats{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllStats", cancellationToken: cancellationToken);
        }
        
    
    }

    public TeamClient Teams => new TeamClient(_connection);
    
    public partial class TeamClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public TeamClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create a new team
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDTeam> CreateTeamAsync(string name, string? description = null, List<string>? emails = null, string? parentId = null, string? defaultManager = null, List<CustomFieldInputValue>? customFieldValues = null, string? externalId = null, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDTeam>()) : Partial<TDTeam>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryTeamsPostRequest, TDTeam>("POST", $"api/http/team-directory/teams{queryParameters.ToQueryString()}", 
                new TeamDirectoryTeamsPostRequest
                { 
                    Name = name,
                    Description = description,
                    Emails = emails,
                    ParentId = parentId,
                    DefaultManager = defaultManager,
                    CustomFieldValues = customFieldValues,
                    ExternalId = externalId,
                }, requestHeaders: null, functionName: "CreateTeam", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Cancel disbanding a team and restore its members
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task CancelTeamDisbandingAsync(string id, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            
            await _connection.RequestResourceAsync("POST", $"api/http/team-directory/teams/{id}/cancel-disbanding{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "CancelTeamDisbanding", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Restore an archived team
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDTeam> RestoreTeamAsync(string id, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDTeam>()) : Partial<TDTeam>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDTeam>("POST", $"api/http/team-directory/teams/{id}/restore{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "RestoreTeam", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get or search all teams. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<Batch<TDTeam>> GetAllTeamsAsync(string query = "", bool withArchived = false, string? skip = null, int? top = 100, Func<Partial<Batch<TDTeam>>, Partial<Batch<TDTeam>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            if (skip != null) queryParameters.Append("$skip", skip);
            if (top != null) queryParameters.Append("$top", top?.ToString());
            queryParameters.Append("query", query);
            queryParameters.Append("withArchived", withArchived.ToString("l"));
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDTeam>>()) : Partial<Batch<TDTeam>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<Batch<TDTeam>>("GET", $"api/http/team-directory/teams{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllTeams", cancellationToken: cancellationToken);
        }
        
        /// <summary>
        /// Get or search all teams. Parameters are applied as 'AND' filters.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public IAsyncEnumerable<TDTeam> GetAllTeamsAsyncEnumerable(string query = "", bool withArchived = false, string? skip = null, int? top = 100, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, CancellationToken cancellationToken = default)
            => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllTeamsAsync(query: query, withArchived: withArchived, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDTeam>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDTeam>.Default())), skip, cancellationToken);
    
        /// <summary>
        /// Get teams for synchronization with third-party system. Teams with etag greater than specified value are returned. Read more in the <a href="https://www.jetbrains.com/help/space/sync-api.html">documentation</a>.
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<SyncBatch<TDTeam>> GetSyncBatchAsync(SyncBatchInfo batchInfo, Func<Partial<SyncBatch<TDTeam>>, Partial<SyncBatch<TDTeam>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("batchInfo", batchInfo.ToString());
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<SyncBatch<TDTeam>>()) : Partial<SyncBatch<TDTeam>>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<SyncBatch<TDTeam>>("GET", $"api/http/team-directory/teams/sync-batch{queryParameters.ToQueryString()}", requestHeaders: EpochTrackerHeaders.GenerateFrom(_connection.ServerUrl, EpochTracker.Instance), functionName: "GetSyncBatch", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Get a team by ID
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>View teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDTeam> GetTeamAsync(TeamIdentifier id, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDTeam>()) : Partial<TDTeam>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TDTeam>("GET", $"api/http/team-directory/teams/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetTeam", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<TDTeam> UpdateTeamAsync(string id, string? name = null, string? description = null, List<string>? emails = null, string? parentId = null, string? defaultManager = null, List<CustomFieldInputValue>? customFieldValues = null, string? externalId = null, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDTeam>()) : Partial<TDTeam>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<TeamDirectoryTeamsForIdPatchRequest, TDTeam>("PATCH", $"api/http/team-directory/teams/{id}{queryParameters.ToQueryString()}", 
                new TeamDirectoryTeamsForIdPatchRequest
                { 
                    Name = name,
                    Description = description,
                    Emails = emails,
                    ParentId = parentId,
                    DefaultManager = defaultManager,
                    CustomFieldValues = customFieldValues,
                    ExternalId = externalId,
                }, requestHeaders: null, functionName: "UpdateTeam", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Archive a team
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<List<TDTeam>> ArchiveTeamAsync(string id, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDTeam>()) : Partial<TDTeam>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<TDTeam>>("DELETE", $"api/http/team-directory/teams/{id}{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "ArchiveTeam", cancellationToken: cancellationToken);
        }
        
    
        /// <summary>
        /// Disband a team
        /// </summary>
        /// <remarks>
        /// Required permissions:
        /// <list type="bullet">
        /// <item>
        /// <term>Update teams</term>
        /// </item>
        /// </list>
        /// </remarks>
        public async Task<List<TDTeam>> DisbandTeamAsync(string id, Func<Partial<TDTeam>, Partial<TDTeam>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
        {
            var queryParameters = new NameValueCollection();
            queryParameters.Append("$fields", (partial != null ? partial(new Partial<TDTeam>()) : Partial<TDTeam>.Default()).ToString());
            
            return await _connection.RequestResourceAsync<List<TDTeam>>("DELETE", $"api/http/team-directory/teams/{id}/disband{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "DisbandTeam", cancellationToken: cancellationToken);
        }
        
    
        public DirectMemberClient DirectMembers => new DirectMemberClient(_connection);
        
        public partial class DirectMemberClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public DirectMemberClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get or search direct members of a given team
            /// </summary>
            public async Task<Batch<TDMemberProfile>> GetAllDirectMembersAsync(string id, string query = "", string? skip = null, int? top = 100, Func<Partial<Batch<TDMemberProfile>>, Partial<Batch<TDMemberProfile>>>? partial = null, Dictionary<string, string>? requestHeaders = null, CancellationToken cancellationToken = default)
            {
                var queryParameters = new NameValueCollection();
                if (skip != null) queryParameters.Append("$skip", skip);
                if (top != null) queryParameters.Append("$top", top?.ToString());
                queryParameters.Append("query", query);
                queryParameters.Append("$fields", (partial != null ? partial(new Partial<Batch<TDMemberProfile>>()) : Partial<Batch<TDMemberProfile>>.Default()).ToString());
                
                return await _connection.RequestResourceAsync<Batch<TDMemberProfile>>("GET", $"api/http/team-directory/teams/{id}/direct-members{queryParameters.ToQueryString()}", requestHeaders: null, functionName: "GetAllDirectMembers", cancellationToken: cancellationToken);
            }
            
            /// <summary>
            /// Get or search direct members of a given team
            /// </summary>
            public IAsyncEnumerable<TDMemberProfile> GetAllDirectMembersAsyncEnumerable(string id, string query = "", string? skip = null, int? top = 100, Func<Partial<TDMemberProfile>, Partial<TDMemberProfile>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllDirectMembersAsync(id: id, query: query, top: top, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfile>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfile>.Default())), skip, cancellationToken);
        
        }
    
    }

}

