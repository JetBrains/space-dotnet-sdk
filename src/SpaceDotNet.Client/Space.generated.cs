// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// 
//     Generated: 2019-12-31T10:21:16.1294569+00:00
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace SpaceDotNet.Client
{
    // Source: absencelistmode
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class AbsenceListMode : Enumeration
    {
        public AbsenceListMode(string value) : base(value) { }
        
        public static readonly AbsenceListMode All = new AbsenceListMode("All");
        public static readonly AbsenceListMode WithAccessibleReasonUnapproved = new AbsenceListMode("WithAccessibleReasonUnapproved");
        public static readonly AbsenceListMode WithAccessibleReasonAll = new AbsenceListMode("WithAccessibleReasonAll");
    }
    
    // Source: accesstype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class AccessType : Enumeration
    {
        public AccessType(string value) : base(value) { }
        
        public static readonly AccessType PUBLIC = new AccessType("PUBLIC");
        public static readonly AccessType CONFIDENTIAL = new AccessType("CONFIDENTIAL");
        public static readonly AccessType RESTRICTED = new AccessType("RESTRICTED");
    }
    
    // Source: codereviewparticipantrole
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class CodeReviewParticipantRole : Enumeration
    {
        public CodeReviewParticipantRole(string value) : base(value) { }
        
        public static readonly CodeReviewParticipantRole Reviewer = new CodeReviewParticipantRole("Reviewer");
        public static readonly CodeReviewParticipantRole Watcher = new CodeReviewParticipantRole("Watcher");
    }
    
    // Source: codereviewparticipantstate
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class CodeReviewParticipantState : Enumeration
    {
        public CodeReviewParticipantState(string value) : base(value) { }
        
        public static readonly CodeReviewParticipantState Accepted = new CodeReviewParticipantState("Accepted");
        public static readonly CodeReviewParticipantState Rejected = new CodeReviewParticipantState("Rejected");
    }
    
    // Source: codereviewstate
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class CodeReviewState : Enumeration
    {
        public CodeReviewState(string value) : base(value) { }
        
        public static readonly CodeReviewState Opened = new CodeReviewState("Opened");
        public static readonly CodeReviewState Closed = new CodeReviewState("Closed");
        public static readonly CodeReviewState Deleted = new CodeReviewState("Deleted");
    }
    
    // Source: difflinetype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class DiffLineType : Enumeration
    {
        public DiffLineType(string value) : base(value) { }
        
        public static readonly DiffLineType ADDED = new DiffLineType("ADDED");
        public static readonly DiffLineType DELETED = new DiffLineType("DELETED");
        public static readonly DiffLineType MODIFIED = new DiffLineType("MODIFIED");
        public static readonly DiffLineType CONFLICTOLD = new DiffLineType("CONFLICT_OLD");
        public static readonly DiffLineType CONFLICTNEW = new DiffLineType("CONFLICT_NEW");
    }
    
    // Source: eventparticipationstatus
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class EventParticipationStatus : Enumeration
    {
        public EventParticipationStatus(string value) : base(value) { }
        
        public static readonly EventParticipationStatus GOING = new EventParticipationStatus("GOING");
        public static readonly EventParticipationStatus NOTGOING = new EventParticipationStatus("NOT_GOING");
        public static readonly EventParticipationStatus NOTSURE = new EventParticipationStatus("NOT_SURE");
        public static readonly EventParticipationStatus WAITINGFORRESPONSE = new EventParticipationStatus("WAITING_FOR_RESPONSE");
    }
    
    // Source: executionstatus
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class ExecutionStatus : Enumeration
    {
        public ExecutionStatus(string value) : base(value) { }
        
        public static readonly ExecutionStatus SCHEDULED = new ExecutionStatus("SCHEDULED");
        public static readonly ExecutionStatus PENDING = new ExecutionStatus("PENDING");
        public static readonly ExecutionStatus READYTOSTART = new ExecutionStatus("READY_TO_START");
        public static readonly ExecutionStatus FAILEDTOSTART = new ExecutionStatus("FAILED_TO_START");
        public static readonly ExecutionStatus RUNNING = new ExecutionStatus("RUNNING");
        public static readonly ExecutionStatus FAILING = new ExecutionStatus("FAILING");
        public static readonly ExecutionStatus SUCCEEDED = new ExecutionStatus("SUCCEEDED");
        public static readonly ExecutionStatus TERMINATED = new ExecutionStatus("TERMINATED");
        public static readonly ExecutionStatus FAILED = new ExecutionStatus("FAILED");
        public static readonly ExecutionStatus HANGING = new ExecutionStatus("HANGING");
    }
    
    // Source: gender
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class Gender : Enumeration
    {
        public Gender(string value) : base(value) { }
        
        public static readonly Gender Female = new Gender("Female");
        public static readonly Gender Male = new Gender("Male");
        public static readonly Gender Other = new Gender("Other");
        public static readonly Gender NotSpecified = new Gender("NotSpecified");
    }
    
    // Source: gitcommitchangetype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class GitCommitChangeType : Enumeration
    {
        public GitCommitChangeType(string value) : base(value) { }
        
        public static readonly GitCommitChangeType ADDED = new GitCommitChangeType("ADDED");
        public static readonly GitCommitChangeType DELETED = new GitCommitChangeType("DELETED");
        public static readonly GitCommitChangeType MODIFIED = new GitCommitChangeType("MODIFIED");
    }
    
    // Source: gitentrytype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class GitEntryType : Enumeration
    {
        public GitEntryType(string value) : base(value) { }
        
        public static readonly GitEntryType FILE = new GitEntryType("FILE");
        public static readonly GitEntryType DIR = new GitEntryType("DIR");
        public static readonly GitEntryType GITLINK = new GitEntryType("GIT_LINK");
        public static readonly GitEntryType SYMLINK = new GitEntryType("SYM_LINK");
    }
    
    // Source: gitgraphedgelinestyle
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class GitGraphEdgeLineStyle : Enumeration
    {
        public GitGraphEdgeLineStyle(string value) : base(value) { }
        
        public static readonly GitGraphEdgeLineStyle SOLID = new GitGraphEdgeLineStyle("SOLID");
        public static readonly GitGraphEdgeLineStyle DASHED = new GitGraphEdgeLineStyle("DASHED");
        public static readonly GitGraphEdgeLineStyle DOTTED = new GitGraphEdgeLineStyle("DOTTED");
    }
    
    // Source: gitgraphedgetype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class GitGraphEdgeType : Enumeration
    {
        public GitGraphEdgeType(string value) : base(value) { }
        
        public static readonly GitGraphEdgeType UP = new GitGraphEdgeType("UP");
        public static readonly GitGraphEdgeType DOWN = new GitGraphEdgeType("DOWN");
    }
    
    // Source: ha_method
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class HAMethod : Enumeration
    {
        public HAMethod(string value) : base(value) { }
        
        public static readonly HAMethod RESTCREATE = new HAMethod("REST_CREATE");
        public static readonly HAMethod RESTQUERY = new HAMethod("REST_QUERY");
        public static readonly HAMethod RESTGET = new HAMethod("REST_GET");
        public static readonly HAMethod RESTUPDATE = new HAMethod("REST_UPDATE");
        public static readonly HAMethod RESTDELETE = new HAMethod("REST_DELETE");
        public static readonly HAMethod HTTPGET = new HAMethod("HTTP_GET");
        public static readonly HAMethod HTTPPOST = new HAMethod("HTTP_POST");
        public static readonly HAMethod HTTPPATCH = new HAMethod("HTTP_PATCH");
        public static readonly HAMethod HTTPPUT = new HAMethod("HTTP_PUT");
        public static readonly HAMethod HTTPDELETE = new HAMethod("HTTP_DELETE");
    }
    
    // Source: ha_primitive
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class HAPrimitive : Enumeration
    {
        public HAPrimitive(string value) : base(value) { }
        
        public static readonly HAPrimitive Byte = new HAPrimitive("Byte");
        public static readonly HAPrimitive Short = new HAPrimitive("Short");
        public static readonly HAPrimitive Int = new HAPrimitive("Int");
        public static readonly HAPrimitive Long = new HAPrimitive("Long");
        public static readonly HAPrimitive Float = new HAPrimitive("Float");
        public static readonly HAPrimitive Double = new HAPrimitive("Double");
        public static readonly HAPrimitive Boolean = new HAPrimitive("Boolean");
        public static readonly HAPrimitive String = new HAPrimitive("String");
        public static readonly HAPrimitive Date = new HAPrimitive("Date");
        public static readonly HAPrimitive DateTime = new HAPrimitive("DateTime");
    }
    
    // Source: ha_type.object.kind
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class HATypeObjectKind : Enumeration
    {
        public HATypeObjectKind(string value) : base(value) { }
        
        public static readonly HATypeObjectKind PAIR = new HATypeObjectKind("PAIR");
        public static readonly HATypeObjectKind TRIPLE = new HATypeObjectKind("TRIPLE");
        public static readonly HATypeObjectKind MAPENTRY = new HATypeObjectKind("MAP_ENTRY");
        public static readonly HATypeObjectKind BATCH = new HATypeObjectKind("BATCH");
        public static readonly HATypeObjectKind MOD = new HATypeObjectKind("MOD");
        public static readonly HATypeObjectKind REQUESTBODY = new HATypeObjectKind("REQUEST_BODY");
    }
    
    // Source: hierarchyrole
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class HierarchyRole : Enumeration
    {
        public HierarchyRole(string value) : base(value) { }
        
        public static readonly HierarchyRole SEALED = new HierarchyRole("SEALED");
        public static readonly HierarchyRole OPEN = new HierarchyRole("OPEN");
        public static readonly HierarchyRole FINAL = new HierarchyRole("FINAL");
        public static readonly HierarchyRole ABSTRACT = new HierarchyRole("ABSTRACT");
        public static readonly HierarchyRole INTERFACE = new HierarchyRole("INTERFACE");
    }
    
    // Source: interpolatedlinestate
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class InterpolatedLineState : Enumeration
    {
        public InterpolatedLineState(string value) : base(value) { }
        
        public static readonly InterpolatedLineState Normal = new InterpolatedLineState("Normal");
        public static readonly InterpolatedLineState Deleted = new InterpolatedLineState("Deleted");
        public static readonly InterpolatedLineState Modified = new InterpolatedLineState("Modified");
    }
    
    // Source: issuessorting
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class IssuesSorting : Enumeration
    {
        public IssuesSorting(string value) : base(value) { }
        
        public static readonly IssuesSorting UPDATED = new IssuesSorting("UPDATED");
        public static readonly IssuesSorting CREATED = new IssuesSorting("CREATED");
        public static readonly IssuesSorting TITLE = new IssuesSorting("TITLE");
    }
    
    // Source: ldapmoduletype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class LdapModuleType : Enumeration
    {
        public LdapModuleType(string value) : base(value) { }
        
        public static readonly LdapModuleType AD = new LdapModuleType("AD");
        public static readonly LdapModuleType OPENLDAP = new LdapModuleType("OPEN_LDAP");
    }
    
    // Source: limitunit
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class LimitUnit : Enumeration
    {
        public LimitUnit(string value) : base(value) { }
        
        public static readonly LimitUnit BYTES = new LimitUnit("BYTES");
        public static readonly LimitUnit ENTITIES = new LimitUnit("ENTITIES");
    }
    
    // Source: m2.access
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class M2Access : Enumeration
    {
        public M2Access(string value) : base(value) { }
        
        public static readonly M2Access Private = new M2Access("Private");
        public static readonly M2Access Public = new M2Access("Public");
    }
    
    // Source: m2emailnotificationtype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class M2EmailNotificationType : Enumeration
    {
        public M2EmailNotificationType(string value) : base(value) { }
        
        public static readonly M2EmailNotificationType INSTANT = new M2EmailNotificationType("INSTANT");
        public static readonly M2EmailNotificationType DELAYED = new M2EmailNotificationType("DELAYED");
        public static readonly M2EmailNotificationType NONE = new M2EmailNotificationType("NONE");
    }
    
    // Source: m2obsoletecause
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class M2ObsoleteCause : Enumeration
    {
        public M2ObsoleteCause(string value) : base(value) { }
        
        public static readonly M2ObsoleteCause PermissionsDenied = new M2ObsoleteCause("PermissionsDenied");
    }
    
    // Source: mergerequestbranchtype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class MergeRequestBranchType : Enumeration
    {
        public MergeRequestBranchType(string value) : base(value) { }
        
        public static readonly MergeRequestBranchType SOURCE = new MergeRequestBranchType("SOURCE");
        public static readonly MergeRequestBranchType TARGET = new MergeRequestBranchType("TARGET");
    }
    
    // Source: normalizedtestservicemessage.status
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class NormalizedTestServiceMessageStatus : Enumeration
    {
        public NormalizedTestServiceMessageStatus(string value) : base(value) { }
        
        public static readonly NormalizedTestServiceMessageStatus START = new NormalizedTestServiceMessageStatus("START");
        public static readonly NormalizedTestServiceMessageStatus PASSED = new NormalizedTestServiceMessageStatus("PASSED");
        public static readonly NormalizedTestServiceMessageStatus IGNORED = new NormalizedTestServiceMessageStatus("IGNORED");
        public static readonly NormalizedTestServiceMessageStatus FAILED = new NormalizedTestServiceMessageStatus("FAILED");
    }
    
    // Source: notificationfilter
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class NotificationFilter : Enumeration
    {
        public NotificationFilter(string value) : base(value) { }
        
        public static readonly NotificationFilter ALLMESSAGES = new NotificationFilter("ALL_MESSAGES");
        public static readonly NotificationFilter MENTIONS = new NotificationFilter("MENTIONS");
        public static readonly NotificationFilter NOTHING = new NotificationFilter("NOTHING");
        public static readonly NotificationFilter MUTE = new NotificationFilter("MUTE");
    }
    
    // Source: oauthservicetype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class OAuthServiceType : Enumeration
    {
        public OAuthServiceType(string value) : base(value) { }
        
        public static readonly OAuthServiceType Server = new OAuthServiceType("Server");
        public static readonly OAuthServiceType WebClient = new OAuthServiceType("WebClient");
        public static readonly OAuthServiceType Mobile = new OAuthServiceType("Mobile");
        public static readonly OAuthServiceType ServiceAccount = new OAuthServiceType("ServiceAccount");
    }
    
    // Source: passwordstrength
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class PasswordStrength : Enumeration
    {
        public PasswordStrength(string value) : base(value) { }
        
        public static readonly PasswordStrength NOPOLICY = new PasswordStrength("NO_POLICY");
        public static readonly PasswordStrength FAIR = new PasswordStrength("FAIR");
        public static readonly PasswordStrength GOOD = new PasswordStrength("GOOD");
        public static readonly PasswordStrength STRONG = new PasswordStrength("STRONG");
    }
    
    // Source: profileorder
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class ProfileOrder : Enumeration
    {
        public ProfileOrder(string value) : base(value) { }
        
        public static readonly ProfileOrder DEFAULT = new ProfileOrder("DEFAULT");
        public static readonly ProfileOrder FULLNAME = new ProfileOrder("FULL_NAME");
    }
    
    // Source: repositorystate
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class RepositoryState : Enumeration
    {
        public RepositoryState(string value) : base(value) { }
        
        public static readonly RepositoryState READY = new RepositoryState("READY");
        public static readonly RepositoryState INPROGRESS = new RepositoryState("IN_PROGRESS");
        public static readonly RepositoryState ERROR = new RepositoryState("ERROR");
    }
    
    // Source: reviewrevisionschangedtype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class ReviewRevisionsChangedType : Enumeration
    {
        public ReviewRevisionsChangedType(string value) : base(value) { }
        
        public static readonly ReviewRevisionsChangedType Created = new ReviewRevisionsChangedType("Created");
        public static readonly ReviewRevisionsChangedType Added = new ReviewRevisionsChangedType("Added");
        public static readonly ReviewRevisionsChangedType Removed = new ReviewRevisionsChangedType("Removed");
    }
    
    // Source: reviewsorting
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class ReviewSorting : Enumeration
    {
        public ReviewSorting(string value) : base(value) { }
        
        public static readonly ReviewSorting CreatedAtAsc = new ReviewSorting("CreatedAtAsc");
        public static readonly ReviewSorting CreatedAtDesc = new ReviewSorting("CreatedAtDesc");
        public static readonly ReviewSorting LastUpdatedAsc = new ReviewSorting("LastUpdatedAsc");
        public static readonly ReviewSorting LastUpdatedDesc = new ReviewSorting("LastUpdatedDesc");
    }
    
    // Source: reviewtype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class ReviewType : Enumeration
    {
        public ReviewType(string value) : base(value) { }
        
        public static readonly ReviewType CommitSetReview = new ReviewType("CommitSetReview");
        public static readonly ReviewType MergeRequest = new ReviewType("MergeRequest");
    }
    
    // Source: reviewerchangedtype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class ReviewerChangedType : Enumeration
    {
        public ReviewerChangedType(string value) : base(value) { }
        
        public static readonly ReviewerChangedType Joined = new ReviewerChangedType("Joined");
        public static readonly ReviewerChangedType Left = new ReviewerChangedType("Left");
    }
    
    // Source: syntaxmarkuptype
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class SyntaxMarkupType : Enumeration
    {
        public SyntaxMarkupType(string value) : base(value) { }
        
        public static readonly SyntaxMarkupType KEYWORD = new SyntaxMarkupType("KEYWORD");
        public static readonly SyntaxMarkupType COMMENT = new SyntaxMarkupType("COMMENT");
        public static readonly SyntaxMarkupType IDENTIFIER = new SyntaxMarkupType("IDENTIFIER");
        public static readonly SyntaxMarkupType DECLARATION = new SyntaxMarkupType("DECLARATION");
        public static readonly SyntaxMarkupType NUMLITERAL = new SyntaxMarkupType("NUM_LITERAL");
        public static readonly SyntaxMarkupType STRINGLITERAL = new SyntaxMarkupType("STRING_LITERAL");
        public static readonly SyntaxMarkupType ANNOTATION = new SyntaxMarkupType("ANNOTATION");
        public static readonly SyntaxMarkupType HIGHLIGHT = new SyntaxMarkupType("HIGHLIGHT");
    }
    
    // Source: textmessageseverity
    [JsonConverter(typeof(EnumerationConverter))]
    public sealed class TextMessageSeverity : Enumeration
    {
        public TextMessageSeverity(string value) : base(value) { }
        
        public static readonly TextMessageSeverity INFO = new TextMessageSeverity("INFO");
        public static readonly TextMessageSeverity WARN = new TextMessageSeverity("WARN");
        public static readonly TextMessageSeverity ERROR = new TextMessageSeverity("ERROR");
    }
    
    // Source: atimezone
    public class ATimeZoneDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

    }
    
    // Source: atimezonewithoffset
    public class ATimeZoneWithOffsetDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("offset")]
        public int Offset { get; set; }

    }
    
    // Source: absenceapproval
    public class AbsenceApprovalDto
    {
        [Required]
        [JsonProperty("approved")]
        public bool Approved { get; set; }

        [Required]
        [JsonProperty("approvedBy")]
        public TDMemberProfileDto ApprovedBy { get; set; }

        [Required]
        [JsonProperty("approvedAt")]
        public SpaceTime ApprovedAt { get; set; }

    }
    
    // Source: absenceevent
    public class AbsenceEventDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberWithTeamDto Profile { get; set; }

        [Required]
        [JsonProperty("events")]
        public List<AbsenceRecordDto> Events { get; set; }

    }
    
    // Source: absencereasonrecord
    public class AbsenceReasonRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("description")]
        public string Description { get; set; }

        [Required]
        [JsonProperty("defaultAvailability")]
        public bool DefaultAvailability { get; set; }

        [Required]
        [JsonProperty("approvalRequired")]
        public bool ApprovalRequired { get; set; }

        [Required]
        [JsonProperty("icon")]
        public string Icon { get; set; }

    }
    
    // Source: absencerecord
    public class AbsenceRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("member")]
        public TDMemberProfileDto Member { get; set; }

        [Required]
        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("reason")]
        public AbsenceReasonRecordDto? Reason { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [Required]
        [JsonProperty("since")]
        public SpaceDate Since { get; set; }

        [Required]
        [JsonProperty("till")]
        public SpaceDate Till { get; set; }

        [JsonProperty("location")]
        public TDLocationDto? Location { get; set; }

        [Required]
        [JsonProperty("available")]
        public bool Available { get; set; }

        [JsonProperty("approval")]
        public AbsenceApprovalDto? Approval { get; set; }

        [JsonProperty("customFields")]
        public List<CustomColumnValuesWithSchemaDataDto>? CustomFields { get; set; }

    }
    
    // Source: accessrecord
    public class AccessRecordDto
    {
        [Required]
        [JsonProperty("time")]
        public SpaceTime Time { get; set; }

        [Required]
        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("userAgent")]
        public string? UserAgent { get; set; }

    }
    
    // Source: allreactionstoitemrecord
    public class AllReactionsToItemRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("reactions")]
        public List<CertainReactionToItemRecordDto> Reactions { get; set; }

    }
    
    // Source: articlechannelrecord
    public class ArticleChannelRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("channel")]
        public M2ChannelRecordDto Channel { get; set; }

        [Required]
        [JsonProperty("channelContent")]
        public M2ChannelContentRecordDto ChannelContent { get; set; }

        [Required]
        [JsonProperty("reactions")]
        public AllReactionsToItemRecordDto Reactions { get; set; }

    }
    
    // Source: articlecontentrecord
    public class ArticleContentRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("content")]
        public string Content { get; set; }

    }
    
    // Source: articledetailsrecord
    public class ArticleDetailsRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [JsonProperty("event")]
        public MeetingRecordDto? Event { get; set; }

        [JsonProperty("team")]
        public TDTeamDto? Team { get; set; }

        [JsonProperty("project")]
        public PRProjectDto? Project { get; set; }

        [JsonProperty("location")]
        public TDLocationDto? Location { get; set; }

    }
    
    // Source: articlemarkdownimage
    public class ArticleMarkdownImageDto
    {
        [Required]
        [JsonProperty("alt")]
        public string Alt { get; set; }

        [Required]
        [JsonProperty("src")]
        public string Src { get; set; }

    }
    
    // Source: articlerecord
    public class ArticleRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceTime Created { get; set; }

        [Required]
        [JsonProperty("author")]
        public TDMemberProfileDto Author { get; set; }

        [Required]
        [JsonProperty("aliases")]
        public List<BGArticleAliasDto> Aliases { get; set; }

        [Required]
        [JsonProperty("channel")]
        public M2ChannelRecordDto Channel { get; set; }

        [Required]
        [JsonProperty("channelContent")]
        public M2ChannelContentRecordDto ChannelContent { get; set; }

        [Required]
        [JsonProperty("reactions")]
        public AllReactionsToItemRecordDto Reactions { get; set; }

        [Required]
        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("event")]
        public MeetingRecordDto? Event { get; set; }

        [JsonProperty("team")]
        public TDTeamDto? Team { get; set; }

        [JsonProperty("project")]
        public PRProjectDto? Project { get; set; }

        [JsonProperty("location")]
        public TDLocationDto? Location { get; set; }

        [Required]
        [JsonProperty("editable")]
        public bool Editable { get; set; }

        [Required]
        [JsonProperty("previewImages")]
        public List<ArticleMarkdownImageDto> PreviewImages { get; set; }

        [Required]
        [JsonProperty("preview")]
        public string Preview { get; set; }

    }
    
    // Source: attachment
    public class AttachmentDto
    {
    }
    
    // Source: attachmentinfo
    public class AttachmentInfoDto
    {
        [JsonProperty("details")]
        public AttachmentDto? Details { get; set; }

    }
    
    // Source: authmoduleusage
    public class AuthModuleUsageDto
    {
        [Required]
        [JsonProperty("authModule")]
        public ESAuthModuleDto AuthModule { get; set; }

        [Required]
        [JsonProperty("profiles")]
        public int Profiles { get; set; }

    }
    
    // Source: avatarcropsquare
    public class AvatarCropSquareDto
    {
        [Required]
        [JsonProperty("x")]
        public int X { get; set; }

        [Required]
        [JsonProperty("y")]
        public int Y { get; set; }

        [Required]
        [JsonProperty("length")]
        public int Length { get; set; }

    }
    
    // Source: awsreportecscontainerinfo
    public class AwsReportEcsContainerInfoDto
    {
        [Required]
        [JsonProperty("arn")]
        public string Arn { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("exitCode")]
        public int? ExitCode { get; set; }

        [JsonProperty("reason")]
        public string? Reason { get; set; }

    }
    
    // Source: bg_articlealias
    public class BGArticleAliasDto
    {
        [Required]
        [JsonProperty("alias")]
        public string Alias { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceTime Created { get; set; }

    }
    
    // Source: bg_articleid
    public class BGArticleIdDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

    }
    
    // Source: bg_dates
    public class BGDatesDto
    {
        [Required]
        [JsonProperty("first")]
        public SpaceTime First { get; set; }

        [Required]
        [JsonProperty("last")]
        public SpaceTime Last { get; set; }

    }
    
    // Source: bg_stats
    public class BGStatsDto
    {
        [Required]
        [JsonProperty("totalBlogs")]
        public int TotalBlogs { get; set; }

        [Required]
        [JsonProperty("teams")]
        public List<Object0Dto> Teams { get; set; }

        [Required]
        [JsonProperty("projects")]
        public List<Object1Dto> Projects { get; set; }

        [Required]
        [JsonProperty("locations")]
        public List<Object2Dto> Locations { get; set; }

    }
    
    // Source: birthdayevent
    public class BirthdayEventDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberWithTeamDto Profile { get; set; }

        [Required]
        [JsonProperty("birthday")]
        public SpaceDate Birthday { get; set; }

    }
    
    // Source: booleancftype
    public class BooleanCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: booleancfvalue
    public class BooleanCFValueDto
         : CFValueDto
    {
        [JsonProperty("value")]
        public bool? Value { get; set; }

    }
    
    // Source: branchinfo
    public class BranchInfoDto
    {
        [Required]
        [JsonProperty("head")]
        public string Head { get; set; }

        [Required]
        [JsonProperty("ref")]
        public string Ref { get; set; }

    }
    
    // Source: buildproblemservicemessage
    public class BuildProblemServiceMessageDto
         : ServiceMessageDto
    {
        [Required]
        [JsonProperty("message")]
        public string Message { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: cautomationtaskprincipaldetails
    public class CAutomationTaskPrincipalDetailsDto
    {
        [Required]
        [JsonProperty("project")]
        public PRProjectDto Project { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

    }
    
    // Source: cbuiltinserviceprincipaldetails
    public class CBuiltInServicePrincipalDetailsDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

    }
    
    // Source: cexternalserviceprincipaldetails
    public class CExternalServicePrincipalDetailsDto
    {
        [Required]
        [JsonProperty("service")]
        public ESServiceDto Service { get; set; }

    }
    
    // Source: cfconstraint
    public class CFConstraintDto
    {
    }
    
    // Source: cftype
    public class CFTypeDto
    {
    }
    
    // Source: cfvalue
    public class CFValueDto
    {
    }
    
    // Source: cprincipal
    public class CPrincipalDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("details")]
        public CPrincipalDetailsDto? Details { get; set; }

    }
    
    // Source: cprincipaldetails
    public class CPrincipalDetailsDto
    {
    }
    
    // Source: cuserprincipaldetails
    public class CUserPrincipalDetailsDto
    {
        [Required]
        [JsonProperty("user")]
        public TDMemberProfileDto User { get; set; }

    }
    
    // Source: cuserwithemailprincipaldetails
    public class CUserWithEmailPrincipalDetailsDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("email")]
        public string Email { get; set; }

    }
    
    // Source: certainreactiontoitemrecord
    public class CertainReactionToItemRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("itemId")]
        public string ItemId { get; set; }

        [Required]
        [JsonProperty("reaction")]
        public ReactionTypeRecordDto Reaction { get; set; }

        [Required]
        [JsonProperty("count")]
        public int Count { get; set; }

        [Required]
        [JsonProperty("meReacted")]
        public bool MeReacted { get; set; }

        [Required]
        [JsonProperty("principals")]
        public List<CPrincipalDto> Principals { get; set; }

        [JsonProperty("order")]
        public long? Order { get; set; }

    }
    
    // Source: changeinreview
    public class ChangeInReviewDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("change")]
        public GitCommitChangeDto Change { get; set; }

        [Required]
        [JsonProperty("read")]
        public bool Read { get; set; }

    }
    
    // Source: channelitemrecord
    public class ChannelItemRecordDto
    {
        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("details")]
        public M2ItemContentDetailsDto? Details { get; set; }

        [Required]
        [JsonProperty("author")]
        public CPrincipalDto Author { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceTime Created { get; set; }

        [Required]
        [JsonProperty("time")]
        public long Time { get; set; }

        [JsonProperty("reactions")]
        public AllReactionsToItemRecordDto? Reactions { get; set; }

        [JsonProperty("thread")]
        public M2ChannelRecordDto? Thread { get; set; }

        [JsonProperty("projectedItem")]
        public ChannelItemRecordDto? ProjectedItem { get; set; }

        [JsonProperty("attachments")]
        public List<AttachmentInfoDto>? Attachments { get; set; }

        [JsonProperty("attachmentsInfos")]
        public List<AttachmentInfoDto>? AttachmentsInfos { get; set; }

        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [JsonProperty("edited")]
        public SpaceTime? Edited { get; set; }

    }
    
    // Source: channelitemsnapshot
    public class ChannelItemSnapshotDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("channelId")]
        public string? ChannelId { get; set; }

        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("details")]
        public M2ItemContentDetailsDto? Details { get; set; }

        [Required]
        [JsonProperty("author")]
        public CPrincipalDto Author { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceTime Created { get; set; }

        [Required]
        [JsonProperty("time")]
        public long Time { get; set; }

        [JsonProperty("attachments")]
        public List<AttachmentInfoDto>? Attachments { get; set; }

    }
    
    // Source: channelparticipant
    public class ChannelParticipantDto
    {
        [Required]
        [JsonProperty("principal")]
        public CPrincipalDto Principal { get; set; }

        [Required]
        [JsonProperty("messageCount")]
        public int MessageCount { get; set; }

    }
    
    // Source: channelspecificdefaults
    public class ChannelSpecificDefaultsDto
    {
        [Required]
        [JsonProperty("filter")]
        public NotificationFilter Filter { get; set; }

        [Required]
        [JsonProperty("push")]
        public bool Push { get; set; }

        [Required]
        [JsonProperty("email")]
        public M2EmailNotificationType Email { get; set; }

    }
    
    // Source: checklist
    public class ChecklistDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [JsonProperty("projectId")]
        public string? ProjectId { get; set; }

        [JsonProperty("owner")]
        public TDMemberProfileDto? Owner { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("root")]
        public PlanItemDto? Root { get; set; }

        [JsonProperty("rootTag")]
        public PlanningTagDto? RootTag { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [Required]
        [JsonProperty("totalItemsCount")]
        public int TotalItemsCount { get; set; }

        [Required]
        [JsonProperty("doneItemsCount")]
        public int DoneItemsCount { get; set; }

        [JsonProperty("updatedTime")]
        public SpaceTime? UpdatedTime { get; set; }

    }
    
    // Source: codediscussionaddedfeedevent
    public class CodeDiscussionAddedFeedEventDto
    {
        [Required]
        [JsonProperty("codeDiscussion")]
        public CodeDiscussionRecordDto CodeDiscussion { get; set; }

        [Required]
        [JsonProperty("codeReview")]
        public CodeReviewRecordDto CodeReview { get; set; }

    }
    
    // Source: codediscussionanchor
    public class CodeDiscussionAnchorDto
    {
        [Required]
        [JsonProperty("project")]
        public ProjectKeyDto Project { get; set; }

        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

        [JsonProperty("filename")]
        public string? Filename { get; set; }

        [JsonProperty("line")]
        public int? Line { get; set; }

        [JsonProperty("oldLine")]
        public int? OldLine { get; set; }

        [JsonProperty("interpolatedLineState")]
        public InterpolatedLineState? InterpolatedLineState { get; set; }

    }
    
    // Source: codediscussionrecord
    public class CodeDiscussionRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("projectId")]
        public string ProjectId { get; set; }

        [Required]
        [JsonProperty("anchor")]
        public CodeDiscussionAnchorDto Anchor { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceTime Created { get; set; }

        [Required]
        [JsonProperty("channel")]
        public M2ChannelRecordDto Channel { get; set; }

        [Required]
        [JsonProperty("resolved")]
        public bool Resolved { get; set; }

        [JsonProperty("snippet")]
        public CodeDiscussionSnippetDto? Snippet { get; set; }

        [JsonProperty("review")]
        public CodeReviewRecordDto? Review { get; set; }

        [JsonProperty("reviews")]
        public List<CodeReviewRecordDto>? Reviews { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

    }
    
    // Source: codediscussionsnippet
    public class CodeDiscussionSnippetDto
    {
    }
    
    // Source: codediscussionsnippet.inlinediffsnippet
    public class CodeDiscussionSnippetInlineDiffSnippetDto
         : CodeDiscussionSnippetDto
    {
        [Required]
        [JsonProperty("lines")]
        public List<InlineDiffLineDto> Lines { get; set; }

    }
    
    // Source: codediscussionsnippet.plainsnippet
    public class CodeDiscussionSnippetPlainSnippetDto
         : CodeDiscussionSnippetDto
    {
        [Required]
        [JsonProperty("lines")]
        public List<CodeLineDto> Lines { get; set; }

    }
    
    // Source: codeline
    public class CodeLineDto
    {
        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [Required]
        [JsonProperty("offset")]
        public int Offset { get; set; }

        [JsonProperty("syntax")]
        public List<SyntaxMarkupDto>? Syntax { get; set; }

    }
    
    // Source: codereviewdetailedinfo
    public class CodeReviewDetailedInfoDto
    {
        [Required]
        [JsonProperty("shortInfo")]
        public CodeReviewRecordDto ShortInfo { get; set; }

        [Required]
        [JsonProperty("commits")]
        public List<RevisionsInReviewDto> Commits { get; set; }

        [Required]
        [JsonProperty("lostCommits")]
        public List<RevisionsInReviewDto> LostCommits { get; set; }

        [Required]
        [JsonProperty("participants")]
        public List<CodeReviewParticipantDto> Participants { get; set; }

        [Required]
        [JsonProperty("branches")]
        public List<TrackedBranchesInReviewDto> Branches { get; set; }

        [Required]
        [JsonProperty("unresolvedDiscussions")]
        public int UnresolvedDiscussions { get; set; }

        [Required]
        [JsonProperty("projectHasMembers")]
        public bool ProjectHasMembers { get; set; }

    }
    
    // Source: codereviewdiscussionaddedfeedevent
    public class CodeReviewDiscussionAddedFeedEventDto
    {
        [Required]
        [JsonProperty("discussion")]
        public CodeReviewDiscussionRecordDto Discussion { get; set; }

    }
    
    // Source: codereviewdiscussionrecord
    public class CodeReviewDiscussionRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("review")]
        public CodeReviewRecordDto Review { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceTime Created { get; set; }

        [Required]
        [JsonProperty("channel")]
        public M2ChannelRecordDto Channel { get; set; }

        [Required]
        [JsonProperty("resolved")]
        public bool Resolved { get; set; }

    }
    
    // Source: codereviewparticipant
    public class CodeReviewParticipantDto
    {
        [Required]
        [JsonProperty("user")]
        public TDMemberProfileDto User { get; set; }

        [Required]
        [JsonProperty("role")]
        public CodeReviewParticipantRole Role { get; set; }

        [JsonProperty("state")]
        public CodeReviewParticipantState? State { get; set; }

    }
    
    // Source: codereviewrecord
    public class CodeReviewRecordDto
    {
    }
    
    // Source: codereviewwithcount
    public class CodeReviewWithCountDto
    {
        [Required]
        [JsonProperty("review")]
        public CodeReviewRecordDto Review { get; set; }

        [Required]
        [JsonProperty("messagesCount")]
        public int MessagesCount { get; set; }

        [Required]
        [JsonProperty("authors")]
        public List<GitCommitterProfileDto> Authors { get; set; }

    }
    
    // Source: codesnippetanchor
    public class CodeSnippetAnchorDto
    {
        [Required]
        [JsonProperty("projectKey")]
        public ProjectKeyDto ProjectKey { get; set; }

        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

        [Required]
        [JsonProperty("filename")]
        public string Filename { get; set; }

        [Required]
        [JsonProperty("lineStart")]
        public int LineStart { get; set; }

        [Required]
        [JsonProperty("lineEnd")]
        public int LineEnd { get; set; }

    }
    
    // Source: commitsetreviewrecord
    public class CommitSetReviewRecordDto
         : CodeReviewRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("project")]
        public ProjectKeyDto Project { get; set; }

        [Required]
        [JsonProperty("projectId")]
        public string ProjectId { get; set; }

        [Required]
        [JsonProperty("number")]
        public int Number { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("state")]
        public CodeReviewState State { get; set; }

        [JsonProperty("canBeReopened")]
        public bool? CanBeReopened { get; set; }

        [Required]
        [JsonProperty("createdAt")]
        public long CreatedAt { get; set; }

        [Required]
        [JsonProperty("createdBy")]
        public TDMemberProfileDto CreatedBy { get; set; }

        [Required]
        [JsonProperty("participants")]
        public List<CodeReviewParticipantDto> Participants { get; set; }

        [JsonProperty("feedChannel")]
        public M2ChannelRecordDto? FeedChannel { get; set; }

    }
    
    // Source: commitstatusdto
    public class CommitStatusDTODto
    {
        [Required]
        [JsonProperty("projectKey")]
        public ProjectKeyDto ProjectKey { get; set; }

        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("branch")]
        public string Branch { get; set; }

        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

        [Required]
        [JsonProperty("executionStatus")]
        public ExecutionStatus ExecutionStatus { get; set; }

        [Required]
        [JsonProperty("url")]
        public string Url { get; set; }

        [Required]
        [JsonProperty("externalServiceName")]
        public string ExternalServiceName { get; set; }

        [Required]
        [JsonProperty("taskName")]
        public string TaskName { get; set; }

        [Required]
        [JsonProperty("taskId")]
        public string TaskId { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

    }
    
    // Source: compilationendservicemessage
    public class CompilationEndServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: compilationstartservicemessage
    public class CompilationStartServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: containerpackagetype
    public class ContainerPackageTypeDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

    }
    
    // Source: counter
    public class CounterDto
    {
        [Required]
        [JsonProperty("resolved")]
        public int Resolved { get; set; }

        [Required]
        [JsonProperty("unresolved")]
        public int Unresolved { get; set; }

    }
    
    // Source: customcolumnvalueswithschemadata
    public class CustomColumnValuesWithSchemaDataDto
    {
    }
    
    // Source: customfield
    public class CustomFieldDto
    {
        [Required]
        [JsonProperty("extendedType")]
        public ExtendedTypeDto ExtendedType { get; set; }

        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

        [Required]
        [JsonProperty("type")]
        public CFTypeDto Type { get; set; }

        [JsonProperty("constraint")]
        public CFConstraintDto? Constraint { get; set; }

        [Required]
        [JsonProperty("required")]
        public bool Required { get; set; }

        [Required]
        [JsonProperty("private")]
        public bool Private { get; set; }

        [JsonProperty("access")]
        public AccessType? Access { get; set; }

        [Required]
        [JsonProperty("defaultValue")]
        public CFValueDto DefaultValue { get; set; }

        [Required]
        [JsonProperty("order")]
        public int Order { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

    }
    
    // Source: customfieldvalue
    public class CustomFieldValueDto
    {
        [Required]
        [JsonProperty("field")]
        public CustomFieldDto Field { get; set; }

        [Required]
        [JsonProperty("value")]
        public CFValueDto Value { get; set; }

    }
    
    // Source: customfieldsrecord
    public class CustomFieldsRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("values")]
        public List<CustomFieldValueDto> Values { get; set; }

    }
    
    // Source: dr_draft
    public class DRDraftDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [Required]
        [JsonProperty("modified")]
        public SpaceTime Modified { get; set; }

        [JsonProperty("published")]
        public ArticleRecordDto? Published { get; set; }

        [Required]
        [JsonProperty("shared")]
        public bool Shared { get; set; }

        [Required]
        [JsonProperty("accessOrdinal")]
        public int AccessOrdinal { get; set; }

        [JsonProperty("team")]
        public TDTeamDto? Team { get; set; }

        [JsonProperty("project")]
        public PRProjectDto? Project { get; set; }

        [JsonProperty("location")]
        public TDLocationDto? Location { get; set; }

        [Required]
        [JsonProperty("calendarEvent")]
        public bool CalendarEvent { get; set; }

        [JsonProperty("meeting")]
        public MeetingRecordDto? Meeting { get; set; }

        [JsonProperty("version")]
        public long? Version { get; set; }

    }
    
    // Source: dr_draftid
    public class DRDraftIdDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

    }
    
    // Source: dto_absencesubscription
    public class DTOAbsenceSubscriptionDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("location")]
        public TDLocationDto? Location { get; set; }

        [JsonProperty("team")]
        public TDTeamDto? Team { get; set; }

        [JsonProperty("reason")]
        public AbsenceReasonRecordDto? Reason { get; set; }

    }
    
    // Source: dto_fullrightwithouttype
    public class DTOFullRightWithoutTypeDto
    {
        [Required]
        [JsonProperty("code")]
        public string Code { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [Required]
        [JsonProperty("grantedForUsers")]
        public bool GrantedForUsers { get; set; }

        [JsonProperty("featureFlag")]
        public FeatureFlagDto? FeatureFlag { get; set; }

    }
    
    // Source: dto_limit
    public class DTOLimitDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("unit")]
        public LimitUnit Unit { get; set; }

        [Required]
        [JsonProperty("estimate")]
        public long Estimate { get; set; }

        [JsonProperty("softCap")]
        public long? SoftCap { get; set; }

        [JsonProperty("hardCap")]
        public long? HardCap { get; set; }

    }
    
    // Source: dto_right
    public class DTORightDto
    {
        [Required]
        [JsonProperty("typeCode")]
        public string TypeCode { get; set; }

        [Required]
        [JsonProperty("code")]
        public string Code { get; set; }

    }
    
    // Source: dto_righttype
    public class DTORightTypeDto
    {
        [Required]
        [JsonProperty("typeCode")]
        public string TypeCode { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

    }
    
    // Source: dto_righttype_right
    public class DTORightTypeRightDto
    {
        [Required]
        [JsonProperty("rightType")]
        public DTORightTypeDto RightType { get; set; }

        [Required]
        [JsonProperty("rights")]
        public List<DTOFullRightWithoutTypeDto> Rights { get; set; }

    }
    
    // Source: dto_rights
    public class DTORightsDto
    {
        [Required]
        [JsonProperty("rights")]
        public List<DTORightDto> Rights { get; set; }

    }
    
    // Source: dto_rightsdeps
    public class DTORightsDepsDto
    {
        [Required]
        [JsonProperty("code")]
        public string Code { get; set; }

        [Required]
        [JsonProperty("deps")]
        public List<string> Deps { get; set; }

    }
    
    // Source: dto_rightsgroup
    public class DTORightsGroupDto
    {
        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("priority")]
        public int Priority { get; set; }

        [Required]
        [JsonProperty("rights")]
        public List<DTORightDto> Rights { get; set; }

    }
    
    // Source: dto_rightswithhierarchy
    public class DTORightsWithHierarchyDto
    {
        [Required]
        [JsonProperty("rights")]
        public List<DTORightTypeRightDto> Rights { get; set; }

        [Required]
        [JsonProperty("rightsGroups")]
        public List<DTORightsGroupDto> RightsGroups { get; set; }

        [Required]
        [JsonProperty("deps")]
        public List<DTORightsDepsDto> Deps { get; set; }

    }
    
    // Source: datecfconstraint
    public class DateCFConstraintDto
         : CFConstraintDto
    {
        [JsonProperty("min")]
        public SpaceDate? Min { get; set; }

        [JsonProperty("max")]
        public SpaceDate? Max { get; set; }

        [JsonProperty("message")]
        public string? Message { get; set; }

    }
    
    // Source: datecftype
    public class DateCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: datecfvalue
    public class DateCFValueDto
         : CFValueDto
    {
        [JsonProperty("value")]
        public SpaceDate? Value { get; set; }

    }
    
    // Source: deletedattachment
    public class DeletedAttachmentDto
    {
        [Required]
        [JsonProperty("deletedIdentity")]
        public string DeletedIdentity { get; set; }

    }
    
    // Source: diffcontext
    public class DiffContextDto
    {
        [JsonProperty("left")]
        public DiffSideDto? Left { get; set; }

        [Required]
        [JsonProperty("right")]
        public DiffSideDto Right { get; set; }

    }
    
    // Source: diffside
    public class DiffSideDto
    {
    }
    
    // Source: diffside.empty
    public class DiffSideEmptyDto
         : DiffSideDto
    {
        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

    }
    
    // Source: diffside.nonempty
    public class DiffSideNonEmptyDto
         : DiffSideDto
    {
        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

        [Required]
        [JsonProperty("path")]
        public string Path { get; set; }

    }
    
    // Source: emavenrepositorysettings
    public class EMavenRepositorySettingsDto
    {
        [Required]
        [JsonProperty("id")]
        public long Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("permissions")]
        public List<string> Permissions { get; set; }

    }
    
    // Source: emavensettings
    public class EMavenSettingsDto
    {
        [Required]
        [JsonProperty("organizationId")]
        public long OrganizationId { get; set; }

        [Required]
        [JsonProperty("principalName")]
        public string PrincipalName { get; set; }

        [Required]
        [JsonProperty("principalInfo")]
        public string PrincipalInfo { get; set; }

        [Required]
        [JsonProperty("repositories")]
        public List<Object3Dto> Repositories { get; set; }

        [JsonProperty("storageLimit")]
        public DTOLimitDto? StorageLimit { get; set; }

    }
    
    // Source: eregistrysettings
    public class ERegistrySettingsDto
    {
        [Required]
        [JsonProperty("organizationId")]
        public long OrganizationId { get; set; }

        [Required]
        [JsonProperty("principalName")]
        public string PrincipalName { get; set; }

        [Required]
        [JsonProperty("principalInfo")]
        public string PrincipalInfo { get; set; }

        [Required]
        [JsonProperty("repositories")]
        public List<Object4Dto> Repositories { get; set; }

        [JsonProperty("storageLimit")]
        public DTOLimitDto? StorageLimit { get; set; }

    }
    
    // Source: erepositorysettings
    public class ERepositorySettingsDto
    {
        [Required]
        [JsonProperty("id")]
        public long Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("immutableTags")]
        public bool ImmutableTags { get; set; }

        [Required]
        [JsonProperty("permissions")]
        public List<string> Permissions { get; set; }

    }
    
    // Source: es_authmodule
    public class ESAuthModuleDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("ordinal")]
        public int Ordinal { get; set; }

        [Required]
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("iconDataURI")]
        public string? IconDataURI { get; set; }

        [Required]
        [JsonProperty("settings")]
        public ESAuthModuleSettingsDto Settings { get; set; }

    }
    
    // Source: es_authmodulesettings
    public class ESAuthModuleSettingsDto
    {
    }
    
    // Source: es_builtinauthmodulesettings
    public class ESBuiltinAuthModuleSettingsDto
         : ESPasswordAuthModuleSettingsDto
    {
        [Required]
        [JsonProperty("passwordStrengthPolicy")]
        public PasswordStrength PasswordStrengthPolicy { get; set; }

        [JsonProperty("domains")]
        public List<string>? Domains { get; set; }

    }
    
    // Source: es_builtinprofilelogindetails
    public class ESBuiltinProfileLoginDetailsDto
         : ESProfileLoginDetailsDto
    {
        [Required]
        [JsonProperty("passwordName")]
        public string PasswordName { get; set; }

        [JsonProperty("passwordChangeRequest")]
        public string? PasswordChangeRequest { get; set; }

    }
    
    // Source: es_defaultprofilelogindetails
    public class ESDefaultProfileLoginDetailsDto
         : ESProfileLoginDetailsDto
    {
        [JsonProperty("login")]
        public string? Login { get; set; }

        [JsonProperty("firstName")]
        public string? FirstName { get; set; }

        [JsonProperty("lastName")]
        public string? LastName { get; set; }

        [JsonProperty("email")]
        public string? Email { get; set; }

        [Required]
        [JsonProperty("emailVerified")]
        public bool EmailVerified { get; set; }

        [JsonProperty("avatarUrl")]
        public string? AvatarUrl { get; set; }

    }
    
    // Source: es_externalpasswordauthmodulesettings
    public class ESExternalPasswordAuthModuleSettingsDto
         : ESPasswordAuthModuleSettingsDto
    {
    }
    
    // Source: es_federatedauthmodulesettings
    public class ESFederatedAuthModuleSettingsDto
         : ESAuthModuleSettingsDto
    {
    }
    
    // Source: es_githubauthmodulesettings
    public class ESGithubAuthModuleSettingsDto
         : ESOAuth2AuthModuleSettingsDto
    {
        [Required]
        [JsonProperty("githubUrl")]
        public string GithubUrl { get; set; }

        [Required]
        [JsonProperty("clientId")]
        public string ClientId { get; set; }

        [Required]
        [JsonProperty("clientSecret")]
        public string ClientSecret { get; set; }

        [Required]
        [JsonProperty("registerNewUsers")]
        public bool RegisterNewUsers { get; set; }

        [Required]
        [JsonProperty("organizations")]
        public List<string> Organizations { get; set; }

    }
    
    // Source: es_githubprofilelogindetails
    public class ESGithubProfileLoginDetailsDto
         : ESProfileLoginDetailsDto
    {
        [JsonProperty("login")]
        public string? Login { get; set; }

        [JsonProperty("firstName")]
        public string? FirstName { get; set; }

        [JsonProperty("lastName")]
        public string? LastName { get; set; }

        [JsonProperty("email")]
        public string? Email { get; set; }

        [Required]
        [JsonProperty("emailVerified")]
        public bool EmailVerified { get; set; }

        [JsonProperty("avatarUrl")]
        public string? AvatarUrl { get; set; }

        [JsonProperty("organizations")]
        public List<string>? Organizations { get; set; }

    }
    
    // Source: es_googleauthmodulesettings
    public class ESGoogleAuthModuleSettingsDto
         : ESOAuth2AuthModuleSettingsDto
    {
        [Required]
        [JsonProperty("clientId")]
        public string ClientId { get; set; }

        [Required]
        [JsonProperty("clientSecret")]
        public string ClientSecret { get; set; }

        [Required]
        [JsonProperty("registerNewUsers")]
        public bool RegisterNewUsers { get; set; }

        [Required]
        [JsonProperty("domains")]
        public List<string> Domains { get; set; }

    }
    
    // Source: es_hiddenauthmodulesettings
    public class ESHiddenAuthModuleSettingsDto
         : ESAuthModuleSettingsDto
    {
    }
    
    // Source: es_hubauthmodulesettings
    public class ESHubAuthModuleSettingsDto
         : ESOAuth2AuthModuleSettingsDto
    {
        [Required]
        [JsonProperty("hubUrl")]
        public string HubUrl { get; set; }

        [Required]
        [JsonProperty("clientId")]
        public string ClientId { get; set; }

        [Required]
        [JsonProperty("clientSecret")]
        public string ClientSecret { get; set; }

        [JsonProperty("registerNewUsers")]
        public bool? RegisterNewUsers { get; set; }

        [JsonProperty("orgAuthProviderName")]
        public string? OrgAuthProviderName { get; set; }

        [JsonProperty("groups")]
        public List<string>? Groups { get; set; }

    }
    
    // Source: es_hubprofilelogindetails
    public class ESHubProfileLoginDetailsDto
         : ESProfileLoginDetailsDto
    {
        [JsonProperty("login")]
        public string? Login { get; set; }

        [JsonProperty("hubAuthModuleLogin")]
        public string? HubAuthModuleLogin { get; set; }

        [JsonProperty("firstName")]
        public string? FirstName { get; set; }

        [JsonProperty("lastName")]
        public string? LastName { get; set; }

        [JsonProperty("email")]
        public string? Email { get; set; }

        [Required]
        [JsonProperty("emailVerified")]
        public bool EmailVerified { get; set; }

        [JsonProperty("avatarUrl")]
        public string? AvatarUrl { get; set; }

    }
    
    // Source: es_ldapattributenames
    public class ESLdapAttributeNamesDto
    {
        [JsonProperty("fullNameAttributeName")]
        public string? FullNameAttributeName { get; set; }

        [JsonProperty("usernameAttributeName")]
        public string? UsernameAttributeName { get; set; }

        [JsonProperty("emailAttributeName")]
        public string? EmailAttributeName { get; set; }

        [JsonProperty("groupsAttributeName")]
        public string? GroupsAttributeName { get; set; }

    }
    
    // Source: es_ldapauthmodulesettings
    public class ESLdapAuthModuleSettingsDto
         : ESExternalPasswordAuthModuleSettingsDto
    {
        [Required]
        [JsonProperty("type")]
        public LdapModuleType Type { get; set; }

        [Required]
        [JsonProperty("registerNewUsers")]
        public bool RegisterNewUsers { get; set; }

        [Required]
        [JsonProperty("serverUrl")]
        public string ServerUrl { get; set; }

        [Required]
        [JsonProperty("connectionTimeout")]
        public int ConnectionTimeout { get; set; }

        [Required]
        [JsonProperty("readTimeout")]
        public int ReadTimeout { get; set; }

        [JsonProperty("sslKeystore")]
        public SSLKeystoreDto? SslKeystore { get; set; }

        [Required]
        [JsonProperty("teamMappings")]
        public List<ESTeamMappingDto> TeamMappings { get; set; }

        [Required]
        [JsonProperty("referralIgnored")]
        public bool ReferralIgnored { get; set; }

        [Required]
        [JsonProperty("filter")]
        public string Filter { get; set; }

        [Required]
        [JsonProperty("bindUserDN")]
        public string BindUserDN { get; set; }

        [Required]
        [JsonProperty("bindUserPassword")]
        public string BindUserPassword { get; set; }

        [Required]
        [JsonProperty("attributeNames")]
        public ESLdapAttributeNamesDto AttributeNames { get; set; }

    }
    
    // Source: es_oauth2authmodulesettings
    public class ESOAuth2AuthModuleSettingsDto
         : ESFederatedAuthModuleSettingsDto
    {
    }
    
    // Source: es_passwordauthmodulesettings
    public class ESPasswordAuthModuleSettingsDto
         : ESAuthModuleSettingsDto
    {
    }
    
    // Source: es_profilelogin
    public class ESProfileLoginDto
    {
        [Required]
        [JsonProperty("identifier")]
        public string Identifier { get; set; }

        [Required]
        [JsonProperty("authModule")]
        public ESAuthModuleDto AuthModule { get; set; }

        [Required]
        [JsonProperty("details")]
        public ESProfileLoginDetailsDto Details { get; set; }

        [JsonProperty("access")]
        public AccessRecordDto? Access { get; set; }

    }
    
    // Source: es_profilelogindetails
    public class ESProfileLoginDetailsDto
    {
    }
    
    // Source: es_service
    public class ESServiceDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("owner")]
        public TDMemberProfileDto? Owner { get; set; }

        [Required]
        [JsonProperty("type")]
        public OAuthServiceType Type { get; set; }

        [Required]
        [JsonProperty("clientId")]
        public string ClientId { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("redirectURIs")]
        public string RedirectURIs { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [JsonProperty("lastClientCredentialsAccess")]
        public AccessRecordDto? LastClientCredentialsAccess { get; set; }

    }
    
    // Source: es_teammapping
    public class ESTeamMappingDto
    {
        [Required]
        [JsonProperty("teamId")]
        public string TeamId { get; set; }

        [Required]
        [JsonProperty("externalGroupName")]
        public string ExternalGroupName { get; set; }

    }
    
    // Source: enumcftype
    public class EnumCFTypeDto
         : CFTypeDto
    {
        [Required]
        [JsonProperty("values")]
        public List<EnumValueDataDto> Values { get; set; }

    }
    
    // Source: enumcfvalue
    public class EnumCFValueDto
         : CFValueDto
    {
        [JsonProperty("value")]
        public EnumValueDataDto? Value { get; set; }

    }
    
    // Source: enumlistcftype
    public class EnumListCFTypeDto
         : CFTypeDto
    {
        [Required]
        [JsonProperty("values")]
        public List<EnumValueDataDto> Values { get; set; }

    }
    
    // Source: enumlistcfvalue
    public class EnumListCFValueDto
         : CFValueDto
    {
        [Required]
        [JsonProperty("values")]
        public List<EnumValueDataDto> Values { get; set; }

    }
    
    // Source: enumvaluedata
    public class EnumValueDataDto
    {
        [JsonProperty("id")]
        public string? Id { get; set; }

        [Required]
        [JsonProperty("value")]
        public string Value { get; set; }

    }
    
    // Source: errorservicemessage
    public class ErrorServiceMessageDto
         : ServiceMessageDto
    {
        [Required]
        [JsonProperty("message")]
        public string Message { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: extendedtype
    public class ExtendedTypeDto
    {
        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

        [Required]
        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

    }
    
    // Source: fts_blog
    public class FTSBlogDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("author")]
        public TDMemberProfileDto Author { get; set; }

        [Required]
        [JsonProperty("date")]
        public SpaceTime Date { get; set; }

        [Required]
        [JsonProperty("snippets")]
        public List<FTSSnippetDto> Snippets { get; set; }

        [JsonProperty("comments")]
        public List<FTSBlogCommentDto>? Comments { get; set; }

    }
    
    // Source: fts_blogcomment
    public class FTSBlogCommentDto
    {
        [Required]
        [JsonProperty("author")]
        public TDMemberProfileDto Author { get; set; }

        [Required]
        [JsonProperty("date")]
        public SpaceTime Date { get; set; }

        [Required]
        [JsonProperty("snippets")]
        public List<string> Snippets { get; set; }

    }
    
    // Source: fts_draft
    public class FTSDraftDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("author")]
        public TDMemberProfileDto Author { get; set; }

        [Required]
        [JsonProperty("date")]
        public SpaceTime Date { get; set; }

        [Required]
        [JsonProperty("snippets")]
        public List<FTSSnippetDto> Snippets { get; set; }

    }
    
    // Source: fts_profile
    public class FTSProfileDto
    {
        [Required]
        [JsonProperty("profile")]
        public FTSUserDto Profile { get; set; }

        [Required]
        [JsonProperty("snippets")]
        public List<FTSSnippetDto> Snippets { get; set; }

        [Required]
        [JsonProperty("member")]
        public TDMemberProfileDto Member { get; set; }

    }
    
    // Source: fts_snippet
    public class FTSSnippetDto
    {
        [Required]
        [JsonProperty("field")]
        public string Field { get; set; }

        [Required]
        [JsonProperty("snippet")]
        public List<string> Snippet { get; set; }

    }
    
    // Source: fts_team
    public class FTSTeamDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [Required]
        [JsonProperty("snippets")]
        public List<FTSSnippetDto> Snippets { get; set; }

    }
    
    // Source: fts_user
    public class FTSUserDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("username")]
        public string Username { get; set; }

        [Required]
        [JsonProperty("name")]
        public TDProfileNameDto Name { get; set; }

        [JsonProperty("avatar")]
        public string? Avatar { get; set; }

        [Required]
        [JsonProperty("languages")]
        public List<TDProfileNameDto> Languages { get; set; }

        [JsonProperty("notAMember")]
        public bool? NotAMember { get; set; }

    }
    
    // Source: featureflag
    public class FeatureFlagDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("description")]
        public string Description { get; set; }

    }
    
    // Source: feedevent
    public class FeedEventDto
    {
    }
    
    // Source: fileattachment
    public class FileAttachmentDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("sizeBytes")]
        public long SizeBytes { get; set; }

        [Required]
        [JsonProperty("filename")]
        public string Filename { get; set; }

    }
    
    // Source: filewithcount
    public class FileWithCountDto
    {
        [JsonProperty("name")]
        public string? Name { get; set; }

        [Required]
        [JsonProperty("count")]
        public CounterDto Count { get; set; }

    }
    
    // Source: fraction
    public class FractionDto
    {
        [Required]
        [JsonProperty("numerator")]
        public int Numerator { get; set; }

        [Required]
        [JsonProperty("denominator")]
        public int Denominator { get; set; }

    }
    
    // Source: fractioncftype
    public class FractionCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: fractioncfvalue
    public class FractionCFValueDto
         : CFValueDto
    {
        [JsonProperty("value")]
        public FractionDto? Value { get; set; }

    }
    
    // Source: generalpagehtmlmetadata
    public class GeneralPageHtmlMetadataDto
    {
        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("image")]
        public string? Image { get; set; }

    }
    
    // Source: gitauthorinfo
    public class GitAuthorInfoDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("email")]
        public string Email { get; set; }

    }
    
    // Source: gitcommitchange
    public class GitCommitChangeDto
    {
        [Required]
        [JsonProperty("changeType")]
        public GitCommitChangeType ChangeType { get; set; }

        [JsonProperty("old")]
        public GitFileDto? Old { get; set; }

        [JsonProperty("new")]
        public GitFileDto? New { get; set; }

        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

    }
    
    // Source: gitcommitinfo
    public class GitCommitInfoDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("repositoryName")]
        public string RepositoryName { get; set; }

        [Required]
        [JsonProperty("message")]
        public string Message { get; set; }

        [Required]
        [JsonProperty("authorDate")]
        public long AuthorDate { get; set; }

        [Required]
        [JsonProperty("commitDate")]
        public long CommitDate { get; set; }

        [Required]
        [JsonProperty("author")]
        public GitAuthorInfoDto Author { get; set; }

        [Required]
        [JsonProperty("committer")]
        public GitAuthorInfoDto Committer { get; set; }

        [JsonProperty("authorProfile")]
        public TDMemberProfileDto? AuthorProfile { get; set; }

        [Required]
        [JsonProperty("parents")]
        public List<string> Parents { get; set; }

        [Required]
        [JsonProperty("tags")]
        public List<string> Tags { get; set; }

        [Required]
        [JsonProperty("branches")]
        public List<BranchInfoDto> Branches { get; set; }

    }
    
    // Source: gitcommitwithgraph
    public class GitCommitWithGraphDto
    {
        [Required]
        [JsonProperty("commit")]
        public GitCommitInfoDto Commit { get; set; }

        [Required]
        [JsonProperty("reviews")]
        public List<CodeReviewRecordDto> Reviews { get; set; }

        [JsonProperty("layout")]
        public GitGraphLayoutLineDto? Layout { get; set; }

    }
    
    // Source: gitcommitterprofile
    public class GitCommitterProfileDto
    {
        [Required]
        [JsonProperty("author")]
        public string Author { get; set; }

        [Required]
        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("profile")]
        public TDMemberProfileDto? Profile { get; set; }

    }
    
    // Source: gitfile
    public class GitFileDto
    {
        [Required]
        [JsonProperty("commit")]
        public string Commit { get; set; }

        [Required]
        [JsonProperty("path")]
        public string Path { get; set; }

        [Required]
        [JsonProperty("blob")]
        public string Blob { get; set; }

        [Required]
        [JsonProperty("type")]
        public GitEntryType Type { get; set; }

    }
    
    // Source: gitgraphlayoutedge
    public class GitGraphLayoutEdgeDto
    {
        [Required]
        [JsonProperty("from")]
        public int From { get; set; }

        [Required]
        [JsonProperty("to")]
        public int To { get; set; }

        [Required]
        [JsonProperty("type")]
        public GitGraphEdgeType Type { get; set; }

        [Required]
        [JsonProperty("style")]
        public GitGraphEdgeLineStyle Style { get; set; }

        [Required]
        [JsonProperty("hasArrow")]
        public bool HasArrow { get; set; }

        [Required]
        [JsonProperty("color")]
        public int Color { get; set; }

    }
    
    // Source: gitgraphlayoutline
    public class GitGraphLayoutLineDto
    {
        [Required]
        [JsonProperty("nodes")]
        public List<GitGraphLayoutNodeDto> Nodes { get; set; }

        [Required]
        [JsonProperty("edges")]
        public List<GitGraphLayoutEdgeDto> Edges { get; set; }

    }
    
    // Source: gitgraphlayoutnode
    public class GitGraphLayoutNodeDto
    {
        [Required]
        [JsonProperty("pos")]
        public int Pos { get; set; }

        [Required]
        [JsonProperty("color")]
        public int Color { get; set; }

    }
    
    // Source: ha_deprecation
    public class HADeprecationDto
    {
        [Required]
        [JsonProperty("message")]
        public string Message { get; set; }

        [Required]
        [JsonProperty("since")]
        public string Since { get; set; }

        [Required]
        [JsonProperty("forRemoval")]
        public bool ForRemoval { get; set; }

    }
    
    // Source: ha_dto
    public class HADtoDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("fields")]
        public List<HADtoFieldDto> Fields { get; set; }

        [Required]
        [JsonProperty("hierarchyRole")]
        public HierarchyRole HierarchyRole { get; set; }

        [JsonProperty("extends")]
        public HADtoDto? Extends { get; set; }

        [Required]
        [JsonProperty("implements")]
        public List<HADtoDto> Implements { get; set; }

        [Required]
        [JsonProperty("inheritors")]
        public List<HADtoDto> Inheritors { get; set; }

        [JsonProperty("deprecation")]
        public HADeprecationDto? Deprecation { get; set; }

        [Required]
        [JsonProperty("record")]
        public bool Record { get; set; }

    }
    
    // Source: ha_dtofield
    public class HADtoFieldDto
    {
        [Required]
        [JsonProperty("field")]
        public HAFieldDto Field { get; set; }

        [Required]
        [JsonProperty("extension")]
        public bool Extension { get; set; }

    }
    
    // Source: ha_endpoint
    public class HAEndpointDto
    {
        [Required]
        [JsonProperty("resource")]
        public HAResourceDto Resource { get; set; }

        [Required]
        [JsonProperty("method")]
        public HAMethod Method { get; set; }

        [Required]
        [JsonProperty("parameters")]
        public List<HAParameterDto> Parameters { get; set; }

        [JsonProperty("requestBody")]
        public HATypeObjectDto? RequestBody { get; set; }

        [JsonProperty("responseBody")]
        public HATypeDto? ResponseBody { get; set; }

        [Required]
        [JsonProperty("path")]
        public HAPathDto Path { get; set; }

        [Required]
        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("doc")]
        public string? Doc { get; set; }

        [JsonProperty("deprecation")]
        public HADeprecationDto? Deprecation { get; set; }

    }
    
    // Source: ha_enum
    public class HAEnumDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("values")]
        public List<string> Values { get; set; }

        [JsonProperty("deprecation")]
        public HADeprecationDto? Deprecation { get; set; }

    }
    
    // Source: ha_field
    public class HAFieldDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("type")]
        public HATypeDto Type { get; set; }

        [JsonProperty("deprecation")]
        public HADeprecationDto? Deprecation { get; set; }

    }
    
    // Source: ha_model
    public class HAModelDto
    {
        [Required]
        [JsonProperty("dto")]
        public List<HADtoDto> Dto { get; set; }

        [Required]
        [JsonProperty("enums")]
        public List<HAEnumDto> Enums { get; set; }

        [Required]
        [JsonProperty("resources")]
        public List<HAResourceDto> Resources { get; set; }

    }
    
    // Source: ha_parameter
    public class HAParameterDto
    {
        [Required]
        [JsonProperty("field")]
        public HAFieldDto Field { get; set; }

        [Required]
        [JsonProperty("path")]
        public bool Path { get; set; }

    }
    
    // Source: ha_path
    public class HAPathDto
    {
        [Required]
        [JsonProperty("segments")]
        public List<HAPathSegmentDto> Segments { get; set; }

    }
    
    // Source: ha_pathsegment
    public class HAPathSegmentDto
    {
    }
    
    // Source: ha_pathsegment.const
    public class HAPathSegmentConstDto
         : HAPathSegmentDto
    {
        [Required]
        [JsonProperty("value")]
        public string Value { get; set; }

    }
    
    // Source: ha_pathsegment.prefixedvar
    public class HAPathSegmentPrefixedVarDto
         : HAPathSegmentDto
    {
        [Required]
        [JsonProperty("prefix")]
        public string Prefix { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

    }
    
    // Source: ha_pathsegment.var
    public class HAPathSegmentVarDto
         : HAPathSegmentDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

    }
    
    // Source: ha_resource
    public class HAResourceDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("path")]
        public HAPathDto Path { get; set; }

        [Required]
        [JsonProperty("displaySingular")]
        public string DisplaySingular { get; set; }

        [Required]
        [JsonProperty("displayPlural")]
        public string DisplayPlural { get; set; }

        [JsonProperty("parentResource")]
        public HAResourceDto? ParentResource { get; set; }

        [Required]
        [JsonProperty("nestedResources")]
        public List<HAResourceDto> NestedResources { get; set; }

        [Required]
        [JsonProperty("endpoints")]
        public List<HAEndpointDto> Endpoints { get; set; }

    }
    
    // Source: ha_type
    public class HATypeDto
    {
    }
    
    // Source: ha_type.array
    public class HATypeArrayDto
         : HATypeDto
    {
        [Required]
        [JsonProperty("elementType")]
        public HATypeDto ElementType { get; set; }

        [Required]
        [JsonProperty("nullable")]
        public bool Nullable { get; set; }

        [Required]
        [JsonProperty("optional")]
        public bool Optional { get; set; }

    }
    
    // Source: ha_type.dto
    public class HATypeDtoDto
         : HATypeDto
    {
        [Required]
        [JsonProperty("dto")]
        public HADtoDto Dto { get; set; }

        [Required]
        [JsonProperty("nullable")]
        public bool Nullable { get; set; }

        [Required]
        [JsonProperty("optional")]
        public bool Optional { get; set; }

    }
    
    // Source: ha_type.enum
    public class HATypeEnumDto
         : HATypeDto
    {
        [Required]
        [JsonProperty("enum")]
        public HAEnumDto Enum { get; set; }

        [Required]
        [JsonProperty("nullable")]
        public bool Nullable { get; set; }

        [Required]
        [JsonProperty("optional")]
        public bool Optional { get; set; }

    }
    
    // Source: ha_type.object
    public class HATypeObjectDto
         : HATypeDto
    {
        [Required]
        [JsonProperty("fields")]
        public List<HAFieldDto> Fields { get; set; }

        [Required]
        [JsonProperty("kind")]
        public HATypeObjectKind Kind { get; set; }

        [Required]
        [JsonProperty("nullable")]
        public bool Nullable { get; set; }

        [Required]
        [JsonProperty("optional")]
        public bool Optional { get; set; }

    }
    
    // Source: ha_type.primitive
    public class HATypePrimitiveDto
         : HATypeDto
    {
        [Required]
        [JsonProperty("primitive")]
        public HAPrimitive Primitive { get; set; }

        [Required]
        [JsonProperty("nullable")]
        public bool Nullable { get; set; }

        [Required]
        [JsonProperty("optional")]
        public bool Optional { get; set; }

    }
    
    // Source: ha_type.ref
    public class HATypeRefDto
         : HATypeDto
    {
        [Required]
        [JsonProperty("dto")]
        public HADtoDto Dto { get; set; }

        [Required]
        [JsonProperty("nullable")]
        public bool Nullable { get; set; }

        [Required]
        [JsonProperty("optional")]
        public bool Optional { get; set; }

    }
    
    // Source: htmlmetadata
    public class HtmlMetadataDto
    {
    }
    
    // Source: imageattachment
    public class ImageAttachmentDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string? Name { get; set; }

        [Required]
        [JsonProperty("width")]
        public int Width { get; set; }

        [Required]
        [JsonProperty("height")]
        public int Height { get; set; }

        [JsonProperty("previewBytes")]
        public string? PreviewBytes { get; set; }

    }
    
    // Source: inlinediffline
    public class InlineDiffLineDto
    {
        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("type")]
        public DiffLineType? Type { get; set; }

        [JsonProperty("oldLineNum")]
        public int? OldLineNum { get; set; }

        [JsonProperty("newLineNum")]
        public int? NewLineNum { get; set; }

        [Required]
        [JsonProperty("oldFileOffset")]
        public int OldFileOffset { get; set; }

        [Required]
        [JsonProperty("newFileOffset")]
        public int NewFileOffset { get; set; }

        [JsonProperty("syntax")]
        public List<SyntaxMarkupDto>? Syntax { get; set; }

        [JsonProperty("deletes")]
        public List<TextRangeDto>? Deletes { get; set; }

        [JsonProperty("inserts")]
        public List<TextRangeDto>? Inserts { get; set; }

    }
    
    // Source: intcfconstraint
    public class IntCFConstraintDto
         : CFConstraintDto
    {
        [JsonProperty("min")]
        public int? Min { get; set; }

        [JsonProperty("max")]
        public int? Max { get; set; }

        [JsonProperty("message")]
        public string? Message { get; set; }

    }
    
    // Source: intcftype
    public class IntCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: intcfvalue
    public class IntCFValueDto
         : CFValueDto
    {
        [JsonProperty("value")]
        public int? Value { get; set; }

    }
    
    // Source: intlistcftype
    public class IntListCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: intlistcfvalue
    public class IntListCFValueDto
         : CFValueDto
    {
        [Required]
        [JsonProperty("values")]
        public List<int> Values { get; set; }

    }
    
    // Source: invitation
    public class InvitationDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("expiresAt")]
        public SpaceTime ExpiresAt { get; set; }

        [Required]
        [JsonProperty("inviteeEmail")]
        public string InviteeEmail { get; set; }

        [Required]
        [JsonProperty("inviteeEmailBlocked")]
        public bool InviteeEmailBlocked { get; set; }

        [JsonProperty("inviteeEmailBlockedReason")]
        public string? InviteeEmailBlockedReason { get; set; }

        [JsonProperty("inviteeFirstName")]
        public string? InviteeFirstName { get; set; }

        [JsonProperty("inviteeLastName")]
        public string? InviteeLastName { get; set; }

        [JsonProperty("invitee")]
        public TDMemberProfileDto? Invitee { get; set; }

        [Required]
        [JsonProperty("inviter")]
        public CPrincipalDto Inviter { get; set; }

        [JsonProperty("team")]
        public TDTeamDto? Team { get; set; }

        [JsonProperty("role")]
        public TDRoleDto? Role { get; set; }

        [JsonProperty("revoked")]
        public bool? Revoked { get; set; }

    }
    
    // Source: issue
    public class IssueDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("projectId")]
        public string ProjectId { get; set; }

        [Required]
        [JsonProperty("number")]
        public int Number { get; set; }

        [Required]
        [JsonProperty("createdBy")]
        public CPrincipalDto CreatedBy { get; set; }

        [Required]
        [JsonProperty("creationTime")]
        public SpaceTime CreationTime { get; set; }

        [JsonProperty("assignee")]
        public TDMemberProfileDto? Assignee { get; set; }

        [Required]
        [JsonProperty("status")]
        public IssueStatusDto Status { get; set; }

        [JsonProperty("dueDate")]
        public SpaceDate? DueDate { get; set; }

        [Required]
        [JsonProperty("tags")]
        public List<PlanningTagDto> Tags { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [Required]
        [JsonProperty("channel")]
        public M2ChannelRecordDto Channel { get; set; }

        [Required]
        [JsonProperty("attachments")]
        public List<AttachmentInfoDto> Attachments { get; set; }

    }
    
    // Source: issueassigneechangeddetails
    public class IssueAssigneeChangedDetailsDto
    {
        [JsonProperty("oldAssignee")]
        public TDMemberProfileDto? OldAssignee { get; set; }

        [JsonProperty("newAssignee")]
        public TDMemberProfileDto? NewAssignee { get; set; }

    }
    
    // Source: issueattachmentschangeddetails
    public class IssueAttachmentsChangedDetailsDto
    {
        [JsonProperty("addedNames")]
        public List<string>? AddedNames { get; set; }

        [JsonProperty("removedNames")]
        public List<string>? RemovedNames { get; set; }

    }
    
    // Source: issuechangedm2details
    public class IssueChangedM2DetailsDto
    {
    }
    
    // Source: issuecreateddetails
    public class IssueCreatedDetailsDto
    {
    }
    
    // Source: issuedeleteddetails
    public class IssueDeletedDetailsDto
    {
    }
    
    // Source: issuedescriptionchangeddetails
    public class IssueDescriptionChangedDetailsDto
    {
        [JsonProperty("oldDescription")]
        public string? OldDescription { get; set; }

        [JsonProperty("newDescription")]
        public string? NewDescription { get; set; }

    }
    
    // Source: issueduedatechangeddetails
    public class IssueDueDateChangedDetailsDto
    {
        [JsonProperty("oldDueDate")]
        public SpaceDate? OldDueDate { get; set; }

        [JsonProperty("newDueDate")]
        public SpaceDate? NewDueDate { get; set; }

    }
    
    // Source: issuestatus
    public class IssueStatusDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("resolved")]
        public bool Resolved { get; set; }

        [Required]
        [JsonProperty("color")]
        public string Color { get; set; }

    }
    
    // Source: issuestatuschangeddetails
    public class IssueStatusChangedDetailsDto
    {
        [Required]
        [JsonProperty("oldStatus")]
        public IssueStatusDto OldStatus { get; set; }

        [Required]
        [JsonProperty("newStatus")]
        public IssueStatusDto NewStatus { get; set; }

    }
    
    // Source: issuestatusdata
    public class IssueStatusDataDto
    {
        [JsonProperty("existingId")]
        public string? ExistingId { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("resolved")]
        public bool Resolved { get; set; }

        [Required]
        [JsonProperty("color")]
        public string Color { get; set; }

    }
    
    // Source: issuestatuswithusages
    public class IssueStatusWithUsagesDto
    {
        [Required]
        [JsonProperty("status")]
        public IssueStatusDto Status { get; set; }

        [Required]
        [JsonProperty("usages")]
        public int Usages { get; set; }

    }
    
    // Source: issuetagschangeddetails
    public class IssueTagsChangedDetailsDto
    {
        [JsonProperty("addedTags")]
        public List<PlanningTagDto>? AddedTags { get; set; }

        [JsonProperty("removedTags")]
        public List<PlanningTagDto>? RemovedTags { get; set; }

    }
    
    // Source: issuetitlechangeddetails
    public class IssueTitleChangedDetailsDto
    {
        [Required]
        [JsonProperty("oldTitle")]
        public string OldTitle { get; set; }

        [Required]
        [JsonProperty("newTitle")]
        public string NewTitle { get; set; }

    }
    
    // Source: jobinfo
    public class JobInfoDto
    {
        [Required]
        [JsonProperty("parentExecutionId")]
        public string ParentExecutionId { get; set; }

        [Required]
        [JsonProperty("jobExecutionId")]
        public string JobExecutionId { get; set; }

    }
    
    // Source: lastchanges
    public class LastChangesDto
    {
        [Required]
        [JsonProperty("lastChanges")]
        public List<RevisionInfoDto> LastChanges { get; set; }

        [Required]
        [JsonProperty("totalChanges")]
        public int TotalChanges { get; set; }

    }
    
    // Source: linkpreview
    public class LinkPreviewDto
    {
    }
    
    // Source: m2absenceitemapprovedeletedcontent
    public class M2AbsenceItemApproveDeletedContentDto
    {
        [Required]
        [JsonProperty("absence")]
        public AbsenceRecordDto Absence { get; set; }

        [Required]
        [JsonProperty("by")]
        public TDMemberProfileDto By { get; set; }

        [Required]
        [JsonProperty("approve")]
        public bool Approve { get; set; }

    }
    
    // Source: m2absenceitemapprovedcontent
    public class M2AbsenceItemApprovedContentDto
    {
        [Required]
        [JsonProperty("absence")]
        public AbsenceRecordDto Absence { get; set; }

        [Required]
        [JsonProperty("by")]
        public TDMemberProfileDto By { get; set; }

        [Required]
        [JsonProperty("approve")]
        public bool Approve { get; set; }

    }
    
    // Source: m2absenceitemcontent
    public class M2AbsenceItemContentDto
    {
        [Required]
        [JsonProperty("absence")]
        public AbsenceRecordDto Absence { get; set; }

    }
    
    // Source: m2absenceitemdeletedcontent
    public class M2AbsenceItemDeletedContentDto
    {
        [Required]
        [JsonProperty("absence")]
        public AbsenceRecordDto Absence { get; set; }

    }
    
    // Source: m2absenceitemupdatedcontent
    public class M2AbsenceItemUpdatedContentDto
    {
        [Required]
        [JsonProperty("absence")]
        public AbsenceRecordDto Absence { get; set; }

        [JsonProperty("reason")]
        public Modification<AbsenceReasonRecordDto>? Reason { get; set; }

        [JsonProperty("description")]
        public Modification<string>? Description { get; set; }

        [JsonProperty("since")]
        public Modification<SpaceDate>? Since { get; set; }

        [JsonProperty("till")]
        public Modification<SpaceDate>? Till { get; set; }

    }
    
    // Source: m2blogitemcontent
    public class M2BlogItemContentDto
    {
        [Required]
        [JsonProperty("article")]
        public ArticleRecordDto Article { get; set; }

        [Required]
        [JsonProperty("articleContent")]
        public ArticleContentRecordDto ArticleContent { get; set; }

        [Required]
        [JsonProperty("articleDetails")]
        public ArticleDetailsRecordDto ArticleDetails { get; set; }

        [Required]
        [JsonProperty("articleChannel")]
        public ArticleChannelRecordDto ArticleChannel { get; set; }

    }
    
    // Source: m2channelarchiveditemdetails
    public class M2ChannelArchivedItemDetailsDto
    {
    }
    
    // Source: m2channelcontact
    public class M2ChannelContactDto
    {
        [Required]
        [JsonProperty("defaultName")]
        public string DefaultName { get; set; }

        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("ext")]
        public M2ChannelContactInfoDto? Ext { get; set; }

    }
    
    // Source: m2channelcontactarticle
    public class M2ChannelContactArticleDto
    {
        [Required]
        [JsonProperty("article")]
        public ArticleRecordDto Article { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

    }
    
    // Source: m2channelcontactinfo
    public class M2ChannelContactInfoDto
    {
    }
    
    // Source: m2channelcontactobsolete
    public class M2ChannelContactObsoleteDto
    {
        [JsonProperty("cause")]
        public M2ObsoleteCause? Cause { get; set; }

    }
    
    // Source: m2channelcontactquickinfodefault
    public class M2ChannelContactQuickInfoDefaultDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

    }
    
    // Source: m2channelcontactthread
    public class M2ChannelContactThreadDto
    {
        [Required]
        [JsonProperty("parent")]
        public M2ChannelRecordDto Parent { get; set; }

        [JsonProperty("text")]
        public string? Text { get; set; }

        [JsonProperty("messageId")]
        public string? MessageId { get; set; }

        [JsonProperty("author")]
        public TDMemberProfileDto? Author { get; set; }

        [JsonProperty("messageAuthor")]
        public CPrincipalDto? MessageAuthor { get; set; }

        [JsonProperty("attachments")]
        public string? Attachments { get; set; }

    }
    
    // Source: m2channelcontentarticle
    public class M2ChannelContentArticleDto
    {
        [Required]
        [JsonProperty("article")]
        public ArticleRecordDto Article { get; set; }

        [Required]
        [JsonProperty("articleContent")]
        public ArticleContentRecordDto ArticleContent { get; set; }

    }
    
    // Source: m2channelcontentcodediscussion
    public class M2ChannelContentCodeDiscussionDto
    {
        [Required]
        [JsonProperty("codeDiscussionId")]
        public string CodeDiscussionId { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

        [JsonProperty("codeDiscussion")]
        public CodeDiscussionRecordDto? CodeDiscussion { get; set; }

    }
    
    // Source: m2channelcontentcodereviewdiscussion
    public class M2ChannelContentCodeReviewDiscussionDto
    {
        [Required]
        [JsonProperty("codeReviewDiscussion")]
        public string CodeReviewDiscussion { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

    }
    
    // Source: m2channelcontentcodereviewfeed
    public class M2ChannelContentCodeReviewFeedDto
    {
        [Required]
        [JsonProperty("codeReviewId")]
        public string CodeReviewId { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

        [JsonProperty("codeReview")]
        public CodeReviewRecordDto? CodeReview { get; set; }

    }
    
    // Source: m2channelcontentinfo
    public class M2ChannelContentInfoDto
    {
    }
    
    // Source: m2channelcontentlocation
    public class M2ChannelContentLocationDto
    {
        [Required]
        [JsonProperty("location")]
        public TDLocationDto Location { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

    }
    
    // Source: m2channelcontentmember
    public class M2ChannelContentMemberDto
    {
        [Required]
        [JsonProperty("member")]
        public TDMemberProfileDto Member { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

        [JsonProperty("memberAbsences")]
        public ProfileAbsencesRecordDto? MemberAbsences { get; set; }

        [JsonProperty("memberTeams")]
        public ProfileMembershipRecordDto? MemberTeams { get; set; }

    }
    
    // Source: m2channelcontentmembership
    public class M2ChannelContentMembershipDto
    {
    }
    
    // Source: m2channelcontentmention
    public class M2ChannelContentMentionDto
    {
        [Required]
        [JsonProperty("record")]
        public ChannelItemRecordDto Record { get; set; }

        [Required]
        [JsonProperty("parent")]
        public M2ChannelRecordDto Parent { get; set; }

    }
    
    // Source: m2channelcontentnamedprivatechannel
    public class M2ChannelContentNamedPrivateChannelDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto? NotificationDefaults { get; set; }

    }
    
    // Source: m2channelcontentrecord
    public class M2ChannelContentRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("content")]
        public M2ChannelContentInfoDto Content { get; set; }

    }
    
    // Source: m2channelcontentteam
    public class M2ChannelContentTeamDto
    {
        [Required]
        [JsonProperty("team")]
        public TDTeamDto Team { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

    }
    
    // Source: m2channelcontentthread
    public class M2ChannelContentThreadDto
    {
        [Required]
        [JsonProperty("record")]
        public ChannelItemRecordDto Record { get; set; }

        [Required]
        [JsonProperty("parent")]
        public M2ChannelRecordDto Parent { get; set; }

    }
    
    // Source: m2channelcreateditemdetails
    public class M2ChannelCreatedItemDetailsDto
    {
    }
    
    // Source: m2channelfeedintroitemdetails
    public class M2ChannelFeedIntroItemDetailsDto
    {
    }
    
    // Source: m2channelissueinfo
    public class M2ChannelIssueInfoDto
    {
        [JsonProperty("projectKey")]
        public ProjectKeyDto? ProjectKey { get; set; }

        [Required]
        [JsonProperty("issue")]
        public IssueDto Issue { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

    }
    
    // Source: m2channelrecord
    public class M2ChannelRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("contact")]
        public M2ChannelContactDto Contact { get; set; }

        [Required]
        [JsonProperty("totalMessages")]
        public int TotalMessages { get; set; }

        [JsonProperty("lastMessage")]
        public MessageInfoDto? LastMessage { get; set; }

        [JsonProperty("authors")]
        public List<TDMemberProfileDto>? Authors { get; set; }

        [JsonProperty("commentAuthors")]
        public List<CPrincipalDto>? CommentAuthors { get; set; }

        [JsonProperty("participants")]
        public List<ChannelParticipantDto>? Participants { get; set; }

        [JsonProperty("channelArchived")]
        public bool? ChannelArchived { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("content")]
        public M2ChannelContentInfoDto Content { get; set; }

    }
    
    // Source: m2channelrestoreditemdetails
    public class M2ChannelRestoredItemDetailsDto
    {
    }
    
    // Source: m2drafteditoraddeditemcontent
    public class M2DraftEditorAddedItemContentDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

    }
    
    // Source: m2drafteditorteamaddeditemcontent
    public class M2DraftEditorTeamAddedItemContentDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("team")]
        public TDTeamDto Team { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

    }
    
    // Source: m2externalstatusfailureitemcontent
    public class M2ExternalStatusFailureItemContentDto
    {
        [JsonProperty("projectId")]
        public string? ProjectId { get; set; }

        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("branch")]
        public string Branch { get; set; }

        [JsonProperty("revisionInfo")]
        public RevisionAuthorInfoDto? RevisionInfo { get; set; }

        [JsonProperty("changesInfo")]
        public LastChangesDto? ChangesInfo { get; set; }

        [Required]
        [JsonProperty("url")]
        public string Url { get; set; }

        [Required]
        [JsonProperty("externalServiceName")]
        public string ExternalServiceName { get; set; }

        [Required]
        [JsonProperty("taskName")]
        public string TaskName { get; set; }

        [JsonProperty("timestamp")]
        public long? Timestamp { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

    }
    
    // Source: m2externalstatussucceeditemcontent
    public class M2ExternalStatusSucceedItemContentDto
    {
        [JsonProperty("projectId")]
        public string? ProjectId { get; set; }

        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("branch")]
        public string Branch { get; set; }

        [JsonProperty("revisionInfo")]
        public RevisionAuthorInfoDto? RevisionInfo { get; set; }

        [JsonProperty("changesInfo")]
        public LastChangesDto? ChangesInfo { get; set; }

        [Required]
        [JsonProperty("url")]
        public string Url { get; set; }

        [Required]
        [JsonProperty("externalServiceName")]
        public string ExternalServiceName { get; set; }

        [Required]
        [JsonProperty("taskName")]
        public string TaskName { get; set; }

        [JsonProperty("timestamp")]
        public long? Timestamp { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

    }
    
    // Source: m2itemcontentdetails
    public class M2ItemContentDetailsDto
    {
    }
    
    // Source: m2maintenanceactioncontent
    public class M2MaintenanceActionContentDto
    {
        [Required]
        [JsonProperty("action")]
        public string Action { get; set; }

        [Required]
        [JsonProperty("success")]
        public bool Success { get; set; }

        [Required]
        [JsonProperty("details")]
        public string Details { get; set; }

    }
    
    // Source: m2membercontent
    public class M2MemberContentDto
    {
    }
    
    // Source: m2memberjoinscontent
    public class M2MemberJoinsContentDto
         : M2MemberContentDto
    {
        [Required]
        [JsonProperty("member")]
        public TDMemberProfileDto Member { get; set; }

    }
    
    // Source: m2memberleavescontent
    public class M2MemberLeavesContentDto
         : M2MemberContentDto
    {
        [Required]
        [JsonProperty("member")]
        public TDMemberProfileDto Member { get; set; }

    }
    
    // Source: m2membershipcontent
    public class M2MembershipContentDto
    {
    }
    
    // Source: m2membershipcreatedcontent
    public class M2MembershipCreatedContentDto
         : M2MembershipContentDto
    {
        [Required]
        [JsonProperty("membership")]
        public TDMembershipDto Membership { get; set; }

    }
    
    // Source: m2membershiprequestedcontent
    public class M2MembershipRequestedContentDto
         : M2MembershipContentDto
    {
        [Required]
        [JsonProperty("membership")]
        public TDMembershipDto Membership { get; set; }

        [Required]
        [JsonProperty("leave")]
        public bool Leave { get; set; }

    }
    
    // Source: m2membershipterminatedcontent
    public class M2MembershipTerminatedContentDto
         : M2MembershipContentDto
    {
        [Required]
        [JsonProperty("membership")]
        public TDMembershipDto Membership { get; set; }

    }
    
    // Source: m2packagecontentdetails
    public class M2PackageContentDetailsDto
    {
    }
    
    // Source: m2packagecreateddetails
    public class M2PackageCreatedDetailsDto
    {
        [Required]
        [JsonProperty("pkg")]
        public PackageVersionInfoDto Pkg { get; set; }

    }
    
    // Source: m2packagedeleteddetails
    public class M2PackageDeletedDetailsDto
    {
        [Required]
        [JsonProperty("pkg")]
        public PackageVersionInfoDto Pkg { get; set; }

    }
    
    // Source: m2pollcontent
    public class M2PollContentDto
    {
        [Required]
        [JsonProperty("poll")]
        public PollRecordDto Poll { get; set; }

    }
    
    // Source: m2sharedchannelcontent
    public class M2SharedChannelContentDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("group")]
        public string Group { get; set; }

        [Required]
        [JsonProperty("access")]
        public M2Access Access { get; set; }

        [Required]
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("membersCounter")]
        public int? MembersCounter { get; set; }

        [Required]
        [JsonProperty("notificationDefaults")]
        public ChannelSpecificDefaultsDto NotificationDefaults { get; set; }

        [JsonProperty("teams")]
        public List<TDTeamDto>? Teams { get; set; }

        [JsonProperty("canEdit")]
        public bool? CanEdit { get; set; }

    }
    
    // Source: m2taskexecutionfailureitemcontent
    public class M2TaskExecutionFailureItemContentDto
    {
        [Required]
        [JsonProperty("taskExecutionId")]
        public string TaskExecutionId { get; set; }

        [Required]
        [JsonProperty("taskName")]
        public string TaskName { get; set; }

        [JsonProperty("taskId")]
        public string? TaskId { get; set; }

        [Required]
        [JsonProperty("repoName")]
        public string RepoName { get; set; }

        [Required]
        [JsonProperty("branchName")]
        public string BranchName { get; set; }

        [Required]
        [JsonProperty("project")]
        public ProjectKeyDto Project { get; set; }

        [Required]
        [JsonProperty("testsSummary")]
        public TestsSummaryDto TestsSummary { get; set; }

    }
    
    // Source: m2taskexecutionsucceeditemcontent
    public class M2TaskExecutionSucceedItemContentDto
    {
        [Required]
        [JsonProperty("taskExecutionId")]
        public string TaskExecutionId { get; set; }

        [Required]
        [JsonProperty("taskName")]
        public string TaskName { get; set; }

        [JsonProperty("taskId")]
        public string? TaskId { get; set; }

        [Required]
        [JsonProperty("repoName")]
        public string RepoName { get; set; }

        [Required]
        [JsonProperty("branchName")]
        public string BranchName { get; set; }

        [Required]
        [JsonProperty("project")]
        public ProjectKeyDto Project { get; set; }

    }
    
    // Source: m2textitemcontent
    public class M2TextItemContentDto
    {
        [Required]
        [JsonProperty("markdown")]
        public bool Markdown { get; set; }

    }
    
    // Source: m2userleftchannel
    public class M2UserLeftChannelDto
    {
    }
    
    // Source: mavenpackagetype
    public class MavenPackageTypeDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

    }
    
    // Source: meinfo
    public class MeInfoDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

        [JsonProperty("profilePic")]
        public string? ProfilePic { get; set; }

        [Required]
        [JsonProperty("preferredLanguage")]
        public TDLanguageDto PreferredLanguage { get; set; }

        [Required]
        [JsonProperty("englishLanguage")]
        public TDLanguageDto EnglishLanguage { get; set; }

        [Required]
        [JsonProperty("navBarProjects")]
        public List<string> NavBarProjects { get; set; }

        [Required]
        [JsonProperty("firstDayOfWeek")]
        public int FirstDayOfWeek { get; set; }

        [JsonProperty("themeName")]
        public string? ThemeName { get; set; }

    }
    
    // Source: meetingrecord
    public class MeetingRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("starts")]
        public SpaceTime Starts { get; set; }

        [Required]
        [JsonProperty("finishes")]
        public SpaceTime Finishes { get; set; }

        [JsonProperty("timezone")]
        public ATimeZoneDto? Timezone { get; set; }

        [Required]
        [JsonProperty("allDay")]
        public bool AllDay { get; set; }

        [Required]
        [JsonProperty("rooms")]
        public List<TDLocationDto> Rooms { get; set; }

        [Required]
        [JsonProperty("participants")]
        public List<ParticipantDto> Participants { get; set; }

        [JsonProperty("article")]
        public ArticleRecordDto? Article { get; set; }

    }
    
    // Source: membersaddeditemdetails
    public class MembersAddedItemDetailsDto
    {
        [Required]
        [JsonProperty("principals")]
        public List<CPrincipalDto> Principals { get; set; }

        [Required]
        [JsonProperty("othersDisplayNames")]
        public List<string> OthersDisplayNames { get; set; }

    }
    
    // Source: membershipevent
    public class MembershipEventDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

        [Required]
        [JsonProperty("membership")]
        public List<TDMembershipDto> Membership { get; set; }

    }
    
    // Source: mergerequestbranch
    public class MergeRequestBranchDto
    {
        [Required]
        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [Required]
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [Required]
        [JsonProperty("deleted")]
        public bool Deleted { get; set; }

    }
    
    // Source: mergerequestbranchdeletedevent
    public class MergeRequestBranchDeletedEventDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("branch")]
        public string Branch { get; set; }

        [Required]
        [JsonProperty("branchType")]
        public MergeRequestBranchType BranchType { get; set; }

    }
    
    // Source: mergerequestbranchpair
    public class MergeRequestBranchPairDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("sourceBranch")]
        public string SourceBranch { get; set; }

        [Required]
        [JsonProperty("targetBranch")]
        public string TargetBranch { get; set; }

        [Required]
        [JsonProperty("sourceBranchRef")]
        public string SourceBranchRef { get; set; }

        [JsonProperty("sourceBranchInfo")]
        public MergeRequestBranchDto? SourceBranchInfo { get; set; }

        [JsonProperty("targetBranchInfo")]
        public MergeRequestBranchDto? TargetBranchInfo { get; set; }

    }
    
    // Source: mergerequestbranchrestoredevent
    public class MergeRequestBranchRestoredEventDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("branch")]
        public string Branch { get; set; }

        [Required]
        [JsonProperty("branchType")]
        public MergeRequestBranchType BranchType { get; set; }

    }
    
    // Source: mergerequestmergedevent
    public class MergeRequestMergedEventDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("sourceBranch")]
        public string SourceBranch { get; set; }

        [Required]
        [JsonProperty("targetBranch")]
        public string TargetBranch { get; set; }

    }
    
    // Source: mergerequestrecord
    public class MergeRequestRecordDto
         : CodeReviewRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("project")]
        public ProjectKeyDto Project { get; set; }

        [Required]
        [JsonProperty("projectId")]
        public string ProjectId { get; set; }

        [Required]
        [JsonProperty("number")]
        public int Number { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("state")]
        public CodeReviewState State { get; set; }

        [JsonProperty("canBeReopened")]
        public bool? CanBeReopened { get; set; }

        [Required]
        [JsonProperty("createdAt")]
        public long CreatedAt { get; set; }

        [Required]
        [JsonProperty("createdBy")]
        public TDMemberProfileDto CreatedBy { get; set; }

        [Required]
        [JsonProperty("participants")]
        public List<CodeReviewParticipantDto> Participants { get; set; }

        [JsonProperty("feedChannel")]
        public M2ChannelRecordDto? FeedChannel { get; set; }

        [Required]
        [JsonProperty("branchPairs")]
        public List<MergeRequestBranchPairDto> BranchPairs { get; set; }

    }
    
    // Source: messageinfo
    public class MessageInfoDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [Required]
        [JsonProperty("time")]
        public long Time { get; set; }

        [Required]
        [JsonProperty("author")]
        public CPrincipalDto Author { get; set; }

        [JsonProperty("attachments")]
        public string? Attachments { get; set; }

    }
    
    // Source: namedservicemessage
    public class NamedServiceMessageDto
         : ServiceMessageDto
    {
    }
    
    // Source: nonworkingdays
    public class NonWorkingDaysDto
    {
        [Required]
        [JsonProperty("since")]
        public SpaceDate Since { get; set; }

        [Required]
        [JsonProperty("till")]
        public SpaceDate Till { get; set; }

        [Required]
        [JsonProperty("startsEarlier")]
        public bool StartsEarlier { get; set; }

        [Required]
        [JsonProperty("endsLater")]
        public bool EndsLater { get; set; }

    }
    
    // Source: nonworkingdaysevent
    public class NonWorkingDaysEventDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

        [Required]
        [JsonProperty("days")]
        public List<NonWorkingDaysDto> Days { get; set; }

    }
    
    // Source: normalizedtestservicemessage
    public class NormalizedTestServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("status")]
        public NormalizedTestServiceMessageStatus Status { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

        [JsonProperty("duration")]
        public long? Duration { get; set; }

        [JsonProperty("message")]
        public string? Message { get; set; }

        [JsonProperty("stackTrace")]
        public string? StackTrace { get; set; }

        [JsonProperty("expected")]
        public string? Expected { get; set; }

        [JsonProperty("actual")]
        public string? Actual { get; set; }

    }
    
    // Source: opengraph
    public class OpenGraphDto
    {
        [JsonProperty("url")]
        public string? Url { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("image")]
        public OpenGraphImageDto? Image { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("determiner")]
        public string? Determiner { get; set; }

        [JsonProperty("siteName")]
        public string? SiteName { get; set; }

        [JsonProperty("video")]
        public OpenGraphVideoDto? Video { get; set; }

        [JsonProperty("audio")]
        public OpenGraphAudioDto? Audio { get; set; }

    }
    
    // Source: opengraphaudio
    public class OpenGraphAudioDto
    {
        [Required]
        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("mime")]
        public string? Mime { get; set; }

    }
    
    // Source: opengraphimage
    public class OpenGraphImageDto
    {
        [Required]
        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("mime")]
        public string? Mime { get; set; }

        [JsonProperty("width")]
        public int? Width { get; set; }

        [JsonProperty("height")]
        public int? Height { get; set; }

        [JsonProperty("alt")]
        public string? Alt { get; set; }

    }
    
    // Source: opengraphvideo
    public class OpenGraphVideoDto
    {
        [Required]
        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("mime")]
        public string? Mime { get; set; }

        [JsonProperty("width")]
        public int? Width { get; set; }

        [JsonProperty("height")]
        public int? Height { get; set; }

    }
    
    // Source: pr_privateproject
    public class PRPrivateProjectDto
    {
        [Required]
        [JsonProperty("key")]
        public ProjectKeyDto Key { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("accessAllowed")]
        public bool AccessAllowed { get; set; }

        [Required]
        [JsonProperty("admins")]
        public List<TDMemberProfileDto> Admins { get; set; }

    }
    
    // Source: pr_project
    public class PRProjectDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("key")]
        public ProjectKeyDto Key { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("private")]
        public bool Private { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("icon")]
        public string? Icon { get; set; }

        [JsonProperty("latestRepositoryActivity")]
        public SpaceTime? LatestRepositoryActivity { get; set; }

    }
    
    // Source: pr_projectfull
    public class PRProjectFullDto
    {
        [Required]
        [JsonProperty("project")]
        public PRProjectDto Project { get; set; }

        [Required]
        [JsonProperty("teams")]
        public List<TDTeamDto> Teams { get; set; }

        [Required]
        [JsonProperty("members")]
        public List<TDMemberProfileDto> Members { get; set; }

        [Required]
        [JsonProperty("administratorsTeams")]
        public List<TDTeamDto> AdministratorsTeams { get; set; }

        [Required]
        [JsonProperty("administrators")]
        public List<TDMemberProfileDto> Administrators { get; set; }

        [Required]
        [JsonProperty("repos")]
        public List<PRRepositoryInfoDto> Repos { get; set; }

        [Required]
        [JsonProperty("tags")]
        public List<string> Tags { get; set; }

        [Required]
        [JsonProperty("permissions")]
        public DTORightsDto Permissions { get; set; }

    }
    
    // Source: pr_projecttags
    public class PRProjectTagsDto
    {
        [Required]
        [JsonProperty("projectId")]
        public string ProjectId { get; set; }

        [Required]
        [JsonProperty("tags")]
        public List<string> Tags { get; set; }

    }
    
    // Source: pr_repositoryinfo
    public class PRRepositoryInfoDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("latestActivity")]
        public SpaceTime? LatestActivity { get; set; }

        [JsonProperty("proxyPushNotification")]
        public SpaceTime? ProxyPushNotification { get; set; }

        [Required]
        [JsonProperty("state")]
        public RepositoryState State { get; set; }

        [JsonProperty("initProgress")]
        public string? InitProgress { get; set; }

        [JsonProperty("readmeName")]
        public string? ReadmeName { get; set; }

        [JsonProperty("monthlyActivity")]
        public RepositoryActivityDto? MonthlyActivity { get; set; }

    }
    
    // Source: pr_tag
    public class PRTagDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("projectCount")]
        public int ProjectCount { get; set; }

    }
    
    // Source: packagetype
    public class PackageTypeDto
    {
    }
    
    // Source: packageversioninfo
    public class PackageVersionInfoDto
    {
        [Required]
        [JsonProperty("type")]
        public PackageTypeDto Type { get; set; }

        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("tags")]
        public List<string>? Tags { get; set; }

    }
    
    // Source: participant
    public class ParticipantDto
    {
        [Required]
        [JsonProperty("user")]
        public TDMemberProfileDto User { get; set; }

        [Required]
        [JsonProperty("status")]
        public EventParticipationStatus Status { get; set; }

    }
    
    // Source: planitem
    public class PlanItemDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("checklistId")]
        public string ChecklistId { get; set; }

        [JsonProperty("tag")]
        public PlanningTagDto? Tag { get; set; }

        [JsonProperty("plainText")]
        public string? PlainText { get; set; }

        [JsonProperty("done")]
        public bool? Done { get; set; }

        [Required]
        [JsonProperty("hasChildren")]
        public bool HasChildren { get; set; }

        [Required]
        [JsonProperty("children")]
        public List<PlanItemDto> Children { get; set; }

    }
    
    // Source: planitemchildren
    public class PlanItemChildrenDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("children")]
        public List<PlanItemDto> Children { get; set; }

    }
    
    // Source: planningtag
    public class PlanningTagDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("projectId")]
        public string ProjectId { get; set; }

        [JsonProperty("parent")]
        public PlanningTagDto? Parent { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

    }
    
    // Source: pollrecord
    public class PollRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("owner")]
        public TDMemberProfileDto Owner { get; set; }

        [Required]
        [JsonProperty("question")]
        public string Question { get; set; }

        [Required]
        [JsonProperty("meVote")]
        public bool MeVote { get; set; }

        [Required]
        [JsonProperty("countPeople")]
        public int CountPeople { get; set; }

        [Required]
        [JsonProperty("anonymous")]
        public bool Anonymous { get; set; }

        [Required]
        [JsonProperty("closed")]
        public bool Closed { get; set; }

        [Required]
        [JsonProperty("extendable")]
        public bool Extendable { get; set; }

        [Required]
        [JsonProperty("multiChoice")]
        public bool MultiChoice { get; set; }

        [Required]
        [JsonProperty("ended")]
        public bool Ended { get; set; }

        [JsonProperty("expirationTime")]
        public SpaceTime? ExpirationTime { get; set; }

        [Required]
        [JsonProperty("votes")]
        public List<VoteGroupDto> Votes { get; set; }

    }
    
    // Source: profileabsencesrecord
    public class ProfileAbsencesRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("absences")]
        public List<AbsenceRecordDto> Absences { get; set; }

    }
    
    // Source: profilecftype
    public class ProfileCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: profilecfvalue
    public class ProfileCFValueDto
         : CFValueDto
    {
        [JsonProperty("profile")]
        public TDMemberProfileDto? Profile { get; set; }

    }
    
    // Source: profilelinkpreview
    public class ProfileLinkPreviewDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

    }
    
    // Source: profilelistcftype
    public class ProfileListCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: profilelistcfvalue
    public class ProfileListCFValueDto
         : CFValueDto
    {
        [Required]
        [JsonProperty("profiles")]
        public List<TDMemberProfileDto> Profiles { get; set; }

    }
    
    // Source: profilemembershiprecord
    public class ProfileMembershipRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("memberships")]
        public List<TDMembershipDto> Memberships { get; set; }

    }
    
    // Source: projectforprofilepage
    public class ProjectForProfilePageDto
    {
        [Required]
        [JsonProperty("project")]
        public PRProjectDto Project { get; set; }

        [Required]
        [JsonProperty("tags")]
        public List<string> Tags { get; set; }

        [Required]
        [JsonProperty("responsibilities")]
        public List<string> Responsibilities { get; set; }

        [JsonProperty("lastUpdated")]
        public SpaceTime? LastUpdated { get; set; }

    }
    
    // Source: projectkey
    public class ProjectKeyDto
    {
        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

    }
    
    // Source: propagatedcodediscussion
    public class PropagatedCodeDiscussionDto
    {
        [Required]
        [JsonProperty("anchor")]
        public CodeDiscussionAnchorDto Anchor { get; set; }

        [Required]
        [JsonProperty("discussion")]
        public CodeDiscussionRecordDto Discussion { get; set; }

    }
    
    // Source: publicholiday
    public class PublicHolidayDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("calendar")]
        public PublicHolidayCalendarRecordDto Calendar { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("date")]
        public SpaceDate Date { get; set; }

        [Required]
        [JsonProperty("workingDay")]
        public bool WorkingDay { get; set; }

    }
    
    // Source: publicholidaycalendarrecord
    public class PublicHolidayCalendarRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("firstDate")]
        public SpaceDate? FirstDate { get; set; }

        [JsonProperty("lastDate")]
        public SpaceDate? LastDate { get; set; }

        [Required]
        [JsonProperty("eventsCount")]
        public int EventsCount { get; set; }

        [Required]
        [JsonProperty("location")]
        public TDLocationDto Location { get; set; }

    }
    
    // Source: reactiondata
    public class ReactionDataDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [Required]
        [JsonProperty("emoji")]
        public string Emoji { get; set; }

    }
    
    // Source: reactiontyperecord
    public class ReactionTypeRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("data")]
        public ReactionDataDto Data { get; set; }

        [Required]
        [JsonProperty("provider")]
        public CPrincipalDto Provider { get; set; }

        [Required]
        [JsonProperty("addedAt")]
        public SpaceDate AddedAt { get; set; }

        [JsonProperty("order")]
        public int? Order { get; set; }

    }
    
    // Source: repositoryactivity
    public class RepositoryActivityDto
    {
        [Required]
        [JsonProperty("lastActivity")]
        public List<Object5Dto> LastActivity { get; set; }

    }
    
    // Source: repositorycommitrecord
    public class RepositoryCommitRecordDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("repositoryId")]
        public string RepositoryId { get; set; }

        [Required]
        [JsonProperty("repositoryName")]
        public string RepositoryName { get; set; }

        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

        [JsonProperty("message")]
        public string? Message { get; set; }

        [Required]
        [JsonProperty("date")]
        public SpaceTime Date { get; set; }

        [JsonProperty("authorName")]
        public string? AuthorName { get; set; }

        [JsonProperty("authorEmail")]
        public string? AuthorEmail { get; set; }

        [JsonProperty("committerName")]
        public string? CommitterName { get; set; }

        [JsonProperty("committerEmail")]
        public string? CommitterEmail { get; set; }

        [JsonProperty("authorProfile")]
        public TDMemberProfileDto? AuthorProfile { get; set; }

    }
    
    // Source: reviewbranchtrackevent
    public class ReviewBranchTrackEventDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("branch")]
        public string Branch { get; set; }

        [Required]
        [JsonProperty("track")]
        public bool Track { get; set; }

    }
    
    // Source: reviewcompletionstatechangedevent
    public class ReviewCompletionStateChangedEventDto
    {
        [Required]
        [JsonProperty("state")]
        public CodeReviewParticipantState State { get; set; }

    }
    
    // Source: reviewcounts
    public class ReviewCountsDto
    {
        [Required]
        [JsonProperty("opened")]
        public int Opened { get; set; }

        [Required]
        [JsonProperty("closed")]
        public int Closed { get; set; }

        [Required]
        [JsonProperty("authoredByMe")]
        public int AuthoredByMe { get; set; }

        [Required]
        [JsonProperty("reviewedByMe")]
        public int ReviewedByMe { get; set; }

    }
    
    // Source: reviewrevisionschangedevent
    public class ReviewRevisionsChangedEventDto
    {
        [Required]
        [JsonProperty("commits")]
        public List<RepositoryCommitRecordDto> Commits { get; set; }

        [Required]
        [JsonProperty("changeType")]
        public ReviewRevisionsChangedType ChangeType { get; set; }

        [JsonProperty("projectKey")]
        public string? ProjectKey { get; set; }

        [JsonProperty("review")]
        public CodeReviewRecordDto? Review { get; set; }

    }
    
    // Source: reviewstatechangedevent
    public class ReviewStateChangedEventDto
    {
        [Required]
        [JsonProperty("state")]
        public CodeReviewState State { get; set; }

        [JsonProperty("review")]
        public CodeReviewRecordDto? Review { get; set; }

    }
    
    // Source: reviewtitlechangedevent
    public class ReviewTitleChangedEventDto
    {
        [Required]
        [JsonProperty("oldTitle")]
        public string OldTitle { get; set; }

        [Required]
        [JsonProperty("newTitle")]
        public string NewTitle { get; set; }

    }
    
    // Source: reviewerchangedevent
    public class ReviewerChangedEventDto
    {
        [Required]
        [JsonProperty("uid")]
        public TDMemberProfileDto Uid { get; set; }

        [Required]
        [JsonProperty("changeType")]
        public ReviewerChangedType ChangeType { get; set; }

    }
    
    // Source: revisionauthor
    public class RevisionAuthorDto
    {
        [Required]
        [JsonProperty("authorName")]
        public string AuthorName { get; set; }

        [JsonProperty("profile")]
        public TDMemberProfileDto? Profile { get; set; }

    }
    
    // Source: revisionauthorinfo
    public class RevisionAuthorInfoDto
    {
        [Required]
        [JsonProperty("revisionInfo")]
        public RevisionInfoDto RevisionInfo { get; set; }

        [Required]
        [JsonProperty("author")]
        public RevisionAuthorDto Author { get; set; }

    }
    
    // Source: revisiondiscussionscounter
    public class RevisionDiscussionsCounterDto
    {
        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

        [Required]
        [JsonProperty("filesWithCounts")]
        public List<FileWithCountDto> FilesWithCounts { get; set; }

    }
    
    // Source: revisioninreview
    public class RevisionInReviewDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("commit")]
        public string Commit { get; set; }

    }
    
    // Source: revisioninreviewidentifier
    public class RevisionInReviewIdentifierDto
    {
        [Required]
        [JsonProperty("identifier")]
        public string Identifier { get; set; }

    }
    
    // Source: revisioninfo
    public class RevisionInfoDto
    {
        [Required]
        [JsonProperty("revision")]
        public string Revision { get; set; }

        [Required]
        [JsonProperty("date")]
        public long Date { get; set; }

        [Required]
        [JsonProperty("message")]
        public string Message { get; set; }

    }
    
    // Source: revisionsinreview
    public class RevisionsInReviewDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("commits")]
        public List<GitCommitWithGraphDto> Commits { get; set; }

    }
    
    // Source: sslkeystore
    public class SSLKeystoreDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceDate Created { get; set; }

    }
    
    // Source: servicemessage
    public class ServiceMessageDto
    {
    }
    
    // Source: stderrtextservicemessage
    public class StderrTextServiceMessageDto
         : ServiceMessageDto
    {
        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: sticker
    public class StickerDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("symbol")]
        public string? Symbol { get; set; }

        [JsonProperty("attachmentId")]
        public string? AttachmentId { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

    }
    
    // Source: stickercontentdetails
    public class StickerContentDetailsDto
    {
        [Required]
        [JsonProperty("sticker")]
        public StickerDto Sticker { get; set; }

    }
    
    // Source: stringcfconstraint
    public class StringCFConstraintDto
         : CFConstraintDto
    {
        [JsonProperty("min")]
        public int? Min { get; set; }

        [JsonProperty("max")]
        public int? Max { get; set; }

        [JsonProperty("pattern")]
        public string? Pattern { get; set; }

        [JsonProperty("message")]
        public string? Message { get; set; }

    }
    
    // Source: stringcftype
    public class StringCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: stringcfvalue
    public class StringCFValueDto
         : CFValueDto
    {
        [JsonProperty("value")]
        public string? Value { get; set; }

    }
    
    // Source: stringlistcftype
    public class StringListCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: stringlistcfvalue
    public class StringListCFValueDto
         : CFValueDto
    {
        [Required]
        [JsonProperty("values")]
        public List<string> Values { get; set; }

    }
    
    // Source: supportprofiledto
    public class SupportProfileDTODto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

        [Required]
        [JsonProperty("adminPermissionsGranted")]
        public bool AdminPermissionsGranted { get; set; }

    }
    
    // Source: syntaxmarkup
    public class SyntaxMarkupDto
    {
        [Required]
        [JsonProperty("type")]
        public SyntaxMarkupType Type { get; set; }

        [Required]
        [JsonProperty("range")]
        public TextRangeDto Range { get; set; }

    }
    
    // Source: td_language
    public class TDLanguageDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("code")]
        public string Code { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("nativeName")]
        public string NativeName { get; set; }

        [Required]
        [JsonProperty("firstNameTitle")]
        public string FirstNameTitle { get; set; }

        [Required]
        [JsonProperty("lastNameTitle")]
        public string LastNameTitle { get; set; }

    }
    
    // Source: td_location
    public class TDLocationDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("timezone")]
        public ATimeZoneWithOffsetDto? Timezone { get; set; }

        [JsonProperty("tz")]
        public string? Tz { get; set; }

        [JsonProperty("workdays")]
        public List<int>? Workdays { get; set; }

        [Required]
        [JsonProperty("phones")]
        public List<string> Phones { get; set; }

        [Required]
        [JsonProperty("emails")]
        public List<string> Emails { get; set; }

        [JsonProperty("equipment")]
        public List<string>? Equipment { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("address")]
        public string? Address { get; set; }

        [JsonProperty("parent")]
        public TDLocationDto? Parent { get; set; }

        [Required]
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("mapId")]
        public string? MapId { get; set; }

        [JsonProperty("channelId")]
        public string? ChannelId { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

    }
    
    // Source: td_locationequipmenttype
    public class TDLocationEquipmentTypeDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

    }
    
    // Source: td_locationmap
    public class TDLocationMapDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("picture")]
        public string Picture { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceTime Created { get; set; }

        [JsonProperty("width")]
        public int? Width { get; set; }

        [JsonProperty("height")]
        public int? Height { get; set; }

    }
    
    // Source: td_locationmappoint
    public class TDLocationMapPointDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("mapId")]
        public string? MapId { get; set; }

        [Required]
        [JsonProperty("x")]
        public int X { get; set; }

        [Required]
        [JsonProperty("y")]
        public int Y { get; set; }

        [Required]
        [JsonProperty("created")]
        public SpaceTime Created { get; set; }

        [JsonProperty("memberLocation")]
        public string? MemberLocation { get; set; }

        [JsonProperty("deleted")]
        public bool? Deleted { get; set; }

    }
    
    // Source: td_locationwithtimezone
    public class TDLocationWithTimeZoneDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timezone")]
        public ATimeZoneWithOffsetDto Timezone { get; set; }

    }
    
    // Source: td_memberinlocationmaplist
    public class TDMemberInLocationMapListDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

        [Required]
        [JsonProperty("memberLocation")]
        public TDMemberLocationDto MemberLocation { get; set; }

        [JsonProperty("locationMapPoint")]
        public TDLocationMapPointDto? LocationMapPoint { get; set; }

    }
    
    // Source: td_memberlocation
    public class TDMemberLocationDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("location")]
        public TDLocationDto Location { get; set; }

        [JsonProperty("locationMapPoints")]
        public List<TDLocationMapPointDto>? LocationMapPoints { get; set; }

        [JsonProperty("since")]
        public SpaceDate? Since { get; set; }

        [JsonProperty("till")]
        public SpaceDate? Till { get; set; }

        [Required]
        [JsonProperty("member")]
        public TDMemberProfileDto Member { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

    }
    
    // Source: td_memberprofile
    public class TDMemberProfileDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("username")]
        public string Username { get; set; }

        [Required]
        [JsonProperty("name")]
        public TDProfileNameDto Name { get; set; }

        [Required]
        [JsonProperty("speaksEnglish")]
        public bool SpeaksEnglish { get; set; }

        [JsonProperty("smallAvatar")]
        public string? SmallAvatar { get; set; }

        [JsonProperty("avatar")]
        public string? Avatar { get; set; }

        [JsonProperty("profilePicture")]
        public string? ProfilePicture { get; set; }

        [Required]
        [JsonProperty("languages")]
        public List<TDProfileLanguageDto> Languages { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [Required]
        [JsonProperty("notAMember")]
        public bool NotAMember { get; set; }

        [JsonProperty("joined")]
        public SpaceDate? Joined { get; set; }

        [JsonProperty("left")]
        public SpaceDate? Left { get; set; }

        [JsonProperty("leftAt")]
        public SpaceTime? LeftAt { get; set; }

        [Required]
        [JsonProperty("absences")]
        public List<AbsenceRecordDto> Absences { get; set; }

        [Required]
        [JsonProperty("emails")]
        public List<TDProfileEmailDto> Emails { get; set; }

        [Required]
        [JsonProperty("phones")]
        public List<string> Phones { get; set; }

        [Required]
        [JsonProperty("messengers")]
        public List<string> Messengers { get; set; }

        [Required]
        [JsonProperty("links")]
        public List<string> Links { get; set; }

        [Required]
        [JsonProperty("locations")]
        public List<TDMemberLocationDto> Locations { get; set; }

        [Required]
        [JsonProperty("logins")]
        public List<ESProfileLoginDto> Logins { get; set; }

        [Required]
        [JsonProperty("managers")]
        public List<TDMemberProfileDto> Managers { get; set; }

        [Required]
        [JsonProperty("membershipHistory")]
        public List<TDMembershipDto> MembershipHistory { get; set; }

        [Required]
        [JsonProperty("memberships")]
        public List<TDMembershipDto> Memberships { get; set; }

        [JsonProperty("about")]
        public string? About { get; set; }

        [JsonProperty("avatarCropSquare")]
        public AvatarCropSquareDto? AvatarCropSquare { get; set; }

        [JsonProperty("gender")]
        public Gender? Gender { get; set; }

        [JsonProperty("birthday")]
        public SpaceDate? Birthday { get; set; }

    }
    
    // Source: td_memberwithteam
    public class TDMemberWithTeamDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

        [Required]
        [JsonProperty("teams")]
        public List<TDTeamDto> Teams { get; set; }

    }
    
    // Source: td_membership
    public class TDMembershipDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("member")]
        public TDMemberProfileDto? Member { get; set; }

        [Required]
        [JsonProperty("team")]
        public TDTeamDto Team { get; set; }

        [Required]
        [JsonProperty("role")]
        public TDRoleDto Role { get; set; }

        [Required]
        [JsonProperty("lead")]
        public bool Lead { get; set; }

        [JsonProperty("manager")]
        public TDMemberProfileDto? Manager { get; set; }

        [JsonProperty("since")]
        public SpaceDate? Since { get; set; }

        [JsonProperty("till")]
        public SpaceDate? Till { get; set; }

        [JsonProperty("activeSince")]
        public SpaceTime? ActiveSince { get; set; }

        [JsonProperty("activeTill")]
        public SpaceTime? ActiveTill { get; set; }

        [Required]
        [JsonProperty("requiresApproval")]
        public bool RequiresApproval { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [JsonProperty("editFor")]
        public TDMembershipDto? EditFor { get; set; }

        [JsonProperty("pendingEdit")]
        public TDMembershipDto? PendingEdit { get; set; }

        [JsonProperty("approver")]
        public TDMemberProfileDto? Approver { get; set; }

    }
    
    // Source: td_mergedevent
    public class TDMergedEventDto
    {
        [Required]
        [JsonProperty("events")]
        public List<Object6Dto> Events { get; set; }

        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

    }
    
    // Source: td_profileemail
    public class TDProfileEmailDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("email")]
        public string Email { get; set; }

    }
    
    // Source: td_profilelanguage
    public class TDProfileLanguageDto
    {
        [JsonProperty("name")]
        public TDProfileNameDto? Name { get; set; }

        [Required]
        [JsonProperty("language")]
        public TDLanguageDto Language { get; set; }

        [JsonProperty("languageCode")]
        public string? LanguageCode { get; set; }

    }
    
    // Source: td_profilename
    public class TDProfileNameDto
    {
        [Required]
        [JsonProperty("firstName")]
        public string FirstName { get; set; }

        [Required]
        [JsonProperty("lastName")]
        public string LastName { get; set; }

    }
    
    // Source: td_role
    public class TDRoleDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("parent")]
        public TDRoleDto? Parent { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

    }
    
    // Source: td_stats
    public class TDStatsDto
    {
        [Required]
        [JsonProperty("totalMembers")]
        public int TotalMembers { get; set; }

        [Required]
        [JsonProperty("teams")]
        public List<Object0Dto> Teams { get; set; }

        [Required]
        [JsonProperty("roles")]
        public List<Object7Dto> Roles { get; set; }

        [Required]
        [JsonProperty("locations")]
        public List<Object2Dto> Locations { get; set; }

    }
    
    // Source: td_team
    public class TDTeamDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("parent")]
        public TDTeamDto? Parent { get; set; }

        [JsonProperty("emails")]
        public List<string>? Emails { get; set; }

        [JsonProperty("channelId")]
        public string? ChannelId { get; set; }

        [Required]
        [JsonProperty("archived")]
        public bool Archived { get; set; }

        [JsonProperty("disbanded")]
        public bool? Disbanded { get; set; }

        [JsonProperty("disbandedAt")]
        public SpaceDate? DisbandedAt { get; set; }

        [Required]
        [JsonProperty("memberships")]
        public List<TDMembershipDto> Memberships { get; set; }

    }
    
    // Source: td_workingdays
    public class TDWorkingDaysDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("dateStart")]
        public SpaceDate? DateStart { get; set; }

        [JsonProperty("dateEnd")]
        public SpaceDate? DateEnd { get; set; }

        [Required]
        [JsonProperty("workingDaysSpec")]
        public WorkingDaysSpecDto WorkingDaysSpec { get; set; }

    }
    
    // Source: taskendservicemessage
    public class TaskEndServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: taskstartservicemessage
    public class TaskStartServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: teamaddeditemdetails
    public class TeamAddedItemDetailsDto
    {
        [Required]
        [JsonProperty("team")]
        public TDTeamDto Team { get; set; }

    }
    
    // Source: testfailureservicemessage
    public class TestFailureServiceMessageDto
         : TestServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("message")]
        public string? Message { get; set; }

        [JsonProperty("stackTrace")]
        public string? StackTrace { get; set; }

        [JsonProperty("expected")]
        public string? Expected { get; set; }

        [JsonProperty("actual")]
        public string? Actual { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: testignoreservicemessage
    public class TestIgnoreServiceMessageDto
         : TestServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: testpassedservicemessage
    public class TestPassedServiceMessageDto
         : TestServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("duration")]
        public long Duration { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: testservicemessage
    public class TestServiceMessageDto
         : NamedServiceMessageDto
    {
    }
    
    // Source: teststartservicemessage
    public class TestStartServiceMessageDto
         : TestServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: teststderrservicemessage
    public class TestStdErrServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("output")]
        public string Output { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: teststdoutservicemessage
    public class TestStdOutServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("output")]
        public string Output { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: testsuiteendservicemessage
    public class TestSuiteEndServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: testsuitestartservicemessage
    public class TestSuiteStartServiceMessageDto
         : NamedServiceMessageDto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: testssummary
    public class TestsSummaryDto
    {
        [Required]
        [JsonProperty("passedTests")]
        public long PassedTests { get; set; }

        [Required]
        [JsonProperty("ignoredTests")]
        public long IgnoredTests { get; set; }

        [Required]
        [JsonProperty("failedTests")]
        public long FailedTests { get; set; }

    }
    
    // Source: textrange
    public class TextRangeDto
    {
        [Required]
        [JsonProperty("start")]
        public int Start { get; set; }

        [Required]
        [JsonProperty("length")]
        public int Length { get; set; }

    }
    
    // Source: textservicemessage
    public class TextServiceMessageDto
         : ServiceMessageDto
    {
        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [Required]
        [JsonProperty("severity")]
        public TextMessageSeverity Severity { get; set; }

        [Required]
        [JsonProperty("timestamp")]
        public TimestampDto Timestamp { get; set; }

    }
    
    // Source: timestamp
    public class TimestampDto
    {
        [Required]
        [JsonProperty("millis")]
        public long Millis { get; set; }

        [Required]
        [JsonProperty("microFraction")]
        public int MicroFraction { get; set; }

    }
    
    // Source: trackedbranchesinreview
    public class TrackedBranchesInReviewDto
    {
        [Required]
        [JsonProperty("repository")]
        public string Repository { get; set; }

        [Required]
        [JsonProperty("branches")]
        public List<BranchInfoDto> Branches { get; set; }

    }
    
    // Source: twitterplayercard
    public class TwitterPlayerCardDto
    {
        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("site")]
        public string Site { get; set; }

        [Required]
        [JsonProperty("player")]
        public string Player { get; set; }

        [Required]
        [JsonProperty("playerWidth")]
        public int PlayerWidth { get; set; }

        [Required]
        [JsonProperty("playerHeight")]
        public int PlayerHeight { get; set; }

        [Required]
        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("playerStream")]
        public string? PlayerStream { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("imageAlt")]
        public string? ImageAlt { get; set; }

    }
    
    // Source: twittersummarycard
    public class TwitterSummaryCardDto
    {
        [Required]
        [JsonProperty("card")]
        public string Card { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("site")]
        public string? Site { get; set; }

        [JsonProperty("image")]
        public string? Image { get; set; }

        [JsonProperty("imageAlt")]
        public string? ImageAlt { get; set; }

    }
    
    // Source: unfurl
    public class UnfurlDto
    {
        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("link")]
        public string Link { get; set; }

        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("details")]
        public UnfurlDetailsDto? Details { get; set; }

        [JsonProperty("sitename")]
        public string? Sitename { get; set; }

        [JsonProperty("image")]
        public string? Image { get; set; }

        [JsonProperty("imageMime")]
        public string? ImageMime { get; set; }

        [JsonProperty("imageWidth")]
        public int? ImageWidth { get; set; }

        [JsonProperty("imageHeight")]
        public int? ImageHeight { get; set; }

        [JsonProperty("video")]
        public string? Video { get; set; }

        [JsonProperty("videoMime")]
        public string? VideoMime { get; set; }

        [JsonProperty("videoHeight")]
        public int? VideoHeight { get; set; }

        [JsonProperty("videoWidth")]
        public int? VideoWidth { get; set; }

        [JsonProperty("favicon")]
        public string? Favicon { get; set; }

    }
    
    // Source: unfurlattachment
    public class UnfurlAttachmentDto
    {
        [Required]
        [JsonProperty("unfurl")]
        public UnfurlDto Unfurl { get; set; }

    }
    
    // Source: unfurldetails
    public class UnfurlDetailsDto
    {
    }
    
    // Source: unfurldetailsarticle
    public class UnfurlDetailsArticleDto
    {
        [Required]
        [JsonProperty("article")]
        public ArticleRecordDto Article { get; set; }

        [Required]
        [JsonProperty("content")]
        public ArticleContentRecordDto Content { get; set; }

        [Required]
        [JsonProperty("channel")]
        public ArticleChannelRecordDto Channel { get; set; }

    }
    
    // Source: unfurldetailscodesnippet
    public class UnfurlDetailsCodeSnippetDto
    {
        [Required]
        [JsonProperty("anchor")]
        public CodeSnippetAnchorDto Anchor { get; set; }

        [Required]
        [JsonProperty("lines")]
        public List<CodeLineDto> Lines { get; set; }

    }
    
    // Source: unfurldetailsdraft
    public class UnfurlDetailsDraftDto
    {
        [Required]
        [JsonProperty("draft")]
        public string Draft { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

    }
    
    // Source: unfurldetailsprofile
    public class UnfurlDetailsProfileDto
    {
        [Required]
        [JsonProperty("profile")]
        public TDMemberProfileDto Profile { get; set; }

    }
    
    // Source: unfurldetailsteam
    public class UnfurlDetailsTeamDto
    {
        [Required]
        [JsonProperty("team")]
        public TDTeamDto Team { get; set; }

    }
    
    // Source: urlcftype
    public class UrlCFTypeDto
         : CFTypeDto
    {
    }
    
    // Source: urlcfvalue
    public class UrlCFValueDto
         : CFValueDto
    {
        [JsonProperty("href")]
        public string? Href { get; set; }

    }
    
    // Source: vcshostingpassword
    public class VcsHostingPasswordDto
    {
        [Required]
        [JsonProperty("fingerprint")]
        public string Fingerprint { get; set; }

        [JsonProperty("lastUsed")]
        public SpaceTime? LastUsed { get; set; }

    }
    
    // Source: videoattachment
    public class VideoAttachmentDto
    {
        [Required]
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("width")]
        public int? Width { get; set; }

        [JsonProperty("height")]
        public int? Height { get; set; }

        [Required]
        [JsonProperty("sizeBytes")]
        public long SizeBytes { get; set; }

        [JsonProperty("previewBytes")]
        public string? PreviewBytes { get; set; }

    }
    
    // Source: votegroup
    public class VoteGroupDto
    {
        [Required]
        [JsonProperty("variantName")]
        public string VariantName { get; set; }

        [Required]
        [JsonProperty("count")]
        public int Count { get; set; }

        [Required]
        [JsonProperty("meVote")]
        public bool MeVote { get; set; }

        [Required]
        [JsonProperty("lastUsers")]
        public List<TDMemberProfileDto> LastUsers { get; set; }

        [JsonProperty("owner")]
        public TDMemberProfileDto? Owner { get; set; }

    }
    
    // Source: workday
    public class WorkdayDto
    {
        [Required]
        [JsonProperty("weekday")]
        public string Weekday { get; set; }

        [Required]
        [JsonProperty("working")]
        public bool Working { get; set; }

        [Required]
        [JsonProperty("hours")]
        public int Hours { get; set; }

    }
    
    // Source: workingdaysspec
    public class WorkingDaysSpecDto
    {
        [Required]
        [JsonProperty("days")]
        public List<WorkdayDto> Days { get; set; }

    }
    
    // Source: youtubeoembed
    public class YoutubeOEmbedDto
    {
        [Required]
        [JsonProperty("thumbnailUrl")]
        public string ThumbnailUrl { get; set; }

        [Required]
        [JsonProperty("thumbnailWidth")]
        public int ThumbnailWidth { get; set; }

        [Required]
        [JsonProperty("thumbnailHeight")]
        public int ThumbnailHeight { get; set; }

        [Required]
        [JsonProperty("authorName")]
        public string AuthorName { get; set; }

        [Required]
        [JsonProperty("authorUrl")]
        public string AuthorUrl { get; set; }

        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("html")]
        public string? Html { get; set; }

        [Required]
        [JsonProperty("type")]
        public string Type { get; set; }

        [Required]
        [JsonProperty("version")]
        public string Version { get; set; }

    }
    
    // Source: absences
    public partial class AbsenceClient
    {
        private readonly Connection _connection;
        
        public AbsenceClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<AbsenceRecordDto> AbsencesCreateAbsence(Object8Dto data) => await _connection.RequestResourceAsync<Object8Dto, AbsenceRecordDto>("POST", $"api/http/absences?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(AbsenceRecordDto)), data);        
        
        public async Task AbsencesApproveAbsence(string id, Object9Dto data) => await _connection.RequestResourceAsync<Object9Dto>("POST", $"api/http/absences/{id}/approve", data);        
        
        public async Task<Object10Dto> AbsencesGetAllAbsences() => await _connection.RequestResourceAsync<Object10Dto>("GET", $"api/http/absences?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object10Dto)));        
        
        public async Task<List<AbsenceRecordDto>> AbsencesGetAllAbsencesByMember(string member) => await _connection.RequestResourceAsync<List<AbsenceRecordDto>>("GET", $"api/http/absences/member:{member}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<AbsenceRecordDto>)));        
        
        public async Task<AbsenceRecordDto> AbsencesGetAbsence(string id) => await _connection.RequestResourceAsync<AbsenceRecordDto>("GET", $"api/http/absences/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(AbsenceRecordDto)));        
        
        public async Task<AbsenceRecordDto> AbsencesUpdateAbsence(string id, Object11Dto data) => await _connection.RequestResourceAsync<Object11Dto, AbsenceRecordDto>("PATCH", $"api/http/absences/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(AbsenceRecordDto)), data);        
        
        public async Task AbsencesDeleteAbsence(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/absences/{id}");        
        
        public async Task AbsencesDeleteAbsenceApproval(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/absences/{id}/delete-approval");        
        
        public async Task<AbsenceReasonRecordDto> AbsenceReasonsCreateAbsenceReason(Object12Dto data) => await _connection.RequestResourceAsync<Object12Dto, AbsenceReasonRecordDto>("POST", $"api/http/absences/absence-reasons?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(AbsenceReasonRecordDto)), data);        
        
        public async Task<AbsenceReasonRecordDto> AbsenceReasonsCreateAbsenceReason(string id, Object12Dto data) => await _connection.RequestResourceAsync<Object12Dto, AbsenceReasonRecordDto>("POST", $"api/http/absences/absence-reasons/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(AbsenceReasonRecordDto)), data);        
        
        public async Task<List<AbsenceReasonRecordDto>> AbsenceReasonsGetAllAbsenceReasons() => await _connection.RequestResourceAsync<List<AbsenceReasonRecordDto>>("GET", $"api/http/absences/absence-reasons?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<AbsenceReasonRecordDto>)));        
        
        public async Task<AbsenceReasonRecordDto> AbsenceReasonsGetAbsenceReason(string id) => await _connection.RequestResourceAsync<AbsenceReasonRecordDto>("GET", $"api/http/absences/absence-reasons/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(AbsenceReasonRecordDto)));        
        
        public async Task AbsenceReasonsDeleteAbsenceReason(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/absences/absence-reasons/{id}");        
        
        public async Task<DTOAbsenceSubscriptionDto> SubscriptionsCreateSubscription(Object13Dto data) => await _connection.RequestResourceAsync<Object13Dto, DTOAbsenceSubscriptionDto>("POST", $"api/http/absences/subscriptions?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(DTOAbsenceSubscriptionDto)), data);        
        
        public async Task<List<DTOAbsenceSubscriptionDto>> SubscriptionsGetAllSubscriptions() => await _connection.RequestResourceAsync<List<DTOAbsenceSubscriptionDto>>("GET", $"api/http/absences/subscriptions?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<DTOAbsenceSubscriptionDto>)));        
        
        public async Task<DTOAbsenceSubscriptionDto> SubscriptionsUpdateSubscription(string id, Object14Dto data) => await _connection.RequestResourceAsync<Object14Dto, DTOAbsenceSubscriptionDto>("PATCH", $"api/http/absences/subscriptions/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(DTOAbsenceSubscriptionDto)), data);        
        
        public async Task SubscriptionsDeleteSubscription(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/absences/subscriptions/{id}");        
        
    }
    
    // Source: administration
    public partial class AdministrationClient
    {
        private readonly Connection _connection;
        
        public AdministrationClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<SupportProfileDTODto> SupportCreateSupport() => await _connection.RequestResourceAsync<SupportProfileDTODto>("POST", $"api/http/administration/support?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(SupportProfileDTODto)));        
        
    }
    
    // Source: auth-modules
    public partial class AuthModuleClient
    {
        private readonly Connection _connection;
        
        public AuthModuleClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<ESAuthModuleDto> AuthModulesCreateAuthModule(Object15Dto data) => await _connection.RequestResourceAsync<Object15Dto, ESAuthModuleDto>("POST", $"api/http/auth-modules?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(ESAuthModuleDto)), data);        
        
        public async Task AuthModulesReorder(Object16Dto data) => await _connection.RequestResourceAsync<Object16Dto>("POST", $"api/http/auth-modules/reorder", data);        
        
        public async Task<List<ESAuthModuleDto>> AuthModulesGetAllAuthModules() => await _connection.RequestResourceAsync<List<ESAuthModuleDto>>("GET", $"api/http/auth-modules?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<ESAuthModuleDto>)));        
        
        public async Task<ESAuthModuleDto> AuthModulesGetAuthModuleByKey(string key) => await _connection.RequestResourceAsync<ESAuthModuleDto>("GET", $"api/http/auth-modules/key:{key}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(ESAuthModuleDto)));        
        
        public async Task AuthModulesUpdateAuthModule(string id, Object17Dto data) => await _connection.RequestResourceAsync<Object17Dto>("PATCH", $"api/http/auth-modules/{id}", data);        
        
        public async Task AuthModulesDeleteAuthModule(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/auth-modules/{id}");        
        
        public async Task<List<AuthModuleUsageDto>> UsagesGetAllUsages() => await _connection.RequestResourceAsync<List<AuthModuleUsageDto>>("GET", $"api/http/auth-modules/usages?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<AuthModuleUsageDto>)));        
        
        public async Task LoginsDeleteLogin(string identifier, string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/auth-modules/{id}/logins/{identifier}");        
        
    }
    
    // Source: automation
    public partial class AutomationClient
    {
        private readonly Connection _connection;
        
        public AutomationClient(Connection connection)
        {
            _connection = connection;
        }
        
    }
    
    // Source: blogs
    public partial class BlogClient
    {
        private readonly Connection _connection;
        
        public BlogClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<string> BlogsConvertMarkdownToHTML(Object18Dto data) => await _connection.RequestResourceAsync<Object18Dto, string>("POST", $"api/http/blogs/markdown2html?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(string)), data);        
        
        public async Task<ArticleRecordDto> ArticlesCreateArticle(Object19Dto data) => await _connection.RequestResourceAsync<Object19Dto, ArticleRecordDto>("POST", $"api/http/blogs/articles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(ArticleRecordDto)), data);        
        
        public async Task<Object20Dto> ArticlesGetAllArticles() => await _connection.RequestResourceAsync<Object20Dto>("GET", $"api/http/blogs/articles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object20Dto)));        
        
        public async Task<ArticleRecordDto> ArticlesGetArticleByAlias(string alias) => await _connection.RequestResourceAsync<ArticleRecordDto>("GET", $"api/http/blogs/articles/alias:{alias}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(ArticleRecordDto)));        
        
        public async Task<ArticleRecordDto> ArticlesGetArticle(string id) => await _connection.RequestResourceAsync<ArticleRecordDto>("GET", $"api/http/blogs/articles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(ArticleRecordDto)));        
        
        public async Task<BGDatesDto> DatesGetDates() => await _connection.RequestResourceAsync<BGDatesDto>("GET", $"api/http/blogs/dates?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(BGDatesDto)));        
        
        public async Task<BGStatsDto> StatsGetStats() => await _connection.RequestResourceAsync<BGStatsDto>("GET", $"api/http/blogs/stats?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(BGStatsDto)));        
        
    }
    
    // Source: chats
    public partial class ChatClient
    {
        private readonly Connection _connection;
        
        public ChatClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<bool> ChannelsIsNameFree(Object21Dto data) => await _connection.RequestResourceAsync<Object21Dto, bool>("POST", $"api/http/chats/channels/is-name-free?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(bool)), data);        
        
        public async Task ChannelsRestoreArchivedChannel(string channel) => await _connection.RequestResourceAsync("POST", $"api/http/chats/channels/{channel}/restore-archived");        
        
        public async Task ChannelsDeleteChannel(string channel) => await _connection.RequestResourceAsync("DELETE", $"api/http/chats/channels/{channel}");        
        
        public async Task ChannelsArchiveChannel(string channel) => await _connection.RequestResourceAsync("DELETE", $"api/http/chats/channels/{channel}/archive");        
        
        public async Task MessagesSendMessage(Object22Dto data) => await _connection.RequestResourceAsync<Object22Dto>("POST", $"api/http/chats/messages/send", data);        
        
    }
    
    // Source: custom-fields
    public partial class CustomFieldClient
    {
        private readonly Connection _connection;
        
        public CustomFieldClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<List<ExtendedTypeDto>> ExtendedTypesGetAllExtendedTypes() => await _connection.RequestResourceAsync<List<ExtendedTypeDto>>("GET", $"api/http/custom-fields/extended-types?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<ExtendedTypeDto>)));        
        
        public async Task<CustomFieldDto> FieldsCreateField(string typeKey, Object23Dto data) => await _connection.RequestResourceAsync<Object23Dto, CustomFieldDto>("POST", $"api/http/custom-fields/{typeKey}/fields?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(CustomFieldDto)), data);        
        
        public async Task FieldsReorder(string typeKey, Object24Dto data) => await _connection.RequestResourceAsync<Object24Dto>("POST", $"api/http/custom-fields/{typeKey}/fields/reorder", data);        
        
        public async Task FieldsArchive(string typeKey, string id) => await _connection.RequestResourceAsync("POST", $"api/http/custom-fields/{typeKey}/fields/{id}/archive");        
        
        public async Task FieldsRestore(string typeKey, string id) => await _connection.RequestResourceAsync("POST", $"api/http/custom-fields/{typeKey}/fields/{id}/restore");        
        
        public async Task<List<CustomFieldDto>> FieldsGetAllFields(string typeKey) => await _connection.RequestResourceAsync<List<CustomFieldDto>>("GET", $"api/http/custom-fields/{typeKey}/fields?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<CustomFieldDto>)));        
        
        public async Task FieldsUpdateField(string typeKey, string id, Object25Dto data) => await _connection.RequestResourceAsync<Object25Dto>("PATCH", $"api/http/custom-fields/{typeKey}/fields/{id}", data);        
        
        public async Task FieldsDeleteField(string typeKey, string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/custom-fields/{typeKey}/fields/{id}");        
        
        public async Task<Object26Dto> ValuesGetAllValues(string typeKey) => await _connection.RequestResourceAsync<Object26Dto>("GET", $"api/http/custom-fields/{typeKey}/values?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object26Dto)));        
        
        public async Task<CustomFieldsRecordDto> ValuesGetValue(string typeKey, string entityId) => await _connection.RequestResourceAsync<CustomFieldsRecordDto>("GET", $"api/http/custom-fields/{typeKey}/{entityId}/values?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(CustomFieldsRecordDto)));        
        
        public async Task ValuesUpdateValue(string entityId, string typeKey, Object27Dto data) => await _connection.RequestResourceAsync<Object27Dto>("PATCH", $"api/http/custom-fields/{typeKey}/{entityId}/values", data);        
        
    }
    
    // Source: docs
    public partial class DocClient
    {
        private readonly Connection _connection;
        
        public DocClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<DRDraftDto> DraftsCreateDraft(Object28Dto data) => await _connection.RequestResourceAsync<Object28Dto, DRDraftDto>("POST", $"api/http/docs/drafts?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(DRDraftDto)), data);        
        
        public async Task<DRDraftDto> DraftsGetDraft(string id) => await _connection.RequestResourceAsync<DRDraftDto>("GET", $"api/http/docs/drafts/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(DRDraftDto)));        
        
        public async Task<DRDraftDto> DraftsUpdateDraft(string id, Object28Dto data) => await _connection.RequestResourceAsync<Object28Dto, DRDraftDto>("PATCH", $"api/http/docs/drafts/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(DRDraftDto)), data);        
        
        public async Task DraftsDeleteDraft(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/docs/drafts/{id}");        
        
    }
    
    // Source: full-text-search
    public partial class FullTextSearchClient
    {
        private readonly Connection _connection;
        
        public FullTextSearchClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<Object29Dto> BlogsGetAllBlogs() => await _connection.RequestResourceAsync<Object29Dto>("GET", $"api/http/full-text-search/blogs?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object29Dto)));        
        
        public async Task<Object30Dto> DraftsGetAllDrafts() => await _connection.RequestResourceAsync<Object30Dto>("GET", $"api/http/full-text-search/drafts?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object30Dto)));        
        
        public async Task<Object31Dto> ProfilesGetAllProfiles() => await _connection.RequestResourceAsync<Object31Dto>("GET", $"api/http/full-text-search/profiles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object31Dto)));        
        
        public async Task<Object32Dto> TeamsGetAllTeams() => await _connection.RequestResourceAsync<Object32Dto>("GET", $"api/http/full-text-search/teams?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object32Dto)));        
        
    }
    
    // Source: http-api-model
    public partial class HTTPAPIModelClient
    {
        private readonly Connection _connection;
        
        public HTTPAPIModelClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<HAModelDto> HTTPAPIModelGetHTTPAPIModel() => await _connection.RequestResourceAsync<HAModelDto>("GET", $"api/http/http-api-model?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(HAModelDto)));        
        
    }
    
    // Source: packages
    public partial class PackageClient
    {
        private readonly Connection _connection;
        
        public PackageClient(Connection connection)
        {
            _connection = connection;
        }
        
    }
    
    // Source: permissions
    public partial class PermissionClient
    {
        private readonly Connection _connection;
        
        public PermissionClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<DTORightsWithHierarchyDto> PermissionsGetAllPermissions() => await _connection.RequestResourceAsync<DTORightsWithHierarchyDto>("GET", $"api/http/permissions?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(DTORightsWithHierarchyDto)));        
        
    }
    
    // Source: projects
    public partial class ProjectClient
    {
        private readonly Connection _connection;
        
        public ProjectClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<PRProjectDto> ProjectsCreateProject(Object33Dto data) => await _connection.RequestResourceAsync<Object33Dto, PRProjectDto>("POST", $"api/http/projects?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PRProjectDto)), data);        
        
        public async Task ProjectsRequestAccessToProject(string projectKey) => await _connection.RequestResourceAsync("POST", $"api/http/projects/key:{projectKey}/request-access");        
        
        public async Task<Object34Dto> ProjectsGetAllProjects() => await _connection.RequestResourceAsync<Object34Dto>("GET", $"api/http/projects?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object34Dto)));        
        
        public async Task<PRProjectDto> ProjectsGetProjectByKey(string projectKey) => await _connection.RequestResourceAsync<PRProjectDto>("GET", $"api/http/projects/key:{projectKey}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PRProjectDto)));        
        
        public async Task<List<PRProjectDto>> ProjectsGetAllProjectsByMember(string member) => await _connection.RequestResourceAsync<List<PRProjectDto>>("GET", $"api/http/projects/member:{member}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<PRProjectDto>)));        
        
        public async Task<List<PRProjectDto>> ProjectsGetAllProjectsWithRight(string rightCode) => await _connection.RequestResourceAsync<List<PRProjectDto>>("GET", $"api/http/projects/right-code:{rightCode}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<PRProjectDto>)));        
        
        public async Task<List<PRProjectDto>> ProjectsGetAllProjectsByTeam(string team) => await _connection.RequestResourceAsync<List<PRProjectDto>>("GET", $"api/http/projects/team:{team}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<PRProjectDto>)));        
        
        public async Task<PRProjectDto> ProjectsUpdateProject(string projectId, Object35Dto data) => await _connection.RequestResourceAsync<Object35Dto, PRProjectDto>("PATCH", $"api/http/projects/{projectId}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PRProjectDto)), data);        
        
        public async Task ProjectsDeleteProject(string projectId) => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}");        
        
        public async Task<PRProjectFullDto> FullProjectsGetFullProjectByKey(string projectKey) => await _connection.RequestResourceAsync<PRProjectFullDto>("GET", $"api/http/projects/full-projects/key:{projectKey}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PRProjectFullDto)));        
        
        public async Task<List<PRProjectFullDto>> FullProjectsGetAllFullProjectsByMember(string member) => await _connection.RequestResourceAsync<List<PRProjectFullDto>>("GET", $"api/http/projects/full-projects/member:{member}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<PRProjectFullDto>)));        
        
        public async Task<List<PRProjectFullDto>> FullProjectsGetAllFullProjectsByTeam(string teamId) => await _connection.RequestResourceAsync<List<PRProjectFullDto>>("GET", $"api/http/projects/full-projects/team:{teamId}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<PRProjectFullDto>)));        
        
        public async Task<PRProjectFullDto> FullProjectsGetFullProject(string id) => await _connection.RequestResourceAsync<PRProjectFullDto>("GET", $"api/http/projects/full-projects/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PRProjectFullDto)));        
        
        public async Task<List<PRPrivateProjectDto>> PrivateProjectsGetAllPrivateProjects() => await _connection.RequestResourceAsync<List<PRPrivateProjectDto>>("GET", $"api/http/projects/private-projects?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<PRPrivateProjectDto>)));        
        
        public async Task<List<ProjectForProfilePageDto>> ProjectsWithDetailsGetAllProjectsWithDetailsByMember(string member) => await _connection.RequestResourceAsync<List<ProjectForProfilePageDto>>("GET", $"api/http/projects/projects-with-details/member:{member}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<ProjectForProfilePageDto>)));        
        
        public async Task TagsTrackTagAccess(Object36Dto data) => await _connection.RequestResourceAsync<Object36Dto>("POST", $"api/http/projects/tags/track-access", data);        
        
        public async Task<List<PRTagDto>> TagsGetAllTags() => await _connection.RequestResourceAsync<List<PRTagDto>>("GET", $"api/http/projects/tags?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<PRTagDto>)));        
        
        public async Task CodeReviewsMarkReviewAsRead(string projectKey, string reviewId) => await _connection.RequestResourceAsync("POST", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/mark-as-read");        
        
        public async Task<Object37Dto> CodeReviewsGetAllCodeReviews(string projectKey) => await _connection.RequestResourceAsync<Object37Dto>("GET", $"api/http/projects/key:{projectKey}/code-reviews?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object37Dto)));        
        
        public async Task<ReviewCountsDto> CodeReviewsGetReviewCounts(string projectKey) => await _connection.RequestResourceAsync<ReviewCountsDto>("GET", $"api/http/projects/key:{projectKey}/code-reviews/review-counts?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(ReviewCountsDto)));        
        
        public async Task<CodeReviewRecordDto> CodeReviewsGetCodeReviewByReviewNumber(string projectKey, int reviewNumber) => await _connection.RequestResourceAsync<CodeReviewRecordDto>("GET", $"api/http/projects/key:{projectKey}/code-reviews/review-number:{reviewNumber}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(CodeReviewRecordDto)));        
        
        public async Task<Object38Dto> MembersGetAllMembers(string projectKey) => await _connection.RequestResourceAsync<Object38Dto>("GET", $"api/http/projects/key:{projectKey}/members?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object38Dto)));        
        
        public async Task MembersAddMember(string projectId, Object39Dto data) => await _connection.RequestResourceAsync<Object39Dto>("POST", $"api/http/projects/{projectId}/members", data);        
        
        public async Task MembersRemoveMember(string projectId, string profileId) => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/members/{profileId}");        
        
        public async Task<Object38Dto> MembersWhoCanViewGetAllMembersWhoCanView(string projectId) => await _connection.RequestResourceAsync<Object38Dto>("GET", $"api/http/projects/{projectId}/members-who-can-view?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object38Dto)));        
        
        public async Task TeamsAddTeam(string projectId, Object40Dto data) => await _connection.RequestResourceAsync<Object40Dto>("POST", $"api/http/projects/{projectId}/teams", data);        
        
        public async Task TeamsRemoveTeam(string projectId, string teamId) => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/teams/{teamId}");        
        
    }
    
    // Source: public-holidays
    public partial class PublicHolidayClient
    {
        private readonly Connection _connection;
        
        public PublicHolidayClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<PublicHolidayCalendarRecordDto> CalendarsCreateCalendar(Object41Dto data) => await _connection.RequestResourceAsync<Object41Dto, PublicHolidayCalendarRecordDto>("POST", $"api/http/public-holidays/calendars?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PublicHolidayCalendarRecordDto)), data);        
        
        public async Task<string> CalendarsImport(Object42Dto data) => await _connection.RequestResourceAsync<Object42Dto, string>("POST", $"api/http/public-holidays/calendars/import?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(string)), data);        
        
        public async Task<Object43Dto> CalendarsGetAllCalendars() => await _connection.RequestResourceAsync<Object43Dto>("GET", $"api/http/public-holidays/calendars?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object43Dto)));        
        
        public async Task<PublicHolidayCalendarRecordDto> CalendarsUpdateCalendar(string id, Object41Dto data) => await _connection.RequestResourceAsync<Object41Dto, PublicHolidayCalendarRecordDto>("PATCH", $"api/http/public-holidays/calendars/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PublicHolidayCalendarRecordDto)), data);        
        
        public async Task CalendarsDeleteCalendar(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/public-holidays/calendars/{id}");        
        
        public async Task<PublicHolidayDto> HolidaysCreateHoliday(Object44Dto data) => await _connection.RequestResourceAsync<Object44Dto, PublicHolidayDto>("POST", $"api/http/public-holidays/holidays?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PublicHolidayDto)), data);        
        
        public async Task<Object45Dto> HolidaysGetAllHolidays() => await _connection.RequestResourceAsync<Object45Dto>("GET", $"api/http/public-holidays/holidays?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object45Dto)));        
        
        public async Task<PublicHolidayDto> HolidaysUpdateHoliday(string id, Object46Dto data) => await _connection.RequestResourceAsync<Object46Dto, PublicHolidayDto>("PATCH", $"api/http/public-holidays/holidays/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(PublicHolidayDto)), data);        
        
        public async Task HolidaysDeleteHoliday(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/public-holidays/holidays/{id}");        
        
    }
    
    // Source: team-directory
    public partial class TeamDirectoryClient
    {
        private readonly Connection _connection;
        
        public TeamDirectoryClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<List<MeetingRecordDto>> CalendarEventsGetAllCalendarEvents() => await _connection.RequestResourceAsync<List<MeetingRecordDto>>("GET", $"api/http/team-directory/calendar-events?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<MeetingRecordDto>)));        
        
        public async Task<MeetingRecordDto> CalendarEventsGetCalendarEvent(string id) => await _connection.RequestResourceAsync<MeetingRecordDto>("GET", $"api/http/team-directory/calendar-events/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(MeetingRecordDto)));        
        
        public async Task<InvitationDto> InvitationsCreateInvitation(Object47Dto data) => await _connection.RequestResourceAsync<Object47Dto, InvitationDto>("POST", $"api/http/team-directory/invitations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(InvitationDto)), data);        
        
        public async Task<Object48Dto> InvitationsGetAllInvitations() => await _connection.RequestResourceAsync<Object48Dto>("GET", $"api/http/team-directory/invitations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object48Dto)));        
        
        public async Task InvitationsUpdateInvitation(string id, Object49Dto data) => await _connection.RequestResourceAsync<Object49Dto>("PATCH", $"api/http/team-directory/invitations/{id}", data);        
        
        public async Task InvitationsDeleteInvitation(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/invitations/{id}");        
        
        public async Task<List<TDLanguageDto>> LanguagesGetAllLanguages() => await _connection.RequestResourceAsync<List<TDLanguageDto>>("GET", $"api/http/team-directory/languages?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLanguageDto>)));        
        
        public async Task<List<TDLocationEquipmentTypeDto>> LocationEquipmentTypesGetAllLocationEquipmentTypes() => await _connection.RequestResourceAsync<List<TDLocationEquipmentTypeDto>>("GET", $"api/http/team-directory/location-equipment-types?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationEquipmentTypeDto>)));        
        
        public async Task LocationEquipmentTypesDeleteLocationEquipmentTypeByName(string name) => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/location-equipment-types/name:{name}");        
        
        public async Task<TDLocationDto> LocationsCreateLocation(Object50Dto data) => await _connection.RequestResourceAsync<Object50Dto, TDLocationDto>("POST", $"api/http/team-directory/locations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationDto)), data);        
        
        public async Task<List<TDLocationDto>> LocationsRestoreMultiple(Object51Dto data) => await _connection.RequestResourceAsync<Object51Dto, List<TDLocationDto>>("POST", $"api/http/team-directory/locations/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationDto>)), data);        
        
        public async Task<TDLocationDto> LocationsRestore(string id) => await _connection.RequestResourceAsync<TDLocationDto>("POST", $"api/http/team-directory/locations/{id}/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationDto)));        
        
        public async Task<List<TDLocationDto>> LocationsGetAllLocations() => await _connection.RequestResourceAsync<List<TDLocationDto>>("GET", $"api/http/team-directory/locations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationDto>)));        
        
        public async Task<TDLocationDto> LocationsGetLocation(string id) => await _connection.RequestResourceAsync<TDLocationDto>("GET", $"api/http/team-directory/locations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationDto)));        
        
        public async Task<TDLocationDto> LocationsUpdateLocation(string id, Object52Dto data) => await _connection.RequestResourceAsync<Object52Dto, TDLocationDto>("PATCH", $"api/http/team-directory/locations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationDto)), data);        
        
        public async Task<List<TDLocationDto>> LocationsArchiveLocation(string id) => await _connection.RequestResourceAsync<List<TDLocationDto>>("DELETE", $"api/http/team-directory/locations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationDto>)));        
        
        public async Task<List<TDLocationWithTimeZoneDto>> LocationsWithTimezoneGetAllLocationsWithTimezone() => await _connection.RequestResourceAsync<List<TDLocationWithTimeZoneDto>>("GET", $"api/http/team-directory/locations-with-timezone?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationWithTimeZoneDto>)));        
        
        public async Task<Object38Dto> ManagerCandidatesGetAllManagerCandidates() => await _connection.RequestResourceAsync<Object38Dto>("GET", $"api/http/team-directory/manager-candidates?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object38Dto)));        
        
        public async Task<TDMemberLocationDto> MemberLocationsCreateMemberLocation(Object53Dto data) => await _connection.RequestResourceAsync<Object53Dto, TDMemberLocationDto>("POST", $"api/http/team-directory/member-locations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberLocationDto)), data);        
        
        public async Task<Object54Dto> MemberLocationsGetAllMemberLocations() => await _connection.RequestResourceAsync<Object54Dto>("GET", $"api/http/team-directory/member-locations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object54Dto)));        
        
        public async Task<TDMemberLocationDto> MemberLocationsUpdateMemberLocation(string id, Object55Dto data) => await _connection.RequestResourceAsync<Object55Dto, TDMemberLocationDto>("PATCH", $"api/http/team-directory/member-locations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberLocationDto)), data);        
        
        public async Task MemberLocationsDeleteMemberLocation(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/member-locations/{id}");        
        
        public async Task<Object56Dto> MembershipEventsGetAllMembershipEvents() => await _connection.RequestResourceAsync<Object56Dto>("GET", $"api/http/team-directory/membership-events?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object56Dto)));        
        
        public async Task<TDMembershipDto> MembershipsCreateMembership(Object57Dto data) => await _connection.RequestResourceAsync<Object57Dto, TDMembershipDto>("POST", $"api/http/team-directory/memberships?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMembershipDto)), data);        
        
        public async Task<Object58Dto> MembershipsGetAllMemberships() => await _connection.RequestResourceAsync<Object58Dto>("GET", $"api/http/team-directory/memberships?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object58Dto)));        
        
        public async Task<TDMembershipDto> MembershipsUpdateMembership(string id, Object59Dto data) => await _connection.RequestResourceAsync<Object59Dto, TDMembershipDto>("PATCH", $"api/http/team-directory/memberships/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMembershipDto)), data);        
        
        public async Task MembershipsDeleteMembership(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/memberships/{id}");        
        
        public async Task MembershipsRevoke(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/memberships/{id}/revoke");        
        
        public async Task<TDMemberProfileDto> ProfilesCreateProfile(Object60Dto data) => await _connection.RequestResourceAsync<Object60Dto, TDMemberProfileDto>("POST", $"api/http/team-directory/profiles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)), data);        
        
        public async Task<Object38Dto> ProfilesGetAllProfiles() => await _connection.RequestResourceAsync<Object38Dto>("GET", $"api/http/team-directory/profiles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object38Dto)));        
        
        public async Task<List<string>> ProfilesCheckProfileUsernamesExistence() => await _connection.RequestResourceAsync<List<string>>("GET", $"api/http/team-directory/profiles/usernames-exist?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<string>)));        
        
        public async Task<TDMemberProfileDto> ProfilesGetProfileByUsername(string username) => await _connection.RequestResourceAsync<TDMemberProfileDto>("GET", $"api/http/team-directory/profiles/username:{username}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));        
        
        public async Task<TDMemberProfileDto> ProfilesGetProfile(string id) => await _connection.RequestResourceAsync<TDMemberProfileDto>("GET", $"api/http/team-directory/profiles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));        
        
        public async Task<bool> ProfilesCheckIfProfileIsTeamMember(string id) => await _connection.RequestResourceAsync<bool>("GET", $"api/http/team-directory/profiles/{id}/is-team-member?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(bool)));        
        
        public async Task<TDMemberProfileDto> ProfilesUpdateProfile(string id, Object61Dto data) => await _connection.RequestResourceAsync<Object61Dto, TDMemberProfileDto>("PATCH", $"api/http/team-directory/profiles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)), data);        
        
        public async Task<TDMemberProfileDto> ProfilesDeleteProfile(string id) => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));        
        
        public async Task<TDMemberProfileDto> ProfilesDeactivate(string id) => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{id}/deactivate?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));        
        
        public async Task<TDMemberProfileDto> ProfilesFire(string id) => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{id}/fire?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));        
        
        public async Task<Object38Dto> ReportingsGetAllReportings() => await _connection.RequestResourceAsync<Object38Dto>("GET", $"api/http/team-directory/reportings?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object38Dto)));        
        
        public async Task<TDRoleDto> RolesCreateRole(Object62Dto data) => await _connection.RequestResourceAsync<Object62Dto, TDRoleDto>("POST", $"api/http/team-directory/roles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDRoleDto)), data);        
        
        public async Task<TDRoleDto> RolesRestore(string id) => await _connection.RequestResourceAsync<TDRoleDto>("POST", $"api/http/team-directory/roles/{id}/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDRoleDto)));        
        
        public async Task<List<TDRoleDto>> RolesGetAllRoles() => await _connection.RequestResourceAsync<List<TDRoleDto>>("GET", $"api/http/team-directory/roles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDRoleDto>)));        
        
        public async Task<TDRoleDto> RolesGetRole(string id) => await _connection.RequestResourceAsync<TDRoleDto>("GET", $"api/http/team-directory/roles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDRoleDto)));        
        
        public async Task<TDRoleDto> RolesUpdateRole(string id, Object63Dto data) => await _connection.RequestResourceAsync<Object63Dto, TDRoleDto>("PATCH", $"api/http/team-directory/roles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDRoleDto)), data);        
        
        public async Task RolesArchiveRole(string id) => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/roles/{id}");        
        
        public async Task<TDStatsDto> StatsGetAllStats() => await _connection.RequestResourceAsync<TDStatsDto>("GET", $"api/http/team-directory/stats?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDStatsDto)));        
        
        public async Task<TDTeamDto> TeamsCreateTeam(Object64Dto data) => await _connection.RequestResourceAsync<Object64Dto, TDTeamDto>("POST", $"api/http/team-directory/teams?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)), data);        
        
        public async Task<List<TDTeamDto>> TeamsRestoreMultiple(Object51Dto data) => await _connection.RequestResourceAsync<Object51Dto, List<TDTeamDto>>("POST", $"api/http/team-directory/teams/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDTeamDto>)), data);        
        
        public async Task<TDTeamDto> TeamsRestore(string id) => await _connection.RequestResourceAsync<TDTeamDto>("POST", $"api/http/team-directory/teams/{id}/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)));        
        
        public async Task<Object65Dto> TeamsGetAllTeams() => await _connection.RequestResourceAsync<Object65Dto>("GET", $"api/http/team-directory/teams?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Object65Dto)));        
        
        public async Task<TDTeamDto> TeamsGetTeamByName(string name) => await _connection.RequestResourceAsync<TDTeamDto>("GET", $"api/http/team-directory/teams/name:{name}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)));        
        
        public async Task<TDTeamDto> TeamsGetTeam(string id) => await _connection.RequestResourceAsync<TDTeamDto>("GET", $"api/http/team-directory/teams/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)));        
        
        public async Task<TDTeamDto> TeamsUpdateTeam(string id, Object66Dto data) => await _connection.RequestResourceAsync<Object66Dto, TDTeamDto>("PATCH", $"api/http/team-directory/teams/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)), data);        
        
        public async Task<List<TDTeamDto>> TeamsArchiveTeam(string id) => await _connection.RequestResourceAsync<List<TDTeamDto>>("DELETE", $"api/http/team-directory/teams/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDTeamDto>)));        
        
        public async Task<List<TDTeamDto>> TeamsDisband(string id) => await _connection.RequestResourceAsync<List<TDTeamDto>>("DELETE", $"api/http/team-directory/teams/{id}/disband?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDTeamDto>)));        
        
    }
    
    // Source: Object0
    public class Object0Dto
    {
        [Required]
        [JsonProperty("first")]
        public TDTeamDto First { get; set; }

        [Required]
        [JsonProperty("second")]
        public int Second { get; set; }

    }
    
    // Source: Object1
    public class Object1Dto
    {
        [Required]
        [JsonProperty("first")]
        public PRProjectDto First { get; set; }

        [Required]
        [JsonProperty("second")]
        public int Second { get; set; }

    }
    
    // Source: Object10
    public class Object10Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<AbsenceRecordDto> Data { get; set; }

    }
    
    // Source: Object11
    public class Object11Dto
    {
        [JsonProperty("member")]
        public string? Member { get; set; }

        [JsonProperty("reason")]
        public string? Reason { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("location")]
        public string? Location { get; set; }

        [JsonProperty("since")]
        public SpaceDate? Since { get; set; }

        [JsonProperty("till")]
        public SpaceDate? Till { get; set; }

        [Required]
        [JsonProperty("available")]
        public bool Available { get; set; }

        [JsonProperty("icon")]
        public string? Icon { get; set; }

        [JsonProperty("customFieldValues")]
        public List<CustomFieldValueDto>? CustomFieldValues { get; set; }

    }
    
    // Source: Object12
    public class Object12Dto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("description")]
        public string Description { get; set; }

        [Required]
        [JsonProperty("defaultAvailability")]
        public bool DefaultAvailability { get; set; }

        [Required]
        [JsonProperty("approvalRequired")]
        public bool ApprovalRequired { get; set; }

        [JsonProperty("icon")]
        public string? Icon { get; set; }

    }
    
    // Source: Object13
    public class Object13Dto
    {
        [JsonProperty("locationId")]
        public string? LocationId { get; set; }

        [JsonProperty("teamId")]
        public string? TeamId { get; set; }

        [JsonProperty("reasonId")]
        public string? ReasonId { get; set; }

    }
    
    // Source: Object14
    public class Object14Dto
    {
        [JsonProperty("locationId")]
        public string? LocationId { get; set; }

        [JsonProperty("teamId")]
        public string? TeamId { get; set; }

        [JsonProperty("reasonId")]
        public string? ReasonId { get; set; }

    }
    
    // Source: Object15
    public class Object15Dto
    {
        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [Required]
        [JsonProperty("settings")]
        public ESAuthModuleSettingsDto Settings { get; set; }

    }
    
    // Source: Object16
    public class Object16Dto
    {
        [Required]
        [JsonProperty("order")]
        public List<string> Order { get; set; }

    }
    
    // Source: Object17
    public class Object17Dto
    {
        [JsonProperty("key")]
        public string? Key { get; set; }

        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("enabled")]
        public bool? Enabled { get; set; }

        [JsonProperty("settings")]
        public ESAuthModuleSettingsDto? Settings { get; set; }

    }
    
    // Source: Object18
    public class Object18Dto
    {
        [Required]
        [JsonProperty("markdown")]
        public string Markdown { get; set; }

    }
    
    // Source: Object19
    public class Object19Dto
    {
        [Required]
        [JsonProperty("title")]
        public string Title { get; set; }

        [Required]
        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("created")]
        public SpaceTime? Created { get; set; }

        [JsonProperty("team")]
        public string? Team { get; set; }

        [JsonProperty("location")]
        public string? Location { get; set; }

    }
    
    // Source: Object2
    public class Object2Dto
    {
        [Required]
        [JsonProperty("first")]
        public TDLocationDto First { get; set; }

        [Required]
        [JsonProperty("second")]
        public int Second { get; set; }

    }
    
    // Source: Object20
    public class Object20Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<ArticleRecordDto> Data { get; set; }

    }
    
    // Source: Object21
    public class Object21Dto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

    }
    
    // Source: Object22
    public class Object22Dto
    {
        [Required]
        [JsonProperty("channel")]
        public string Channel { get; set; }

        [Required]
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("temporaryId")]
        public string? TemporaryId { get; set; }

    }
    
    // Source: Object23
    public class Object23Dto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

        [Required]
        [JsonProperty("type")]
        public CFTypeDto Type { get; set; }

        [JsonProperty("constraint")]
        public CFConstraintDto? Constraint { get; set; }

        [Required]
        [JsonProperty("required")]
        public bool Required { get; set; }

        [Required]
        [JsonProperty("private")]
        public bool Private { get; set; }

        [JsonProperty("access")]
        public AccessType? Access { get; set; }

        [Required]
        [JsonProperty("defaultValue")]
        public CFValueDto DefaultValue { get; set; }

    }
    
    // Source: Object24
    public class Object24Dto
    {
        [Required]
        [JsonProperty("customFieldOrder")]
        public List<string> CustomFieldOrder { get; set; }

    }
    
    // Source: Object25
    public class Object25Dto
    {
        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("key")]
        public string? Key { get; set; }

        [JsonProperty("constraint")]
        public CFConstraintDto? Constraint { get; set; }

        [JsonProperty("required")]
        public bool? Required { get; set; }

        [JsonProperty("private")]
        public bool? Private { get; set; }

        [JsonProperty("access")]
        public AccessType? Access { get; set; }

        [JsonProperty("defaultValue")]
        public CFValueDto? DefaultValue { get; set; }

        [JsonProperty("enumValues")]
        public List<EnumValueDataDto>? EnumValues { get; set; }

    }
    
    // Source: Object26
    public class Object26Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<CustomFieldsRecordDto> Data { get; set; }

    }
    
    // Source: Object27
    public class Object27Dto
    {
        [Required]
        [JsonProperty("values")]
        public List<CustomFieldValueDto> Values { get; set; }

    }
    
    // Source: Object28
    public class Object28Dto
    {
        [JsonProperty("title")]
        public string? Title { get; set; }

        [JsonProperty("text")]
        public string? Text { get; set; }

        [JsonProperty("textVersion")]
        public long? TextVersion { get; set; }

        [JsonProperty("location")]
        public string? Location { get; set; }

        [JsonProperty("team")]
        public string? Team { get; set; }

        [JsonProperty("calendarEvent")]
        public bool? CalendarEvent { get; set; }

        [JsonProperty("start")]
        public SpaceTime? Start { get; set; }

        [JsonProperty("end")]
        public SpaceTime? End { get; set; }

        [JsonProperty("timezone")]
        public string? Timezone { get; set; }

        [JsonProperty("rooms")]
        public List<string>? Rooms { get; set; }

        [JsonProperty("allDay")]
        public bool? AllDay { get; set; }

    }
    
    // Source: Object29
    public class Object29Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<FTSBlogDto> Data { get; set; }

    }
    
    // Source: Object3
    public class Object3Dto
    {
        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

        [Required]
        [JsonProperty("value")]
        public EMavenRepositorySettingsDto Value { get; set; }

    }
    
    // Source: Object30
    public class Object30Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<FTSDraftDto> Data { get; set; }

    }
    
    // Source: Object31
    public class Object31Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<FTSProfileDto> Data { get; set; }

    }
    
    // Source: Object32
    public class Object32Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<FTSTeamDto> Data { get; set; }

    }
    
    // Source: Object33
    public class Object33Dto
    {
        [Required]
        [JsonProperty("key")]
        public ProjectKeyDto Key { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("private")]
        public bool? Private { get; set; }

        [JsonProperty("tags")]
        public List<string>? Tags { get; set; }

    }
    
    // Source: Object34
    public class Object34Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<PRProjectDto> Data { get; set; }

    }
    
    // Source: Object35
    public class Object35Dto
    {
        [JsonProperty("key")]
        public ProjectKeyDto? Key { get; set; }

        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("private")]
        public bool? Private { get; set; }

        [JsonProperty("tags")]
        public List<string>? Tags { get; set; }

        [JsonProperty("icon")]
        public string? Icon { get; set; }

    }
    
    // Source: Object36
    public class Object36Dto
    {
        [Required]
        [JsonProperty("tag")]
        public string Tag { get; set; }

    }
    
    // Source: Object37
    public class Object37Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<CodeReviewWithCountDto> Data { get; set; }

    }
    
    // Source: Object38
    public class Object38Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<TDMemberProfileDto> Data { get; set; }

    }
    
    // Source: Object39
    public class Object39Dto
    {
        [Required]
        [JsonProperty("profileId")]
        public string ProfileId { get; set; }

    }
    
    // Source: Object4
    public class Object4Dto
    {
        [Required]
        [JsonProperty("key")]
        public string Key { get; set; }

        [Required]
        [JsonProperty("value")]
        public ERepositorySettingsDto Value { get; set; }

    }
    
    // Source: Object40
    public class Object40Dto
    {
        [Required]
        [JsonProperty("teamId")]
        public string TeamId { get; set; }

    }
    
    // Source: Object41
    public class Object41Dto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("location")]
        public string Location { get; set; }

    }
    
    // Source: Object42
    public class Object42Dto
    {
        [Required]
        [JsonProperty("calendar")]
        public string Calendar { get; set; }

        [Required]
        [JsonProperty("url")]
        public string Url { get; set; }

    }
    
    // Source: Object43
    public class Object43Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<PublicHolidayCalendarRecordDto> Data { get; set; }

    }
    
    // Source: Object44
    public class Object44Dto
    {
        [Required]
        [JsonProperty("calendar")]
        public string Calendar { get; set; }

        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [Required]
        [JsonProperty("date")]
        public SpaceDate Date { get; set; }

        [Required]
        [JsonProperty("workingDay")]
        public bool WorkingDay { get; set; }

    }
    
    // Source: Object45
    public class Object45Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<PublicHolidayDto> Data { get; set; }

    }
    
    // Source: Object46
    public class Object46Dto
    {
        [JsonProperty("calendar")]
        public string? Calendar { get; set; }

        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("date")]
        public SpaceDate? Date { get; set; }

        [JsonProperty("workingDay")]
        public bool? WorkingDay { get; set; }

    }
    
    // Source: Object47
    public class Object47Dto
    {
        [Required]
        [JsonProperty("inviteeEmail")]
        public string InviteeEmail { get; set; }

        [Required]
        [JsonProperty("inviteeFirstName")]
        public string InviteeFirstName { get; set; }

        [Required]
        [JsonProperty("inviteeLastName")]
        public string InviteeLastName { get; set; }

        [JsonProperty("team")]
        public TDTeamDto? Team { get; set; }

        [JsonProperty("role")]
        public TDRoleDto? Role { get; set; }

    }
    
    // Source: Object48
    public class Object48Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<InvitationDto> Data { get; set; }

    }
    
    // Source: Object49
    public class Object49Dto
    {
        [JsonProperty("inviteeEmail")]
        public string? InviteeEmail { get; set; }

        [JsonProperty("inviteeFirstName")]
        public string? InviteeFirstName { get; set; }

        [JsonProperty("inviteeLastName")]
        public string? InviteeLastName { get; set; }

        [JsonProperty("team")]
        public TDTeamDto? Team { get; set; }

        [JsonProperty("role")]
        public TDRoleDto? Role { get; set; }

    }
    
    // Source: Object5
    public class Object5Dto
    {
        [Required]
        [JsonProperty("first")]
        public SpaceDate First { get; set; }

        [Required]
        [JsonProperty("second")]
        public int Second { get; set; }

    }
    
    // Source: Object50
    public class Object50Dto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("timezone")]
        public string? Timezone { get; set; }

        [JsonProperty("workdays")]
        public List<int>? Workdays { get; set; }

        [JsonProperty("phones")]
        public List<string>? Phones { get; set; }

        [JsonProperty("emails")]
        public List<string>? Emails { get; set; }

        [JsonProperty("equipment")]
        public List<string>? Equipment { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("address")]
        public string? Address { get; set; }

        [JsonProperty("type")]
        public string? Type { get; set; }

        [JsonProperty("parentId")]
        public string? ParentId { get; set; }

    }
    
    // Source: Object51
    public class Object51Dto
    {
        [Required]
        [JsonProperty("ids")]
        public List<string> Ids { get; set; }

    }
    
    // Source: Object52
    public class Object52Dto
    {
        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("timezone")]
        public string? Timezone { get; set; }

        [JsonProperty("customWorkdays")]
        public bool? CustomWorkdays { get; set; }

        [JsonProperty("workdays")]
        public List<int>? Workdays { get; set; }

        [JsonProperty("phones")]
        public List<string>? Phones { get; set; }

        [JsonProperty("emails")]
        public List<string>? Emails { get; set; }

        [JsonProperty("equipment")]
        public List<string>? Equipment { get; set; }

        [JsonProperty("description")]
        public string? Description { get; set; }

        [JsonProperty("address")]
        public string? Address { get; set; }

        [JsonProperty("type")]
        public string? Type { get; set; }

        [JsonProperty("parentId")]
        public string? ParentId { get; set; }

        [JsonProperty("mapId")]
        public string? MapId { get; set; }

    }
    
    // Source: Object53
    public class Object53Dto
    {
        [Required]
        [JsonProperty("member")]
        public string Member { get; set; }

        [Required]
        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("since")]
        public SpaceDate? Since { get; set; }

        [JsonProperty("till")]
        public SpaceDate? Till { get; set; }

        [JsonProperty("previousLocation")]
        public string? PreviousLocation { get; set; }

    }
    
    // Source: Object54
    public class Object54Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<TDMemberLocationDto> Data { get; set; }

    }
    
    // Source: Object55
    public class Object55Dto
    {
        [JsonProperty("member")]
        public string? Member { get; set; }

        [JsonProperty("location")]
        public string? Location { get; set; }

        [JsonProperty("since")]
        public SpaceDate? Since { get; set; }

        [JsonProperty("till")]
        public SpaceDate? Till { get; set; }

        [JsonProperty("previousLocation")]
        public string? PreviousLocation { get; set; }

    }
    
    // Source: Object56
    public class Object56Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<TDMergedEventDto> Data { get; set; }

    }
    
    // Source: Object57
    public class Object57Dto
    {
        [Required]
        [JsonProperty("memberId")]
        public string MemberId { get; set; }

        [Required]
        [JsonProperty("teamId")]
        public string TeamId { get; set; }

        [Required]
        [JsonProperty("roleId")]
        public string RoleId { get; set; }

        [Required]
        [JsonProperty("lead")]
        public bool Lead { get; set; }

        [JsonProperty("managerId")]
        public string? ManagerId { get; set; }

        [JsonProperty("since")]
        public SpaceDate? Since { get; set; }

        [JsonProperty("till")]
        public SpaceDate? Till { get; set; }

        [JsonProperty("activeSince")]
        public SpaceTime? ActiveSince { get; set; }

        [JsonProperty("activeTill")]
        public SpaceTime? ActiveTill { get; set; }

        [JsonProperty("previousMembershipId")]
        public string? PreviousMembershipId { get; set; }

        [Required]
        [JsonProperty("requiresApproval")]
        public bool RequiresApproval { get; set; }

        [JsonProperty("customFieldValues")]
        public List<CustomFieldValueDto>? CustomFieldValues { get; set; }

    }
    
    // Source: Object58
    public class Object58Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<TDMembershipDto> Data { get; set; }

    }
    
    // Source: Object59
    public class Object59Dto
    {
        [JsonProperty("memberId")]
        public string? MemberId { get; set; }

        [JsonProperty("teamId")]
        public string? TeamId { get; set; }

        [JsonProperty("roleId")]
        public string? RoleId { get; set; }

        [JsonProperty("lead")]
        public bool? Lead { get; set; }

        [JsonProperty("managerId")]
        public string? ManagerId { get; set; }

        [JsonProperty("since")]
        public SpaceDate? Since { get; set; }

        [JsonProperty("till")]
        public SpaceDate? Till { get; set; }

        [JsonProperty("activeSince")]
        public SpaceTime? ActiveSince { get; set; }

        [JsonProperty("activeTill")]
        public SpaceTime? ActiveTill { get; set; }

        [JsonProperty("previousMembershipId")]
        public string? PreviousMembershipId { get; set; }

        [Required]
        [JsonProperty("requiresApproval")]
        public bool RequiresApproval { get; set; }

        [JsonProperty("customFieldValues")]
        public List<CustomFieldValueDto>? CustomFieldValues { get; set; }

    }
    
    // Source: Object6
    public class Object6Dto
    {
        [Required]
        [JsonProperty("first")]
        public TDMembershipDto First { get; set; }

        [Required]
        [JsonProperty("second")]
        public int Second { get; set; }

    }
    
    // Source: Object60
    public class Object60Dto
    {
        [Required]
        [JsonProperty("username")]
        public string Username { get; set; }

        [Required]
        [JsonProperty("firstName")]
        public string FirstName { get; set; }

        [Required]
        [JsonProperty("lastName")]
        public string LastName { get; set; }

        [JsonProperty("emails")]
        public List<string>? Emails { get; set; }

        [JsonProperty("phones")]
        public List<string>? Phones { get; set; }

        [JsonProperty("birthday")]
        public SpaceDate? Birthday { get; set; }

        [JsonProperty("about")]
        public string? About { get; set; }

        [JsonProperty("gender")]
        public Gender? Gender { get; set; }

        [JsonProperty("messengers")]
        public List<string>? Messengers { get; set; }

        [JsonProperty("links")]
        public List<string>? Links { get; set; }

        [JsonProperty("notAMember")]
        public bool? NotAMember { get; set; }

        [JsonProperty("joined")]
        public SpaceDate? Joined { get; set; }

        [JsonProperty("left")]
        public SpaceDate? Left { get; set; }

        [JsonProperty("speaksEnglish")]
        public bool? SpeaksEnglish { get; set; }

        [JsonProperty("pictureAttachmentId")]
        public string? PictureAttachmentId { get; set; }

        [JsonProperty("avatarCropSquare")]
        public AvatarCropSquareDto? AvatarCropSquare { get; set; }

        [JsonProperty("customFieldValues")]
        public List<CustomFieldValueDto>? CustomFieldValues { get; set; }

    }
    
    // Source: Object61
    public class Object61Dto
    {
        [JsonProperty("username")]
        public string? Username { get; set; }

        [JsonProperty("firstName")]
        public string? FirstName { get; set; }

        [JsonProperty("lastName")]
        public string? LastName { get; set; }

        [JsonProperty("emails")]
        public List<string>? Emails { get; set; }

        [JsonProperty("phones")]
        public List<string>? Phones { get; set; }

        [JsonProperty("birthday")]
        public SpaceDate? Birthday { get; set; }

        [JsonProperty("about")]
        public string? About { get; set; }

        [JsonProperty("gender")]
        public Gender? Gender { get; set; }

        [JsonProperty("messengers")]
        public List<string>? Messengers { get; set; }

        [JsonProperty("links")]
        public List<string>? Links { get; set; }

        [JsonProperty("notAMember")]
        public bool? NotAMember { get; set; }

        [JsonProperty("joined")]
        public SpaceDate? Joined { get; set; }

        [JsonProperty("left")]
        public SpaceDate? Left { get; set; }

        [JsonProperty("speaksEnglish")]
        public bool? SpeaksEnglish { get; set; }

        [JsonProperty("pictureAttachmentId")]
        public string? PictureAttachmentId { get; set; }

        [JsonProperty("avatarCropSquare")]
        public AvatarCropSquareDto? AvatarCropSquare { get; set; }

        [JsonProperty("customFieldValues")]
        public List<CustomFieldValueDto>? CustomFieldValues { get; set; }

    }
    
    // Source: Object62
    public class Object62Dto
    {
        [Required]
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("parentId")]
        public string? ParentId { get; set; }

    }
    
    // Source: Object63
    public class Object63Dto
    {
        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("parentId")]
        public string? ParentId { get; set; }

    }
    
    // Source: Object64
    public class Object64Dto
    {
        [Required]
        [JsonProperty("teamNameRaw")]
        public string TeamNameRaw { get; set; }

        [JsonProperty("teamDescription")]
        public string? TeamDescription { get; set; }

        [JsonProperty("teamEmails")]
        public List<string>? TeamEmails { get; set; }

        [JsonProperty("parentId")]
        public string? ParentId { get; set; }

    }
    
    // Source: Object65
    public class Object65Dto
    {
        [Required]
        [JsonProperty("next")]
        public string Next { get; set; }

        [JsonProperty("totalCount")]
        public int? TotalCount { get; set; }

        [Required]
        [JsonProperty("data")]
        public List<TDTeamDto> Data { get; set; }

    }
    
    // Source: Object66
    public class Object66Dto
    {
        [JsonProperty("teamNameRaw")]
        public string? TeamNameRaw { get; set; }

        [JsonProperty("teamDescription")]
        public string? TeamDescription { get; set; }

        [JsonProperty("teamEmails")]
        public List<string>? TeamEmails { get; set; }

        [JsonProperty("parentId")]
        public string? ParentId { get; set; }

    }
    
    // Source: Object7
    public class Object7Dto
    {
        [Required]
        [JsonProperty("first")]
        public TDRoleDto First { get; set; }

        [Required]
        [JsonProperty("second")]
        public int Second { get; set; }

    }
    
    // Source: Object8
    public class Object8Dto
    {
        [Required]
        [JsonProperty("member")]
        public string Member { get; set; }

        [Required]
        [JsonProperty("reason")]
        public string Reason { get; set; }

        [Required]
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("location")]
        public string? Location { get; set; }

        [Required]
        [JsonProperty("since")]
        public SpaceDate Since { get; set; }

        [Required]
        [JsonProperty("till")]
        public SpaceDate Till { get; set; }

        [Required]
        [JsonProperty("available")]
        public bool Available { get; set; }

        [Required]
        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("customFieldValues")]
        public List<CustomFieldValueDto>? CustomFieldValues { get; set; }

    }
    
    // Source: Object9
    public class Object9Dto
    {
        [Required]
        [JsonProperty("approve")]
        public bool Approve { get; set; }

    }
    
}
