// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public partial class DocClient
    {
        private readonly Connection _connection;
        
        public DocClient(Connection connection)
        {
            _connection = connection;
        }
        
        public DraftClient Drafts => new DraftClient(_connection);
        
        public partial class DraftClient
        {
            private readonly Connection _connection;
            
            public DraftClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<DRDraftDto> CreateDraftAsync(DraftDocumentType? type = null, string? title = null, string? text = null, long? textVersion = null, string? folder = null, DraftPublicationDetailsDto? publicationDetails = null, PublicationDetailsDto? publicationDetails2 = null, Func<Partial<DRDraftDto>, Partial<DRDraftDto>>? partial = null)
                => await _connection.RequestResourceAsync<DocsDraftsPostRequest, DRDraftDto>("POST", $"api/http/docs/drafts?$fields={(partial != null ? partial(new Partial<DRDraftDto>()) : Partial<DRDraftDto>.Default())}", 
                    new DocsDraftsPostRequest { 
                        Title = title,
                        Text = text,
                        TextVersion = textVersion,
                        Type = (type ?? DraftDocumentType.WYSIWYG),
                        Folder = folder,
                        PublicationDetails = publicationDetails,
                        PublicationDetails2 = publicationDetails2,
                    }
            );
        
            public async Task<DRDraftDto> GetDraftAsync(string id, Func<Partial<DRDraftDto>, Partial<DRDraftDto>>? partial = null)
                => await _connection.RequestResourceAsync<DRDraftDto>("GET", $"api/http/docs/drafts/{id}?$fields={(partial != null ? partial(new Partial<DRDraftDto>()) : Partial<DRDraftDto>.Default())}");
        
            public async Task<DRDraftDto> UpdateDraftAsync(string id, string? title = null, string? text = null, long? textVersion = null, DraftDocumentType? type = null, DraftPublicationDetailsDto? publicationDetails = null, PublicationDetailsDto? publicationDetails2 = null, Func<Partial<DRDraftDto>, Partial<DRDraftDto>>? partial = null)
                => await _connection.RequestResourceAsync<DocsDraftsForIdPatchRequest, DRDraftDto>("PATCH", $"api/http/docs/drafts/{id}?$fields={(partial != null ? partial(new Partial<DRDraftDto>()) : Partial<DRDraftDto>.Default())}", 
                    new DocsDraftsForIdPatchRequest { 
                        Title = title,
                        Text = text,
                        TextVersion = textVersion,
                        Type = type,
                        PublicationDetails = publicationDetails,
                        PublicationDetails2 = publicationDetails2,
                    }
            );
        
            public async Task DeleteDraftAsync(string id)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/docs/drafts/{id}");
        
            public FolderClient Folder => new FolderClient(_connection);
            
            public partial class FolderClient
            {
                private readonly Connection _connection;
                
                public FolderClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<DocumentFolderRecordDto> CreateFolderAsync(string name, string? parentId = null, Func<Partial<DocumentFolderRecordDto>, Partial<DocumentFolderRecordDto>>? partial = null)
                    => await _connection.RequestResourceAsync<DocsDraftsFolderPostRequest, DocumentFolderRecordDto>("POST", $"api/http/docs/drafts/folder?$fields={(partial != null ? partial(new Partial<DocumentFolderRecordDto>()) : Partial<DocumentFolderRecordDto>.Default())}", 
                        new DocsDraftsFolderPostRequest { 
                            Name = name,
                            ParentId = parentId,
                        }
                );
            
                public async Task DeleteFolderAsync(string id)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/docs/drafts/folder/{id}");
            
                public NameClient Name => new NameClient(_connection);
                
                public partial class NameClient
                {
                    private readonly Connection _connection;
                    
                    public NameClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task UpdateNameAsync(string id, string name)
                        => await _connection.RequestResourceAsync("PATCH", $"api/http/docs/drafts/folder/{id}/name", 
                            new DocsDraftsFolderForIdNamePatchRequest { 
                                Name = name,
                            }
                    );
                
                }
            
                public ParentClient Parent => new ParentClient(_connection);
                
                public partial class ParentClient
                {
                    private readonly Connection _connection;
                    
                    public ParentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task UpdateParentAsync(string id, string parentFolderId)
                        => await _connection.RequestResourceAsync("PATCH", $"api/http/docs/drafts/folder/{id}/parent", 
                            new DocsDraftsFolderForIdParentPatchRequest { 
                                ParentFolderId = parentFolderId,
                            }
                    );
                
                }
            
            }
        
            public EditorClient Editors => new EditorClient(_connection);
            
            public partial class EditorClient
            {
                private readonly Connection _connection;
                
                public EditorClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task CreateProfileAsync(string id, string editorId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/docs/drafts/{id}/editors/profiles", 
                            new DocsDraftsForIdEditorsProfilesPostRequest { 
                                EditorId = editorId,
                            }
                    );
                
                    public async Task<List<TDMemberProfileDto>> GetAllProfilesAsync(string id, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<TDMemberProfileDto>>("GET", $"api/http/docs/drafts/{id}/editors/profiles?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
                
                    public async Task DeleteProfileAsync(string id, string editorId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/docs/drafts/{id}/editors/profiles/{editorId}");
                
                }
            
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task CreateTeamAsync(string id, string teamId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/docs/drafts/{id}/editors/teams", 
                            new DocsDraftsForIdEditorsTeamsPostRequest { 
                                TeamId = teamId,
                            }
                    );
                
                    public async Task<List<TDTeamDto>> GetAllTeamsAsync(string id, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<TDTeamDto>>("GET", $"api/http/docs/drafts/{id}/editors/teams?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}");
                
                    public async Task DeleteTeamAsync(string id, string teamId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/docs/drafts/{id}/editors/teams/{teamId}");
                
                }
            
            }
        
        }
    
    }
    
}
