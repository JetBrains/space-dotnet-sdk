// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// 
//     Generated: 2020-05-18T10:16:39.5412969+00:00
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public partial class TeamDirectoryClient
    {
        private readonly Connection _connection;
        
        public TeamDirectoryClient(Connection connection)
        {
            _connection = connection;
        }
        
        public CalendarEventClient CalendarEvents => new CalendarEventClient(_connection);
        
        public partial class CalendarEventClient
        {
            private readonly Connection _connection;
            
            public CalendarEventClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<MeetingRecordDto>> GetAllCalendarEvents(SpaceDate dateFrom, SpaceDate dateTo)
                => await _connection.RequestResourceAsync<List<MeetingRecordDto>>("GET", $"api/http/team-directory/calendar-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<MeetingRecordDto>)));            
            
            public async Task<MeetingRecordDto> GetCalendarEvent(string id)
                => await _connection.RequestResourceAsync<MeetingRecordDto>("GET", $"api/http/team-directory/calendar-events/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(MeetingRecordDto)));            
            
            public AbsenceEventClient AbsenceEvents => new AbsenceEventClient(_connection);
            
            public partial class AbsenceEventClient
            {
                private readonly Connection _connection;
                
                public AbsenceEventClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<AbsenceEventDto>> GetAllAbsenceEvents(SpaceDate dateFrom, SpaceDate dateTo, string? team = null, string? location = null, string? role = null)
                    => await _connection.RequestResourceAsync<List<AbsenceEventDto>>("GET", $"api/http/team-directory/calendar-events/absence-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<AbsenceEventDto>)));                
                
            }
            
            public BirthdayEventClient BirthdayEvents => new BirthdayEventClient(_connection);
            
            public partial class BirthdayEventClient
            {
                private readonly Connection _connection;
                
                public BirthdayEventClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<BirthdayEventDto>> GetAllBirthdayEvents(SpaceDate dateFrom, SpaceDate dateTo, string? team = null, string? location = null, string? role = null)
                    => await _connection.RequestResourceAsync<List<BirthdayEventDto>>("GET", $"api/http/team-directory/calendar-events/birthday-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<BirthdayEventDto>)));                
                
                public StarredClient Starred => new StarredClient(_connection);
                
                public partial class StarredClient
                {
                    private readonly Connection _connection;
                    
                    public StarredClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<BirthdayEventDto>> GetAllStarredBirthdayEvents(SpaceDate dateFrom, SpaceDate dateTo)
                        => await _connection.RequestResourceAsync<List<BirthdayEventDto>>("GET", $"api/http/team-directory/calendar-events/birthday-events/starred?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<BirthdayEventDto>)));                    
                    
                }
                
            }
            
            public MeetingParticipationClient MeetingParticipations => new MeetingParticipationClient(_connection);
            
            public partial class MeetingParticipationClient
            {
                private readonly Connection _connection;
                
                public MeetingParticipationClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<MeetingRecordDto> UpdateMeetingParticipation(string id, UpdateMeetingParticipationRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateMeetingParticipationRequestDto, MeetingRecordDto>("PATCH", $"api/http/team-directory/calendar-events/meeting-participations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(MeetingRecordDto)), data);                
                
            }
            
            public MembershipEventClient MembershipEvents => new MembershipEventClient(_connection);
            
            public partial class MembershipEventClient
            {
                private readonly Connection _connection;
                
                public MembershipEventClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<MembershipEventDto>> GetAllMembershipEvents(SpaceDate dateFrom, SpaceDate dateTo, string? team = null, string? location = null, string? role = null)
                    => await _connection.RequestResourceAsync<List<MembershipEventDto>>("GET", $"api/http/team-directory/calendar-events/membership-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<MembershipEventDto>)));                
                
            }
            
            public NonWorkingDaysEventClient NonWorkingDaysEvents => new NonWorkingDaysEventClient(_connection);
            
            public partial class NonWorkingDaysEventClient
            {
                private readonly Connection _connection;
                
                public NonWorkingDaysEventClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<NonWorkingDaysEventDto>> GetAllNonWorkingDaysEvents(SpaceDate dateFrom, SpaceDate dateTo, string? member = null, string? team = null, string? location = null, string? role = null)
                    => await _connection.RequestResourceAsync<List<NonWorkingDaysEventDto>>("GET", $"api/http/team-directory/calendar-events/non-working-days-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&member={member?.ToString() ?? "null"}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<NonWorkingDaysEventDto>)));                
                
            }
            
        }
        
        public InvitationClient Invitations => new InvitationClient(_connection);
        
        public partial class InvitationClient
        {
            private readonly Connection _connection;
            
            public InvitationClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<InvitationDto> CreateInvitation(CreateInvitationRequestDto data)
                => await _connection.RequestResourceAsync<CreateInvitationRequestDto, InvitationDto>("POST", $"api/http/team-directory/invitations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(InvitationDto)), data);            
            
            public async Task<Batch<InvitationDto>> GetAllInvitations(string? skip = null, int? top = null)
                => await _connection.RequestResourceAsync<Batch<InvitationDto>>("GET", $"api/http/team-directory/invitations?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<InvitationDto>)));            
            
            public async Task UpdateInvitation(string id, UpdateInvitationRequestDto data)
                => await _connection.RequestResourceAsync<UpdateInvitationRequestDto>("PATCH", $"api/http/team-directory/invitations/{id}", data);            
            
            public async Task DeleteInvitation(string id)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/invitations/{id}");            
            
        }
        
        public LanguageClient Languages => new LanguageClient(_connection);
        
        public partial class LanguageClient
        {
            private readonly Connection _connection;
            
            public LanguageClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<TDLanguageDto>> GetAllLanguages()
                => await _connection.RequestResourceAsync<List<TDLanguageDto>>("GET", $"api/http/team-directory/languages?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLanguageDto>)));            
            
        }
        
        public LocationEquipmentTypeClient LocationEquipmentTypes => new LocationEquipmentTypeClient(_connection);
        
        public partial class LocationEquipmentTypeClient
        {
            private readonly Connection _connection;
            
            public LocationEquipmentTypeClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<TDLocationEquipmentTypeDto>> GetAllLocationEquipmentTypes(bool withArchived)
                => await _connection.RequestResourceAsync<List<TDLocationEquipmentTypeDto>>("GET", $"api/http/team-directory/location-equipment-types?withArchived={withArchived.ToString().ToLowerInvariant()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationEquipmentTypeDto>)));            
            
            public async Task DeleteLocationEquipmentTypeByName(string name, bool delete)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/location-equipment-types/name:{name}?delete={delete.ToString().ToLowerInvariant()}");            
            
        }
        
        public LocationClient Locations => new LocationClient(_connection);
        
        public partial class LocationClient
        {
            private readonly Connection _connection;
            
            public LocationClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<TDLocationDto> CreateLocation(CreateLocationRequestDto data)
                => await _connection.RequestResourceAsync<CreateLocationRequestDto, TDLocationDto>("POST", $"api/http/team-directory/locations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationDto)), data);            
            
            public async Task<List<TDLocationDto>> RestoreMultiple(RestoreMultipleRequestDto data)
                => await _connection.RequestResourceAsync<RestoreMultipleRequestDto, List<TDLocationDto>>("POST", $"api/http/team-directory/locations/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationDto>)), data);            
            
            public async Task<TDLocationDto> Restore(string id)
                => await _connection.RequestResourceAsync<TDLocationDto>("POST", $"api/http/team-directory/locations/{id}/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationDto)));            
            
            public async Task<List<TDLocationDto>> GetAllLocations(string query, bool withArchived, string? type = null)
                => await _connection.RequestResourceAsync<List<TDLocationDto>>("GET", $"api/http/team-directory/locations?query={query.ToString()}&type={type?.ToString() ?? "null"}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationDto>)));            
            
            public async Task<TDLocationDto> GetLocation(string id)
                => await _connection.RequestResourceAsync<TDLocationDto>("GET", $"api/http/team-directory/locations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationDto)));            
            
            public async Task<TDLocationDto> UpdateLocation(string id, UpdateLocationRequestDto data)
                => await _connection.RequestResourceAsync<UpdateLocationRequestDto, TDLocationDto>("PATCH", $"api/http/team-directory/locations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationDto)), data);            
            
            public async Task<List<TDLocationDto>> ArchiveLocation(string id)
                => await _connection.RequestResourceAsync<List<TDLocationDto>>("DELETE", $"api/http/team-directory/locations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationDto>)));            
            
            public MapClient Map => new MapClient(_connection);
            
            public partial class MapClient
            {
                private readonly Connection _connection;
                
                public MapClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<TDLocationMapDto> GetMap(string id)
                    => await _connection.RequestResourceAsync<TDLocationMapDto>("GET", $"api/http/team-directory/locations/{id}/map?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationMapDto)));                
                
                public async Task<TDLocationMapDto> UpdateMap(string id, UpdateMapRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateMapRequestDto, TDLocationMapDto>("PATCH", $"api/http/team-directory/locations/{id}/map?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationMapDto)), data);                
                
                public MemberClient Members => new MemberClient(_connection);
                
                public partial class MemberClient
                {
                    private readonly Connection _connection;
                    
                    public MemberClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<TDMemberInLocationMapListDto>> GetAllMembers(string id, bool includeUnmarked)
                        => await _connection.RequestResourceAsync<List<TDMemberInLocationMapListDto>>("GET", $"api/http/team-directory/locations/{id}/map/members?includeUnmarked={includeUnmarked.ToString().ToLowerInvariant()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDMemberInLocationMapListDto>)));                    
                    
                }
                
            }
            
        }
        
        public LocationsWithTimezoneClient LocationsWithTimezone => new LocationsWithTimezoneClient(_connection);
        
        public partial class LocationsWithTimezoneClient
        {
            private readonly Connection _connection;
            
            public LocationsWithTimezoneClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<TDLocationWithTimeZoneDto>> GetAllLocationsWithTimezone()
                => await _connection.RequestResourceAsync<List<TDLocationWithTimeZoneDto>>("GET", $"api/http/team-directory/locations-with-timezone?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDLocationWithTimeZoneDto>)));            
            
        }
        
        public ManagerCandidateClient ManagerCandidates => new ManagerCandidateClient(_connection);
        
        public partial class ManagerCandidateClient
        {
            private readonly Connection _connection;
            
            public ManagerCandidateClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<TDMemberProfileDto>> GetAllManagerCandidates(string term, string? skip = null, int? top = null, string? teamId = null, string? excludedMemberId = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/team-directory/manager-candidates?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term.ToString()}&teamId={teamId?.ToString() ?? "null"}&excludedMemberId={excludedMemberId?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<TDMemberProfileDto>)));            
            
        }
        
        public MemberLocationClient MemberLocations => new MemberLocationClient(_connection);
        
        public partial class MemberLocationClient
        {
            private readonly Connection _connection;
            
            public MemberLocationClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<TDMemberLocationDto> CreateMemberLocation(CreateMemberLocationRequestDto data)
                => await _connection.RequestResourceAsync<CreateMemberLocationRequestDto, TDMemberLocationDto>("POST", $"api/http/team-directory/member-locations?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberLocationDto)), data);            
            
            public async Task<Batch<TDMemberLocationDto>> GetAllMemberLocations(bool withArchived, string? skip = null, int? top = null, List<string>? profiles = null, List<string>? locations = null, SpaceDate? since = null, SpaceDate? till = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberLocationDto>>("GET", $"api/http/team-directory/member-locations?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&profiles={profiles?.JoinToString("profiles", it => it.ToString()) ?? "null"}&locations={locations?.JoinToString("locations", it => it.ToString()) ?? "null"}&since={since?.ToString() ?? "null"}&till={till?.ToString() ?? "null"}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<TDMemberLocationDto>)));            
            
            public async Task<TDMemberLocationDto> UpdateMemberLocation(string id, UpdateMemberLocationRequestDto data)
                => await _connection.RequestResourceAsync<UpdateMemberLocationRequestDto, TDMemberLocationDto>("PATCH", $"api/http/team-directory/member-locations/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberLocationDto)), data);            
            
            public async Task DeleteMemberLocation(string id, bool delete)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/member-locations/{id}?delete={delete.ToString().ToLowerInvariant()}");            
            
            public PointClient Points => new PointClient(_connection);
            
            public partial class PointClient
            {
                private readonly Connection _connection;
                
                public PointClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<TDLocationMapPointDto> CreatePoint(string id, CreatePointRequestDto data)
                    => await _connection.RequestResourceAsync<CreatePointRequestDto, TDLocationMapPointDto>("POST", $"api/http/team-directory/member-locations/{id}/points?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationMapPointDto)), data);                
                
                public async Task<TDLocationMapPointDto> UpdatePoint(string locationPointId, string id, UpdatePointRequestDto data)
                    => await _connection.RequestResourceAsync<UpdatePointRequestDto, TDLocationMapPointDto>("PATCH", $"api/http/team-directory/member-locations/{id}/points/{locationPointId}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDLocationMapPointDto)), data);                
                
                public async Task DeletePoint(string id, string locationPointId, bool delete)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/member-locations/{id}/points/{locationPointId}?delete={delete.ToString().ToLowerInvariant()}");                
                
            }
            
        }
        
        public MembershipEventClient MembershipEvents => new MembershipEventClient(_connection);
        
        public partial class MembershipEventClient
        {
            private readonly Connection _connection;
            
            public MembershipEventClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<TDMergedEventDto>> GetAllMembershipEvents(string? skip = null, int? top = null, string? teamId = null, string? locationId = null, string? roleId = null)
                => await _connection.RequestResourceAsync<Batch<TDMergedEventDto>>("GET", $"api/http/team-directory/membership-events?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&teamId={teamId?.ToString() ?? "null"}&locationId={locationId?.ToString() ?? "null"}&roleId={roleId?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<TDMergedEventDto>)));            
            
        }
        
        public MembershipClient Memberships => new MembershipClient(_connection);
        
        public partial class MembershipClient
        {
            private readonly Connection _connection;
            
            public MembershipClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<TDMembershipDto> CreateMembership(CreateMembershipRequestDto data)
                => await _connection.RequestResourceAsync<CreateMembershipRequestDto, TDMembershipDto>("POST", $"api/http/team-directory/memberships?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMembershipDto)), data);            
            
            public async Task<Batch<TDMembershipDto>> GetAllMemberships(bool directTeams, bool directRoles, bool withArchived, string? skip = null, int? top = null, List<string>? profiles = null, List<string>? teams = null, List<string>? roles = null, SpaceDate? since = null, SpaceDate? till = null, bool? requiresApproval = null)
                => await _connection.RequestResourceAsync<Batch<TDMembershipDto>>("GET", $"api/http/team-directory/memberships?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&profiles={profiles?.JoinToString("profiles", it => it.ToString()) ?? "null"}&teams={teams?.JoinToString("teams", it => it.ToString()) ?? "null"}&directTeams={directTeams.ToString().ToLowerInvariant()}&roles={roles?.JoinToString("roles", it => it.ToString()) ?? "null"}&directRoles={directRoles.ToString().ToLowerInvariant()}&since={since?.ToString() ?? "null"}&till={till?.ToString() ?? "null"}&requiresApproval={requiresApproval?.ToString()?.ToLowerInvariant() ?? "null"}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<TDMembershipDto>)));            
            
            public async Task<TDMembershipDto> UpdateMembership(string id, UpdateMembershipRequestDto data)
                => await _connection.RequestResourceAsync<UpdateMembershipRequestDto, TDMembershipDto>("PATCH", $"api/http/team-directory/memberships/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMembershipDto)), data);            
            
            public async Task DeleteMembership(string id, bool delete)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/memberships/{id}?delete={delete.ToString().ToLowerInvariant()}");            
            
            public async Task Revoke(string id, SpaceTime? till = null)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/memberships/{id}/revoke?till={till?.ToString() ?? "null"}");            
            
            public RequestClient Requests => new RequestClient(_connection);
            
            public partial class RequestClient
            {
                private readonly Connection _connection;
                
                public RequestClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>> GetAllRequests(string? skip = null, int? top = null, string? teamId = null, bool? direct = null)
                    => await _connection.RequestResourceAsync<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>>("GET", $"api/http/team-directory/memberships/requests?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&teamId={teamId?.ToString() ?? "null"}&direct={direct?.ToString()?.ToLowerInvariant() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<Pair<TDMemberProfileDto, TDMembershipDto>>)));                
                
                public async Task UpdateRequest(string id, UpdateRequestRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateRequestRequestDto>("PATCH", $"api/http/team-directory/memberships/requests/{id}", data);                
                
                public async Task<TDMembershipDto> DeleteRequest(string id)
                    => await _connection.RequestResourceAsync<TDMembershipDto>("DELETE", $"api/http/team-directory/memberships/requests/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMembershipDto)));                
                
            }
            
            public RequestRevokeClient RequestRevoke => new RequestRevokeClient(_connection);
            
            public partial class RequestRevokeClient
            {
                private readonly Connection _connection;
                
                public RequestRevokeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task UpdateRequestRevoke(string id, UpdateRequestRevokeRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateRequestRevokeRequestDto>("PATCH", $"api/http/team-directory/memberships/{id}/request-revoke", data);                
                
            }
            
        }
        
        public ProfileClient Profiles => new ProfileClient(_connection);
        
        public partial class ProfileClient
        {
            private readonly Connection _connection;
            
            public ProfileClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<TDMemberProfileDto> CreateProfile(CreateProfileRequestDto data)
                => await _connection.RequestResourceAsync<CreateProfileRequestDto, TDMemberProfileDto>("POST", $"api/http/team-directory/profiles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)), data);            
            
            public async Task<Batch<TDMemberProfileDto>> GetAllProfiles(string query, bool reportPastMembers, bool meOnTop, string? skip = null, int? top = null, string? teamId = null, string? locationId = null, string? roleId = null, ProfileOrder? order = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/team-directory/profiles?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&reportPastMembers={reportPastMembers.ToString().ToLowerInvariant()}&teamId={teamId?.ToString() ?? "null"}&locationId={locationId?.ToString() ?? "null"}&roleId={roleId?.ToString() ?? "null"}&meOnTop={meOnTop.ToString().ToLowerInvariant()}&order={order?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<TDMemberProfileDto>)));            
            
            public async Task<List<string>> CheckProfileUsernamesExistence(List<string> usernames)
                => await _connection.RequestResourceAsync<List<string>>("GET", $"api/http/team-directory/profiles/usernames-exist?usernames={usernames.JoinToString("usernames", it => it.ToString())}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<string>)));            
            
            public async Task<TDMemberProfileDto> GetProfileByUsername(string username)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("GET", $"api/http/team-directory/profiles/username:{username}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));            
            
            public async Task<TDMemberProfileDto> GetProfile(string id)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("GET", $"api/http/team-directory/profiles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));            
            
            public async Task<bool> CheckIfProfileIsTeamMember(string id, List<string> teamIds)
                => await _connection.RequestResourceAsync<bool>("GET", $"api/http/team-directory/profiles/{id}/is-team-member?teamIds={teamIds.JoinToString("teamIds", it => it.ToString())}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(bool)));            
            
            public async Task<TDMemberProfileDto> UpdateProfile(string id, UpdateProfileRequestDto data)
                => await _connection.RequestResourceAsync<UpdateProfileRequestDto, TDMemberProfileDto>("PATCH", $"api/http/team-directory/profiles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)), data);            
            
            public async Task<TDMemberProfileDto> DeleteProfile(string id)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));            
            
            public async Task<TDMemberProfileDto> Deactivate(string id, SpaceDate? since = null, SpaceTime? at = null)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{id}/deactivate?since={since?.ToString() ?? "null"}&at={at?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));            
            
            public async Task<TDMemberProfileDto> Fire(string id, SpaceDate since)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{id}/fire?since={since.ToString()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));            
            
            public AuthenticationSessionClient AuthenticationSessions => new AuthenticationSessionClient(_connection);
            
            public partial class AuthenticationSessionClient
            {
                private readonly Connection _connection;
                
                public AuthenticationSessionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<ESAuthenticationSessionDto>> GetAllAuthenticationSessions(string owner)
                    => await _connection.RequestResourceAsync<List<ESAuthenticationSessionDto>>("GET", $"api/http/team-directory/profiles/authentication-sessions/{owner}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<ESAuthenticationSessionDto>)));                
                
                public MeClient Me => new MeClient(_connection);
                
                public partial class MeClient
                {
                    private readonly Connection _connection;
                    
                    public MeClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task TerminateOwnAuthenticationSession(string sessionId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/authentication-sessions/me/{sessionId}");                    
                    
                }
                
            }
            
            public MeClient Me => new MeClient(_connection);
            
            public partial class MeClient
            {
                private readonly Connection _connection;
                
                public MeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<TDMemberProfileDto> GetMe()
                    => await _connection.RequestResourceAsync<TDMemberProfileDto>("GET", $"api/http/team-directory/profiles/me?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDMemberProfileDto)));                
                
                public ChecklistClient Checklists => new ChecklistClient(_connection);
                
                public partial class ChecklistClient
                {
                    private readonly Connection _connection;
                    
                    public ChecklistClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<ChecklistDto> CreateChecklist(IsNameFreeRequestDto data)
                        => await _connection.RequestResourceAsync<IsNameFreeRequestDto, ChecklistDto>("POST", $"api/http/team-directory/profiles/me/checklists?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(ChecklistDto)), data);                    
                    
                    public async Task<ChecklistDto> ImportChecklist(ImportChecklistRequestDto data)
                        => await _connection.RequestResourceAsync<ImportChecklistRequestDto, ChecklistDto>("POST", $"api/http/team-directory/profiles/me/checklists/import?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(ChecklistDto)), data);                    
                    
                    public async Task ImportChecklistLines(string checklistId, ImportChecklistLinesRequestDto data)
                        => await _connection.RequestResourceAsync<ImportChecklistLinesRequestDto>("POST", $"api/http/team-directory/profiles/me/checklists/{checklistId}/import", data);                    
                    
                    public async Task<List<ChecklistDto>> GetAllChecklists()
                        => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/team-directory/profiles/me/checklists?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<ChecklistDto>)));                    
                    
                    public async Task UpdateChecklist(string checklistId, UpdateChecklistRequestDto data)
                        => await _connection.RequestResourceAsync<UpdateChecklistRequestDto>("PATCH", $"api/http/team-directory/profiles/me/checklists/{checklistId}", data);                    
                    
                    public async Task DeleteChecklist(string checklistId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/me/checklists/{checklistId}");                    
                    
                    public StarredClient Starred => new StarredClient(_connection);
                    
                    public partial class StarredClient
                    {
                        private readonly Connection _connection;
                        
                        public StarredClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task<List<ChecklistDto>> GetAllStarredChecklists()
                            => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/team-directory/profiles/me/checklists/starred?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<ChecklistDto>)));                        
                        
                    }
                    
                    public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
                    
                    public partial class FullChecklistTreeClient
                    {
                        private readonly Connection _connection;
                        
                        public FullChecklistTreeClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task<List<PlanItemChildrenDto>> GetFullChecklistTree(string checklistId)
                            => await _connection.RequestResourceAsync<List<PlanItemChildrenDto>>("GET", $"api/http/team-directory/profiles/me/checklists/{checklistId}/full-checklist-tree?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<PlanItemChildrenDto>)));                        
                        
                    }
                    
                }
                
                public InfoClient Info => new InfoClient(_connection);
                
                public partial class InfoClient
                {
                    private readonly Connection _connection;
                    
                    public InfoClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<MeInfoDto> GetInfo()
                        => await _connection.RequestResourceAsync<MeInfoDto>("GET", $"api/http/team-directory/profiles/me/info?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(MeInfoDto)));                    
                    
                    public DraftTypeClient DraftType => new DraftTypeClient(_connection);
                    
                    public partial class DraftTypeClient
                    {
                        private readonly Connection _connection;
                        
                        public DraftTypeClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task UpdateDraftType(UpdateDraftTypeRequestDto data)
                            => await _connection.RequestResourceAsync<UpdateDraftTypeRequestDto>("PATCH", $"api/http/team-directory/profiles/me/info/draft-type", data);                        
                        
                    }
                    
                    public FirstDayOfWeekClient FirstDayOfWeek => new FirstDayOfWeekClient(_connection);
                    
                    public partial class FirstDayOfWeekClient
                    {
                        private readonly Connection _connection;
                        
                        public FirstDayOfWeekClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task UpdateFirstDayOfWeek(UpdateFirstDayOfWeekRequestDto data)
                            => await _connection.RequestResourceAsync<UpdateFirstDayOfWeekRequestDto>("PATCH", $"api/http/team-directory/profiles/me/info/first-day-of-week", data);                        
                        
                    }
                    
                    public NavBarMenuItemClient NavBarMenuItems => new NavBarMenuItemClient(_connection);
                    
                    public partial class NavBarMenuItemClient
                    {
                        private readonly Connection _connection;
                        
                        public NavBarMenuItemClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task UpdateNavBarMenuItem(UpdateNavBarMenuItemRequestDto data)
                            => await _connection.RequestResourceAsync<UpdateNavBarMenuItemRequestDto>("PATCH", $"api/http/team-directory/profiles/me/info/nav-bar-menu-items", data);                        
                        
                    }
                    
                    public NavBarProjectClient NavBarProjects => new NavBarProjectClient(_connection);
                    
                    public partial class NavBarProjectClient
                    {
                        private readonly Connection _connection;
                        
                        public NavBarProjectClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task CreateNavBarProject(CreateNavBarProjectRequestDto data)
                            => await _connection.RequestResourceAsync<CreateNavBarProjectRequestDto>("POST", $"api/http/team-directory/profiles/me/info/nav-bar-projects", data);                        
                        
                        public async Task DeleteNavBarProject(string projectId)
                            => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/me/info/nav-bar-projects?projectId={projectId.ToString()}");                        
                        
                    }
                    
                    public ThemeClient Theme => new ThemeClient(_connection);
                    
                    public partial class ThemeClient
                    {
                        private readonly Connection _connection;
                        
                        public ThemeClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task UpdateTheme(UpdateThemeRequestDto data)
                            => await _connection.RequestResourceAsync<UpdateThemeRequestDto>("PATCH", $"api/http/team-directory/profiles/me/info/theme", data);                        
                        
                    }
                    
                }
                
            }
            
            public OAuthConsentClient OAuthConsents => new OAuthConsentClient(_connection);
            
            public partial class OAuthConsentClient
            {
                private readonly Connection _connection;
                
                public OAuthConsentClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<ESOAuthConsentDto>> GetAllOAuthConsents(string owner)
                    => await _connection.RequestResourceAsync<List<ESOAuthConsentDto>>("GET", $"api/http/team-directory/profiles/oauth-consents/{owner}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<ESOAuthConsentDto>)));                
                
                public MeClient Me => new MeClient(_connection);
                
                public partial class MeClient
                {
                    private readonly Connection _connection;
                    
                    public MeClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public ApprovedScopeClient ApprovedScopes => new ApprovedScopeClient(_connection);
                    
                    public partial class ApprovedScopeClient
                    {
                        private readonly Connection _connection;
                        
                        public ApprovedScopeClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task DeleteApprovedScope(string id)
                            => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/me/approved-scopes/{id}");                        
                        
                    }
                    
                    public RefreshTokenClient RefreshTokens => new RefreshTokenClient(_connection);
                    
                    public partial class RefreshTokenClient
                    {
                        private readonly Connection _connection;
                        
                        public RefreshTokenClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task DeleteRefreshToken(string id)
                            => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/me/refresh-tokens/{id}");                        
                        
                    }
                    
                }
                
            }
            
            public TwoFaClient TwoFa => new TwoFaClient(_connection);
            
            public partial class TwoFaClient
            {
                private readonly Connection _connection;
                
                public TwoFaClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public StatuClient Status => new StatuClient(_connection);
                
                public partial class StatuClient
                {
                    private readonly Connection _connection;
                    
                    public StatuClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<TwoFactorAuthenticationStatus> GetStatu(string id)
                        => await _connection.RequestResourceAsync<TwoFactorAuthenticationStatus>("GET", $"api/http/team-directory/profiles/{id}/2-fa/status?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TwoFactorAuthenticationStatus)));                    
                    
                }
                
                public TotpClient Totp => new TotpClient(_connection);
                
                public partial class TotpClient
                {
                    private readonly Connection _connection;
                    
                    public TotpClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<TwoFactorAuthenticationSecretDto> CreateTotp(string id)
                        => await _connection.RequestResourceAsync<TwoFactorAuthenticationSecretDto>("POST", $"api/http/team-directory/profiles/{id}/2-fa/totp?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TwoFactorAuthenticationSecretDto)));                    
                    
                    public async Task Confirm(string id, ConfirmRequestDto data)
                        => await _connection.RequestResourceAsync<ConfirmRequestDto>("POST", $"api/http/team-directory/profiles/{id}/2-fa/totp/confirm", data);                    
                    
                    public async Task UpdateTotp(string id, UpdateTotpRequestDto data)
                        => await _connection.RequestResourceAsync<UpdateTotpRequestDto>("PATCH", $"api/http/team-directory/profiles/{id}/2-fa/totp", data);                    
                    
                    public async Task DeleteTotp(string id)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{id}/2-fa/totp");                    
                    
                }
                
            }
            
            public ApplicationPasswordClient ApplicationPasswords => new ApplicationPasswordClient(_connection);
            
            public partial class ApplicationPasswordClient
            {
                private readonly Connection _connection;
                
                public ApplicationPasswordClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Pair<ESApplicationPasswordDto, string>> CreateApplicationPassword(string id, CreateApplicationPasswordRequestDto data)
                    => await _connection.RequestResourceAsync<CreateApplicationPasswordRequestDto, Pair<ESApplicationPasswordDto, string>>("POST", $"api/http/team-directory/profiles/{id}/application-passwords?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Pair<ESApplicationPasswordDto, string>)), data);                
                
                public async Task<Batch<ESApplicationPasswordDto>> GetAllApplicationPasswords(string id, string? skip = null, int? top = null)
                    => await _connection.RequestResourceAsync<Batch<ESApplicationPasswordDto>>("GET", $"api/http/team-directory/profiles/{id}/application-passwords?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<ESApplicationPasswordDto>)));                
                
                public async Task UpdateApplicationPassword(string id, string passwordId, UpdateApplicationPasswordRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateApplicationPasswordRequestDto>("PATCH", $"api/http/team-directory/profiles/{id}/application-passwords/{passwordId}", data);                
                
                public async Task DeleteApplicationPassword(string id, string passwordId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{id}/application-passwords/{passwordId}");                
                
            }
            
            public LeadClient Leads => new LeadClient(_connection);
            
            public partial class LeadClient
            {
                private readonly Connection _connection;
                
                public LeadClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<TDMemberProfileDto>> GetAllLeads(string id)
                    => await _connection.RequestResourceAsync<List<TDMemberProfileDto>>("GET", $"api/http/team-directory/profiles/{id}/leads?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDMemberProfileDto>)));                
                
            }
            
            public PermanentTokenClient PermanentTokens => new PermanentTokenClient(_connection);
            
            public partial class PermanentTokenClient
            {
                private readonly Connection _connection;
                
                public PermanentTokenClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Pair<ESPermanentTokenDto, string>> CreatePermanentToken(string id, CreateApplicationPasswordRequestDto data)
                    => await _connection.RequestResourceAsync<CreateApplicationPasswordRequestDto, Pair<ESPermanentTokenDto, string>>("POST", $"api/http/team-directory/profiles/{id}/permanent-tokens?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Pair<ESPermanentTokenDto, string>)), data);                
                
                public async Task<Batch<ESPermanentTokenDto>> GetAllPermanentTokens(string id, string? skip = null, int? top = null)
                    => await _connection.RequestResourceAsync<Batch<ESPermanentTokenDto>>("GET", $"api/http/team-directory/profiles/{id}/permanent-tokens?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<ESPermanentTokenDto>)));                
                
                public async Task UpdatePermanentToken(string id, string tokenId, UpdateApplicationPasswordRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateApplicationPasswordRequestDto>("PATCH", $"api/http/team-directory/profiles/{id}/permanent-tokens/{tokenId}", data);                
                
                public async Task DeletePermanentToken(string id, string tokenId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{id}/permanent-tokens/{tokenId}");                
                
            }
            
            public SpokenLanguageClient SpokenLanguages => new SpokenLanguageClient(_connection);
            
            public partial class SpokenLanguageClient
            {
                private readonly Connection _connection;
                
                public SpokenLanguageClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<TDProfileLanguageDto> UpdateSpokenLanguage(string id, UpdateSpokenLanguageRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateSpokenLanguageRequestDto, TDProfileLanguageDto>("PATCH", $"api/http/team-directory/profiles/{id}/spoken-languages?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDProfileLanguageDto)), data);                
                
                public async Task DeleteSpokenLanguage(string id, string language)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{id}/spoken-languages?language={language.ToString()}");                
                
            }
            
            public VcsPasswordClient VcsPassword => new VcsPasswordClient(_connection);
            
            public partial class VcsPasswordClient
            {
                private readonly Connection _connection;
                
                public VcsPasswordClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<VcsHostingPasswordDto> GetVcsPassword(string id)
                    => await _connection.RequestResourceAsync<VcsHostingPasswordDto>("GET", $"api/http/team-directory/profiles/{id}/vcs-password?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(VcsHostingPasswordDto)));                
                
                public async Task UpdateVcsPassword(string id, UpdateVcsPasswordRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateVcsPasswordRequestDto>("PATCH", $"api/http/team-directory/profiles/{id}/vcs-password", data);                
                
                public async Task DeleteVcsPassword(string id)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{id}/vcs-password");                
                
            }
            
            public WorkingDayClient WorkingDays => new WorkingDayClient(_connection);
            
            public partial class WorkingDayClient
            {
                private readonly Connection _connection;
                
                public WorkingDayClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<TDWorkingDaysDto> AddWorkingDays(string id, AddWorkingDaysRequestDto data)
                    => await _connection.RequestResourceAsync<AddWorkingDaysRequestDto, TDWorkingDaysDto>("POST", $"api/http/team-directory/profiles/{id}/working-days?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDWorkingDaysDto)), data);                
                
                public async Task<List<TDWorkingDaysDto>> GetAllWorkingDays(string id)
                    => await _connection.RequestResourceAsync<List<TDWorkingDaysDto>>("GET", $"api/http/team-directory/profiles/{id}/working-days?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDWorkingDaysDto>)));                
                
                public async Task<TDWorkingDaysDto> UpdateWorkingDays(string id, string workingDaysId, UpdateWorkingDaysRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateWorkingDaysRequestDto, TDWorkingDaysDto>("PATCH", $"api/http/team-directory/profiles/{id}/working-days/{workingDaysId}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDWorkingDaysDto)), data);                
                
                public async Task DeleteWorkingDays(string id, string workingDaysId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{id}/working-days/{workingDaysId}");                
                
            }
            
        }
        
        public ReportingClient Reportings => new ReportingClient(_connection);
        
        public partial class ReportingClient
        {
            private readonly Connection _connection;
            
            public ReportingClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<TDMemberProfileDto>> GetAllReportings(string query, string? skip = null, int? top = null, bool? withManager = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/team-directory/reportings?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&withManager={withManager?.ToString()?.ToLowerInvariant() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<TDMemberProfileDto>)));            
            
        }
        
        public RoleClient Roles => new RoleClient(_connection);
        
        public partial class RoleClient
        {
            private readonly Connection _connection;
            
            public RoleClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<TDRoleDto> CreateRole(CreateRoleRequestDto data)
                => await _connection.RequestResourceAsync<CreateRoleRequestDto, TDRoleDto>("POST", $"api/http/team-directory/roles?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDRoleDto)), data);            
            
            public async Task<TDRoleDto> Restore(string id)
                => await _connection.RequestResourceAsync<TDRoleDto>("POST", $"api/http/team-directory/roles/{id}/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDRoleDto)));            
            
            public async Task<List<TDRoleDto>> GetAllRoles(string query, bool withArchived)
                => await _connection.RequestResourceAsync<List<TDRoleDto>>("GET", $"api/http/team-directory/roles?query={query.ToString()}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDRoleDto>)));            
            
            public async Task<TDRoleDto> GetRole(string id)
                => await _connection.RequestResourceAsync<TDRoleDto>("GET", $"api/http/team-directory/roles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDRoleDto)));            
            
            public async Task<TDRoleDto> UpdateRole(string id, UpdateRoleRequestDto data)
                => await _connection.RequestResourceAsync<UpdateRoleRequestDto, TDRoleDto>("PATCH", $"api/http/team-directory/roles/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDRoleDto)), data);            
            
            public async Task ArchiveRole(string id)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/roles/{id}");            
            
        }
        
        public StatClient Stats => new StatClient(_connection);
        
        public partial class StatClient
        {
            private readonly Connection _connection;
            
            public StatClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<TDStatsDto> GetAllStats(string? teamId = null, string? locationId = null, string? roleId = null)
                => await _connection.RequestResourceAsync<TDStatsDto>("GET", $"api/http/team-directory/stats?teamId={teamId?.ToString() ?? "null"}&locationId={locationId?.ToString() ?? "null"}&roleId={roleId?.ToString() ?? "null"}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDStatsDto)));            
            
        }
        
        public TeamClient Teams => new TeamClient(_connection);
        
        public partial class TeamClient
        {
            private readonly Connection _connection;
            
            public TeamClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<TDTeamDto> CreateTeam(CreateTeamRequestDto data)
                => await _connection.RequestResourceAsync<CreateTeamRequestDto, TDTeamDto>("POST", $"api/http/team-directory/teams?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)), data);            
            
            public async Task<List<TDTeamDto>> RestoreMultiple(RestoreMultipleRequestDto data)
                => await _connection.RequestResourceAsync<RestoreMultipleRequestDto, List<TDTeamDto>>("POST", $"api/http/team-directory/teams/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDTeamDto>)), data);            
            
            public async Task CancelDisbanding(string id)
                => await _connection.RequestResourceAsync("POST", $"api/http/team-directory/teams/{id}/cancel-disbanding");            
            
            public async Task<TDTeamDto> Restore(string id)
                => await _connection.RequestResourceAsync<TDTeamDto>("POST", $"api/http/team-directory/teams/{id}/restore?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)));            
            
            public async Task<Batch<TDTeamDto>> GetAllTeams(string query, bool withArchived, string? skip = null, int? top = null)
                => await _connection.RequestResourceAsync<Batch<TDTeamDto>>("GET", $"api/http/team-directory/teams?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<TDTeamDto>)));            
            
            [Obsolete("This endpoint returns null if there are multiple teams with the same name. Use GET team-directory/teams with parameter 'query' (since 2019-02-04)")]            
            public async Task<TDTeamDto> GetSingleTeamByName(string name)
                => await _connection.RequestResourceAsync<TDTeamDto>("GET", $"api/http/team-directory/teams/name:{name}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)));            
            
            public async Task<TDTeamDto> GetTeam(string id)
                => await _connection.RequestResourceAsync<TDTeamDto>("GET", $"api/http/team-directory/teams/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)));            
            
            public async Task<TDTeamDto> UpdateTeam(string id, UpdateTeamRequestDto data)
                => await _connection.RequestResourceAsync<UpdateTeamRequestDto, TDTeamDto>("PATCH", $"api/http/team-directory/teams/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(TDTeamDto)), data);            
            
            public async Task<List<TDTeamDto>> ArchiveTeam(string id)
                => await _connection.RequestResourceAsync<List<TDTeamDto>>("DELETE", $"api/http/team-directory/teams/{id}?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDTeamDto>)));            
            
            public async Task<List<TDTeamDto>> Disband(string id)
                => await _connection.RequestResourceAsync<List<TDTeamDto>>("DELETE", $"api/http/team-directory/teams/{id}/disband?$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(List<TDTeamDto>)));            
            
            public DirectMemberClient DirectMembers => new DirectMemberClient(_connection);
            
            public partial class DirectMemberClient
            {
                private readonly Connection _connection;
                
                public DirectMemberClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Batch<TDMemberProfileDto>> GetAllDirectMembers(string id, string query, string? skip = null, int? top = null)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/team-directory/teams/{id}/direct-members?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&$fields=" + ObjectToFieldDescriptor.FieldsFor(typeof(Batch<TDMemberProfileDto>)));                
                
            }
            
        }
        
    }
    
}
