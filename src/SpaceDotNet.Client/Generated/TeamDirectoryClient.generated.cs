// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public partial class TeamDirectoryClient
    {
        private readonly Connection _connection;
        
        public TeamDirectoryClient(Connection connection)
        {
            _connection = connection;
        }
        
        public CalendarEventClient CalendarEvents => new CalendarEventClient(_connection);
        
        public partial class CalendarEventClient
        {
            private readonly Connection _connection;
            
            public CalendarEventClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get calendar events attached to an article in a specific time period.
            /// </summary>
            public async Task<List<MeetingRecordDto>> GetAllCalendarEventsAsync(SpaceDate dateFrom, SpaceDate dateTo, Func<Partial<MeetingRecordDto>, Partial<MeetingRecordDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<MeetingRecordDto>>("GET", $"api/http/team-directory/calendar-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&$fields={(partial != null ? partial(new Partial<MeetingRecordDto>()) : Partial<MeetingRecordDto>.Default())}");
        
            /// <summary>
            /// Get a calendar event attached to an article.
            /// </summary>
            public async Task<MeetingRecordDto> GetCalendarEventAsync(string id, Func<Partial<MeetingRecordDto>, Partial<MeetingRecordDto>>? partial = null)
                => await _connection.RequestResourceAsync<MeetingRecordDto>("GET", $"api/http/team-directory/calendar-events/{id}?$fields={(partial != null ? partial(new Partial<MeetingRecordDto>()) : Partial<MeetingRecordDto>.Default())}");
        
            public AbsenceEventClient AbsenceEvents => new AbsenceEventClient(_connection);
            
            public partial class AbsenceEventClient
            {
                private readonly Connection _connection;
                
                public AbsenceEventClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get/search absences. Parameters are applied as 'AND' filters.
                /// </summary>
                public async Task<List<AbsenceEventDto>> GetAllAbsenceEventsAsync(SpaceDate dateFrom, SpaceDate dateTo, string? team = null, string? location = null, string? role = null, Func<Partial<AbsenceEventDto>, Partial<AbsenceEventDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<AbsenceEventDto>>("GET", $"api/http/team-directory/calendar-events/absence-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<AbsenceEventDto>()) : Partial<AbsenceEventDto>.Default())}");
            
            }
        
            public BirthdayEventClient BirthdayEvents => new BirthdayEventClient(_connection);
            
            public partial class BirthdayEventClient
            {
                private readonly Connection _connection;
                
                public BirthdayEventClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get/search birthdays. Parameters are applied as 'AND' filters.
                /// </summary>
                public async Task<List<BirthdayEventDto>> GetAllBirthdayEventsAsync(SpaceDate dateFrom, SpaceDate dateTo, string? team = null, string? location = null, string? role = null, Func<Partial<BirthdayEventDto>, Partial<BirthdayEventDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<BirthdayEventDto>>("GET", $"api/http/team-directory/calendar-events/birthday-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<BirthdayEventDto>()) : Partial<BirthdayEventDto>.Default())}");
            
                public StarredClient Starred => new StarredClient(_connection);
                
                public partial class StarredClient
                {
                    private readonly Connection _connection;
                    
                    public StarredClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Get/search birthdays in a specific time period for starred profiles.
                    /// </summary>
                    public async Task<List<BirthdayEventDto>> GetAllStarredBirthdayEventsAsync(SpaceDate dateFrom, SpaceDate dateTo, Func<Partial<BirthdayEventDto>, Partial<BirthdayEventDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<BirthdayEventDto>>("GET", $"api/http/team-directory/calendar-events/birthday-events/starred?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&$fields={(partial != null ? partial(new Partial<BirthdayEventDto>()) : Partial<BirthdayEventDto>.Default())}");
                
                }
            
            }
        
            public HolidayClient Holidays => new HolidayClient(_connection);
            
            public partial class HolidayClient
            {
                private readonly Connection _connection;
                
                public HolidayClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get/search holidays. Parameters are applied as 'AND' filters.
                /// </summary>
                public async Task<List<HolidaysEventDto>> GetAllHolidaysAsync(SpaceDate startDate, SpaceDate endDate, string? team = null, string? location = null, string? role = null, bool? workingDays = null, Func<Partial<HolidaysEventDto>, Partial<HolidaysEventDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<HolidaysEventDto>>("GET", $"api/http/team-directory/calendar-events/holidays?startDate={startDate.ToString()}&endDate={endDate.ToString()}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&workingDays={workingDays?.ToString()?.ToLowerInvariant() ?? "null"}&$fields={(partial != null ? partial(new Partial<HolidaysEventDto>()) : Partial<HolidaysEventDto>.Default())}");
            
            }
        
            public MeetingParticipationClient MeetingParticipations => new MeetingParticipationClient(_connection);
            
            public partial class MeetingParticipationClient
            {
                private readonly Connection _connection;
                
                public MeetingParticipationClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Update RSVP / calendar event participation status for a calendar event attached to an article.
                /// </summary>
                public async Task<MeetingRecordDto> UpdateMeetingParticipationAsync(string id, EventParticipationStatus newStatus, Func<Partial<MeetingRecordDto>, Partial<MeetingRecordDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryCalendarEventsMeetingParticipationsForIdRequest, MeetingRecordDto>("PATCH", $"api/http/team-directory/calendar-events/meeting-participations/{id}?$fields={(partial != null ? partial(new Partial<MeetingRecordDto>()) : Partial<MeetingRecordDto>.Default())}", new TeamDirectoryCalendarEventsMeetingParticipationsForIdRequest{ NewStatus = newStatus });
            
            }
        
            public MembershipEventClient MembershipEvents => new MembershipEventClient(_connection);
            
            public partial class MembershipEventClient
            {
                private readonly Connection _connection;
                
                public MembershipEventClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get/search membership events. Parameters are applied as 'AND' filters.
                /// </summary>
                public async Task<List<MembershipEventDto>> GetAllMembershipEventsAsync(SpaceDate dateFrom, SpaceDate dateTo, string? team = null, string? location = null, string? role = null, Func<Partial<MembershipEventDto>, Partial<MembershipEventDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<MembershipEventDto>>("GET", $"api/http/team-directory/calendar-events/membership-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<MembershipEventDto>()) : Partial<MembershipEventDto>.Default())}");
            
            }
        
            public NonWorkingDaysEventClient NonWorkingDaysEvents => new NonWorkingDaysEventClient(_connection);
            
            public partial class NonWorkingDaysEventClient
            {
                private readonly Connection _connection;
                
                public NonWorkingDaysEventClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get/search non-working day events. Parameters are applied as 'AND' filters.
                /// </summary>
                public async Task<List<NonWorkingDaysEventDto>> GetAllNonWorkingDaysEventsAsync(SpaceDate dateFrom, SpaceDate dateTo, string? member = null, string? team = null, string? location = null, string? role = null, Func<Partial<NonWorkingDaysEventDto>, Partial<NonWorkingDaysEventDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<NonWorkingDaysEventDto>>("GET", $"api/http/team-directory/calendar-events/non-working-days-events?dateFrom={dateFrom.ToString()}&dateTo={dateTo.ToString()}&member={member?.ToString() ?? "null"}&team={team?.ToString() ?? "null"}&location={location?.ToString() ?? "null"}&role={role?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<NonWorkingDaysEventDto>()) : Partial<NonWorkingDaysEventDto>.Default())}");
            
            }
        
        }
    
        public InvitationClient Invitations => new InvitationClient(_connection);
        
        public partial class InvitationClient
        {
            private readonly Connection _connection;
            
            public InvitationClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create an invitation to join the current organisation. Optionally, the team and/or role to join when accepting the invitation can be specified.
            /// </summary>
            public async Task<InvitationDto> CreateInvitationAsync(string inviteeEmail, string? inviteeFirstName = null, string? inviteeLastName = null, TDTeamDto? team = null, TDRoleDto? role = null, Func<Partial<InvitationDto>, Partial<InvitationDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryInvitationsRequest, InvitationDto>("POST", $"api/http/team-directory/invitations?$fields={(partial != null ? partial(new Partial<InvitationDto>()) : Partial<InvitationDto>.Default())}", new TeamDirectoryInvitationsRequest{ InviteeEmail = inviteeEmail, InviteeFirstName = inviteeFirstName, InviteeLastName = inviteeLastName, Team = team, Role = role });
        
            /// <summary>
            /// Get a list of invitations.
            /// </summary>
            public async Task<Batch<InvitationDto>> GetAllInvitationsAsync(string? skip = null, int? top = null, Func<Partial<Batch<InvitationDto>>, Partial<Batch<InvitationDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<InvitationDto>>("GET", $"api/http/team-directory/invitations?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<InvitationDto>>()) : Partial<Batch<InvitationDto>>.Default())}");
            
            /// <summary>
            /// Get a list of invitations.
            /// </summary>
            public IAsyncEnumerable<InvitationDto> GetAllInvitationsAsyncEnumerable(string? skip = null, int? top = null, Func<Partial<InvitationDto>, Partial<InvitationDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllInvitationsAsync(top: top, skip: batchSkip, partial: builder => Partial<Batch<InvitationDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<InvitationDto>.Default())), skip);
        
            /// <summary>
            /// Update an invitation. Optional parameters will be ignored when not specified, and updated otherwise.
            /// </summary>
            public async Task UpdateInvitationAsync(string id, string? inviteeEmail = null, string? inviteeFirstName = null, string? inviteeLastName = null, TDTeamDto? team = null, TDRoleDto? role = null)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/invitations/{id}", new TeamDirectoryInvitationsForIdRequest{ InviteeEmail = inviteeEmail, InviteeFirstName = inviteeFirstName, InviteeLastName = inviteeLastName, Team = team, Role = role });
        
            /// <summary>
            /// Delete an invitation. Deleted invitations can no longer be used to join the organisation.
            /// </summary>
            public async Task DeleteInvitationAsync(string id)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/invitations/{id}");
        
        }
    
        public LanguageClient Languages => new LanguageClient(_connection);
        
        public partial class LanguageClient
        {
            private readonly Connection _connection;
            
            public LanguageClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get all languages.
            /// </summary>
            public async Task<List<TDLanguageDto>> GetAllLanguagesAsync(Func<Partial<TDLanguageDto>, Partial<TDLanguageDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<TDLanguageDto>>("GET", $"api/http/team-directory/languages?$fields={(partial != null ? partial(new Partial<TDLanguageDto>()) : Partial<TDLanguageDto>.Default())}");
        
        }
    
        public LocationEquipmentTypeClient LocationEquipmentTypes => new LocationEquipmentTypeClient(_connection);
        
        public partial class LocationEquipmentTypeClient
        {
            private readonly Connection _connection;
            
            public LocationEquipmentTypeClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get all equipment types.
            /// </summary>
            public async Task<List<TDLocationEquipmentTypeDto>> GetAllLocationEquipmentTypesAsync(bool withArchived, Func<Partial<TDLocationEquipmentTypeDto>, Partial<TDLocationEquipmentTypeDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<TDLocationEquipmentTypeDto>>("GET", $"api/http/team-directory/location-equipment-types?withArchived={withArchived.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<TDLocationEquipmentTypeDto>()) : Partial<TDLocationEquipmentTypeDto>.Default())}");
        
            /// <summary>
            /// Archive/restore location equipment type. Setting delete to true will archive the equipment type, false will restore it.
            /// </summary>
            public async Task DeleteLocationEquipmentTypeByNameAsync(string name, bool delete)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/location-equipment-types/name:{name}?delete={delete.ToString().ToLowerInvariant()}");
        
        }
    
        public LocationClient Locations => new LocationClient(_connection);
        
        public partial class LocationClient
        {
            private readonly Connection _connection;
            
            public LocationClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a location.
            /// </summary>
            public async Task<TDLocationDto> CreateLocationAsync(string name, string? timezone = null, List<int>? workdays = null, List<string>? phones = null, List<string>? emails = null, List<string>? equipment = null, string? description = null, string? address = null, string? type = null, string? parentId = null, Func<Partial<TDLocationDto>, Partial<TDLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryLocationsRequest, TDLocationDto>("POST", $"api/http/team-directory/locations?$fields={(partial != null ? partial(new Partial<TDLocationDto>()) : Partial<TDLocationDto>.Default())}", new TeamDirectoryLocationsRequest{ Name = name, Timezone = timezone, Workdays = workdays, Phones = phones, Emails = emails, Equipment = equipment, Description = description, Address = address, Type = type, ParentId = parentId });
        
            /// <summary>
            /// Restore one or more archived locations.
            /// </summary>
            public async Task<List<TDLocationDto>> RestoreMultipleAsync(List<string> ids, Func<Partial<TDLocationDto>, Partial<TDLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryLocationsRestoreRequest, List<TDLocationDto>>("POST", $"api/http/team-directory/locations/restore?$fields={(partial != null ? partial(new Partial<TDLocationDto>()) : Partial<TDLocationDto>.Default())}", new TeamDirectoryLocationsRestoreRequest{ Ids = ids });
        
            /// <summary>
            /// Restore an archived location.
            /// </summary>
            public async Task<TDLocationDto> RestoreAsync(string id, Func<Partial<TDLocationDto>, Partial<TDLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDLocationDto>("POST", $"api/http/team-directory/locations/{id}/restore?$fields={(partial != null ? partial(new Partial<TDLocationDto>()) : Partial<TDLocationDto>.Default())}");
        
            /// <summary>
            /// Get/search all locations. Parameters are applied as 'AND' filters.
            /// </summary>
            public async Task<List<TDLocationDto>> GetAllLocationsAsync(string query, bool withArchived, string? type = null, Func<Partial<TDLocationDto>, Partial<TDLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<TDLocationDto>>("GET", $"api/http/team-directory/locations?query={query.ToString()}&type={type?.ToString() ?? "null"}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<TDLocationDto>()) : Partial<TDLocationDto>.Default())}");
        
            /// <summary>
            /// Get a location by id.
            /// </summary>
            public async Task<TDLocationDto> GetLocationAsync(string id, Func<Partial<TDLocationDto>, Partial<TDLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDLocationDto>("GET", $"api/http/team-directory/locations/{id}?$fields={(partial != null ? partial(new Partial<TDLocationDto>()) : Partial<TDLocationDto>.Default())}");
        
            /// <summary>
            /// Update a location. Optional parameters will be ignored when null, and updated otherwise.
            /// </summary>
            public async Task<TDLocationDto> UpdateLocationAsync(string id, string? name = null, string? timezone = null, bool? customWorkdays = null, List<int>? workdays = null, List<string>? phones = null, List<string>? emails = null, List<string>? equipment = null, string? description = null, string? address = null, string? type = null, string? parentId = null, string? mapId = null, Func<Partial<TDLocationDto>, Partial<TDLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryLocationsForIdRequest, TDLocationDto>("PATCH", $"api/http/team-directory/locations/{id}?$fields={(partial != null ? partial(new Partial<TDLocationDto>()) : Partial<TDLocationDto>.Default())}", new TeamDirectoryLocationsForIdRequest{ Name = name, Timezone = timezone, CustomWorkdays = customWorkdays, Workdays = workdays, Phones = phones, Emails = emails, Equipment = equipment, Description = description, Address = address, Type = type, ParentId = parentId, MapId = mapId });
        
            /// <summary>
            /// Archive a location.
            /// </summary>
            public async Task<List<TDLocationDto>> ArchiveLocationAsync(string id, Func<Partial<TDLocationDto>, Partial<TDLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<TDLocationDto>>("DELETE", $"api/http/team-directory/locations/{id}?$fields={(partial != null ? partial(new Partial<TDLocationDto>()) : Partial<TDLocationDto>.Default())}");
        
            public MapClient Map => new MapClient(_connection);
            
            public partial class MapClient
            {
                private readonly Connection _connection;
                
                public MapClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get map for a location id.
                /// </summary>
                public async Task<TDLocationMapDto> GetMapAsync(string id, Func<Partial<TDLocationMapDto>, Partial<TDLocationMapDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TDLocationMapDto>("GET", $"api/http/team-directory/locations/{id}/map?$fields={(partial != null ? partial(new Partial<TDLocationMapDto>()) : Partial<TDLocationMapDto>.Default())}");
            
                /// <summary>
                /// Update the map for a location.
                /// </summary>
                public async Task<TDLocationMapDto> UpdateMapAsync(string id, string mapPictureId, Func<Partial<TDLocationMapDto>, Partial<TDLocationMapDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryLocationsForIdMapRequest, TDLocationMapDto>("PATCH", $"api/http/team-directory/locations/{id}/map?$fields={(partial != null ? partial(new Partial<TDLocationMapDto>()) : Partial<TDLocationMapDto>.Default())}", new TeamDirectoryLocationsForIdMapRequest{ MapPictureId = mapPictureId });
            
                public MemberClient Members => new MemberClient(_connection);
                
                public partial class MemberClient
                {
                    private readonly Connection _connection;
                    
                    public MemberClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Get members on map for a location id.
                    /// </summary>
                    public async Task<List<TDMemberInLocationMapListDto>> GetAllMembersAsync(string id, bool includeUnmarked, Func<Partial<TDMemberInLocationMapListDto>, Partial<TDMemberInLocationMapListDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<TDMemberInLocationMapListDto>>("GET", $"api/http/team-directory/locations/{id}/map/members?includeUnmarked={includeUnmarked.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<TDMemberInLocationMapListDto>()) : Partial<TDMemberInLocationMapListDto>.Default())}");
                
                }
            
            }
        
        }
    
        public LocationsWithTimezoneClient LocationsWithTimezone => new LocationsWithTimezoneClient(_connection);
        
        public partial class LocationsWithTimezoneClient
        {
            private readonly Connection _connection;
            
            public LocationsWithTimezoneClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get all locations with their time zone.
            /// </summary>
            public async Task<List<TDLocationWithTimeZoneDto>> GetAllLocationsWithTimezoneAsync(Func<Partial<TDLocationWithTimeZoneDto>, Partial<TDLocationWithTimeZoneDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<TDLocationWithTimeZoneDto>>("GET", $"api/http/team-directory/locations-with-timezone?$fields={(partial != null ? partial(new Partial<TDLocationWithTimeZoneDto>()) : Partial<TDLocationWithTimeZoneDto>.Default())}");
        
        }
    
        public ManagerCandidateClient ManagerCandidates => new ManagerCandidateClient(_connection);
        
        public partial class ManagerCandidateClient
        {
            private readonly Connection _connection;
            
            public ManagerCandidateClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<TDMemberProfileDto>> GetAllManagerCandidatesAsync(string term, string? skip = null, int? top = null, string? teamId = null, string? excludedMemberId = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/team-directory/manager-candidates?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term.ToString()}&teamId={teamId?.ToString() ?? "null"}&excludedMemberId={excludedMemberId?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
            
            public IAsyncEnumerable<TDMemberProfileDto> GetAllManagerCandidatesAsyncEnumerable(string term, string? skip = null, int? top = null, string? teamId = null, string? excludedMemberId = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllManagerCandidatesAsync(term: term, top: top, teamId: teamId, excludedMemberId: excludedMemberId, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
        
        }
    
        public MemberLocationClient MemberLocations => new MemberLocationClient(_connection);
        
        public partial class MemberLocationClient
        {
            private readonly Connection _connection;
            
            public MemberLocationClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Add a member location, optionally from/until a given date.
            /// </summary>
            public async Task<TDMemberLocationDto> CreateMemberLocationAsync(string member, string location, SpaceDate? since = null, SpaceDate? till = null, string? previousLocation = null, Func<Partial<TDMemberLocationDto>, Partial<TDMemberLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryMemberLocationsRequest, TDMemberLocationDto>("POST", $"api/http/team-directory/member-locations?$fields={(partial != null ? partial(new Partial<TDMemberLocationDto>()) : Partial<TDMemberLocationDto>.Default())}", new TeamDirectoryMemberLocationsRequest{ Member = member, Location = location, Since = since, Till = till, PreviousLocation = previousLocation });
        
            /// <summary>
            /// Get/search member locations. Parameters are applied as 'AND' filters.
            /// </summary>
            public async Task<Batch<TDMemberLocationDto>> GetAllMemberLocationsAsync(bool withArchived, string? skip = null, int? top = null, List<string>? profiles = null, List<string>? locations = null, SpaceDate? since = null, SpaceDate? till = null, Func<Partial<Batch<TDMemberLocationDto>>, Partial<Batch<TDMemberLocationDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberLocationDto>>("GET", $"api/http/team-directory/member-locations?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&profiles={profiles?.JoinToString("profiles", it => it.ToString()) ?? "null"}&locations={locations?.JoinToString("locations", it => it.ToString()) ?? "null"}&since={since?.ToString() ?? "null"}&till={till?.ToString() ?? "null"}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberLocationDto>>()) : Partial<Batch<TDMemberLocationDto>>.Default())}");
            
            /// <summary>
            /// Get/search member locations. Parameters are applied as 'AND' filters.
            /// </summary>
            public IAsyncEnumerable<TDMemberLocationDto> GetAllMemberLocationsAsyncEnumerable(bool withArchived, string? skip = null, int? top = null, List<string>? profiles = null, List<string>? locations = null, SpaceDate? since = null, SpaceDate? till = null, Func<Partial<TDMemberLocationDto>, Partial<TDMemberLocationDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllMemberLocationsAsync(withArchived: withArchived, top: top, profiles: profiles, locations: locations, since: since, till: till, skip: batchSkip, partial: builder => Partial<Batch<TDMemberLocationDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberLocationDto>.Default())), skip);
        
            /// <summary>
            /// Update member location. Optional parameters will be ignored when null, and updated otherwise.
            /// </summary>
            public async Task<TDMemberLocationDto> UpdateMemberLocationAsync(string id, string? member = null, string? location = null, SpaceDate? since = null, SpaceDate? till = null, string? previousLocation = null, Func<Partial<TDMemberLocationDto>, Partial<TDMemberLocationDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryMemberLocationsForIdRequest, TDMemberLocationDto>("PATCH", $"api/http/team-directory/member-locations/{id}?$fields={(partial != null ? partial(new Partial<TDMemberLocationDto>()) : Partial<TDMemberLocationDto>.Default())}", new TeamDirectoryMemberLocationsForIdRequest{ Member = member, Location = location, Since = since, Till = till, PreviousLocation = previousLocation });
        
            /// <summary>
            /// Archive/unarchive a member location. Setting delete to true will archive the member location, false will restore it.
            /// </summary>
            public async Task DeleteMemberLocationAsync(string id, bool delete)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/member-locations/{id}?delete={delete.ToString().ToLowerInvariant()}");
        
            public PointClient Points => new PointClient(_connection);
            
            public partial class PointClient
            {
                private readonly Connection _connection;
                
                public PointClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Mark profile id position on a map.
                /// </summary>
                public async Task<TDLocationMapPointDto> CreatePointAsync(string id, int x, int y, string mapId, Func<Partial<TDLocationMapPointDto>, Partial<TDLocationMapPointDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryMemberLocationsForIdPointsRequest, TDLocationMapPointDto>("POST", $"api/http/team-directory/member-locations/{id}/points?$fields={(partial != null ? partial(new Partial<TDLocationMapPointDto>()) : Partial<TDLocationMapPointDto>.Default())}", new TeamDirectoryMemberLocationsForIdPointsRequest{ X = x, Y = y, MapId = mapId });
            
                /// <summary>
                /// Update profile id position on a map.
                /// </summary>
                public async Task<TDLocationMapPointDto> UpdatePointAsync(string locationPointId, string id, int? x = null, int? y = null, string? mapId = null, Func<Partial<TDLocationMapPointDto>, Partial<TDLocationMapPointDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryMemberLocationsForIdPointsForLocationPointIdRequest, TDLocationMapPointDto>("PATCH", $"api/http/team-directory/member-locations/{id}/points/{locationPointId}?$fields={(partial != null ? partial(new Partial<TDLocationMapPointDto>()) : Partial<TDLocationMapPointDto>.Default())}", new TeamDirectoryMemberLocationsForIdPointsForLocationPointIdRequest{ X = x, Y = y, MapId = mapId });
            
                /// <summary>
                /// Delete member location from a map.
                /// </summary>
                public async Task DeletePointAsync(string id, string locationPointId, bool delete)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/member-locations/{id}/points/{locationPointId}?delete={delete.ToString().ToLowerInvariant()}");
            
            }
        
        }
    
        public MembershipEventClient MembershipEvents => new MembershipEventClient(_connection);
        
        public partial class MembershipEventClient
        {
            private readonly Connection _connection;
            
            public MembershipEventClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get/search membership events. Parameters are applied as 'AND' filters.
            /// </summary>
            public async Task<Batch<TDMergedEventDto>> GetAllMembershipEventsAsync(string? skip = null, int? top = null, string? teamId = null, string? locationId = null, string? roleId = null, Func<Partial<Batch<TDMergedEventDto>>, Partial<Batch<TDMergedEventDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<TDMergedEventDto>>("GET", $"api/http/team-directory/membership-events?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&teamId={teamId?.ToString() ?? "null"}&locationId={locationId?.ToString() ?? "null"}&roleId={roleId?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<TDMergedEventDto>>()) : Partial<Batch<TDMergedEventDto>>.Default())}");
            
            /// <summary>
            /// Get/search membership events. Parameters are applied as 'AND' filters.
            /// </summary>
            public IAsyncEnumerable<TDMergedEventDto> GetAllMembershipEventsAsyncEnumerable(string? skip = null, int? top = null, string? teamId = null, string? locationId = null, string? roleId = null, Func<Partial<TDMergedEventDto>, Partial<TDMergedEventDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllMembershipEventsAsync(top: top, teamId: teamId, locationId: locationId, roleId: roleId, skip: batchSkip, partial: builder => Partial<Batch<TDMergedEventDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMergedEventDto>.Default())), skip);
        
        }
    
        public MembershipClient Memberships => new MembershipClient(_connection);
        
        public partial class MembershipClient
        {
            private readonly Connection _connection;
            
            public MembershipClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a team membership.
            /// </summary>
            public async Task<TDMembershipDto> CreateMembershipAsync(string memberId, string teamId, string roleId, bool lead, bool requiresApproval, string? managerId = null, SpaceDate? since = null, SpaceDate? till = null, SpaceTime? activeSince = null, SpaceTime? activeTill = null, string? previousMembershipId = null, List<CustomFieldValueDto>? customFieldValues = null, Func<Partial<TDMembershipDto>, Partial<TDMembershipDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryMembershipsRequest, TDMembershipDto>("POST", $"api/http/team-directory/memberships?$fields={(partial != null ? partial(new Partial<TDMembershipDto>()) : Partial<TDMembershipDto>.Default())}", new TeamDirectoryMembershipsRequest{ MemberId = memberId, TeamId = teamId, RoleId = roleId, Lead = lead, ManagerId = managerId, Since = since, Till = till, ActiveSince = activeSince, ActiveTill = activeTill, PreviousMembershipId = previousMembershipId, RequiresApproval = requiresApproval, CustomFieldValues = customFieldValues });
        
            /// <summary>
            /// Get/search all team memberships. Parameters are applied as 'AND' filters.
            /// </summary>
            public async Task<Batch<TDMembershipDto>> GetAllMembershipsAsync(bool directTeams, bool directRoles, bool withArchived, string? skip = null, int? top = null, List<string>? profiles = null, List<string>? teams = null, List<string>? roles = null, SpaceDate? since = null, SpaceDate? till = null, bool? requiresApproval = null, Func<Partial<Batch<TDMembershipDto>>, Partial<Batch<TDMembershipDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<TDMembershipDto>>("GET", $"api/http/team-directory/memberships?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&profiles={profiles?.JoinToString("profiles", it => it.ToString()) ?? "null"}&teams={teams?.JoinToString("teams", it => it.ToString()) ?? "null"}&directTeams={directTeams.ToString().ToLowerInvariant()}&roles={roles?.JoinToString("roles", it => it.ToString()) ?? "null"}&directRoles={directRoles.ToString().ToLowerInvariant()}&since={since?.ToString() ?? "null"}&till={till?.ToString() ?? "null"}&requiresApproval={requiresApproval?.ToString()?.ToLowerInvariant() ?? "null"}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDMembershipDto>>()) : Partial<Batch<TDMembershipDto>>.Default())}");
            
            /// <summary>
            /// Get/search all team memberships. Parameters are applied as 'AND' filters.
            /// </summary>
            public IAsyncEnumerable<TDMembershipDto> GetAllMembershipsAsyncEnumerable(bool directTeams, bool directRoles, bool withArchived, string? skip = null, int? top = null, List<string>? profiles = null, List<string>? teams = null, List<string>? roles = null, SpaceDate? since = null, SpaceDate? till = null, bool? requiresApproval = null, Func<Partial<TDMembershipDto>, Partial<TDMembershipDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllMembershipsAsync(directTeams: directTeams, directRoles: directRoles, withArchived: withArchived, top: top, profiles: profiles, teams: teams, roles: roles, since: since, till: till, requiresApproval: requiresApproval, skip: batchSkip, partial: builder => Partial<Batch<TDMembershipDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMembershipDto>.Default())), skip);
        
            /// <summary>
            /// Update a team membership. Optional parameters will be ignored when null, and updated otherwise.
            /// </summary>
            public async Task<TDMembershipDto> UpdateMembershipAsync(string id, bool requiresApproval, string? memberId = null, string? teamId = null, string? roleId = null, bool? lead = null, string? managerId = null, SpaceDate? since = null, SpaceDate? till = null, SpaceTime? activeSince = null, SpaceTime? activeTill = null, string? previousMembershipId = null, List<CustomFieldValueDto>? customFieldValues = null, Func<Partial<TDMembershipDto>, Partial<TDMembershipDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryMembershipsForIdRequest, TDMembershipDto>("PATCH", $"api/http/team-directory/memberships/{id}?$fields={(partial != null ? partial(new Partial<TDMembershipDto>()) : Partial<TDMembershipDto>.Default())}", new TeamDirectoryMembershipsForIdRequest{ MemberId = memberId, TeamId = teamId, RoleId = roleId, Lead = lead, ManagerId = managerId, Since = since, Till = till, ActiveSince = activeSince, ActiveTill = activeTill, PreviousMembershipId = previousMembershipId, RequiresApproval = requiresApproval, CustomFieldValues = customFieldValues });
        
            /// <summary>
            /// Archive/unarchive a team membership. Setting delete to true will archive the membership, false will restore it.
            /// </summary>
            public async Task DeleteMembershipAsync(string id, bool delete)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/memberships/{id}?delete={delete.ToString().ToLowerInvariant()}");
        
            /// <summary>
            /// Revoke a team membership to end at a given date/time.
            /// </summary>
            public async Task RevokeAsync(string id, SpaceTime? till = null)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/memberships/{id}/revoke?till={till?.ToString() ?? "null"}");
        
            public RequestClient Requests => new RequestClient(_connection);
            
            public partial class RequestClient
            {
                private readonly Connection _connection;
                
                public RequestClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get/search all membership requests. Parameters are applied as 'AND' filters.
                /// </summary>
                public async Task<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>> GetAllRequestsAsync(string? skip = null, int? top = null, string? teamId = null, bool? direct = null, Func<Partial<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>>, Partial<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>>("GET", $"api/http/team-directory/memberships/requests?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&teamId={teamId?.ToString() ?? "null"}&direct={direct?.ToString()?.ToLowerInvariant() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>>()) : Partial<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>>.Default())}");
                
                /// <summary>
                /// Get/search all membership requests. Parameters are applied as 'AND' filters.
                /// </summary>
                public IAsyncEnumerable<Pair<TDMemberProfileDto, TDMembershipDto>> GetAllRequestsAsyncEnumerable(string? skip = null, int? top = null, string? teamId = null, bool? direct = null, Func<Partial<Pair<TDMemberProfileDto, TDMembershipDto>>, Partial<Pair<TDMemberProfileDto, TDMembershipDto>>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllRequestsAsync(top: top, teamId: teamId, direct: direct, skip: batchSkip, partial: builder => Partial<Batch<Pair<TDMemberProfileDto, TDMembershipDto>>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<Pair<TDMemberProfileDto, TDMembershipDto>>.Default())), skip);
            
                /// <summary>
                /// Approve/reject a team membership request. Setting approved to true will approve the membership request, false will reject it.
                /// </summary>
                public async Task UpdateRequestAsync(string id, bool approved)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/memberships/requests/{id}", new TeamDirectoryMembershipsRequestsForIdRequest{ Approved = approved });
            
                /// <summary>
                /// Delete a team membership request.
                /// </summary>
                public async Task<TDMembershipDto> DeleteRequestAsync(string id, Func<Partial<TDMembershipDto>, Partial<TDMembershipDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TDMembershipDto>("DELETE", $"api/http/team-directory/memberships/requests/{id}?$fields={(partial != null ? partial(new Partial<TDMembershipDto>()) : Partial<TDMembershipDto>.Default())}");
            
            }
        
            public RequestRevokeClient RequestRevoke => new RequestRevokeClient(_connection);
            
            public partial class RequestRevokeClient
            {
                private readonly Connection _connection;
                
                public RequestRevokeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Request a team membership to end at a given date/time. Will need approval.
                /// </summary>
                public async Task UpdateRequestRevokeAsync(string id, SpaceTime till)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/memberships/{id}/request-revoke", new TeamDirectoryMembershipsForIdRequestRevokeRequest{ Till = till });
            
            }
        
        }
    
        public ProfileClient Profiles => new ProfileClient(_connection);
        
        public partial class ProfileClient
        {
            private readonly Connection _connection;
            
            public ProfileClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a profile.
            /// </summary>
            public async Task<TDMemberProfileDto> CreateProfileAsync(string username, string firstName, string lastName, List<string> emails, List<string> phones, List<string> messengers, List<string> links, bool notAMember, List<CustomFieldValueDto> customFieldValues, SpaceDate? birthday = null, string? about = null, SpaceDate? joined = null, SpaceDate? left = null, bool? speaksEnglish = null, string? pictureAttachmentId = null, AvatarCropSquareDto? avatarCropSquare = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryProfilesRequest, TDMemberProfileDto>("POST", $"api/http/team-directory/profiles?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}", new TeamDirectoryProfilesRequest{ Username = username, FirstName = firstName, LastName = lastName, Emails = emails, Phones = phones, Birthday = birthday, About = about, Messengers = messengers, Links = links, NotAMember = notAMember, Joined = joined, Left = left, SpeaksEnglish = speaksEnglish, PictureAttachmentId = pictureAttachmentId, AvatarCropSquare = avatarCropSquare, CustomFieldValues = customFieldValues });
        
            /// <summary>
            /// Get/search all profiles. Parameters are applied as 'AND' filters.
            /// </summary>
            public async Task<Batch<TDMemberProfileDto>> GetAllProfilesAsync(string query, bool reportPastMembers, bool meOnTop, string? skip = null, int? top = null, string? teamId = null, string? locationId = null, string? roleId = null, ProfileOrder? order = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/team-directory/profiles?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&reportPastMembers={reportPastMembers.ToString().ToLowerInvariant()}&teamId={teamId?.ToString() ?? "null"}&locationId={locationId?.ToString() ?? "null"}&roleId={roleId?.ToString() ?? "null"}&meOnTop={meOnTop.ToString().ToLowerInvariant()}&order={order?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
            
            /// <summary>
            /// Get/search all profiles. Parameters are applied as 'AND' filters.
            /// </summary>
            public IAsyncEnumerable<TDMemberProfileDto> GetAllProfilesAsyncEnumerable(string query, bool reportPastMembers, bool meOnTop, string? skip = null, int? top = null, string? teamId = null, string? locationId = null, string? roleId = null, ProfileOrder? order = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllProfilesAsync(query: query, reportPastMembers: reportPastMembers, meOnTop: meOnTop, top: top, teamId: teamId, locationId: locationId, roleId: roleId, order: order, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
        
            /// <summary>
            /// Check whether one or more usernames exist. The response contains boolean values in the same order as the request, where true means the username exists.
            /// </summary>
            public async Task<List<string>> CheckProfileUsernamesExistenceAsync(List<string> usernames)
                => await _connection.RequestResourceAsync<List<string>>("GET", $"api/http/team-directory/profiles/usernames-exist?usernames={usernames.JoinToString("usernames", it => it.ToString())}");
        
            /// <summary>
            /// Get profile information by email address.
            /// </summary>
            public async Task<TDMemberProfileDto> GetProfileByEmailAsync(string email, bool verified, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("GET", $"api/http/team-directory/profiles/email:{email}?verified={verified.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
        
            /// <summary>
            /// Get profile information
            /// </summary>
            public async Task<TDMemberProfileDto> GetProfileAsync(ProfileIdentifier profile, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("GET", $"api/http/team-directory/profiles/{profile}?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
        
            /// <summary>
            /// Check if a user profile is a member of one or more teams.
            /// </summary>
            public async Task<bool> CheckIfProfileIsTeamMemberAsync(string profile, List<string> teamIds)
                => await _connection.RequestResourceAsync<bool>("GET", $"api/http/team-directory/profiles/{profile}/is-team-member?teamIds={teamIds.JoinToString("teamIds", it => it.ToString())}");
        
            /// <summary>
            /// Update a profile. Optional parameters will be ignored when null, and updated otherwise.
            /// </summary>
            public async Task<TDMemberProfileDto> UpdateProfileAsync(ProfileIdentifier profile, string? username = null, string? firstName = null, string? lastName = null, List<string>? emails = null, List<string>? phones = null, SpaceDate? birthday = null, string? about = null, List<string>? messengers = null, List<string>? links = null, bool? notAMember = null, SpaceDate? joined = null, SpaceDate? left = null, bool? speaksEnglish = null, string? pictureAttachmentId = null, AvatarCropSquareDto? avatarCropSquare = null, List<CustomFieldValueDto>? customFieldValues = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileRequest, TDMemberProfileDto>("PATCH", $"api/http/team-directory/profiles/{profile}?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}", new TeamDirectoryProfilesForProfileRequest{ Username = username, FirstName = firstName, LastName = lastName, Emails = emails, Phones = phones, Birthday = birthday, About = about, Messengers = messengers, Links = links, NotAMember = notAMember, Joined = joined, Left = left, SpeaksEnglish = speaksEnglish, PictureAttachmentId = pictureAttachmentId, AvatarCropSquare = avatarCropSquare, CustomFieldValues = customFieldValues });
        
            /// <summary>
            /// Delete a profile.
            /// </summary>
            public async Task<TDMemberProfileDto> DeleteProfileAsync(string profile, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{profile}?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
        
            /// <summary>
            /// Deactivate a user profile. Optionally, the since date for deactivation can be specified, and the time when deactivation goes into effect.
            /// </summary>
            public async Task<TDMemberProfileDto> DeactivateAsync(string profile, SpaceDate? since = null, SpaceTime? at = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{profile}/deactivate?since={since?.ToString() ?? "null"}&at={at?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
        
            public async Task<TDMemberProfileDto> FireAsync(string profile, SpaceDate since, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDMemberProfileDto>("DELETE", $"api/http/team-directory/profiles/{profile}/fire?since={since.ToString()}&$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
        
            public AuthenticationSessionClient AuthenticationSessions => new AuthenticationSessionClient(_connection);
            
            public partial class AuthenticationSessionClient
            {
                private readonly Connection _connection;
                
                public AuthenticationSessionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get the current authentication sessions for a given profile id.
                /// </summary>
                public async Task<List<ESAuthenticationSessionDto>> GetAllAuthenticationSessionsAsync(ProfileIdentifier owner, Func<Partial<ESAuthenticationSessionDto>, Partial<ESAuthenticationSessionDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<ESAuthenticationSessionDto>>("GET", $"api/http/team-directory/profiles/authentication-sessions/{owner}?$fields={(partial != null ? partial(new Partial<ESAuthenticationSessionDto>()) : Partial<ESAuthenticationSessionDto>.Default())}");
            
                /// <summary>
                /// Terminate an existing authentication session. Doing so will close the session, and logout.
                /// </summary>
                public async Task TerminateOwnAuthenticationSessionAsync(ProfileIdentifier owner, string sessionId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/authentication-sessions/{owner}/{sessionId}");
            
            }
        
            public OAuthConsentClient OAuthConsents => new OAuthConsentClient(_connection);
            
            public partial class OAuthConsentClient
            {
                private readonly Connection _connection;
                
                public OAuthConsentClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get all OAuth consents for a given profile id.
                /// </summary>
                public async Task<List<ESOAuthConsentDto>> GetAllOAuthConsentsAsync(ProfileIdentifier owner, Func<Partial<ESOAuthConsentDto>, Partial<ESOAuthConsentDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<ESOAuthConsentDto>>("GET", $"api/http/team-directory/profiles/oauth-consents/{owner}?$fields={(partial != null ? partial(new Partial<ESOAuthConsentDto>()) : Partial<ESOAuthConsentDto>.Default())}");
            
                public ApprovedScopeClient ApprovedScopes => new ApprovedScopeClient(_connection);
                
                public partial class ApprovedScopeClient
                {
                    private readonly Connection _connection;
                    
                    public ApprovedScopeClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Remove a previously approved scope.
                    /// </summary>
                    public async Task DeleteApprovedScopeAsync(ProfileIdentifier owner, string id)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/{owner}/approved-scopes/{id}");
                
                }
            
                public RefreshTokenClient RefreshTokens => new RefreshTokenClient(_connection);
                
                public partial class RefreshTokenClient
                {
                    private readonly Connection _connection;
                    
                    public RefreshTokenClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Remove a refresh token. This will require the client to re-authenticate.
                    /// </summary>
                    public async Task DeleteRefreshTokenAsync(ProfileIdentifier owner, string id)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/oauth-consents/{owner}/refresh-tokens/{id}");
                
                }
            
            }
        
            public TwoFaClient TwoFa => new TwoFaClient(_connection);
            
            public partial class TwoFaClient
            {
                private readonly Connection _connection;
                
                public TwoFaClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public StatuClient Status => new StatuClient(_connection);
                
                public partial class StatuClient
                {
                    private readonly Connection _connection;
                    
                    public StatuClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Get two-factor authentication status for a given profile id. The response indicates whether two-factor authentication is active, not active, or not set up yet.
                    /// </summary>
                    public async Task<TwoFactorAuthenticationStatus> TwoFactorAuthenticationStatusAsync(ProfileIdentifier profile, Func<Partial<TwoFactorAuthenticationStatus>, Partial<TwoFactorAuthenticationStatus>>? partial = null)
                        => await _connection.RequestResourceAsync<TwoFactorAuthenticationStatus>("GET", $"api/http/team-directory/profiles/{profile}/2-fa/status?$fields={(partial != null ? partial(new Partial<TwoFactorAuthenticationStatus>()) : Partial<TwoFactorAuthenticationStatus>.Default())}");
                
                }
            
                public TotpClient Totp => new TotpClient(_connection);
                
                public partial class TotpClient
                {
                    private readonly Connection _connection;
                    
                    public TotpClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Set up two-factor authentication using TOTP (Time-based One-time Password) for a given profile id. The response will return a QR code (base64 encoded) that can be scanned with an app to setup two-factor authentication. The code that the app generates has to be confirmed in Space to enable TOTP.
                    /// </summary>
                    public async Task<TwoFactorAuthenticationSecretDto> SetUpTOTPTwoFactorAuthenticationAsync(ProfileIdentifier profile, Func<Partial<TwoFactorAuthenticationSecretDto>, Partial<TwoFactorAuthenticationSecretDto>>? partial = null)
                        => await _connection.RequestResourceAsync<TwoFactorAuthenticationSecretDto>("POST", $"api/http/team-directory/profiles/{profile}/2-fa/totp?$fields={(partial != null ? partial(new Partial<TwoFactorAuthenticationSecretDto>()) : Partial<TwoFactorAuthenticationSecretDto>.Default())}");
                
                    /// <summary>
                    /// Confirm two-factor authentication for a given profile id using a TOTP (Time-based One-time Password) code from an app.
                    /// </summary>
                    public async Task ConfirmTOTPTwoFactorAuthenticationSettingsAsync(ProfileIdentifier profile, int code)
                        => await _connection.RequestResourceAsync("POST", $"api/http/team-directory/profiles/{profile}/2-fa/totp/confirm", new TeamDirectoryProfilesForProfile2FaTotpConfirmRequest{ Code = code });
                
                    /// <summary>
                    /// Enable/disable two-factor authentication settings for a given profile id.
                    /// </summary>
                    public async Task UpdateTOTPTwoFactorAuthenticationSettingsAsync(ProfileIdentifier profile, bool enabled)
                        => await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/2-fa/totp", new TeamDirectoryProfilesForProfile2FaTotpRequest{ Enabled = enabled });
                
                    /// <summary>
                    /// Remove two-factor authentication settings for a given profile id. Previously generated TOTP (Time-based One-time Password) are rendered invalid.
                    /// </summary>
                    public async Task DeleteCurrentTOTPTwoFactorAuthenticationSettingsAsync(ProfileIdentifier profile)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/2-fa/totp");
                
                }
            
            }
        
            public ApplicationPasswordClient ApplicationPasswords => new ApplicationPasswordClient(_connection);
            
            public partial class ApplicationPasswordClient
            {
                private readonly Connection _connection;
                
                public ApplicationPasswordClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Pair<ESApplicationPasswordDto, string>> CreateApplicationPasswordAsync(ProfileIdentifier profile, string name, string scope, Func<Partial<Pair<ESApplicationPasswordDto, string>>, Partial<Pair<ESApplicationPasswordDto, string>>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileApplicationPasswordsRequest, Pair<ESApplicationPasswordDto, string>>("POST", $"api/http/team-directory/profiles/{profile}/application-passwords?$fields={(partial != null ? partial(new Partial<Pair<ESApplicationPasswordDto, string>>()) : Partial<Pair<ESApplicationPasswordDto, string>>.Default())}", new TeamDirectoryProfilesForProfileApplicationPasswordsRequest{ Name = name, Scope = scope });
            
                public async Task<Batch<ESApplicationPasswordDto>> GetAllApplicationPasswordsAsync(ProfileIdentifier profile, string? skip = null, int? top = null, Func<Partial<Batch<ESApplicationPasswordDto>>, Partial<Batch<ESApplicationPasswordDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<ESApplicationPasswordDto>>("GET", $"api/http/team-directory/profiles/{profile}/application-passwords?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<ESApplicationPasswordDto>>()) : Partial<Batch<ESApplicationPasswordDto>>.Default())}");
                
                public IAsyncEnumerable<ESApplicationPasswordDto> GetAllApplicationPasswordsAsyncEnumerable(ProfileIdentifier profile, string? skip = null, int? top = null, Func<Partial<ESApplicationPasswordDto>, Partial<ESApplicationPasswordDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllApplicationPasswordsAsync(profile: profile, top: top, skip: batchSkip, partial: builder => Partial<Batch<ESApplicationPasswordDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ESApplicationPasswordDto>.Default())), skip);
            
                public async Task UpdateApplicationPasswordAsync(ProfileIdentifier profile, string passwordId, string? name = null, string? scope = null)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/application-passwords/{passwordId}", new TeamDirectoryProfilesForProfileApplicationPasswordsForPasswordIdRequest{ Name = name, Scope = scope });
            
                public async Task DeleteApplicationPasswordAsync(ProfileIdentifier profile, string passwordId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/application-passwords/{passwordId}");
            
            }
        
            public ChecklistClient Checklists => new ChecklistClient(_connection);
            
            public partial class ChecklistClient
            {
                private readonly Connection _connection;
                
                public ChecklistClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<ChecklistDto> CreateChecklistAsync(ProfileIdentifier profile, string name, Func<Partial<ChecklistDto>, Partial<ChecklistDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileChecklistsRequest, ChecklistDto>("POST", $"api/http/team-directory/profiles/{profile}/checklists?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}", new TeamDirectoryProfilesForProfileChecklistsRequest{ Name = name });
            
                public async Task<ChecklistDto> ImportChecklistAsync(ProfileIdentifier profile, string name, string tabIndentedLines, Func<Partial<ChecklistDto>, Partial<ChecklistDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileChecklistsImportRequest, ChecklistDto>("POST", $"api/http/team-directory/profiles/{profile}/checklists/import?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}", new TeamDirectoryProfilesForProfileChecklistsImportRequest{ Name = name, TabIndentedLines = tabIndentedLines });
            
                public async Task ImportChecklistLinesAsync(ProfileIdentifier profile, string checklistId, string targetParentId, string tabIndentedLines, string? afterItemId = null)
                    => await _connection.RequestResourceAsync("POST", $"api/http/team-directory/profiles/{profile}/checklists/{checklistId}/import", new TeamDirectoryProfilesForProfileChecklistsForChecklistIdImportRequest{ TargetParentId = targetParentId, AfterItemId = afterItemId, TabIndentedLines = tabIndentedLines });
            
                public async Task<List<ChecklistDto>> GetAllChecklistsAsync(ProfileIdentifier profile, Func<Partial<ChecklistDto>, Partial<ChecklistDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/team-directory/profiles/{profile}/checklists?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}");
            
                public async Task UpdateChecklistAsync(ProfileIdentifier profile, string checklistId, string name, string? description = null)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/checklists/{checklistId}", new TeamDirectoryProfilesForProfileChecklistsForChecklistIdRequest{ Name = name, Description = description });
            
                public async Task DeleteChecklistAsync(ProfileIdentifier profile, string checklistId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/checklists/{checklistId}");
            
                public StarredClient Starred => new StarredClient(_connection);
                
                public partial class StarredClient
                {
                    private readonly Connection _connection;
                    
                    public StarredClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<ChecklistDto>> GetAllStarredChecklistsAsync(ProfileIdentifier profile, Func<Partial<ChecklistDto>, Partial<ChecklistDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/team-directory/profiles/{profile}/checklists/starred?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}");
                
                }
            
                public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
                
                public partial class FullChecklistTreeClient
                {
                    private readonly Connection _connection;
                    
                    public FullChecklistTreeClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<PlanItemChildrenDto>> GetFullChecklistTreeAsync(ProfileIdentifier profile, string checklistId, Func<Partial<PlanItemChildrenDto>, Partial<PlanItemChildrenDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<PlanItemChildrenDto>>("GET", $"api/http/team-directory/profiles/{profile}/checklists/{checklistId}/full-checklist-tree?$fields={(partial != null ? partial(new Partial<PlanItemChildrenDto>()) : Partial<PlanItemChildrenDto>.Default())}");
                
                }
            
            }
        
            public LeadClient Leads => new LeadClient(_connection);
            
            public partial class LeadClient
            {
                private readonly Connection _connection;
                
                public LeadClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get team leads for a given profile id.
                /// </summary>
                public async Task<List<TDMemberProfileDto>> GetAllLeadsAsync(ProfileIdentifier profile, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<TDMemberProfileDto>>("GET", $"api/http/team-directory/profiles/{profile}/leads?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
            
            }
        
            public PermanentTokenClient PermanentTokens => new PermanentTokenClient(_connection);
            
            public partial class PermanentTokenClient
            {
                private readonly Connection _connection;
                
                public PermanentTokenClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Create a personal token for a given profile id that can be used to access the current organisation.
                /// </summary>
                public async Task<Pair<ESPermanentTokenDto, string>> CreatePermanentTokenAsync(ProfileIdentifier profile, string name, string scope, Func<Partial<Pair<ESPermanentTokenDto, string>>, Partial<Pair<ESPermanentTokenDto, string>>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfilePermanentTokensRequest, Pair<ESPermanentTokenDto, string>>("POST", $"api/http/team-directory/profiles/{profile}/permanent-tokens?$fields={(partial != null ? partial(new Partial<Pair<ESPermanentTokenDto, string>>()) : Partial<Pair<ESPermanentTokenDto, string>>.Default())}", new TeamDirectoryProfilesForProfilePermanentTokensRequest{ Name = name, Scope = scope });
            
                /// <summary>
                /// Get personal tokens used to access the current organisation for a given profile id.
                /// </summary>
                public async Task<Batch<ESPermanentTokenDto>> GetAllPermanentTokensAsync(ProfileIdentifier profile, string? skip = null, int? top = null, Func<Partial<Batch<ESPermanentTokenDto>>, Partial<Batch<ESPermanentTokenDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<ESPermanentTokenDto>>("GET", $"api/http/team-directory/profiles/{profile}/permanent-tokens?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<ESPermanentTokenDto>>()) : Partial<Batch<ESPermanentTokenDto>>.Default())}");
                
                /// <summary>
                /// Get personal tokens used to access the current organisation for a given profile id.
                /// </summary>
                public IAsyncEnumerable<ESPermanentTokenDto> GetAllPermanentTokensAsyncEnumerable(ProfileIdentifier profile, string? skip = null, int? top = null, Func<Partial<ESPermanentTokenDto>, Partial<ESPermanentTokenDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllPermanentTokensAsync(profile: profile, top: top, skip: batchSkip, partial: builder => Partial<Batch<ESPermanentTokenDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ESPermanentTokenDto>.Default())), skip);
            
                /// <summary>
                /// Update an existing personal token used to access the current organisation. The permanent token name and/or scope can be updated.
                /// </summary>
                public async Task UpdatePermanentTokenAsync(ProfileIdentifier profile, string tokenId, string? name = null, string? scope = null)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/permanent-tokens/{tokenId}", new TeamDirectoryProfilesForProfilePermanentTokensForTokenIdRequest{ Name = name, Scope = scope });
            
                /// <summary>
                /// Delete a specific personal token used to access the current organisation.
                /// </summary>
                public async Task DeletePermanentTokenAsync(ProfileIdentifier profile, string tokenId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/permanent-tokens/{tokenId}");
            
                public CurrentClient Current => new CurrentClient(_connection);
                
                public partial class CurrentClient
                {
                    private readonly Connection _connection;
                    
                    public CurrentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Delete personal token for a given profile id.
                    /// </summary>
                    public async Task DeleteCurrentPermanentTokenAsync(ProfileIdentifier profile)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/permanent-tokens/current");
                
                }
            
            }
        
            public SpokenLanguageClient SpokenLanguages => new SpokenLanguageClient(_connection);
            
            public partial class SpokenLanguageClient
            {
                private readonly Connection _connection;
                
                public SpokenLanguageClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Update spoken language for a profile. Optionally, firstName and lastName can be specified to add a localized name to the profile.
                /// </summary>
                public async Task<TDProfileLanguageDto> CreateSpokenLanguageAsync(ProfileIdentifier profile, string language, string? firstName = null, string? lastName = null, Func<Partial<TDProfileLanguageDto>, Partial<TDProfileLanguageDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileSpokenLanguagesRequest, TDProfileLanguageDto>("POST", $"api/http/team-directory/profiles/{profile}/spoken-languages?$fields={(partial != null ? partial(new Partial<TDProfileLanguageDto>()) : Partial<TDProfileLanguageDto>.Default())}", new TeamDirectoryProfilesForProfileSpokenLanguagesRequest{ Language = language, FirstName = firstName, LastName = lastName });
            
                /// <summary>
                /// Delete spoken language for a profile.
                /// </summary>
                public async Task DeleteSpokenLanguageAsync(ProfileIdentifier profile, string language)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/spoken-languages/{language}");
            
            }
        
            public VcsPasswordClient VcsPassword => new VcsPasswordClient(_connection);
            
            public partial class VcsPasswordClient
            {
                private readonly Connection _connection;
                
                public VcsPasswordClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get VCS password for a profile.
                /// </summary>
                public async Task<VcsHostingPasswordDto> GetVcsPasswordAsync(ProfileIdentifier profile, Func<Partial<VcsHostingPasswordDto>, Partial<VcsHostingPasswordDto>>? partial = null)
                    => await _connection.RequestResourceAsync<VcsHostingPasswordDto>("GET", $"api/http/team-directory/profiles/{profile}/vcs-password?$fields={(partial != null ? partial(new Partial<VcsHostingPasswordDto>()) : Partial<VcsHostingPasswordDto>.Default())}");
            
                /// <summary>
                /// Set VCS password for a profile. This password can be used to access Space repositories over HTTPS.
                /// </summary>
                public async Task UpdateVcsPasswordAsync(ProfileIdentifier profile, string password)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/team-directory/profiles/{profile}/vcs-password", new TeamDirectoryProfilesForProfileVcsPasswordRequest{ Password = password });
            
                /// <summary>
                /// Delete VCS password for a profile.
                /// </summary>
                public async Task DeleteVcsPasswordAsync(ProfileIdentifier profile)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/vcs-password");
            
            }
        
            public WorkingDayClient WorkingDays => new WorkingDayClient(_connection);
            
            public partial class WorkingDayClient
            {
                private readonly Connection _connection;
                
                public WorkingDayClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<TDWorkingDaysDto> AddWorkingDaysAsync(ProfileIdentifier profile, WorkingDaysSpecDto workingDaysSpec, SpaceDate? dateStart = null, SpaceDate? dateEnd = null, Func<Partial<TDWorkingDaysDto>, Partial<TDWorkingDaysDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileWorkingDaysRequest, TDWorkingDaysDto>("POST", $"api/http/team-directory/profiles/{profile}/working-days?$fields={(partial != null ? partial(new Partial<TDWorkingDaysDto>()) : Partial<TDWorkingDaysDto>.Default())}", new TeamDirectoryProfilesForProfileWorkingDaysRequest{ DateStart = dateStart, DateEnd = dateEnd, WorkingDaysSpec = workingDaysSpec });
            
                public async Task<Batch<TDWorkingDaysDto>> GetAllWorkingDaysAsync(ProfileIdentifier profile, string? skip = null, int? top = null, Func<Partial<Batch<TDWorkingDaysDto>>, Partial<Batch<TDWorkingDaysDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<TDWorkingDaysDto>>("GET", $"api/http/team-directory/profiles/{profile}/working-days?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<TDWorkingDaysDto>>()) : Partial<Batch<TDWorkingDaysDto>>.Default())}");
                
                public IAsyncEnumerable<TDWorkingDaysDto> GetAllWorkingDaysAsyncEnumerable(ProfileIdentifier profile, string? skip = null, int? top = null, Func<Partial<TDWorkingDaysDto>, Partial<TDWorkingDaysDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllWorkingDaysAsync(profile: profile, top: top, skip: batchSkip, partial: builder => Partial<Batch<TDWorkingDaysDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDWorkingDaysDto>.Default())), skip);
            
                public async Task<TDWorkingDaysDto> UpdateWorkingDaysAsync(ProfileIdentifier profile, string workingDaysId, WorkingDaysSpecDto workingDaysSpec, SpaceDate? dateStart = null, SpaceDate? dateEnd = null, Func<Partial<TDWorkingDaysDto>, Partial<TDWorkingDaysDto>>? partial = null)
                    => await _connection.RequestResourceAsync<TeamDirectoryProfilesForProfileWorkingDaysForWorkingDaysIdRequest, TDWorkingDaysDto>("PATCH", $"api/http/team-directory/profiles/{profile}/working-days/{workingDaysId}?$fields={(partial != null ? partial(new Partial<TDWorkingDaysDto>()) : Partial<TDWorkingDaysDto>.Default())}", new TeamDirectoryProfilesForProfileWorkingDaysForWorkingDaysIdRequest{ DateStart = dateStart, DateEnd = dateEnd, WorkingDaysSpec = workingDaysSpec });
            
                public async Task DeleteWorkingDaysAsync(ProfileIdentifier profile, string workingDaysId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/profiles/{profile}/working-days/{workingDaysId}");
            
            }
        
        }
    
        public ReportingClient Reportings => new ReportingClient(_connection);
        
        public partial class ReportingClient
        {
            private readonly Connection _connection;
            
            public ReportingClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<TDMemberProfileDto>> GetAllReportingsAsync(string query, string? skip = null, int? top = null, bool? withManager = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/team-directory/reportings?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&withManager={withManager?.ToString()?.ToLowerInvariant() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
            
            public IAsyncEnumerable<TDMemberProfileDto> GetAllReportingsAsyncEnumerable(string query, string? skip = null, int? top = null, bool? withManager = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllReportingsAsync(query: query, top: top, withManager: withManager, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
        
        }
    
        public RoleClient Roles => new RoleClient(_connection);
        
        public partial class RoleClient
        {
            private readonly Connection _connection;
            
            public RoleClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a role.
            /// </summary>
            public async Task<TDRoleDto> CreateRoleAsync(string name, string? parentId = null, Func<Partial<TDRoleDto>, Partial<TDRoleDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryRolesRequest, TDRoleDto>("POST", $"api/http/team-directory/roles?$fields={(partial != null ? partial(new Partial<TDRoleDto>()) : Partial<TDRoleDto>.Default())}", new TeamDirectoryRolesRequest{ Name = name, ParentId = parentId });
        
            /// <summary>
            /// Restore an archived role.
            /// </summary>
            public async Task<TDRoleDto> RestoreAsync(string id, Func<Partial<TDRoleDto>, Partial<TDRoleDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDRoleDto>("POST", $"api/http/team-directory/roles/{id}/restore?$fields={(partial != null ? partial(new Partial<TDRoleDto>()) : Partial<TDRoleDto>.Default())}");
        
            /// <summary>
            /// Get/search all roles. Parameters are applied as 'AND' filters.
            /// </summary>
            public async Task<List<TDRoleDto>> GetAllRolesAsync(string query, bool withArchived, Func<Partial<TDRoleDto>, Partial<TDRoleDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<TDRoleDto>>("GET", $"api/http/team-directory/roles?query={query.ToString()}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<TDRoleDto>()) : Partial<TDRoleDto>.Default())}");
        
            /// <summary>
            /// Get a role by id.
            /// </summary>
            public async Task<TDRoleDto> GetRoleAsync(string id, Func<Partial<TDRoleDto>, Partial<TDRoleDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDRoleDto>("GET", $"api/http/team-directory/roles/{id}?$fields={(partial != null ? partial(new Partial<TDRoleDto>()) : Partial<TDRoleDto>.Default())}");
        
            /// <summary>
            /// Update a role. Optional parameters will be ignored when null, and updated otherwise.
            /// </summary>
            public async Task<TDRoleDto> UpdateRoleAsync(string id, string? name = null, string? parentId = null, Func<Partial<TDRoleDto>, Partial<TDRoleDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryRolesForIdRequest, TDRoleDto>("PATCH", $"api/http/team-directory/roles/{id}?$fields={(partial != null ? partial(new Partial<TDRoleDto>()) : Partial<TDRoleDto>.Default())}", new TeamDirectoryRolesForIdRequest{ Name = name, ParentId = parentId });
        
            /// <summary>
            /// Archive a role.
            /// </summary>
            public async Task ArchiveRoleAsync(string id)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/team-directory/roles/{id}");
        
        }
    
        public StatClient Stats => new StatClient(_connection);
        
        public partial class StatClient
        {
            private readonly Connection _connection;
            
            public StatClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Get statistics of total members, and members per location, role, and team. Parameters are applied as 'AND' filters.
            /// </summary>
            public async Task<TDStatsDto> GetAllStatsAsync(string? teamId = null, string? locationId = null, string? roleId = null, Func<Partial<TDStatsDto>, Partial<TDStatsDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDStatsDto>("GET", $"api/http/team-directory/stats?teamId={teamId?.ToString() ?? "null"}&locationId={locationId?.ToString() ?? "null"}&roleId={roleId?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<TDStatsDto>()) : Partial<TDStatsDto>.Default())}");
        
        }
    
        public TeamClient Teams => new TeamClient(_connection);
        
        public partial class TeamClient
        {
            private readonly Connection _connection;
            
            public TeamClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a team.
            /// </summary>
            public async Task<TDTeamDto> CreateTeamAsync(string teamNameRaw, string? teamDescription = null, List<string>? teamEmails = null, string? parentId = null, List<CustomFieldValueDto>? customFieldValues = null, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryTeamsRequest, TDTeamDto>("POST", $"api/http/team-directory/teams?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}", new TeamDirectoryTeamsRequest{ TeamNameRaw = teamNameRaw, TeamDescription = teamDescription, TeamEmails = teamEmails, ParentId = parentId, CustomFieldValues = customFieldValues });
        
            /// <summary>
            /// Restore one or more archived teams.
            /// </summary>
            public async Task<List<TDTeamDto>> RestoreMultipleAsync(List<string> ids, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryTeamsRestoreRequest, List<TDTeamDto>>("POST", $"api/http/team-directory/teams/restore?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}", new TeamDirectoryTeamsRestoreRequest{ Ids = ids });
        
            /// <summary>
            /// Cancel disbanding a team, and restore members.
            /// </summary>
            public async Task CancelDisbandingAsync(string id)
                => await _connection.RequestResourceAsync("POST", $"api/http/team-directory/teams/{id}/cancel-disbanding");
        
            /// <summary>
            /// Restore an archived team.
            /// </summary>
            public async Task<TDTeamDto> RestoreAsync(string id, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDTeamDto>("POST", $"api/http/team-directory/teams/{id}/restore?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}");
        
            /// <summary>
            /// Get/search all teams. Parameters are applied as 'AND' filters.
            /// </summary>
            public async Task<Batch<TDTeamDto>> GetAllTeamsAsync(string query, bool withArchived, string? skip = null, int? top = null, Func<Partial<Batch<TDTeamDto>>, Partial<Batch<TDTeamDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<TDTeamDto>>("GET", $"api/http/team-directory/teams?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&withArchived={withArchived.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDTeamDto>>()) : Partial<Batch<TDTeamDto>>.Default())}");
            
            /// <summary>
            /// Get/search all teams. Parameters are applied as 'AND' filters.
            /// </summary>
            public IAsyncEnumerable<TDTeamDto> GetAllTeamsAsyncEnumerable(string query, bool withArchived, string? skip = null, int? top = null, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllTeamsAsync(query: query, withArchived: withArchived, top: top, skip: batchSkip, partial: builder => Partial<Batch<TDTeamDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDTeamDto>.Default())), skip);
        
            [Obsolete("This endpoint returns null if there are multiple teams with the same name. Use GET team-directory/teams with parameter 'query' (since 2019-02-04)")]
            public async Task<TDTeamDto> GetSingleTeamByNameAsync(string name, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDTeamDto>("GET", $"api/http/team-directory/teams/name:{name}?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}");
        
            /// <summary>
            /// Get a team by id.
            /// </summary>
            public async Task<TDTeamDto> GetTeamAsync(string id, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => await _connection.RequestResourceAsync<TDTeamDto>("GET", $"api/http/team-directory/teams/{id}?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}");
        
            /// <summary>
            /// Update 
            /// </summary>
            public async Task<TDTeamDto> UpdateTeamAsync(string id, string? teamNameRaw = null, string? teamDescription = null, List<string>? teamEmails = null, string? parentId = null, List<CustomFieldValueDto>? customFieldValues = null, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => await _connection.RequestResourceAsync<TeamDirectoryTeamsForIdRequest, TDTeamDto>("PATCH", $"api/http/team-directory/teams/{id}?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}", new TeamDirectoryTeamsForIdRequest{ TeamNameRaw = teamNameRaw, TeamDescription = teamDescription, TeamEmails = teamEmails, ParentId = parentId, CustomFieldValues = customFieldValues });
        
            /// <summary>
            /// Archive a team.
            /// </summary>
            public async Task<List<TDTeamDto>> ArchiveTeamAsync(string id, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<TDTeamDto>>("DELETE", $"api/http/team-directory/teams/{id}?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}");
        
            /// <summary>
            /// Disband a team.
            /// </summary>
            public async Task<List<TDTeamDto>> DisbandAsync(string id, Func<Partial<TDTeamDto>, Partial<TDTeamDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<TDTeamDto>>("DELETE", $"api/http/team-directory/teams/{id}/disband?$fields={(partial != null ? partial(new Partial<TDTeamDto>()) : Partial<TDTeamDto>.Default())}");
        
            public DirectMemberClient DirectMembers => new DirectMemberClient(_connection);
            
            public partial class DirectMemberClient
            {
                private readonly Connection _connection;
                
                public DirectMemberClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get/search direct members of a given team.
                /// </summary>
                public async Task<Batch<TDMemberProfileDto>> GetAllDirectMembersAsync(string id, string query, string? skip = null, int? top = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/team-directory/teams/{id}/direct-members?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
                
                /// <summary>
                /// Get/search direct members of a given team.
                /// </summary>
                public IAsyncEnumerable<TDMemberProfileDto> GetAllDirectMembersAsyncEnumerable(string id, string query, string? skip = null, int? top = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllDirectMembersAsync(id: id, query: query, top: top, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
            
            }
        
        }
    
    }
    
}
