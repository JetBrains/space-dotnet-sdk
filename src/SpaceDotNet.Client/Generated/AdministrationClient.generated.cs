// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public partial class AdministrationClient
    {
        private readonly Connection _connection;
        
        public AdministrationClient(Connection connection)
        {
            _connection = connection;
        }
        
        public SupportClient Support => new SupportClient(_connection);
        
        public partial class SupportClient
        {
            private readonly Connection _connection;
            
            public SupportClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a profile for support.
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Superadmin</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<SupportProfile> CreateSupportAsync(Func<Partial<SupportProfile>, Partial<SupportProfile>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<SupportProfile>("POST", $"api/http/administration/support?$fields={(partial != null ? partial(new Partial<SupportProfile>()) : Partial<SupportProfile>.Default())}", cancellationToken);
        
        }
    
        public UserAgreementClient UserAgreement => new UserAgreementClient(_connection);
        
        public partial class UserAgreementClient
        {
            private readonly Connection _connection;
            
            public UserAgreementClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<UAUserAgreement> GetUserAgreementAsync(Func<Partial<UAUserAgreement>, Partial<UAUserAgreement>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<UAUserAgreement>("GET", $"api/http/administration/user-agreement?$fields={(partial != null ? partial(new Partial<UAUserAgreement>()) : Partial<UAUserAgreement>.Default())}", cancellationToken);
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Superadmin</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<UAUserAgreement> UploadNewUserAgreementAsync(string newContent, bool invalidate, Func<Partial<UAUserAgreement>, Partial<UAUserAgreement>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<AdministrationUserAgreementPatchRequest, UAUserAgreement>("PATCH", $"api/http/administration/user-agreement?$fields={(partial != null ? partial(new Partial<UAUserAgreement>()) : Partial<UAUserAgreement>.Default())}", 
                    new AdministrationUserAgreementPatchRequest { 
                        NewContent = newContent,
                        IsInvalidate = invalidate,
                    }
            , cancellationToken);
        
            public EnabledClient Enabled => new EnabledClient(_connection);
            
            public partial class EnabledClient
            {
                private readonly Connection _connection;
                
                public EnabledClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Superadmin</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task EnableDisableUserAgreementAsync(bool enabled, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("POST", $"api/http/administration/user-agreement/enabled", 
                        new AdministrationUserAgreementEnabledPostRequest { 
                            IsEnabled = enabled,
                        }
                , cancellationToken);
            
                public async Task<bool> IsUserAgreementEnabledAsync(CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<bool>("GET", $"api/http/administration/user-agreement/enabled", cancellationToken);
            
            }
        
            public StatuClient Status => new StatuClient(_connection);
            
            public partial class StatuClient
            {
                private readonly Connection _connection;
                
                public StatuClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Superadmin</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<Batch<UAUserAgreementStatus>> GetAllUserAgreementStatusesAsync(string query = "", bool activeProfilesOnly = true, string? skip = null, int? top = 100, bool? accepted = null, Func<Partial<Batch<UAUserAgreementStatus>>, Partial<Batch<UAUserAgreementStatus>>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<Batch<UAUserAgreementStatus>>("GET", $"api/http/administration/user-agreement/status?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&accepted={accepted?.ToString()?.ToLowerInvariant() ?? "null"}&activeProfilesOnly={activeProfilesOnly.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<UAUserAgreementStatus>>()) : Partial<Batch<UAUserAgreementStatus>>.Default())}", cancellationToken);
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Superadmin</term>
                /// </item>
                /// </list>
                /// </remarks>
                public IAsyncEnumerable<UAUserAgreementStatus> GetAllUserAgreementStatusesAsyncEnumerable(string query = "", bool activeProfilesOnly = true, string? skip = null, int? top = 100, bool? accepted = null, Func<Partial<UAUserAgreementStatus>, Partial<UAUserAgreementStatus>>? partial = null, CancellationToken cancellationToken = default)
                    => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllUserAgreementStatusesAsync(query: query, activeProfilesOnly: activeProfilesOnly, top: top, accepted: accepted, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<UAUserAgreementStatus>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<UAUserAgreementStatus>.Default())), skip, cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Superadmin</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<UAUserAgreementStatus> GetUserAgreementStatusForProfileAsync(ProfileIdentifier profile, Func<Partial<UAUserAgreementStatus>, Partial<UAUserAgreementStatus>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<UAUserAgreementStatus>("GET", $"api/http/administration/user-agreement/status/{profile}?$fields={(partial != null ? partial(new Partial<UAUserAgreementStatus>()) : Partial<UAUserAgreementStatus>.Default())}", cancellationToken);
            
            }
        
        }
    
    }
    
}
