// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public partial class ProjectClient
    {
        private readonly Connection _connection;
        
        public ProjectClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<PRProjectDto> CreateProjectAsync(CreateProjectRequest data, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partial = null)
            => await _connection.RequestResourceAsync<CreateProjectRequest, PRProjectDto>("POST", $"api/http/projects?$fields={(partial != null ? partial(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default())}", data);
    
        public async Task<Batch<PRProjectDto>> GetAllProjectsAsync(string? skip = null, int? top = null, string? term = null, string? tag = null, bool? starred = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>> partial = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&tag={tag?.ToString() ?? "null"}&starred={starred?.ToString()?.ToLowerInvariant() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default())}");
        
        public IAsyncEnumerable<PRProjectDto> GetAllProjectsAsyncEnumerable(string? skip = null, int? top = null, string? term = null, string? tag = null, bool? starred = null, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partial = null)
            => BatchEnumerator.AllItems(batchSkip => GetAllProjectsAsync(skip: batchSkip, top, term, tag, starred, partial: builder => Partial<Batch<PRProjectDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProjectDto>.Default())), skip);
    
        public async Task<PRProjectDto> GetProjectByKeyAsync(string projectKey, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partial = null)
            => await _connection.RequestResourceAsync<PRProjectDto>("GET", $"api/http/projects/key:{projectKey}?$fields={(partial != null ? partial(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default())}");
    
        public async Task<Batch<PRProjectDto>> GetAllProjectsByMemberAsync(string member, string? skip = null, int? top = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>> partial = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/member:{member}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default())}");
        
        public IAsyncEnumerable<PRProjectDto> GetAllProjectsByMemberAsyncEnumerable(string member, string? skip = null, int? top = null, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partial = null)
            => BatchEnumerator.AllItems(batchSkip => GetAllProjectsByMemberAsync(member, skip: batchSkip, top, partial: builder => Partial<Batch<PRProjectDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProjectDto>.Default())), skip);
    
        public async Task<Batch<PRProjectDto>> GetAllProjectsWithRightAsync(string rightCode, string? skip = null, int? top = null, string? term = null, string? path = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>> partial = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/right-code:{rightCode}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&path={path?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default())}");
        
        public IAsyncEnumerable<PRProjectDto> GetAllProjectsWithRightAsyncEnumerable(string rightCode, string? skip = null, int? top = null, string? term = null, string? path = null, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partial = null)
            => BatchEnumerator.AllItems(batchSkip => GetAllProjectsWithRightAsync(rightCode, skip: batchSkip, top, term, path, partial: builder => Partial<Batch<PRProjectDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProjectDto>.Default())), skip);
    
        public async Task<Batch<PRProjectDto>> GetAllProjectsByTeamAsync(string team, string? skip = null, int? top = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>> partial = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/team:{team}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default())}");
        
        public IAsyncEnumerable<PRProjectDto> GetAllProjectsByTeamAsyncEnumerable(string team, string? skip = null, int? top = null, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partial = null)
            => BatchEnumerator.AllItems(batchSkip => GetAllProjectsByTeamAsync(team, skip: batchSkip, top, partial: builder => Partial<Batch<PRProjectDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProjectDto>.Default())), skip);
    
        public async Task<PRProjectDto> GetProjectAsync(string projectId, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partial = null)
            => await _connection.RequestResourceAsync<PRProjectDto>("GET", $"api/http/projects/{projectId}?$fields={(partial != null ? partial(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default())}");
    
        public async Task<PRProjectDto> UpdateProjectAsync(string projectId, UpdateProjectRequest data, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partial = null)
            => await _connection.RequestResourceAsync<UpdateProjectRequest, PRProjectDto>("PATCH", $"api/http/projects/{projectId}?$fields={(partial != null ? partial(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default())}", data);
    
        public async Task ArchiveProjectAsync(string projectId)
            => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}");
    
        public CodeDiscussionClient CodeDiscussions => new CodeDiscussionClient(_connection);
        
        public partial class CodeDiscussionClient
        {
            private readonly Connection _connection;
            
            public CodeDiscussionClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<PropagatedCodeDiscussionDto>> GetAllCodeDiscussionsByChangeAsync(GetAllCodeDiscussionsByChangeRequest data, Func<Partial<PropagatedCodeDiscussionDto>, Partial<PropagatedCodeDiscussionDto>> partial = null)
                => await _connection.RequestResourceAsync<GetAllCodeDiscussionsByChangeRequest, List<PropagatedCodeDiscussionDto>>("POST", $"api/http/projects/code-discussions/get-by-change?$fields={(partial != null ? partial(new Partial<PropagatedCodeDiscussionDto>()) : Partial<PropagatedCodeDiscussionDto>.Default())}", data);
        
            public DiscussionsCounterClient DiscussionsCounters => new DiscussionsCounterClient(_connection);
            
            public partial class DiscussionsCounterClient
            {
                private readonly Connection _connection;
                
                public DiscussionsCounterClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<RevisionDiscussionsCounterDto>> GetAllDiscussionsCountersAsync(string projectKey, string repository, List<string> revisions, Func<Partial<RevisionDiscussionsCounterDto>, Partial<RevisionDiscussionsCounterDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<RevisionDiscussionsCounterDto>>("GET", $"api/http/projects/code-discussions/discussions-counters?projectKey={projectKey.ToString()}&repository={repository.ToString()}&revisions={revisions.JoinToString("revisions", it => it.ToString())}&$fields={(partial != null ? partial(new Partial<RevisionDiscussionsCounterDto>()) : Partial<RevisionDiscussionsCounterDto>.Default())}");
            
            }
        
        }
    
        public DiscussionsCounterClient DiscussionsCounters => new DiscussionsCounterClient(_connection);
        
        public partial class DiscussionsCounterClient
        {
            private readonly Connection _connection;
            
            public DiscussionsCounterClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<RevisionDiscussionsCounterDto>> GetAllDiscussionsCountersAsync(string projectKey, string repository, List<string> revisions, Func<Partial<RevisionDiscussionsCounterDto>, Partial<RevisionDiscussionsCounterDto>> partial = null)
                => await _connection.RequestResourceAsync<List<RevisionDiscussionsCounterDto>>("GET", $"api/http/projects/discussions-counters?projectKey={projectKey.ToString()}&repository={repository.ToString()}&revisions={revisions.JoinToString("revisions", it => it.ToString())}&$fields={(partial != null ? partial(new Partial<RevisionDiscussionsCounterDto>()) : Partial<RevisionDiscussionsCounterDto>.Default())}");
        
        }
    
        public PrivateProjectClient PrivateProjects => new PrivateProjectClient(_connection);
        
        public partial class PrivateProjectClient
        {
            private readonly Connection _connection;
            
            public PrivateProjectClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task RequestAccessToProjectAsync(string projectKey)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/private-projects/key:{projectKey}/request-access");
        
            public async Task<List<PRPrivateProjectDto>> GetAllPrivateProjectsAsync(Func<Partial<PRPrivateProjectDto>, Partial<PRPrivateProjectDto>> partial = null)
                => await _connection.RequestResourceAsync<List<PRPrivateProjectDto>>("GET", $"api/http/projects/private-projects?$fields={(partial != null ? partial(new Partial<PRPrivateProjectDto>()) : Partial<PRPrivateProjectDto>.Default())}");
        
        }
    
        public ResponsibilityClient Responsibilities => new ResponsibilityClient(_connection);
        
        public partial class ResponsibilityClient
        {
            private readonly Connection _connection;
            
            public ResponsibilityClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<string> AddResponsibilityAsync(AddResponsibilityRequest data)
                => await _connection.RequestResourceAsync<AddResponsibilityRequest, string>("POST", $"api/http/projects/responsibilities", data);
        
            public async Task UpdateResponsibilityAsync(string responsibilityId, UpdateResponsibilityRequest data)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/responsibilities/{responsibilityId}", data);
        
            public async Task DeleteResponsibilityAsync(string responsibilityId)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/responsibilities/{responsibilityId}");
        
            public SubjectClient Subjects => new SubjectClient(_connection);
            
            public partial class SubjectClient
            {
                private readonly Connection _connection;
                
                public SubjectClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task DeleteResponsibilitySubjectAsync(string subjectId, string? projectId = null)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/responsibilities/subjects/{subjectId}?projectId={projectId?.ToString() ?? "null"}");
            
            }
        
        }
    
        public partial class ResponsibilityClient
        {
            public SchemeClient Scheme => new SchemeClient(_connection);
            
            public partial class SchemeClient
            {
                private readonly Connection _connection;
                
                public SchemeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<SubjectResponsibilitiesTableDto>> GetProjectResponsibilitySchemeAsync(string projectId, Func<Partial<SubjectResponsibilitiesTableDto>, Partial<SubjectResponsibilitiesTableDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<SubjectResponsibilitiesTableDto>>("GET", $"api/http/projects/{projectId}/responsibilities/scheme?$fields={(partial != null ? partial(new Partial<SubjectResponsibilitiesTableDto>()) : Partial<SubjectResponsibilitiesTableDto>.Default())}");
            
            }
        
            public partial class SubjectClient
            {
                public async Task<string> AddResponsibilitySubjectAsync(string projectId, AddResponsibilitySubjectRequest data)
                    => await _connection.RequestResourceAsync<AddResponsibilitySubjectRequest, string>("POST", $"api/http/projects/{projectId}/responsibilities/subjects", data);
            
                public async Task EditResponsibilitySubjectAsync(string projectId, string subjectId, EditResponsibilitySubjectRequest data)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{projectId}/responsibilities/subjects/{subjectId}", data);
            
            }
        
            public AssigneeClient Assignees => new AssigneeClient(_connection);
            
            public partial class AssigneeClient
            {
                private readonly Connection _connection;
                
                public AssigneeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AssignResponsibleAsync(string projectId, string responsibilityId, string profileId, AssignResponsibleRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/responsibilities/{responsibilityId}/assignees/{profileId}", data);
            
                public async Task RemoveResponsibleAsync(string projectId, string responsibilityId, string profileId, string? role = null)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/responsibilities/{responsibilityId}/assignees/{profileId}?role={role?.ToString() ?? "null"}");
            
            }
        
        }
    
        public SubjectClient Subjects => new SubjectClient(_connection);
        
        public partial class SubjectClient
        {
            private readonly Connection _connection;
            
            public SubjectClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task DeleteResponsibilitySubjectAsync(string subjectId, string? projectId = null)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/subjects/{subjectId}?projectId={projectId?.ToString() ?? "null"}");
        
        }
    
        public partial class SubjectClient
        {
            public async Task<string> AddResponsibilitySubjectAsync(string projectId, AddResponsibilitySubjectRequest data)
                => await _connection.RequestResourceAsync<AddResponsibilitySubjectRequest, string>("POST", $"api/http/projects/subjects", data);
        
            public async Task EditResponsibilitySubjectAsync(string projectId, string subjectId, EditResponsibilitySubjectRequest data)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/subjects/{subjectId}", data);
        
        }
    
        public TagClient Tags => new TagClient(_connection);
        
        public partial class TagClient
        {
            private readonly Connection _connection;
            
            public TagClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task TrackTagAccessAsync(TrackTagAccessRequest data)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/tags/track-access", data);
        
            public async Task<List<PRTagDto>> GetAllTagsAsync(Func<Partial<PRTagDto>, Partial<PRTagDto>> partial = null)
                => await _connection.RequestResourceAsync<List<PRTagDto>>("GET", $"api/http/projects/tags?$fields={(partial != null ? partial(new Partial<PRTagDto>()) : Partial<PRTagDto>.Default())}");
        
        }
    
        public AccesClient Access => new AccesClient(_connection);
        
        public partial class AccesClient
        {
            private readonly Connection _connection;
            
            public AccesClient(Connection connection)
            {
                _connection = connection;
            }
            
            public MemberProfileClient MemberProfiles => new MemberProfileClient(_connection);
            
            public partial class MemberProfileClient
            {
                private readonly Connection _connection;
                
                public MemberProfileClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Batch<TDMemberProfileDto>> GetAllMemberProfilesAsync(string projectKey, string query, bool includingAdmins, string? skip = null, int? top = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>> partial = null)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/projects/key:{projectKey}/access/member-profiles?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&includingAdmins={includingAdmins.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
                
                public IAsyncEnumerable<TDMemberProfileDto> GetAllMemberProfilesAsyncEnumerable(string projectKey, string query, bool includingAdmins, string? skip = null, int? top = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>> partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllMemberProfilesAsync(projectKey, query, includingAdmins, skip: batchSkip, top, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
            
            }
        
        }
    
        public partial class AccesClient
        {
            public AdminClient Admins => new AdminClient(_connection);
            
            public partial class AdminClient
            {
                private readonly Connection _connection;
                
                public AdminClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddAdministratorAsync(string projectId, AddAdministratorRequest data)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/access/admins/profiles", data);
                
                    public async Task RemoveAdministratorAsync(string projectId, string profileId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/admins/profiles/{profileId}");
                
                }
            
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddAdministratorsTeamAsync(string projectId, AddAdministratorsTeamRequest data)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/access/admins/teams", data);
                
                    public async Task RemoveAdministratorsTeamAsync(string projectId, string teamId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/admins/teams/{teamId}");
                
                }
            
            }
        
            public ProfileClient Profiles => new ProfileClient(_connection);
            
            public partial class ProfileClient
            {
                private readonly Connection _connection;
                
                public ProfileClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddAdministratorAsync(string projectId, AddAdministratorRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/access/profiles", data);
            
                public async Task RemoveAdministratorAsync(string projectId, string profileId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/profiles/{profileId}");
            
            }
        
            public TeamClient Teams => new TeamClient(_connection);
            
            public partial class TeamClient
            {
                private readonly Connection _connection;
                
                public TeamClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddAdministratorsTeamAsync(string projectId, AddAdministratorsTeamRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/access/teams", data);
            
                public async Task RemoveAdministratorsTeamAsync(string projectId, string teamId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/teams/{teamId}");
            
            }
        
            public MemberClient Members => new MemberClient(_connection);
            
            public partial class MemberClient
            {
                private readonly Connection _connection;
                
                public MemberClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddMemberAsync(string projectId, AddMemberRequest data)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/access/members/profiles", data);
                
                    public async Task RemoveMemberAsync(string projectId, string profileId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/members/profiles/{profileId}");
                
                }
            
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddTeamAsync(string projectId, AddTeamRequest data)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/access/members/teams", data);
                
                    public async Task RemoveTeamAsync(string projectId, string teamId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/members/teams/{teamId}");
                
                }
            
            }
        
            public partial class ProfileClient
            {
                public async Task AddMemberAsync(string projectId, AddMemberRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/access/profiles", data);
            
                public async Task RemoveMemberAsync(string projectId, string profileId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/profiles/{profileId}");
            
            }
        
            public partial class TeamClient
            {
                public async Task AddTeamAsync(string projectId, AddTeamRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/access/teams", data);
            
                public async Task RemoveTeamAsync(string projectId, string teamId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/teams/{teamId}");
            
            }
        
            public ViewerClient Viewers => new ViewerClient(_connection);
            
            public partial class ViewerClient
            {
                private readonly Connection _connection;
                
                public ViewerClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Batch<TDMemberProfileDto>> OrganizationProfilesWhoCanViewTheProjectAsync(string projectId, string term, bool meOnTop, string? skip = null, int? top = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>> partial = null)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/projects/{projectId}/access/viewers?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term.ToString()}&meOnTop={meOnTop.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
                
                public IAsyncEnumerable<TDMemberProfileDto> OrganizationProfilesWhoCanViewTheProjectAsyncEnumerable(string projectId, string term, bool meOnTop, string? skip = null, int? top = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>> partial = null)
                    => BatchEnumerator.AllItems(batchSkip => OrganizationProfilesWhoCanViewTheProjectAsync(projectId, term, meOnTop, skip: batchSkip, top, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
            
            }
        
        }
    
        public MemberProfileClient MemberProfiles => new MemberProfileClient(_connection);
        
        public partial class MemberProfileClient
        {
            private readonly Connection _connection;
            
            public MemberProfileClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<TDMemberProfileDto>> GetAllMemberProfilesAsync(string projectKey, string query, bool includingAdmins, string? skip = null, int? top = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>> partial = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/projects/member-profiles?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&includingAdmins={includingAdmins.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
            
            public IAsyncEnumerable<TDMemberProfileDto> GetAllMemberProfilesAsyncEnumerable(string projectKey, string query, bool includingAdmins, string? skip = null, int? top = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>> partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllMemberProfilesAsync(projectKey, query, includingAdmins, skip: batchSkip, top, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
        
        }
    
        public CodeReviewClient CodeReviews => new CodeReviewClient(_connection);
        
        public partial class CodeReviewClient
        {
            private readonly Connection _connection;
            
            public CodeReviewClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<CodeReviewWithCountDto>> GetAllCodeReviewsAsync(string projectKey, ReviewSorting sort, string? skip = null, int? top = null, CodeReviewStateFilter? state = null, string? text = null, string? authorProfileId = null, SpaceDate? from = null, SpaceDate? to = null, string? reviewer = null, ReviewType? type = null, Func<Partial<Batch<CodeReviewWithCountDto>>, Partial<Batch<CodeReviewWithCountDto>>> partial = null)
                => await _connection.RequestResourceAsync<Batch<CodeReviewWithCountDto>>("GET", $"api/http/projects/key:{projectKey}/code-reviews?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&state={state?.ToString() ?? "null"}&text={text?.ToString() ?? "null"}&authorProfileId={authorProfileId?.ToString() ?? "null"}&from={from?.ToString() ?? "null"}&to={to?.ToString() ?? "null"}&sort={sort.ToString()}&reviewer={reviewer?.ToString() ?? "null"}&type={type?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<CodeReviewWithCountDto>>()) : Partial<Batch<CodeReviewWithCountDto>>.Default())}");
            
            public IAsyncEnumerable<CodeReviewWithCountDto> GetAllCodeReviewsAsyncEnumerable(string projectKey, ReviewSorting sort, string? skip = null, int? top = null, CodeReviewStateFilter? state = null, string? text = null, string? authorProfileId = null, SpaceDate? from = null, SpaceDate? to = null, string? reviewer = null, ReviewType? type = null, Func<Partial<CodeReviewWithCountDto>, Partial<CodeReviewWithCountDto>> partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllCodeReviewsAsync(projectKey, sort, skip: batchSkip, top, state, text, authorProfileId, from, to, reviewer, type, partial: builder => Partial<Batch<CodeReviewWithCountDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<CodeReviewWithCountDto>.Default())), skip);
        
            public async Task<ReviewCountsDto> GetReviewCountsAsync(string projectKey, Func<Partial<ReviewCountsDto>, Partial<ReviewCountsDto>> partial = null)
                => await _connection.RequestResourceAsync<ReviewCountsDto>("GET", $"api/http/projects/key:{projectKey}/code-reviews/review-counts?$fields={(partial != null ? partial(new Partial<ReviewCountsDto>()) : Partial<ReviewCountsDto>.Default())}");
        
            public async Task<CodeReviewRecordDto> GetCodeReviewByReviewNumberAsync(string projectKey, int reviewNumber, Func<Partial<CodeReviewRecordDto>, Partial<CodeReviewRecordDto>> partial = null)
                => await _connection.RequestResourceAsync<CodeReviewRecordDto>("GET", $"api/http/projects/key:{projectKey}/code-reviews/review-number:{reviewNumber}?$fields={(partial != null ? partial(new Partial<CodeReviewRecordDto>()) : Partial<CodeReviewRecordDto>.Default())}");
        
            public ChangeClient Changes => new ChangeClient(_connection);
            
            public partial class ChangeClient
            {
                private readonly Connection _connection;
                
                public ChangeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<ChangeInReviewDto>> GetAllChangesAsync(string projectKey, string reviewId, List<string> revisions, Func<Partial<ChangeInReviewDto>, Partial<ChangeInReviewDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<ChangeInReviewDto>>("GET", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/changes?revisions={revisions.JoinToString("revisions", it => it.ToString())}&$fields={(partial != null ? partial(new Partial<ChangeInReviewDto>()) : Partial<ChangeInReviewDto>.Default())}");
            
            }
        
            public DetailClient Details => new DetailClient(_connection);
            
            public partial class DetailClient
            {
                private readonly Connection _connection;
                
                public DetailClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CodeReviewDetailedInfoDto> GetReviewDetailsAsync(string projectKey, string reviewId, Func<Partial<CodeReviewDetailedInfoDto>, Partial<CodeReviewDetailedInfoDto>> partial = null)
                    => await _connection.RequestResourceAsync<CodeReviewDetailedInfoDto>("GET", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/details?$fields={(partial != null ? partial(new Partial<CodeReviewDetailedInfoDto>()) : Partial<CodeReviewDetailedInfoDto>.Default())}");
            
            }
        
            public ParticipantClient Participants => new ParticipantClient(_connection);
            
            public partial class ParticipantClient
            {
                private readonly Connection _connection;
                
                public ParticipantClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewParticipantAsync(string projectKey, string reviewId, string user, EditReviewParticipantRequest data)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/participants/{user}", data);
            
            }
        
            public RevisionClient Revisions => new RevisionClient(_connection);
            
            public partial class RevisionClient
            {
                private readonly Connection _connection;
                
                public RevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddRevisionsToReviewAsync(string projectKey, string reviewId, AddRevisionsToReviewRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/revisions", data);
            
                public async Task RemoveRevisionsFromReviewAsync(string projectKey, string reviewId, List<string> revisions)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/revisions?revisions={revisions.JoinToString("revisions", it => it.ToString())}");
            
            }
        
            public StateClient State => new StateClient(_connection);
            
            public partial class StateClient
            {
                private readonly Connection _connection;
                
                public StateClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewStateAsync(string projectKey, string reviewId, EditReviewStateRequest data)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/state", data);
            
            }
        
            public SuggestedReviewerClient SuggestedReviewers => new SuggestedReviewerClient(_connection);
            
            public partial class SuggestedReviewerClient
            {
                private readonly Connection _connection;
                
                public SuggestedReviewerClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<TDMemberProfileDto>> GetAllSuggestedReviewersAsync(string projectKey, string reviewId, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<TDMemberProfileDto>>("GET", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/suggested-reviewers?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
            
            }
        
            public TitleClient Title => new TitleClient(_connection);
            
            public partial class TitleClient
            {
                private readonly Connection _connection;
                
                public TitleClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewTitleAsync(string projectKey, string reviewId, EditReviewTitleRequest data)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/title", data);
            
            }
        
            public UnreadRevisionClient UnreadRevisions => new UnreadRevisionClient(_connection);
            
            public partial class UnreadRevisionClient
            {
                private readonly Connection _connection;
                
                public UnreadRevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<RevisionInReviewDto>> GetAllUnreadRevisionsAsync(string projectKey, string reviewId, Func<Partial<RevisionInReviewDto>, Partial<RevisionInReviewDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<RevisionInReviewDto>>("GET", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/unread-revisions?$fields={(partial != null ? partial(new Partial<RevisionInReviewDto>()) : Partial<RevisionInReviewDto>.Default())}");
            
            }
        
        }
    
        public ChangeClient Changes => new ChangeClient(_connection);
        
        public partial class ChangeClient
        {
            private readonly Connection _connection;
            
            public ChangeClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<ChangeInReviewDto>> GetAllChangesAsync(string projectKey, string reviewId, List<string> revisions, Func<Partial<ChangeInReviewDto>, Partial<ChangeInReviewDto>> partial = null)
                => await _connection.RequestResourceAsync<List<ChangeInReviewDto>>("GET", $"api/http/projects/{reviewId}/changes?revisions={revisions.JoinToString("revisions", it => it.ToString())}&$fields={(partial != null ? partial(new Partial<ChangeInReviewDto>()) : Partial<ChangeInReviewDto>.Default())}");
        
        }
    
        public DetailClient Details => new DetailClient(_connection);
        
        public partial class DetailClient
        {
            private readonly Connection _connection;
            
            public DetailClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<CodeReviewDetailedInfoDto> GetReviewDetailsAsync(string projectKey, string reviewId, Func<Partial<CodeReviewDetailedInfoDto>, Partial<CodeReviewDetailedInfoDto>> partial = null)
                => await _connection.RequestResourceAsync<CodeReviewDetailedInfoDto>("GET", $"api/http/projects/{reviewId}/details?$fields={(partial != null ? partial(new Partial<CodeReviewDetailedInfoDto>()) : Partial<CodeReviewDetailedInfoDto>.Default())}");
        
        }
    
        public ParticipantClient Participants => new ParticipantClient(_connection);
        
        public partial class ParticipantClient
        {
            private readonly Connection _connection;
            
            public ParticipantClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task EditReviewParticipantAsync(string projectKey, string reviewId, string user, EditReviewParticipantRequest data)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{reviewId}/participants/{user}", data);
        
        }
    
        public RevisionClient Revisions => new RevisionClient(_connection);
        
        public partial class RevisionClient
        {
            private readonly Connection _connection;
            
            public RevisionClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task AddRevisionsToReviewAsync(string projectKey, string reviewId, AddRevisionsToReviewRequest data)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/{reviewId}/revisions", data);
        
            public async Task RemoveRevisionsFromReviewAsync(string projectKey, string reviewId, List<string> revisions)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{reviewId}/revisions?revisions={revisions.JoinToString("revisions", it => it.ToString())}");
        
        }
    
        public StateClient State => new StateClient(_connection);
        
        public partial class StateClient
        {
            private readonly Connection _connection;
            
            public StateClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task EditReviewStateAsync(string projectKey, string reviewId, EditReviewStateRequest data)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{reviewId}/state", data);
        
        }
    
        public SuggestedReviewerClient SuggestedReviewers => new SuggestedReviewerClient(_connection);
        
        public partial class SuggestedReviewerClient
        {
            private readonly Connection _connection;
            
            public SuggestedReviewerClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<TDMemberProfileDto>> GetAllSuggestedReviewersAsync(string projectKey, string reviewId, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>> partial = null)
                => await _connection.RequestResourceAsync<List<TDMemberProfileDto>>("GET", $"api/http/projects/{reviewId}/suggested-reviewers?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
        
        }
    
        public TitleClient Title => new TitleClient(_connection);
        
        public partial class TitleClient
        {
            private readonly Connection _connection;
            
            public TitleClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task EditReviewTitleAsync(string projectKey, string reviewId, EditReviewTitleRequest data)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{reviewId}/title", data);
        
        }
    
        public UnreadRevisionClient UnreadRevisions => new UnreadRevisionClient(_connection);
        
        public partial class UnreadRevisionClient
        {
            private readonly Connection _connection;
            
            public UnreadRevisionClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<RevisionInReviewDto>> GetAllUnreadRevisionsAsync(string projectKey, string reviewId, Func<Partial<RevisionInReviewDto>, Partial<RevisionInReviewDto>> partial = null)
                => await _connection.RequestResourceAsync<List<RevisionInReviewDto>>("GET", $"api/http/projects/{reviewId}/unread-revisions?$fields={(partial != null ? partial(new Partial<RevisionInReviewDto>()) : Partial<RevisionInReviewDto>.Default())}");
        
        }
    
        public RepositoryClient Repositories => new RepositoryClient(_connection);
        
        public partial class RepositoryClient
        {
            private readonly Connection _connection;
            
            public RepositoryClient(Connection connection)
            {
                _connection = connection;
            }
            
            public CommitSetReviewClient CommitSetReviews => new CommitSetReviewClient(_connection);
            
            public partial class CommitSetReviewClient
            {
                private readonly Connection _connection;
                
                public CommitSetReviewClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CommitSetReviewRecordDto> CreateCommitSetReviewAsync(string projectKey, string repository, CreateCommitSetReviewRequest data, Func<Partial<CommitSetReviewRecordDto>, Partial<CommitSetReviewRecordDto>> partial = null)
                    => await _connection.RequestResourceAsync<CreateCommitSetReviewRequest, CommitSetReviewRecordDto>("POST", $"api/http/projects/key:{projectKey}/repositories/{repository}/commit-set-reviews?$fields={(partial != null ? partial(new Partial<CommitSetReviewRecordDto>()) : Partial<CommitSetReviewRecordDto>.Default())}", data);
            
            }
        
            public MergeRequestClient MergeRequests => new MergeRequestClient(_connection);
            
            public partial class MergeRequestClient
            {
                private readonly Connection _connection;
                
                public MergeRequestClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<MergeRequestRecordDto> CreateMergeRequestAsync(string projectKey, string repository, CreateMergeRequestRequest data, Func<Partial<MergeRequestRecordDto>, Partial<MergeRequestRecordDto>> partial = null)
                    => await _connection.RequestResourceAsync<CreateMergeRequestRequest, MergeRequestRecordDto>("POST", $"api/http/projects/key:{projectKey}/repositories/{repository}/merge-requests?$fields={(partial != null ? partial(new Partial<MergeRequestRecordDto>()) : Partial<MergeRequestRecordDto>.Default())}", data);
            
            }
        
            public RevisionClient Revisions => new RevisionClient(_connection);
            
            public partial class RevisionClient
            {
                private readonly Connection _connection;
                
                public RevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public CodeDiscussionClient CodeDiscussions => new CodeDiscussionClient(_connection);
                
                public partial class CodeDiscussionClient
                {
                    private readonly Connection _connection;
                    
                    public CodeDiscussionClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<CodeDiscussionRecordDto> CreateCodeDiscussionAsync(string projectKey, string repository, string revision, CreateCodeDiscussionRequest data, Func<Partial<CodeDiscussionRecordDto>, Partial<CodeDiscussionRecordDto>> partial = null)
                        => await _connection.RequestResourceAsync<CreateCodeDiscussionRequest, CodeDiscussionRecordDto>("POST", $"api/http/projects/key:{projectKey}/repositories/{repository}/revisions/{revision}/code-discussions?$fields={(partial != null ? partial(new Partial<CodeDiscussionRecordDto>()) : Partial<CodeDiscussionRecordDto>.Default())}", data);
                
                    public async Task<List<PropagatedCodeDiscussionDto>> GetDiscussionInFileAsync(string projectKey, string repository, string revision, string file, Func<Partial<PropagatedCodeDiscussionDto>, Partial<PropagatedCodeDiscussionDto>> partial = null)
                        => await _connection.RequestResourceAsync<List<PropagatedCodeDiscussionDto>>("GET", $"api/http/projects/key:{projectKey}/repositories/{repository}/revisions/{revision}/code-discussions/discussions-in-file?file={file.ToString()}&$fields={(partial != null ? partial(new Partial<PropagatedCodeDiscussionDto>()) : Partial<PropagatedCodeDiscussionDto>.Default())}");
                
                }
            
                public CommitStatusClient CommitStatuses => new CommitStatusClient(_connection);
                
                public partial class CommitStatusClient
                {
                    private readonly Connection _connection;
                    
                    public CommitStatusClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task PushCommitStatusAsync(string projectKey, string repository, string revision, PushCommitStatusRequest data)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/key:{projectKey}/repositories/{repository}/revisions/{revision}/commit-statuses", data);
                
                    public async Task<List<CommitStatusDTODto>> GetCommitStatusesForCommitAsync(string projectKey, string repository, string revision, Func<Partial<CommitStatusDTODto>, Partial<CommitStatusDTODto>> partial = null)
                        => await _connection.RequestResourceAsync<List<CommitStatusDTODto>>("GET", $"api/http/projects/key:{projectKey}/repositories/{repository}/revisions/{revision}/commit-statuses?$fields={(partial != null ? partial(new Partial<CommitStatusDTODto>()) : Partial<CommitStatusDTODto>.Default())}");
                
                }
            
            }
        
            public CodeDiscussionClient CodeDiscussions => new CodeDiscussionClient(_connection);
            
            public partial class CodeDiscussionClient
            {
                private readonly Connection _connection;
                
                public CodeDiscussionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CodeDiscussionRecordDto> CreateCodeDiscussionAsync(string projectKey, string repository, string revision, CreateCodeDiscussionRequest data, Func<Partial<CodeDiscussionRecordDto>, Partial<CodeDiscussionRecordDto>> partial = null)
                    => await _connection.RequestResourceAsync<CreateCodeDiscussionRequest, CodeDiscussionRecordDto>("POST", $"api/http/projects/key:{projectKey}/repositories/{revision}/code-discussions?$fields={(partial != null ? partial(new Partial<CodeDiscussionRecordDto>()) : Partial<CodeDiscussionRecordDto>.Default())}", data);
            
                public async Task<List<PropagatedCodeDiscussionDto>> GetDiscussionInFileAsync(string projectKey, string repository, string revision, string file, Func<Partial<PropagatedCodeDiscussionDto>, Partial<PropagatedCodeDiscussionDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<PropagatedCodeDiscussionDto>>("GET", $"api/http/projects/key:{projectKey}/repositories/{revision}/code-discussions/discussions-in-file?file={file.ToString()}&$fields={(partial != null ? partial(new Partial<PropagatedCodeDiscussionDto>()) : Partial<PropagatedCodeDiscussionDto>.Default())}");
            
            }
        
            public CommitStatusClient CommitStatuses => new CommitStatusClient(_connection);
            
            public partial class CommitStatusClient
            {
                private readonly Connection _connection;
                
                public CommitStatusClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task PushCommitStatusAsync(string projectKey, string repository, string revision, PushCommitStatusRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/key:{projectKey}/repositories/{revision}/commit-statuses", data);
            
                public async Task<List<CommitStatusDTODto>> GetCommitStatusesForCommitAsync(string projectKey, string repository, string revision, Func<Partial<CommitStatusDTODto>, Partial<CommitStatusDTODto>> partial = null)
                    => await _connection.RequestResourceAsync<List<CommitStatusDTODto>>("GET", $"api/http/projects/key:{projectKey}/repositories/{revision}/commit-statuses?$fields={(partial != null ? partial(new Partial<CommitStatusDTODto>()) : Partial<CommitStatusDTODto>.Default())}");
            
            }
        
        }
    
        public CommitSetReviewClient CommitSetReviews => new CommitSetReviewClient(_connection);
        
        public partial class CommitSetReviewClient
        {
            private readonly Connection _connection;
            
            public CommitSetReviewClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<CommitSetReviewRecordDto> CreateCommitSetReviewAsync(string projectKey, string repository, CreateCommitSetReviewRequest data, Func<Partial<CommitSetReviewRecordDto>, Partial<CommitSetReviewRecordDto>> partial = null)
                => await _connection.RequestResourceAsync<CreateCommitSetReviewRequest, CommitSetReviewRecordDto>("POST", $"api/http/projects/{repository}/commit-set-reviews?$fields={(partial != null ? partial(new Partial<CommitSetReviewRecordDto>()) : Partial<CommitSetReviewRecordDto>.Default())}", data);
        
        }
    
        public MergeRequestClient MergeRequests => new MergeRequestClient(_connection);
        
        public partial class MergeRequestClient
        {
            private readonly Connection _connection;
            
            public MergeRequestClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<MergeRequestRecordDto> CreateMergeRequestAsync(string projectKey, string repository, CreateMergeRequestRequest data, Func<Partial<MergeRequestRecordDto>, Partial<MergeRequestRecordDto>> partial = null)
                => await _connection.RequestResourceAsync<CreateMergeRequestRequest, MergeRequestRecordDto>("POST", $"api/http/projects/{repository}/merge-requests?$fields={(partial != null ? partial(new Partial<MergeRequestRecordDto>()) : Partial<MergeRequestRecordDto>.Default())}", data);
        
        }
    
        public partial class RevisionClient
        {
            public CodeDiscussionClient CodeDiscussions => new CodeDiscussionClient(_connection);
            
            public partial class CodeDiscussionClient
            {
                private readonly Connection _connection;
                
                public CodeDiscussionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CodeDiscussionRecordDto> CreateCodeDiscussionAsync(string projectKey, string repository, string revision, CreateCodeDiscussionRequest data, Func<Partial<CodeDiscussionRecordDto>, Partial<CodeDiscussionRecordDto>> partial = null)
                    => await _connection.RequestResourceAsync<CreateCodeDiscussionRequest, CodeDiscussionRecordDto>("POST", $"api/http/projects/{repository}/revisions/{revision}/code-discussions?$fields={(partial != null ? partial(new Partial<CodeDiscussionRecordDto>()) : Partial<CodeDiscussionRecordDto>.Default())}", data);
            
                public async Task<List<PropagatedCodeDiscussionDto>> GetDiscussionInFileAsync(string projectKey, string repository, string revision, string file, Func<Partial<PropagatedCodeDiscussionDto>, Partial<PropagatedCodeDiscussionDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<PropagatedCodeDiscussionDto>>("GET", $"api/http/projects/{repository}/revisions/{revision}/code-discussions/discussions-in-file?file={file.ToString()}&$fields={(partial != null ? partial(new Partial<PropagatedCodeDiscussionDto>()) : Partial<PropagatedCodeDiscussionDto>.Default())}");
            
            }
        
            public CommitStatusClient CommitStatuses => new CommitStatusClient(_connection);
            
            public partial class CommitStatusClient
            {
                private readonly Connection _connection;
                
                public CommitStatusClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task PushCommitStatusAsync(string projectKey, string repository, string revision, PushCommitStatusRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{repository}/revisions/{revision}/commit-statuses", data);
            
                public async Task<List<CommitStatusDTODto>> GetCommitStatusesForCommitAsync(string projectKey, string repository, string revision, Func<Partial<CommitStatusDTODto>, Partial<CommitStatusDTODto>> partial = null)
                    => await _connection.RequestResourceAsync<List<CommitStatusDTODto>>("GET", $"api/http/projects/{repository}/revisions/{revision}/commit-statuses?$fields={(partial != null ? partial(new Partial<CommitStatusDTODto>()) : Partial<CommitStatusDTODto>.Default())}");
            
            }
        
        }
    
        public AdminClient Admins => new AdminClient(_connection);
        
        public partial class AdminClient
        {
            private readonly Connection _connection;
            
            public AdminClient(Connection connection)
            {
                _connection = connection;
            }
            
            public ProfileClient Profiles => new ProfileClient(_connection);
            
            public partial class ProfileClient
            {
                private readonly Connection _connection;
                
                public ProfileClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddAdministratorAsync(string projectId, AddAdministratorRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/admins/profiles", data);
            
                public async Task RemoveAdministratorAsync(string projectId, string profileId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/admins/profiles/{profileId}");
            
            }
        
            public TeamClient Teams => new TeamClient(_connection);
            
            public partial class TeamClient
            {
                private readonly Connection _connection;
                
                public TeamClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddAdministratorsTeamAsync(string projectId, AddAdministratorsTeamRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/admins/teams", data);
            
                public async Task RemoveAdministratorsTeamAsync(string projectId, string teamId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/admins/teams/{teamId}");
            
            }
        
        }
    
        public MemberClient Members => new MemberClient(_connection);
        
        public partial class MemberClient
        {
            private readonly Connection _connection;
            
            public MemberClient(Connection connection)
            {
                _connection = connection;
            }
            
            public ProfileClient Profiles => new ProfileClient(_connection);
            
            public partial class ProfileClient
            {
                private readonly Connection _connection;
                
                public ProfileClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddMemberAsync(string projectId, AddMemberRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/members/profiles", data);
            
                public async Task RemoveMemberAsync(string projectId, string profileId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/members/profiles/{profileId}");
            
            }
        
            public TeamClient Teams => new TeamClient(_connection);
            
            public partial class TeamClient
            {
                private readonly Connection _connection;
                
                public TeamClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddTeamAsync(string projectId, AddTeamRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/members/teams", data);
            
                public async Task RemoveTeamAsync(string projectId, string teamId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/members/teams/{teamId}");
            
            }
        
        }
    
        public ViewerClient Viewers => new ViewerClient(_connection);
        
        public partial class ViewerClient
        {
            private readonly Connection _connection;
            
            public ViewerClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<TDMemberProfileDto>> OrganizationProfilesWhoCanViewTheProjectAsync(string projectId, string term, bool meOnTop, string? skip = null, int? top = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>> partial = null)
                => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/projects/viewers?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term.ToString()}&meOnTop={meOnTop.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
            
            public IAsyncEnumerable<TDMemberProfileDto> OrganizationProfilesWhoCanViewTheProjectAsyncEnumerable(string projectId, string term, bool meOnTop, string? skip = null, int? top = null, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>> partial = null)
                => BatchEnumerator.AllItems(batchSkip => OrganizationProfilesWhoCanViewTheProjectAsync(projectId, term, meOnTop, skip: batchSkip, top, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
        
        }
    
        public PlanningClient Planning => new PlanningClient(_connection);
        
        public partial class PlanningClient
        {
            private readonly Connection _connection;
            
            public PlanningClient(Connection connection)
            {
                _connection = connection;
            }
            
            public ChecklistClient Checklists => new ChecklistClient(_connection);
            
            public partial class ChecklistClient
            {
                private readonly Connection _connection;
                
                public ChecklistClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<ChecklistDto> CreateChecklistAsync(string projectId, CreateChecklistRequest data, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                    => await _connection.RequestResourceAsync<CreateChecklistRequest, ChecklistDto>("POST", $"api/http/projects/{projectId}/planning/checklists?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}", data);
            
                public async Task<ChecklistDto> ImportChecklistAsync(string projectId, ImportChecklistRequest data, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                    => await _connection.RequestResourceAsync<ImportChecklistRequest, ChecklistDto>("POST", $"api/http/projects/{projectId}/planning/checklists/import?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}", data);
            
                public async Task ImportChecklistLinesAsync(string projectId, string checklistId, ImportChecklistLinesRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/checklists/{checklistId}/import", data);
            
                public async Task<Batch<ChecklistDto>> GetAllChecklistsAsync(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<Batch<ChecklistDto>>, Partial<Batch<ChecklistDto>>> partial = null)
                    => await _connection.RequestResourceAsync<Batch<ChecklistDto>>("GET", $"api/http/projects/{projectId}/planning/checklists?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<ChecklistDto>>()) : Partial<Batch<ChecklistDto>>.Default())}");
                
                public IAsyncEnumerable<ChecklistDto> GetAllChecklistsAsyncEnumerable(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllChecklistsAsync(projectId, skip: batchSkip, top, query, partial: builder => Partial<Batch<ChecklistDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChecklistDto>.Default())), skip);
            
                public async Task UpdateChecklistAsync(string projectId, string checklistId, UpdateChecklistRequest data)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{projectId}/planning/checklists/{checklistId}", data);
            
                public async Task DeleteChecklistAsync(string projectId, string checklistId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/checklists/{checklistId}");
            
                public StarredClient Starred => new StarredClient(_connection);
                
                public partial class StarredClient
                {
                    private readonly Connection _connection;
                    
                    public StarredClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<ChecklistDto>> GetAllStarredChecklistsAsync(string projectId, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                        => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/projects/{projectId}/planning/checklists/starred?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}");
                
                }
            
                public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
                
                public partial class FullChecklistTreeClient
                {
                    private readonly Connection _connection;
                    
                    public FullChecklistTreeClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<PlanItemChildrenDto>> GetFullChecklistTreeAsync(string projectId, string checklistId, Func<Partial<PlanItemChildrenDto>, Partial<PlanItemChildrenDto>> partial = null)
                        => await _connection.RequestResourceAsync<List<PlanItemChildrenDto>>("GET", $"api/http/projects/{projectId}/planning/checklists/{checklistId}/full-checklist-tree?$fields={(partial != null ? partial(new Partial<PlanItemChildrenDto>()) : Partial<PlanItemChildrenDto>.Default())}");
                
                }
            
            }
        
            public StarredClient Starred => new StarredClient(_connection);
            
            public partial class StarredClient
            {
                private readonly Connection _connection;
                
                public StarredClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<ChecklistDto>> GetAllStarredChecklistsAsync(string projectId, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/projects/{projectId}/planning/starred?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}");
            
            }
        
            public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
            
            public partial class FullChecklistTreeClient
            {
                private readonly Connection _connection;
                
                public FullChecklistTreeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<PlanItemChildrenDto>> GetFullChecklistTreeAsync(string projectId, string checklistId, Func<Partial<PlanItemChildrenDto>, Partial<PlanItemChildrenDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<PlanItemChildrenDto>>("GET", $"api/http/projects/{projectId}/planning/{checklistId}/full-checklist-tree?$fields={(partial != null ? partial(new Partial<PlanItemChildrenDto>()) : Partial<PlanItemChildrenDto>.Default())}");
            
            }
        
            public IssueClient Issues => new IssueClient(_connection);
            
            public partial class IssueClient
            {
                private readonly Connection _connection;
                
                public IssueClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<IssueDto> CreateIssueAsync(string projectId, CreateIssueRequest data, Func<Partial<IssueDto>, Partial<IssueDto>> partial = null)
                    => await _connection.RequestResourceAsync<CreateIssueRequest, IssueDto>("POST", $"api/http/projects/{projectId}/planning/issues?$fields={(partial != null ? partial(new Partial<IssueDto>()) : Partial<IssueDto>.Default())}", data);
            
                public async Task ToggleIssueResolvedAsync(string projectId, string issueId, ToggleIssueResolvedRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/toggle-resolved", data);
            
                public async Task<Batch<IssueDto>> GetAllIssuesAsync(string projectId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = null, string? assigneeId = null, string? createdByProfileId = null, string? tagId = null, string? query = null, Func<Partial<Batch<IssueDto>>, Partial<Batch<IssueDto>>> partial = null)
                    => await _connection.RequestResourceAsync<Batch<IssueDto>>("GET", $"api/http/projects/{projectId}/planning/issues?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&assigneeId={assigneeId?.ToString() ?? "null"}&createdByProfileId={createdByProfileId?.ToString() ?? "null"}&statuses={statuses.JoinToString("statuses", it => it.ToString())}&tagId={tagId?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&sorting={sorting.ToString()}&descending={descending.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<IssueDto>>()) : Partial<Batch<IssueDto>>.Default())}");
                
                public IAsyncEnumerable<IssueDto> GetAllIssuesAsyncEnumerable(string projectId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = null, string? assigneeId = null, string? createdByProfileId = null, string? tagId = null, string? query = null, Func<Partial<IssueDto>, Partial<IssueDto>> partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllIssuesAsync(projectId, statuses, sorting, descending, skip: batchSkip, top, assigneeId, createdByProfileId, tagId, query, partial: builder => Partial<Batch<IssueDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<IssueDto>.Default())), skip);
            
                public async Task<IssueDto> GetIssueByNumberAsync(string projectId, int number, Func<Partial<IssueDto>, Partial<IssueDto>> partial = null)
                    => await _connection.RequestResourceAsync<IssueDto>("GET", $"api/http/projects/{projectId}/planning/issues/number:{number}?$fields={(partial != null ? partial(new Partial<IssueDto>()) : Partial<IssueDto>.Default())}");
            
                public async Task UpdateIssueAsync(string projectId, string issueId, UpdateIssueRequest data)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{projectId}/planning/issues/{issueId}", data);
            
                public async Task DeleteIssueAsync(string projectId, string issueId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/issues/{issueId}");
            
                public StatusClient Statuses => new StatusClient(_connection);
                
                public partial class StatusClient
                {
                    private readonly Connection _connection;
                    
                    public StatusClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<IssueStatusDto>> GetAllIssueStatusesAsync(string projectId, Func<Partial<IssueStatusDto>, Partial<IssueStatusDto>> partial = null)
                        => await _connection.RequestResourceAsync<List<IssueStatusDto>>("GET", $"api/http/projects/{projectId}/planning/issues/statuses?$fields={(partial != null ? partial(new Partial<IssueStatusDto>()) : Partial<IssueStatusDto>.Default())}");
                
                    public async Task UpdateStatusAsync(string projectId, UpdateStatusRequest data)
                        => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{projectId}/planning/issues/statuses", data);
                
                    public DistributionClient Distribution => new DistributionClient(_connection);
                    
                    public partial class DistributionClient
                    {
                        private readonly Connection _connection;
                        
                        public DistributionClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task<List<IssueStatusWithUsagesDto>> GetIssueStatusDistributionAsync(string projectId, Func<Partial<IssueStatusWithUsagesDto>, Partial<IssueStatusWithUsagesDto>> partial = null)
                            => await _connection.RequestResourceAsync<List<IssueStatusWithUsagesDto>>("GET", $"api/http/projects/{projectId}/planning/issues/statuses/distribution?$fields={(partial != null ? partial(new Partial<IssueStatusWithUsagesDto>()) : Partial<IssueStatusWithUsagesDto>.Default())}");
                    
                    }
                
                }
            
                public DistributionClient Distribution => new DistributionClient(_connection);
                
                public partial class DistributionClient
                {
                    private readonly Connection _connection;
                    
                    public DistributionClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<IssueStatusWithUsagesDto>> GetIssueStatusDistributionAsync(string projectId, Func<Partial<IssueStatusWithUsagesDto>, Partial<IssueStatusWithUsagesDto>> partial = null)
                        => await _connection.RequestResourceAsync<List<IssueStatusWithUsagesDto>>("GET", $"api/http/projects/{projectId}/planning/issues/distribution?$fields={(partial != null ? partial(new Partial<IssueStatusWithUsagesDto>()) : Partial<IssueStatusWithUsagesDto>.Default())}");
                
                }
            
                public AttachmentClient Attachments => new AttachmentClient(_connection);
                
                public partial class AttachmentClient
                {
                    private readonly Connection _connection;
                    
                    public AttachmentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddAttachmentsAsync(string projectId, string issueId, AddAttachmentsRequest data)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/attachments", data);
                
                    public async Task RemoveAttachmentsAsync(string projectId, string issueId, List<string> identities)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/issues/{issueId}/attachments?identities={identities.JoinToString("identities", it => it.ToString())}");
                
                }
            
                public ChecklistClient Checklists => new ChecklistClient(_connection);
                
                public partial class ChecklistClient
                {
                    private readonly Connection _connection;
                    
                    public ChecklistClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddIssueChecklistAsync(string projectId, string issueId, string checklistId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/checklists/{checklistId}");
                
                    public async Task RemoveIssueChecklistAsync(string projectId, string issueId, string checklistId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/issues/{issueId}/checklists/{checklistId}");
                
                }
            
                public CommentClient Comments => new CommentClient(_connection);
                
                public partial class CommentClient
                {
                    private readonly Connection _connection;
                    
                    public CommentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<string>> ImportIssueCommentHistoryAsync(string projectId, string issueId, ImportIssueCommentHistoryRequest data)
                        => await _connection.RequestResourceAsync<ImportIssueCommentHistoryRequest, List<string>>("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/comments/import", data);
                
                }
            
                public TagClient Tags => new TagClient(_connection);
                
                public partial class TagClient
                {
                    private readonly Connection _connection;
                    
                    public TagClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddIssueTagAsync(string projectId, string issueId, string tagId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/tags/{tagId}");
                
                    public async Task RemoveIssueTagAsync(string projectId, string issueId, string tagId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/issues/{issueId}/tags/{tagId}");
                
                }
            
            }
        
            public StatusClient Statuses => new StatusClient(_connection);
            
            public partial class StatusClient
            {
                private readonly Connection _connection;
                
                public StatusClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<IssueStatusDto>> GetAllIssueStatusesAsync(string projectId, Func<Partial<IssueStatusDto>, Partial<IssueStatusDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<IssueStatusDto>>("GET", $"api/http/projects/{projectId}/planning/statuses?$fields={(partial != null ? partial(new Partial<IssueStatusDto>()) : Partial<IssueStatusDto>.Default())}");
            
                public async Task UpdateStatusAsync(string projectId, UpdateStatusRequest data)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{projectId}/planning/statuses", data);
            
                public DistributionClient Distribution => new DistributionClient(_connection);
                
                public partial class DistributionClient
                {
                    private readonly Connection _connection;
                    
                    public DistributionClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<IssueStatusWithUsagesDto>> GetIssueStatusDistributionAsync(string projectId, Func<Partial<IssueStatusWithUsagesDto>, Partial<IssueStatusWithUsagesDto>> partial = null)
                        => await _connection.RequestResourceAsync<List<IssueStatusWithUsagesDto>>("GET", $"api/http/projects/{projectId}/planning/statuses/distribution?$fields={(partial != null ? partial(new Partial<IssueStatusWithUsagesDto>()) : Partial<IssueStatusWithUsagesDto>.Default())}");
                
                }
            
            }
        
            public AttachmentClient Attachments => new AttachmentClient(_connection);
            
            public partial class AttachmentClient
            {
                private readonly Connection _connection;
                
                public AttachmentClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddAttachmentsAsync(string projectId, string issueId, AddAttachmentsRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/{issueId}/attachments", data);
            
                public async Task RemoveAttachmentsAsync(string projectId, string issueId, List<string> identities)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/{issueId}/attachments?identities={identities.JoinToString("identities", it => it.ToString())}");
            
            }
        
            public partial class ChecklistClient
            {
                public async Task AddIssueChecklistAsync(string projectId, string issueId, string checklistId)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/{issueId}/checklists/{checklistId}");
            
                public async Task RemoveIssueChecklistAsync(string projectId, string issueId, string checklistId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/{issueId}/checklists/{checklistId}");
            
            }
        
            public CommentClient Comments => new CommentClient(_connection);
            
            public partial class CommentClient
            {
                private readonly Connection _connection;
                
                public CommentClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<string>> ImportIssueCommentHistoryAsync(string projectId, string issueId, ImportIssueCommentHistoryRequest data)
                    => await _connection.RequestResourceAsync<ImportIssueCommentHistoryRequest, List<string>>("POST", $"api/http/projects/{projectId}/planning/{issueId}/comments/import", data);
            
            }
        
            public TagClient Tags => new TagClient(_connection);
            
            public partial class TagClient
            {
                private readonly Connection _connection;
                
                public TagClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddIssueTagAsync(string projectId, string issueId, string tagId)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/{issueId}/tags/{tagId}");
            
                public async Task RemoveIssueTagAsync(string projectId, string issueId, string tagId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/{issueId}/tags/{tagId}");
            
            }
        
            public partial class TagClient
            {
                public async Task<PlanningTagDto> CreateHierarchicalTagAsync(string projectId, CreateHierarchicalTagRequest data, Func<Partial<PlanningTagDto>, Partial<PlanningTagDto>> partial = null)
                    => await _connection.RequestResourceAsync<CreateHierarchicalTagRequest, PlanningTagDto>("POST", $"api/http/projects/{projectId}/planning/tags?$fields={(partial != null ? partial(new Partial<PlanningTagDto>()) : Partial<PlanningTagDto>.Default())}", data);
            
                public async Task<Batch<PlanningTagDto>> GetAllHierarchicalTagsAsync(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<Batch<PlanningTagDto>>, Partial<Batch<PlanningTagDto>>> partial = null)
                    => await _connection.RequestResourceAsync<Batch<PlanningTagDto>>("GET", $"api/http/projects/{projectId}/planning/tags?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PlanningTagDto>>()) : Partial<Batch<PlanningTagDto>>.Default())}");
                
                public IAsyncEnumerable<PlanningTagDto> GetAllHierarchicalTagsAsyncEnumerable(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<PlanningTagDto>, Partial<PlanningTagDto>> partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllHierarchicalTagsAsync(projectId, skip: batchSkip, top, query, partial: builder => Partial<Batch<PlanningTagDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PlanningTagDto>.Default())), skip);
            
            }
        
        }
    
        public ChecklistClient Checklists => new ChecklistClient(_connection);
        
        public partial class ChecklistClient
        {
            private readonly Connection _connection;
            
            public ChecklistClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<ChecklistDto> CreateChecklistAsync(string projectId, CreateChecklistRequest data, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                => await _connection.RequestResourceAsync<CreateChecklistRequest, ChecklistDto>("POST", $"api/http/projects/checklists?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}", data);
        
            public async Task<ChecklistDto> ImportChecklistAsync(string projectId, ImportChecklistRequest data, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                => await _connection.RequestResourceAsync<ImportChecklistRequest, ChecklistDto>("POST", $"api/http/projects/checklists/import?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}", data);
        
            public async Task ImportChecklistLinesAsync(string projectId, string checklistId, ImportChecklistLinesRequest data)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/checklists/{checklistId}/import", data);
        
            public async Task<Batch<ChecklistDto>> GetAllChecklistsAsync(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<Batch<ChecklistDto>>, Partial<Batch<ChecklistDto>>> partial = null)
                => await _connection.RequestResourceAsync<Batch<ChecklistDto>>("GET", $"api/http/projects/checklists?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<ChecklistDto>>()) : Partial<Batch<ChecklistDto>>.Default())}");
            
            public IAsyncEnumerable<ChecklistDto> GetAllChecklistsAsyncEnumerable(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllChecklistsAsync(projectId, skip: batchSkip, top, query, partial: builder => Partial<Batch<ChecklistDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChecklistDto>.Default())), skip);
        
            public async Task UpdateChecklistAsync(string projectId, string checklistId, UpdateChecklistRequest data)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/checklists/{checklistId}", data);
        
            public async Task DeleteChecklistAsync(string projectId, string checklistId)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/checklists/{checklistId}");
        
            public StarredClient Starred => new StarredClient(_connection);
            
            public partial class StarredClient
            {
                private readonly Connection _connection;
                
                public StarredClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<ChecklistDto>> GetAllStarredChecklistsAsync(string projectId, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/projects/checklists/starred?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}");
            
            }
        
            public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
            
            public partial class FullChecklistTreeClient
            {
                private readonly Connection _connection;
                
                public FullChecklistTreeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<PlanItemChildrenDto>> GetFullChecklistTreeAsync(string projectId, string checklistId, Func<Partial<PlanItemChildrenDto>, Partial<PlanItemChildrenDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<PlanItemChildrenDto>>("GET", $"api/http/projects/checklists/{checklistId}/full-checklist-tree?$fields={(partial != null ? partial(new Partial<PlanItemChildrenDto>()) : Partial<PlanItemChildrenDto>.Default())}");
            
            }
        
        }
    
        public IssueClient Issues => new IssueClient(_connection);
        
        public partial class IssueClient
        {
            private readonly Connection _connection;
            
            public IssueClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<IssueDto> CreateIssueAsync(string projectId, CreateIssueRequest data, Func<Partial<IssueDto>, Partial<IssueDto>> partial = null)
                => await _connection.RequestResourceAsync<CreateIssueRequest, IssueDto>("POST", $"api/http/projects/issues?$fields={(partial != null ? partial(new Partial<IssueDto>()) : Partial<IssueDto>.Default())}", data);
        
            public async Task ToggleIssueResolvedAsync(string projectId, string issueId, ToggleIssueResolvedRequest data)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/issues/{issueId}/toggle-resolved", data);
        
            public async Task<Batch<IssueDto>> GetAllIssuesAsync(string projectId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = null, string? assigneeId = null, string? createdByProfileId = null, string? tagId = null, string? query = null, Func<Partial<Batch<IssueDto>>, Partial<Batch<IssueDto>>> partial = null)
                => await _connection.RequestResourceAsync<Batch<IssueDto>>("GET", $"api/http/projects/issues?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&assigneeId={assigneeId?.ToString() ?? "null"}&createdByProfileId={createdByProfileId?.ToString() ?? "null"}&statuses={statuses.JoinToString("statuses", it => it.ToString())}&tagId={tagId?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&sorting={sorting.ToString()}&descending={descending.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<IssueDto>>()) : Partial<Batch<IssueDto>>.Default())}");
            
            public IAsyncEnumerable<IssueDto> GetAllIssuesAsyncEnumerable(string projectId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = null, string? assigneeId = null, string? createdByProfileId = null, string? tagId = null, string? query = null, Func<Partial<IssueDto>, Partial<IssueDto>> partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllIssuesAsync(projectId, statuses, sorting, descending, skip: batchSkip, top, assigneeId, createdByProfileId, tagId, query, partial: builder => Partial<Batch<IssueDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<IssueDto>.Default())), skip);
        
            public async Task<IssueDto> GetIssueByNumberAsync(string projectId, int number, Func<Partial<IssueDto>, Partial<IssueDto>> partial = null)
                => await _connection.RequestResourceAsync<IssueDto>("GET", $"api/http/projects/issues/number:{number}?$fields={(partial != null ? partial(new Partial<IssueDto>()) : Partial<IssueDto>.Default())}");
        
            public async Task UpdateIssueAsync(string projectId, string issueId, UpdateIssueRequest data)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/issues/{issueId}", data);
        
            public async Task DeleteIssueAsync(string projectId, string issueId)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/issues/{issueId}");
        
            public StatusClient Statuses => new StatusClient(_connection);
            
            public partial class StatusClient
            {
                private readonly Connection _connection;
                
                public StatusClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<IssueStatusDto>> GetAllIssueStatusesAsync(string projectId, Func<Partial<IssueStatusDto>, Partial<IssueStatusDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<IssueStatusDto>>("GET", $"api/http/projects/issues/statuses?$fields={(partial != null ? partial(new Partial<IssueStatusDto>()) : Partial<IssueStatusDto>.Default())}");
            
                public async Task UpdateStatusAsync(string projectId, UpdateStatusRequest data)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/issues/statuses", data);
            
                public DistributionClient Distribution => new DistributionClient(_connection);
                
                public partial class DistributionClient
                {
                    private readonly Connection _connection;
                    
                    public DistributionClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<IssueStatusWithUsagesDto>> GetIssueStatusDistributionAsync(string projectId, Func<Partial<IssueStatusWithUsagesDto>, Partial<IssueStatusWithUsagesDto>> partial = null)
                        => await _connection.RequestResourceAsync<List<IssueStatusWithUsagesDto>>("GET", $"api/http/projects/issues/statuses/distribution?$fields={(partial != null ? partial(new Partial<IssueStatusWithUsagesDto>()) : Partial<IssueStatusWithUsagesDto>.Default())}");
                
                }
            
            }
        
            public DistributionClient Distribution => new DistributionClient(_connection);
            
            public partial class DistributionClient
            {
                private readonly Connection _connection;
                
                public DistributionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<IssueStatusWithUsagesDto>> GetIssueStatusDistributionAsync(string projectId, Func<Partial<IssueStatusWithUsagesDto>, Partial<IssueStatusWithUsagesDto>> partial = null)
                    => await _connection.RequestResourceAsync<List<IssueStatusWithUsagesDto>>("GET", $"api/http/projects/issues/distribution?$fields={(partial != null ? partial(new Partial<IssueStatusWithUsagesDto>()) : Partial<IssueStatusWithUsagesDto>.Default())}");
            
            }
        
            public AttachmentClient Attachments => new AttachmentClient(_connection);
            
            public partial class AttachmentClient
            {
                private readonly Connection _connection;
                
                public AttachmentClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddAttachmentsAsync(string projectId, string issueId, AddAttachmentsRequest data)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/issues/{issueId}/attachments", data);
            
                public async Task RemoveAttachmentsAsync(string projectId, string issueId, List<string> identities)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/issues/{issueId}/attachments?identities={identities.JoinToString("identities", it => it.ToString())}");
            
            }
        
            public ChecklistClient Checklists => new ChecklistClient(_connection);
            
            public partial class ChecklistClient
            {
                private readonly Connection _connection;
                
                public ChecklistClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddIssueChecklistAsync(string projectId, string issueId, string checklistId)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/issues/{issueId}/checklists/{checklistId}");
            
                public async Task RemoveIssueChecklistAsync(string projectId, string issueId, string checklistId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/issues/{issueId}/checklists/{checklistId}");
            
            }
        
            public CommentClient Comments => new CommentClient(_connection);
            
            public partial class CommentClient
            {
                private readonly Connection _connection;
                
                public CommentClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<string>> ImportIssueCommentHistoryAsync(string projectId, string issueId, ImportIssueCommentHistoryRequest data)
                    => await _connection.RequestResourceAsync<ImportIssueCommentHistoryRequest, List<string>>("POST", $"api/http/projects/issues/{issueId}/comments/import", data);
            
            }
        
            public TagClient Tags => new TagClient(_connection);
            
            public partial class TagClient
            {
                private readonly Connection _connection;
                
                public TagClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddIssueTagAsync(string projectId, string issueId, string tagId)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/issues/{issueId}/tags/{tagId}");
            
                public async Task RemoveIssueTagAsync(string projectId, string issueId, string tagId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/issues/{issueId}/tags/{tagId}");
            
            }
        
        }
    
        public partial class TagClient
        {
            public async Task<PlanningTagDto> CreateHierarchicalTagAsync(string projectId, CreateHierarchicalTagRequest data, Func<Partial<PlanningTagDto>, Partial<PlanningTagDto>> partial = null)
                => await _connection.RequestResourceAsync<CreateHierarchicalTagRequest, PlanningTagDto>("POST", $"api/http/projects/tags?$fields={(partial != null ? partial(new Partial<PlanningTagDto>()) : Partial<PlanningTagDto>.Default())}", data);
        
            public async Task<Batch<PlanningTagDto>> GetAllHierarchicalTagsAsync(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<Batch<PlanningTagDto>>, Partial<Batch<PlanningTagDto>>> partial = null)
                => await _connection.RequestResourceAsync<Batch<PlanningTagDto>>("GET", $"api/http/projects/tags?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PlanningTagDto>>()) : Partial<Batch<PlanningTagDto>>.Default())}");
            
            public IAsyncEnumerable<PlanningTagDto> GetAllHierarchicalTagsAsyncEnumerable(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<PlanningTagDto>, Partial<PlanningTagDto>> partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllHierarchicalTagsAsync(projectId, skip: batchSkip, top, query, partial: builder => Partial<Batch<PlanningTagDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PlanningTagDto>.Default())), skip);
        
        }
    
        public SchemeClient Scheme => new SchemeClient(_connection);
        
        public partial class SchemeClient
        {
            private readonly Connection _connection;
            
            public SchemeClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<SubjectResponsibilitiesTableDto>> GetProjectResponsibilitySchemeAsync(string projectId, Func<Partial<SubjectResponsibilitiesTableDto>, Partial<SubjectResponsibilitiesTableDto>> partial = null)
                => await _connection.RequestResourceAsync<List<SubjectResponsibilitiesTableDto>>("GET", $"api/http/projects/scheme?$fields={(partial != null ? partial(new Partial<SubjectResponsibilitiesTableDto>()) : Partial<SubjectResponsibilitiesTableDto>.Default())}");
        
        }
    
        public AssigneeClient Assignees => new AssigneeClient(_connection);
        
        public partial class AssigneeClient
        {
            private readonly Connection _connection;
            
            public AssigneeClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task AssignResponsibleAsync(string projectId, string responsibilityId, string profileId, AssignResponsibleRequest data)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/{responsibilityId}/assignees/{profileId}", data);
        
            public async Task RemoveResponsibleAsync(string projectId, string responsibilityId, string profileId, string? role = null)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{responsibilityId}/assignees/{profileId}?role={role?.ToString() ?? "null"}");
        
        }
    
    }
    
}
