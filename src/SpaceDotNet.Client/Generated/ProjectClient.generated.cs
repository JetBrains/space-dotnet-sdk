// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public partial class ProjectClient
    {
        private readonly Connection _connection;
        
        public ProjectClient(Connection connection)
        {
            _connection = connection;
        }
        
        /// <summary>
        /// Create a new project.
        /// </summary>
        public async Task<PRProjectDto> CreateProjectAsync(ProjectKeyDto key, string name, bool @private = false, List<string>? tags = null, string? description = null, Func<Partial<PRProjectDto>, Partial<PRProjectDto>>? partial = null)
            => await _connection.RequestResourceAsync<ProjectsPostRequest, PRProjectDto>("POST", $"api/http/projects?$fields={(partial != null ? partial(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default())}", 
                new ProjectsPostRequest { 
                    Key = key,
                    Name = name,
                    Description = description,
                    Private = @private,
                    Tags = (tags ?? new List<string>()),
                }
        );
    
        /// <summary>
        /// Get/search all projects. Parameters are applied as 'AND' filters.
        /// </summary>
        public async Task<Batch<PRProjectDto>> GetAllProjectsAsync(string? skip = null, int? top = 100, string? term = null, string? tag = null, bool? starred = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>>? partial = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&tag={tag?.ToString() ?? "null"}&starred={starred?.ToString()?.ToLowerInvariant() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default())}");
        
        /// <summary>
        /// Get/search all projects. Parameters are applied as 'AND' filters.
        /// </summary>
        public IAsyncEnumerable<PRProjectDto> GetAllProjectsAsyncEnumerable(string? skip = null, int? top = 100, string? term = null, string? tag = null, bool? starred = null, Func<Partial<PRProjectDto>, Partial<PRProjectDto>>? partial = null)
            => BatchEnumerator.AllItems(batchSkip => GetAllProjectsAsync(top: top, term: term, tag: tag, starred: starred, skip: batchSkip, partial: builder => Partial<Batch<PRProjectDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProjectDto>.Default())), skip);
    
        /// <summary>
        /// Get all projects for a member.
        /// </summary>
        public async Task<Batch<PRProjectDto>> GetAllProjectsByMemberAsync(ProfileIdentifier member, string? skip = null, int? top = 100, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>>? partial = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/member:{member}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default())}");
        
        /// <summary>
        /// Get all projects for a member.
        /// </summary>
        public IAsyncEnumerable<PRProjectDto> GetAllProjectsByMemberAsyncEnumerable(ProfileIdentifier member, string? skip = null, int? top = 100, Func<Partial<PRProjectDto>, Partial<PRProjectDto>>? partial = null)
            => BatchEnumerator.AllItems(batchSkip => GetAllProjectsByMemberAsync(member: member, top: top, skip: batchSkip, partial: builder => Partial<Batch<PRProjectDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProjectDto>.Default())), skip);
    
        public async Task<Batch<PRProjectDto>> GetAllProjectsWithRightAsync(string rightCode, string? skip = null, int? top = 100, string? term = null, string? path = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>>? partial = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/right-code:{rightCode}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&path={path?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default())}");
        
        public IAsyncEnumerable<PRProjectDto> GetAllProjectsWithRightAsyncEnumerable(string rightCode, string? skip = null, int? top = 100, string? term = null, string? path = null, Func<Partial<PRProjectDto>, Partial<PRProjectDto>>? partial = null)
            => BatchEnumerator.AllItems(batchSkip => GetAllProjectsWithRightAsync(rightCode: rightCode, top: top, term: term, path: path, skip: batchSkip, partial: builder => Partial<Batch<PRProjectDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProjectDto>.Default())), skip);
    
        /// <summary>
        /// Get all projects for a team.
        /// </summary>
        public async Task<Batch<PRProjectDto>> GetAllProjectsByTeamAsync(string team, string? skip = null, int? top = 100, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>>? partial = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/team:{team}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default())}");
        
        /// <summary>
        /// Get all projects for a team.
        /// </summary>
        public IAsyncEnumerable<PRProjectDto> GetAllProjectsByTeamAsyncEnumerable(string team, string? skip = null, int? top = 100, Func<Partial<PRProjectDto>, Partial<PRProjectDto>>? partial = null)
            => BatchEnumerator.AllItems(batchSkip => GetAllProjectsByTeamAsync(team: team, top: top, skip: batchSkip, partial: builder => Partial<Batch<PRProjectDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PRProjectDto>.Default())), skip);
    
        /// <summary>
        /// Get project by id or project key.
        /// </summary>
        public async Task<PRProjectDto> GetProjectAsync(ProjectIdentifier project, Func<Partial<PRProjectDto>, Partial<PRProjectDto>>? partial = null)
            => await _connection.RequestResourceAsync<PRProjectDto>("GET", $"api/http/projects/{project}?$fields={(partial != null ? partial(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default())}");
    
        /// <summary>
        /// Update an existing project. Optional parameters will be ignored when not specified, and updated otherwise.
        /// </summary>
        public async Task<PRProjectDto> UpdateProjectAsync(ProjectIdentifier project, ProjectKeyDto? key = null, string? name = null, string? description = null, bool? @private = null, List<string>? tags = null, string? icon = null, Func<Partial<PRProjectDto>, Partial<PRProjectDto>>? partial = null)
            => await _connection.RequestResourceAsync<ProjectsForProjectPatchRequest, PRProjectDto>("PATCH", $"api/http/projects/{project}?$fields={(partial != null ? partial(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default())}", 
                new ProjectsForProjectPatchRequest { 
                    Key = key,
                    Name = name,
                    Description = description,
                    Private = @private,
                    Tags = tags,
                    Icon = icon,
                }
        );
    
        /// <summary>
        /// Archive a project.
        /// </summary>
        public async Task ArchiveProjectAsync(ProjectIdentifier project)
            => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}");
    
        public AutomationClient Automation => new AutomationClient(_connection);
        
        public partial class AutomationClient
        {
            private readonly Connection _connection;
            
            public AutomationClient(Connection connection)
            {
                _connection = connection;
            }
            
            public GraphExecutionClient GraphExecutions => new GraphExecutionClient(_connection);
            
            public partial class GraphExecutionClient
            {
                private readonly Connection _connection;
                
                public GraphExecutionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Stop execution by ExecutionId.
                /// </summary>
                public async Task StopAsync(string id)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/automation/graph-executions/{id}/stop");
            
                public async Task<JobExecutionDTODto> GetGraphExecutionAsync(string id, Func<Partial<JobExecutionDTODto>, Partial<JobExecutionDTODto>>? partial = null)
                    => await _connection.RequestResourceAsync<JobExecutionDTODto>("GET", $"api/http/projects/automation/graph-executions/{id}?$fields={(partial != null ? partial(new Partial<JobExecutionDTODto>()) : Partial<JobExecutionDTODto>.Default())}");
            
            }
        
            public StepExecutionClient StepExecutions => new StepExecutionClient(_connection);
            
            public partial class StepExecutionClient
            {
                private readonly Connection _connection;
                
                public StepExecutionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ParameterClient Parameters => new ParameterClient(_connection);
                
                public partial class ParameterClient
                {
                    private readonly Connection _connection;
                    
                    public ParameterClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<string> GetParameterAsync(string stepExecId, string key)
                        => await _connection.RequestResourceAsync<string>("GET", $"api/http/projects/automation/step-executions/{stepExecId}/parameters/{key}");
                
                    public async Task UpdateParameterAsync(string stepExecId, string key, string value)
                        => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/automation/step-executions/{stepExecId}/parameters/{key}", 
                            new ProjectsAutomationStepExecutionsForStepExecIdParametersForKeyPatchRequest { 
                                Value = value,
                            }
                    );
                
                    public async Task DeleteParameterAsync(string stepExecId, string key)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/automation/step-executions/{stepExecId}/parameters/{key}");
                
                }
            
            }
        
        }
    
        public partial class AutomationClient
        {
            public partial class GraphExecutionClient
            {
                /// <summary>
                /// Search executions. Parameters are applied as 'AND' filters.
                /// </summary>
                public async Task<Batch<JobExecutionDTODto>> GetAllGraphExecutionsAsync(ProjectIdentifier project, string jobId, string? branchFilter = null, ExecutionStatus? statusFilter = null, JobTriggerType? jobTriggerFilter = null, string? skip = null, int? top = 100, Func<Partial<Batch<JobExecutionDTODto>>, Partial<Batch<JobExecutionDTODto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<JobExecutionDTODto>>("GET", $"api/http/projects/{project}/automation/graph-executions?jobId={jobId.ToString()}&branchFilter={branchFilter?.ToString() ?? "null"}&statusFilter={statusFilter?.ToString() ?? "null"}&jobTriggerFilter={jobTriggerFilter?.ToString() ?? "null"}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<JobExecutionDTODto>>()) : Partial<Batch<JobExecutionDTODto>>.Default())}");
                
                /// <summary>
                /// Search executions. Parameters are applied as 'AND' filters.
                /// </summary>
                public IAsyncEnumerable<JobExecutionDTODto> GetAllGraphExecutionsAsyncEnumerable(ProjectIdentifier project, string jobId, string? branchFilter = null, ExecutionStatus? statusFilter = null, JobTriggerType? jobTriggerFilter = null, string? skip = null, int? top = 100, Func<Partial<JobExecutionDTODto>, Partial<JobExecutionDTODto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllGraphExecutionsAsync(project: project, jobId: jobId, branchFilter: branchFilter, statusFilter: statusFilter, jobTriggerFilter: jobTriggerFilter, top: top, skip: batchSkip, partial: builder => Partial<Batch<JobExecutionDTODto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<JobExecutionDTODto>.Default())), skip);
            
            }
        
            public JobClient Jobs => new JobClient(_connection);
            
            public partial class JobClient
            {
                private readonly Connection _connection;
                
                public JobClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Start Job. Returns Execution id, see projects/automation/graph-executions/{id}
                /// </summary>
                public async Task<LaunchResultDto> StartAsync(ProjectIdentifier project, string jobId, string branch = "master", Func<Partial<LaunchResultDto>, Partial<LaunchResultDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectAutomationJobsForJobIdStartPostRequest, LaunchResultDto>("POST", $"api/http/projects/{project}/automation/jobs/{jobId}/start?$fields={(partial != null ? partial(new Partial<LaunchResultDto>()) : Partial<LaunchResultDto>.Default())}", 
                        new ProjectsForProjectAutomationJobsForJobIdStartPostRequest { 
                            Branch = branch,
                        }
                );
            
                /// <summary>
                /// Search jobs. Parameters are applied as 'AND' filters.
                /// </summary>
                public async Task<Batch<JobDTODto>> GetAllJobsAsync(ProjectIdentifier project, string repoFilter, string branchFilter = "master", JobTriggerType? trigger = null, string? skip = null, int? top = 100, Func<Partial<Batch<JobDTODto>>, Partial<Batch<JobDTODto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<JobDTODto>>("GET", $"api/http/projects/{project}/automation/jobs?repoFilter={repoFilter.ToString()}&branchFilter={branchFilter.ToString()}&trigger={trigger?.ToString() ?? "null"}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<JobDTODto>>()) : Partial<Batch<JobDTODto>>.Default())}");
                
                /// <summary>
                /// Search jobs. Parameters are applied as 'AND' filters.
                /// </summary>
                public IAsyncEnumerable<JobDTODto> GetAllJobsAsyncEnumerable(ProjectIdentifier project, string repoFilter, string branchFilter = "master", JobTriggerType? trigger = null, string? skip = null, int? top = 100, Func<Partial<JobDTODto>, Partial<JobDTODto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllJobsAsync(project: project, repoFilter: repoFilter, branchFilter: branchFilter, trigger: trigger, top: top, skip: batchSkip, partial: builder => Partial<Batch<JobDTODto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<JobDTODto>.Default())), skip);
            
                public async Task<JobDTODto> GetJobAsync(ProjectIdentifier project, string jobId, Func<Partial<JobDTODto>, Partial<JobDTODto>>? partial = null)
                    => await _connection.RequestResourceAsync<JobDTODto>("GET", $"api/http/projects/{project}/automation/jobs/{jobId}?$fields={(partial != null ? partial(new Partial<JobDTODto>()) : Partial<JobDTODto>.Default())}");
            
            }
        
        }
    
        public ParamClient Params => new ParamClient(_connection);
        
        public partial class ParamClient
        {
            private readonly Connection _connection;
            
            public ParamClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a new project parameter in a parameter bundle
            /// </summary>
            public async Task<string> CreateParamAsync(string bundleId, string key, string value)
                => await _connection.RequestResourceAsync<ProjectsParamsPostRequest, string>("POST", $"api/http/projects/params", 
                    new ProjectsParamsPostRequest { 
                        BundleId = bundleId,
                        Key = key,
                        Value = value,
                    }
            );
        
            /// <summary>
            /// List project parameters in a parameter bundle
            /// </summary>
            public async Task<Batch<PlainParameterRecordDto>> GetAllParamsAsync(string bundleId, string? skip = null, int? top = 100, Func<Partial<Batch<PlainParameterRecordDto>>, Partial<Batch<PlainParameterRecordDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<PlainParameterRecordDto>>("GET", $"api/http/projects/params?bundleId={bundleId.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PlainParameterRecordDto>>()) : Partial<Batch<PlainParameterRecordDto>>.Default())}");
            
            /// <summary>
            /// List project parameters in a parameter bundle
            /// </summary>
            public IAsyncEnumerable<PlainParameterRecordDto> GetAllParamsAsyncEnumerable(string bundleId, string? skip = null, int? top = 100, Func<Partial<PlainParameterRecordDto>, Partial<PlainParameterRecordDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllParamsAsync(bundleId: bundleId, top: top, skip: batchSkip, partial: builder => Partial<Batch<PlainParameterRecordDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PlainParameterRecordDto>.Default())), skip);
        
            /// <summary>
            /// Update an existing project parameter.
            /// </summary>
            public async Task UpdateParamAsync(string id, string value)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/params/{id}", 
                    new ProjectsParamsForIdPatchRequest { 
                        Value = value,
                    }
            );
        
            /// <summary>
            /// Delete an existing project parameter.
            /// </summary>
            public async Task DeleteParamAsync(string id)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/params/{id}");
        
            public InDefaultBundleClient InDefaultBundle => new InDefaultBundleClient(_connection);
            
            public partial class InDefaultBundleClient
            {
                private readonly Connection _connection;
                
                public InDefaultBundleClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Create a new project parameter in the default parameter bundle
                /// </summary>
                public async Task<string> CreateInDefaultBundleAsync(string projectId, string key, string value)
                    => await _connection.RequestResourceAsync<ProjectsParamsInDefaultBundlePostRequest, string>("POST", $"api/http/projects/params/in-default-bundle", 
                        new ProjectsParamsInDefaultBundlePostRequest { 
                            ProjectId = projectId,
                            Key = key,
                            Value = value,
                        }
                );
            
            }
        
        }
    
        public PrivateProjectClient PrivateProjects => new PrivateProjectClient(_connection);
        
        public partial class PrivateProjectClient
        {
            private readonly Connection _connection;
            
            public PrivateProjectClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Request access to a project.
            /// </summary>
            public async Task RequestAccessToProjectAsync(ProjectIdentifier project)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/private-projects/{project}/request-access");
        
            /// <summary>
            /// List private projects in the current organisation.
            /// </summary>
            public async Task<List<PRPrivateProjectDto>> GetAllPrivateProjectsAsync(Func<Partial<PRPrivateProjectDto>, Partial<PRPrivateProjectDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<PRPrivateProjectDto>>("GET", $"api/http/projects/private-projects?$fields={(partial != null ? partial(new Partial<PRPrivateProjectDto>()) : Partial<PRPrivateProjectDto>.Default())}");
        
        }
    
        public ResponsibilityClient Responsibilities => new ResponsibilityClient(_connection);
        
        public partial class ResponsibilityClient
        {
            private readonly Connection _connection;
            
            public ResponsibilityClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Add a responsibility for a given subject id.
            /// </summary>
            public async Task<string> AddResponsibilityAsync(string subjectId, string summary, string? notes = null)
                => await _connection.RequestResourceAsync<ProjectsResponsibilitiesPostRequest, string>("POST", $"api/http/projects/responsibilities", 
                    new ProjectsResponsibilitiesPostRequest { 
                        SubjectId = subjectId,
                        Summary = summary,
                        Notes = notes,
                    }
            );
        
            /// <summary>
            /// Edit an existing responsibility.
            /// </summary>
            public async Task UpdateResponsibilityAsync(string responsibilityId, string summary, string? notes = null)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/responsibilities/{responsibilityId}", 
                    new ProjectsResponsibilitiesForResponsibilityIdPatchRequest { 
                        Summary = summary,
                        Notes = notes,
                    }
            );
        
            /// <summary>
            /// Delete an existing responsibility.
            /// </summary>
            public async Task DeleteResponsibilityAsync(string responsibilityId)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/responsibilities/{responsibilityId}");
        
            public SubjectClient Subjects => new SubjectClient(_connection);
            
            public partial class SubjectClient
            {
                private readonly Connection _connection;
                
                public SubjectClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Delete an existing responsibility subject for a given project id.
                /// </summary>
                public async Task DeleteResponsibilitySubjectAsync(string subjectId, ProjectIdentifier? project = null)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/responsibilities/subjects/{subjectId}?project={project?.ToString() ?? "null"}");
            
            }
        
        }
    
        public partial class ResponsibilityClient
        {
            public SchemeClient Scheme => new SchemeClient(_connection);
            
            public partial class SchemeClient
            {
                private readonly Connection _connection;
                
                public SchemeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get the responsibilities schema for a given project id.
                /// </summary>
                public async Task<List<SubjectResponsibilitiesTableDto>> GetProjectResponsibilitySchemeAsync(ProjectIdentifier project, Func<Partial<SubjectResponsibilitiesTableDto>, Partial<SubjectResponsibilitiesTableDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<SubjectResponsibilitiesTableDto>>("GET", $"api/http/projects/{project}/responsibilities/scheme?$fields={(partial != null ? partial(new Partial<SubjectResponsibilitiesTableDto>()) : Partial<SubjectResponsibilitiesTableDto>.Default())}");
            
            }
        
            public partial class SubjectClient
            {
                /// <summary>
                /// Add a responsibility subject for a given project id.
                /// </summary>
                public async Task<string> AddResponsibilitySubjectAsync(ProjectIdentifier project, string? name = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectResponsibilitiesSubjectsPostRequest, string>("POST", $"api/http/projects/{project}/responsibilities/subjects", 
                        new ProjectsForProjectResponsibilitiesSubjectsPostRequest { 
                            Name = name,
                        }
                );
            
                /// <summary>
                /// Update an existing responsibility subject for a given project id.
                /// </summary>
                public async Task EditResponsibilitySubjectAsync(ProjectIdentifier project, string subjectId, string? name = null)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/responsibilities/subjects/{subjectId}", 
                        new ProjectsForProjectResponsibilitiesSubjectsForSubjectIdPatchRequest { 
                            Name = name,
                        }
                );
            
            }
        
            public AssigneeClient Assignees => new AssigneeClient(_connection);
            
            public partial class AssigneeClient
            {
                private readonly Connection _connection;
                
                public AssigneeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Assign a responsible person for a given project id and responsibility id.
                /// </summary>
                public async Task AssignResponsibleAsync(ProjectIdentifier project, string responsibilityId, string profileId, string? role = null)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/responsibilities/{responsibilityId}/assignees/{profileId}", 
                        new ProjectsForProjectResponsibilitiesForResponsibilityIdAssigneesForProfileIdPostRequest { 
                            Role = role,
                        }
                );
            
                /// <summary>
                /// Remove a responsible person for a given project id and responsibility id.
                /// </summary>
                public async Task RemoveResponsibleAsync(ProjectIdentifier project, string responsibilityId, string profileId, string? role = null)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/responsibilities/{responsibilityId}/assignees/{profileId}?role={role?.ToString() ?? "null"}");
            
            }
        
        }
    
        public SecretClient Secrets => new SecretClient(_connection);
        
        public partial class SecretClient
        {
            private readonly Connection _connection;
            
            public SecretClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Create a new secret in a parameter bundle. Value is base64 encoded bytes of the secret value, possibly after client side encryption. If the secret value bytes are encrypted then the id of the Space public key must be provided
            /// </summary>
            public async Task<string> CreateSecretAsync(string bundleId, string key, string valueBase64, string? publicKeyId = null)
                => await _connection.RequestResourceAsync<ProjectsSecretsPostRequest, string>("POST", $"api/http/projects/secrets", 
                    new ProjectsSecretsPostRequest { 
                        BundleId = bundleId,
                        Key = key,
                        ValueBase64 = valueBase64,
                        PublicKeyId = publicKeyId,
                    }
            );
        
            /// <summary>
            /// List project secrets in a parameter bundle
            /// </summary>
            public async Task<Batch<SecretParameterRecordDto>> GetAllSecretsAsync(string bundleId, string? skip = null, int? top = 100, Func<Partial<Batch<SecretParameterRecordDto>>, Partial<Batch<SecretParameterRecordDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<SecretParameterRecordDto>>("GET", $"api/http/projects/secrets?bundleId={bundleId.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<SecretParameterRecordDto>>()) : Partial<Batch<SecretParameterRecordDto>>.Default())}");
            
            /// <summary>
            /// List project secrets in a parameter bundle
            /// </summary>
            public IAsyncEnumerable<SecretParameterRecordDto> GetAllSecretsAsyncEnumerable(string bundleId, string? skip = null, int? top = 100, Func<Partial<SecretParameterRecordDto>, Partial<SecretParameterRecordDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllSecretsAsync(bundleId: bundleId, top: top, skip: batchSkip, partial: builder => Partial<Batch<SecretParameterRecordDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<SecretParameterRecordDto>.Default())), skip);
        
            /// <summary>
            /// Update an existing project secret.
            /// </summary>
            public async Task UpdateSecretAsync(string id, string valueBase64, string? publicKeyId = null)
                => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/secrets/{id}", 
                    new ProjectsSecretsForIdPatchRequest { 
                        ValueBase64 = valueBase64,
                        PublicKeyId = publicKeyId,
                    }
            );
        
            /// <summary>
            /// Delete an existing project secret.
            /// </summary>
            public async Task DeleteSecretAsync(string id)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/secrets/{id}");
        
            public InDefaultBundleClient InDefaultBundle => new InDefaultBundleClient(_connection);
            
            public partial class InDefaultBundleClient
            {
                private readonly Connection _connection;
                
                public InDefaultBundleClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Create a new secret in the default parameter bundle. Value is base64 encoded bytes of the secret value, possibly after client side encryption. If the secret value bytes are encrypted then the id of the Space public key must be provided
                /// </summary>
                public async Task<string> CreateInDefaultBundleAsync(string projectId, string key, string valueBase64, string? publicKeyId = null)
                    => await _connection.RequestResourceAsync<ProjectsSecretsInDefaultBundlePostRequest, string>("POST", $"api/http/projects/secrets/in-default-bundle", 
                        new ProjectsSecretsInDefaultBundlePostRequest { 
                            ProjectId = projectId,
                            Key = key,
                            ValueBase64 = valueBase64,
                            PublicKeyId = publicKeyId,
                        }
                );
            
            }
        
        }
    
        public TagClient Tags => new TagClient(_connection);
        
        public partial class TagClient
        {
            private readonly Connection _connection;
            
            public TagClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <summary>
            /// Track a tag has been accessed.
            /// </summary>
            public async Task TrackTagAccessAsync(string tag)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/tags/track-access", 
                    new ProjectsTagsTrackAccessPostRequest { 
                        Tag = tag,
                    }
            );
        
            /// <summary>
            /// List all tags, mapped to the number of projects they are used in.
            /// </summary>
            public async Task<List<PRTagDto>> GetAllTagsAsync(Func<Partial<PRTagDto>, Partial<PRTagDto>>? partial = null)
                => await _connection.RequestResourceAsync<List<PRTagDto>>("GET", $"api/http/projects/tags?$fields={(partial != null ? partial(new Partial<PRTagDto>()) : Partial<PRTagDto>.Default())}");
        
        }
    
        public AccesClient Access => new AccesClient(_connection);
        
        public partial class AccesClient
        {
            private readonly Connection _connection;
            
            public AccesClient(Connection connection)
            {
                _connection = connection;
            }
            
            public AdminClient Admins => new AdminClient(_connection);
            
            public partial class AdminClient
            {
                private readonly Connection _connection;
                
                public AdminClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Add a member as administrator to a project.
                    /// </summary>
                    public async Task AddAdministratorAsync(ProjectIdentifier project, ProfileIdentifier profile)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/admins/profiles", 
                            new ProjectsForProjectAccessAdminsProfilesPostRequest { 
                                Profile = profile,
                            }
                    );
                
                    /// <summary>
                    /// Remove a member as administrator from a project.
                    /// </summary>
                    public async Task RemoveAdministratorAsync(ProjectIdentifier project, ProfileIdentifier profile)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/admins/profiles/{profile}");
                
                }
            
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Add a team as administrators to a project.
                    /// </summary>
                    public async Task AddAdministratorsTeamAsync(ProjectIdentifier project, string teamId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/admins/teams", 
                            new ProjectsForProjectAccessAdminsTeamsPostRequest { 
                                TeamId = teamId,
                            }
                    );
                
                    /// <summary>
                    /// Remove a team as administrators from a project.
                    /// </summary>
                    public async Task RemoveAdministratorsTeamAsync(ProjectIdentifier project, string teamId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/admins/teams/{teamId}");
                
                }
            
            }
        
            public MemberProfileClient MemberProfiles => new MemberProfileClient(_connection);
            
            public partial class MemberProfileClient
            {
                private readonly Connection _connection;
                
                public MemberProfileClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get project members for a given project key.
                /// </summary>
                public async Task<Batch<TDMemberProfileDto>> GetAllMemberProfilesAsync(ProjectIdentifier project, string query = "", bool includingAdmins = false, string? skip = null, int? top = 100, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/projects/{project}/access/member-profiles?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&includingAdmins={includingAdmins.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
                
                /// <summary>
                /// Get project members for a given project key.
                /// </summary>
                public IAsyncEnumerable<TDMemberProfileDto> GetAllMemberProfilesAsyncEnumerable(ProjectIdentifier project, string query = "", bool includingAdmins = false, string? skip = null, int? top = 100, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllMemberProfilesAsync(project: project, query: query, includingAdmins: includingAdmins, top: top, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
            
            }
        
            public MemberClient Members => new MemberClient(_connection);
            
            public partial class MemberClient
            {
                private readonly Connection _connection;
                
                public MemberClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Add a member to a project.
                    /// </summary>
                    public async Task AddMemberAsync(ProjectIdentifier project, ProfileIdentifier profile)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/members/profiles", 
                            new ProjectsForProjectAccessMembersProfilesPostRequest { 
                                Profile = profile,
                            }
                    );
                
                    /// <summary>
                    /// Remove a member from a project.
                    /// </summary>
                    public async Task RemoveMemberAsync(ProjectIdentifier project, ProfileIdentifier profile)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/members/profiles/{profile}");
                
                }
            
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Add a team to a project.
                    /// </summary>
                    public async Task AddTeamAsync(ProjectIdentifier project, string teamId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/access/members/teams", 
                            new ProjectsForProjectAccessMembersTeamsPostRequest { 
                                TeamId = teamId,
                            }
                    );
                
                    /// <summary>
                    /// Remove a team from a project.
                    /// </summary>
                    public async Task RemoveTeamAsync(ProjectIdentifier project, string teamId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/access/members/teams/{teamId}");
                
                }
            
            }
        
            public ViewerClient Viewers => new ViewerClient(_connection);
            
            public partial class ViewerClient
            {
                private readonly Connection _connection;
                
                public ViewerClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Get organization members who can view a project.
                /// </summary>
                public async Task<Batch<TDMemberProfileDto>> OrganizationProfilesWhoCanViewTheProjectAsync(ProjectIdentifier project, string term, bool meOnTop = false, string? skip = null, int? top = 100, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/projects/{project}/access/viewers?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term.ToString()}&meOnTop={meOnTop.ToString().ToLowerInvariant()}&$fields={(partial != null ? partial(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default())}");
                
                /// <summary>
                /// Get organization members who can view a project.
                /// </summary>
                public IAsyncEnumerable<TDMemberProfileDto> OrganizationProfilesWhoCanViewTheProjectAsyncEnumerable(ProjectIdentifier project, string term, bool meOnTop = false, string? skip = null, int? top = 100, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => OrganizationProfilesWhoCanViewTheProjectAsync(project: project, term: term, meOnTop: meOnTop, top: top, skip: batchSkip, partial: builder => Partial<Batch<TDMemberProfileDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<TDMemberProfileDto>.Default())), skip);
            
            }
        
        }
    
        public CodeReviewClient CodeReviews => new CodeReviewClient(_connection);
        
        public partial class CodeReviewClient
        {
            private readonly Connection _connection;
            
            public CodeReviewClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<CodeReviewWithCountDto>> GetAllCodeReviewsAsync(ProjectIdentifier project, ReviewSorting? sort = null, string? skip = null, int? top = 100, CodeReviewStateFilter? state = null, string? text = null, ProfileIdentifier? author = null, SpaceDate? from = null, SpaceDate? to = null, ProfileIdentifier? reviewer = null, ReviewType? type = null, Func<Partial<Batch<CodeReviewWithCountDto>>, Partial<Batch<CodeReviewWithCountDto>>>? partial = null)
                => await _connection.RequestResourceAsync<Batch<CodeReviewWithCountDto>>("GET", $"api/http/projects/{project}/code-reviews?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&state={(state ?? CodeReviewStateFilter.Opened)?.ToString() ?? "null"}&text={text?.ToString() ?? "null"}&author={author?.ToString() ?? "null"}&from={from?.ToString() ?? "null"}&to={to?.ToString() ?? "null"}&sort={(sort ?? ReviewSorting.CreatedAtAsc).ToString()}&reviewer={reviewer?.ToString() ?? "null"}&type={type?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<CodeReviewWithCountDto>>()) : Partial<Batch<CodeReviewWithCountDto>>.Default())}");
            
            public IAsyncEnumerable<CodeReviewWithCountDto> GetAllCodeReviewsAsyncEnumerable(ProjectIdentifier project, ReviewSorting? sort = null, string? skip = null, int? top = 100, CodeReviewStateFilter? state = null, string? text = null, ProfileIdentifier? author = null, SpaceDate? from = null, SpaceDate? to = null, ProfileIdentifier? reviewer = null, ReviewType? type = null, Func<Partial<CodeReviewWithCountDto>, Partial<CodeReviewWithCountDto>>? partial = null)
                => BatchEnumerator.AllItems(batchSkip => GetAllCodeReviewsAsync(project: project, sort: sort, top: top, state: state, text: text, author: author, from: from, to: to, reviewer: reviewer, type: type, skip: batchSkip, partial: builder => Partial<Batch<CodeReviewWithCountDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<CodeReviewWithCountDto>.Default())), skip);
        
            public async Task<ReviewCountsDto> GetReviewCountsAsync(ProjectIdentifier project, Func<Partial<ReviewCountsDto>, Partial<ReviewCountsDto>>? partial = null)
                => await _connection.RequestResourceAsync<ReviewCountsDto>("GET", $"api/http/projects/{project}/code-reviews/review-counts?$fields={(partial != null ? partial(new Partial<ReviewCountsDto>()) : Partial<ReviewCountsDto>.Default())}");
        
            public async Task<CodeReviewRecordDto> GetCodeReviewAsync(ProjectIdentifier project, ReviewIdentifier reviewId, Func<Partial<CodeReviewRecordDto>, Partial<CodeReviewRecordDto>>? partial = null)
                => await _connection.RequestResourceAsync<CodeReviewRecordDto>("GET", $"api/http/projects/{project}/code-reviews/{reviewId}?$fields={(partial != null ? partial(new Partial<CodeReviewRecordDto>()) : Partial<CodeReviewRecordDto>.Default())}");
        
            public DetailClient Details => new DetailClient(_connection);
            
            public partial class DetailClient
            {
                private readonly Connection _connection;
                
                public DetailClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CodeReviewDetailedInfoDto> GetReviewDetailsAsync(ProjectIdentifier project, ReviewIdentifier reviewId, Func<Partial<CodeReviewDetailedInfoDto>, Partial<CodeReviewDetailedInfoDto>>? partial = null)
                    => await _connection.RequestResourceAsync<CodeReviewDetailedInfoDto>("GET", $"api/http/projects/{project}/code-reviews/{reviewId}/details?$fields={(partial != null ? partial(new Partial<CodeReviewDetailedInfoDto>()) : Partial<CodeReviewDetailedInfoDto>.Default())}");
            
            }
        
            public ParticipantClient Participants => new ParticipantClient(_connection);
            
            public partial class ParticipantClient
            {
                private readonly Connection _connection;
                
                public ParticipantClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddReviewParticipantAsync(ProjectIdentifier project, ReviewIdentifier reviewId, ProfileIdentifier user, CodeReviewParticipantRole role)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/code-reviews/{reviewId}/participants/{user}", 
                        new ProjectsForProjectCodeReviewsForReviewIdParticipantsForUserPostRequest { 
                            Role = role,
                        }
                );
            
                public async Task RemoveReviewParticipantAsync(ProjectIdentifier project, ReviewIdentifier reviewId, ProfileIdentifier user, CodeReviewParticipantRole role)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/code-reviews/{reviewId}/participants/{user}?role={role.ToString()}");
            
            }
        
            public RevisionClient Revisions => new RevisionClient(_connection);
            
            public partial class RevisionClient
            {
                private readonly Connection _connection;
                
                public RevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddRevisionsToReviewAsync(ProjectIdentifier project, ReviewIdentifier reviewId, List<RevisionInReviewDto> revisions)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/code-reviews/{reviewId}/revisions", 
                        new ProjectsForProjectCodeReviewsForReviewIdRevisionsPostRequest { 
                            Revisions = revisions,
                        }
                );
            
                public async Task RemoveRevisionsFromReviewAsync(ProjectIdentifier project, ReviewIdentifier reviewId, List<string> revisions)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/code-reviews/{reviewId}/revisions?revisions={revisions.JoinToString("revisions", it => it.ToString())}");
            
            }
        
            public StateClient State => new StateClient(_connection);
            
            public partial class StateClient
            {
                private readonly Connection _connection;
                
                public StateClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewStateAsync(ProjectIdentifier project, ReviewIdentifier reviewId, CodeReviewState state)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/code-reviews/{reviewId}/state", 
                        new ProjectsForProjectCodeReviewsForReviewIdStatePatchRequest { 
                            State = state,
                        }
                );
            
            }
        
            public SuggestedReviewerClient SuggestedReviewers => new SuggestedReviewerClient(_connection);
            
            public partial class SuggestedReviewerClient
            {
                private readonly Connection _connection;
                
                public SuggestedReviewerClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<TDMemberProfileDto>> GetAllSuggestedReviewersAsync(ProjectIdentifier project, ReviewIdentifier reviewId, Func<Partial<TDMemberProfileDto>, Partial<TDMemberProfileDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<TDMemberProfileDto>>("GET", $"api/http/projects/{project}/code-reviews/{reviewId}/suggested-reviewers?$fields={(partial != null ? partial(new Partial<TDMemberProfileDto>()) : Partial<TDMemberProfileDto>.Default())}");
            
            }
        
            public TitleClient Title => new TitleClient(_connection);
            
            public partial class TitleClient
            {
                private readonly Connection _connection;
                
                public TitleClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewTitleAsync(ProjectIdentifier project, ReviewIdentifier reviewId, string title)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/code-reviews/{reviewId}/title", 
                        new ProjectsForProjectCodeReviewsForReviewIdTitlePatchRequest { 
                            Title = title,
                        }
                );
            
            }
        
            public UnreadRevisionClient UnreadRevisions => new UnreadRevisionClient(_connection);
            
            public partial class UnreadRevisionClient
            {
                private readonly Connection _connection;
                
                public UnreadRevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<RevisionInReviewDto>> GetAllUnreadRevisionsAsync(ProjectIdentifier project, ReviewIdentifier reviewId, Func<Partial<RevisionInReviewDto>, Partial<RevisionInReviewDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<RevisionInReviewDto>>("GET", $"api/http/projects/{project}/code-reviews/{reviewId}/unread-revisions?$fields={(partial != null ? partial(new Partial<RevisionInReviewDto>()) : Partial<RevisionInReviewDto>.Default())}");
            
            }
        
        }
    
        public PackageClient Packages => new PackageClient(_connection);
        
        public partial class PackageClient
        {
            private readonly Connection _connection;
            
            public PackageClient(Connection connection)
            {
                _connection = connection;
            }
            
            public RepositoryClient Repositories => new RepositoryClient(_connection);
            
            public partial class RepositoryClient
            {
                private readonly Connection _connection;
                
                public RepositoryClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <summary>
                /// Creates a new package repository for a given project id.
                /// </summary>
                public async Task<ProjectPackageRepositoryDto> CreateNewRepositoryAsync(ProjectIdentifier project, string type, string name, bool @public, ESPackageRepositorySettingsDto settings, string? description = null, Func<Partial<ProjectPackageRepositoryDto>, Partial<ProjectPackageRepositoryDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPackagesRepositoriesPostRequest, ProjectPackageRepositoryDto>("POST", $"api/http/projects/{project}/packages/repositories?$fields={(partial != null ? partial(new Partial<ProjectPackageRepositoryDto>()) : Partial<ProjectPackageRepositoryDto>.Default())}", 
                        new ProjectsForProjectPackagesRepositoriesPostRequest { 
                            Type = type,
                            Name = name,
                            Description = description,
                            Public = @public,
                            Settings = settings,
                        }
                );
            
                /// <summary>
                /// Gets a list of package repositories for a given project id.
                /// </summary>
                public async Task<List<ProjectPackageRepositoryDto>> GetRepositoriesAsync(ProjectIdentifier project, string? type = null, string? query = null, Func<Partial<ProjectPackageRepositoryDto>, Partial<ProjectPackageRepositoryDto>>? partial = null)
                    => await _connection.RequestResourceAsync<List<ProjectPackageRepositoryDto>>("GET", $"api/http/projects/{project}/packages/repositories?type={type?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<ProjectPackageRepositoryDto>()) : Partial<ProjectPackageRepositoryDto>.Default())}");
            
                /// <summary>
                /// Gets a package repository for a given project id by type and name.
                /// </summary>
                public async Task<ProjectPackageRepositoryDto> GetRepositoryByNameAsync(ProjectIdentifier project, string type, string name, Func<Partial<ProjectPackageRepositoryDto>, Partial<ProjectPackageRepositoryDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectPackageRepositoryDto>("GET", $"api/http/projects/{project}/packages/repositories/{type}/{name}?$fields={(partial != null ? partial(new Partial<ProjectPackageRepositoryDto>()) : Partial<ProjectPackageRepositoryDto>.Default())}");
            
                /// <summary>
                /// Updates package repository settings for a given project id.
                /// </summary>
                public async Task UpdatesRepositoryAsync(ProjectIdentifier project, string id, string? name = null, string? description = null, bool? @public = null, ESPackageRepositorySettingsDto? settings = null)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/packages/repositories", 
                        new ProjectsForProjectPackagesRepositoriesPatchRequest { 
                            Id = id,
                            Name = name,
                            Description = description,
                            Public = @public,
                            Settings = settings,
                        }
                );
            
                /// <summary>
                /// Deletes package repository for a given project id.
                /// </summary>
                public async Task DeletesRepositoryAsync(ProjectIdentifier project, string id)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/packages/repositories?id={id.ToString()}");
            
                public SearchClient Search => new SearchClient(_connection);
                
                public partial class SearchClient
                {
                    private readonly Connection _connection;
                    
                    public SearchClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Executes a package search for a given project id.
                    /// </summary>
                    public async Task<Batch<PackageVersionDataDto>> FindRepositoryPackagesAsync(ProjectIdentifier project, string type, string query, string? skip = null, int? top = 100, Func<Partial<Batch<PackageVersionDataDto>>, Partial<Batch<PackageVersionDataDto>>>? partial = null)
                        => await _connection.RequestResourceAsync<Batch<PackageVersionDataDto>>("GET", $"api/http/projects/{project}/packages/repositories/type:{type}/search?query={query.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PackageVersionDataDto>>()) : Partial<Batch<PackageVersionDataDto>>.Default())}");
                    
                    /// <summary>
                    /// Executes a package search for a given project id.
                    /// </summary>
                    public IAsyncEnumerable<PackageVersionDataDto> FindRepositoryPackagesAsyncEnumerable(ProjectIdentifier project, string type, string query, string? skip = null, int? top = 100, Func<Partial<PackageVersionDataDto>, Partial<PackageVersionDataDto>>? partial = null)
                        => BatchEnumerator.AllItems(batchSkip => FindRepositoryPackagesAsync(project: project, type: type, query: query, top: top, skip: batchSkip, partial: builder => Partial<Batch<PackageVersionDataDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PackageVersionDataDto>.Default())), skip);
                
                }
            
                public PackageClient Packages => new PackageClient(_connection);
                
                public partial class PackageClient
                {
                    private readonly Connection _connection;
                    
                    public PackageClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Gets a list of repository packages for a given project id.
                    /// </summary>
                    public async Task<Batch<PackageDataDto>> GetAllPackagesAsync(ProjectIdentifier project, string type, string repository, string query, string? skip = null, int? top = 100, Func<Partial<Batch<PackageDataDto>>, Partial<Batch<PackageDataDto>>>? partial = null)
                        => await _connection.RequestResourceAsync<Batch<PackageDataDto>>("GET", $"api/http/projects/{project}/packages/repositories/type:{type}/repository:{repository}/packages?query={query.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PackageDataDto>>()) : Partial<Batch<PackageDataDto>>.Default())}");
                    
                    /// <summary>
                    /// Gets a list of repository packages for a given project id.
                    /// </summary>
                    public IAsyncEnumerable<PackageDataDto> GetAllPackagesAsyncEnumerable(ProjectIdentifier project, string type, string repository, string query, string? skip = null, int? top = 100, Func<Partial<PackageDataDto>, Partial<PackageDataDto>>? partial = null)
                        => BatchEnumerator.AllItems(batchSkip => GetAllPackagesAsync(project: project, type: type, repository: repository, query: query, top: top, skip: batchSkip, partial: builder => Partial<Batch<PackageDataDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PackageDataDto>.Default())), skip);
                
                    public VersionClient Versions => new VersionClient(_connection);
                    
                    public partial class VersionClient
                    {
                        private readonly Connection _connection;
                        
                        public VersionClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        /// <summary>
                        /// Gets a list of repository package versions for a given project id.
                        /// </summary>
                        public async Task<Batch<PackageVersionDataDto>> GetAllPackageVersionsAsync(ProjectIdentifier project, string type, string repository, string name, string query, string? skip = null, int? top = 100, Func<Partial<Batch<PackageVersionDataDto>>, Partial<Batch<PackageVersionDataDto>>>? partial = null)
                            => await _connection.RequestResourceAsync<Batch<PackageVersionDataDto>>("GET", $"api/http/projects/{project}/packages/repositories/type:{type}/repository:{repository}/packages/name:{name}/versions?query={query.ToString()}&$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PackageVersionDataDto>>()) : Partial<Batch<PackageVersionDataDto>>.Default())}");
                        
                        /// <summary>
                        /// Gets a list of repository package versions for a given project id.
                        /// </summary>
                        public IAsyncEnumerable<PackageVersionDataDto> GetAllPackageVersionsAsyncEnumerable(ProjectIdentifier project, string type, string repository, string name, string query, string? skip = null, int? top = 100, Func<Partial<PackageVersionDataDto>, Partial<PackageVersionDataDto>>? partial = null)
                            => BatchEnumerator.AllItems(batchSkip => GetAllPackageVersionsAsync(project: project, type: type, repository: repository, name: name, query: query, top: top, skip: batchSkip, partial: builder => Partial<Batch<PackageVersionDataDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PackageVersionDataDto>.Default())), skip);
                    
                        /// <summary>
                        /// Gets a details for repository package version for a given project id.
                        /// </summary>
                        public async Task<PackageVersionDetailsDto> GetPackageVersionDetailsAsync(ProjectIdentifier project, string type, string repository, string name, string version, Func<Partial<PackageVersionDetailsDto>, Partial<PackageVersionDetailsDto>>? partial = null)
                            => await _connection.RequestResourceAsync<PackageVersionDetailsDto>("GET", $"api/http/projects/{project}/packages/repositories/type:{type}/repository:{repository}/packages/name:{name}/versions/version:{version}?$fields={(partial != null ? partial(new Partial<PackageVersionDetailsDto>()) : Partial<PackageVersionDetailsDto>.Default())}");
                    
                        /// <summary>
                        /// Removes a package version in repository for a given project id.
                        /// </summary>
                        public async Task DeletePackageVersionAsync(ProjectIdentifier project, string type, string repository, string name, string version)
                            => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/packages/repositories/type:{type}/repository:{repository}/packages/name:{name}/versions/version:{version}");
                    
                    }
                
                }
            
                public UrlClient Url => new UrlClient(_connection);
                
                public partial class UrlClient
                {
                    private readonly Connection _connection;
                    
                    public UrlClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    /// <summary>
                    /// Gets a package repository URL for a given project id.
                    /// </summary>
                    public async Task<string> GetRepositoryURLAsync(ProjectIdentifier project, string type, string name)
                        => await _connection.RequestResourceAsync<string>("GET", $"api/http/projects/{project}/packages/repositories/{type}/{name}/url");
                
                }
            
            }
        
        }
    
        public PlanningClient Planning => new PlanningClient(_connection);
        
        public partial class PlanningClient
        {
            private readonly Connection _connection;
            
            public PlanningClient(Connection connection)
            {
                _connection = connection;
            }
            
            public ChecklistClient Checklists => new ChecklistClient(_connection);
            
            public partial class ChecklistClient
            {
                private readonly Connection _connection;
                
                public ChecklistClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<ChecklistDto> CreateChecklistAsync(ProjectIdentifier project, string name, Func<Partial<ChecklistDto>, Partial<ChecklistDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningChecklistsPostRequest, ChecklistDto>("POST", $"api/http/projects/{project}/planning/checklists?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}", 
                        new ProjectsForProjectPlanningChecklistsPostRequest { 
                            Name = name,
                        }
                );
            
                public async Task<ChecklistDto> ImportChecklistAsync(ProjectIdentifier project, string name, string tabIndentedLines, Func<Partial<ChecklistDto>, Partial<ChecklistDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningChecklistsImportPostRequest, ChecklistDto>("POST", $"api/http/projects/{project}/planning/checklists/import?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}", 
                        new ProjectsForProjectPlanningChecklistsImportPostRequest { 
                            Name = name,
                            TabIndentedLines = tabIndentedLines,
                        }
                );
            
                public async Task ImportChecklistLinesAsync(ProjectIdentifier project, string checklistId, string targetParentId, string tabIndentedLines, string? afterItemId = null)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/checklists/{checklistId}/import", 
                        new ProjectsForProjectPlanningChecklistsForChecklistIdImportPostRequest { 
                            TargetParentId = targetParentId,
                            AfterItemId = afterItemId,
                            TabIndentedLines = tabIndentedLines,
                        }
                );
            
                public async Task<Batch<ChecklistDto>> GetAllChecklistsAsync(ProjectIdentifier project, string? skip = null, int? top = 100, string? query = null, Func<Partial<Batch<ChecklistDto>>, Partial<Batch<ChecklistDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<ChecklistDto>>("GET", $"api/http/projects/{project}/planning/checklists?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<ChecklistDto>>()) : Partial<Batch<ChecklistDto>>.Default())}");
                
                public IAsyncEnumerable<ChecklistDto> GetAllChecklistsAsyncEnumerable(ProjectIdentifier project, string? skip = null, int? top = 100, string? query = null, Func<Partial<ChecklistDto>, Partial<ChecklistDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllChecklistsAsync(project: project, top: top, query: query, skip: batchSkip, partial: builder => Partial<Batch<ChecklistDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ChecklistDto>.Default())), skip);
            
                public async Task UpdateChecklistAsync(ProjectIdentifier project, string checklistId, string name, string? description = null, string? owner = null, string? tag = null)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/planning/checklists/{checklistId}", 
                        new ProjectsForProjectPlanningChecklistsForChecklistIdPatchRequest { 
                            Name = name,
                            Description = description,
                            Owner = owner,
                            Tag = tag,
                        }
                );
            
                public async Task DeleteChecklistAsync(ProjectIdentifier project, string checklistId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/checklists/{checklistId}");
            
                public StarredClient Starred => new StarredClient(_connection);
                
                public partial class StarredClient
                {
                    private readonly Connection _connection;
                    
                    public StarredClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<ChecklistDto>> GetAllStarredChecklistsAsync(ProjectIdentifier project, Func<Partial<ChecklistDto>, Partial<ChecklistDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/projects/{project}/planning/checklists/starred?$fields={(partial != null ? partial(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default())}");
                
                }
            
                public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
                
                public partial class FullChecklistTreeClient
                {
                    private readonly Connection _connection;
                    
                    public FullChecklistTreeClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<PlanItemChildrenDto>> GetFullChecklistTreeAsync(ProjectIdentifier project, string checklistId, Func<Partial<PlanItemChildrenDto>, Partial<PlanItemChildrenDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<PlanItemChildrenDto>>("GET", $"api/http/projects/{project}/planning/checklists/{checklistId}/full-checklist-tree?$fields={(partial != null ? partial(new Partial<PlanItemChildrenDto>()) : Partial<PlanItemChildrenDto>.Default())}");
                
                }
            
            }
        
            public IssueClient Issues => new IssueClient(_connection);
            
            public partial class IssueClient
            {
                private readonly Connection _connection;
                
                public IssueClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<IssueDto> CreateIssueAsync(ProjectIdentifier project, string title, string status, List<string>? tags = null, List<string>? checklists = null, List<string>? sprints = null, string? description = null, ProfileIdentifier? assignee = null, SpaceDate? dueDate = null, List<AttachmentDto>? attachments = null, ImportedEntityInfoDto? importInfo = null, Func<Partial<IssueDto>, Partial<IssueDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningIssuesPostRequest, IssueDto>("POST", $"api/http/projects/{project}/planning/issues?$fields={(partial != null ? partial(new Partial<IssueDto>()) : Partial<IssueDto>.Default())}", 
                        new ProjectsForProjectPlanningIssuesPostRequest { 
                            Title = title,
                            Description = description,
                            Assignee = assignee,
                            Status = status,
                            DueDate = dueDate,
                            Tags = (tags ?? new List<string>()),
                            Checklists = (checklists ?? new List<string>()),
                            Sprints = (sprints ?? new List<string>()),
                            Attachments = (attachments ?? new List<AttachmentDto>()),
                            ImportInfo = importInfo,
                        }
                );
            
                public async Task ToggleIssueResolvedAsync(ProjectIdentifier project, string issueId, bool resolved)
                    => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/issues/{issueId}/toggle-resolved", 
                        new ProjectsForProjectPlanningIssuesForIssueIdToggleResolvedPostRequest { 
                            Resolved = resolved,
                        }
                );
            
                public async Task<Batch<IssueDto>> GetAllIssuesAsync(ProjectIdentifier project, List<ProfileIdentifier> assigneeId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = 100, ProfileIdentifier? createdByProfileId = null, string? tagId = null, string? query = null, List<string>? tags = null, Func<Partial<Batch<IssueDto>>, Partial<Batch<IssueDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<IssueDto>>("GET", $"api/http/projects/{project}/planning/issues?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&assigneeId={assigneeId.JoinToString("assigneeId", it => it?.ToString())}&createdByProfileId={createdByProfileId?.ToString() ?? "null"}&statuses={statuses.JoinToString("statuses", it => it.ToString())}&tagId={tagId?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&sorting={sorting.ToString()}&descending={descending.ToString().ToLowerInvariant()}&tags={tags?.JoinToString("tags", it => it.ToString()) ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<IssueDto>>()) : Partial<Batch<IssueDto>>.Default())}");
                
                public IAsyncEnumerable<IssueDto> GetAllIssuesAsyncEnumerable(ProjectIdentifier project, List<ProfileIdentifier> assigneeId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = 100, ProfileIdentifier? createdByProfileId = null, string? tagId = null, string? query = null, List<string>? tags = null, Func<Partial<IssueDto>, Partial<IssueDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllIssuesAsync(project: project, assigneeId: assigneeId, statuses: statuses, sorting: sorting, descending: descending, top: top, createdByProfileId: createdByProfileId, tagId: tagId, query: query, tags: tags, skip: batchSkip, partial: builder => Partial<Batch<IssueDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<IssueDto>.Default())), skip);
            
                public async Task<IssueDto> GetIssueByNumberAsync(ProjectIdentifier project, int number, Func<Partial<IssueDto>, Partial<IssueDto>>? partial = null)
                    => await _connection.RequestResourceAsync<IssueDto>("GET", $"api/http/projects/{project}/planning/issues/number:{number}?$fields={(partial != null ? partial(new Partial<IssueDto>()) : Partial<IssueDto>.Default())}");
            
                public async Task UpdateIssueAsync(ProjectIdentifier project, string issueId, string title, string status, string? description = null, string? assignee = null, SpaceDate? dueDate = null, ImportedEntityInfoDto? importInfo = null)
                    => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/planning/issues/{issueId}", 
                        new ProjectsForProjectPlanningIssuesForIssueIdPatchRequest { 
                            Title = title,
                            Description = description,
                            Assignee = assignee,
                            Status = status,
                            DueDate = dueDate,
                            ImportInfo = importInfo,
                        }
                );
            
                public async Task DeleteIssueAsync(ProjectIdentifier project, string issueId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/issues/{issueId}");
            
                public StatusClient Statuses => new StatusClient(_connection);
                
                public partial class StatusClient
                {
                    private readonly Connection _connection;
                    
                    public StatusClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<IssueStatusDto>> GetAllIssueStatusesAsync(ProjectIdentifier project, Func<Partial<IssueStatusDto>, Partial<IssueStatusDto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<IssueStatusDto>>("GET", $"api/http/projects/{project}/planning/issues/statuses?$fields={(partial != null ? partial(new Partial<IssueStatusDto>()) : Partial<IssueStatusDto>.Default())}");
                
                    public async Task UpdateStatusAsync(ProjectIdentifier project, List<IssueStatusDataDto> statuses)
                        => await _connection.RequestResourceAsync("PATCH", $"api/http/projects/{project}/planning/issues/statuses", 
                            new ProjectsForProjectPlanningIssuesStatusesPatchRequest { 
                                Statuses = statuses,
                            }
                    );
                
                    public DistributionClient Distribution => new DistributionClient(_connection);
                    
                    public partial class DistributionClient
                    {
                        private readonly Connection _connection;
                        
                        public DistributionClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task<List<IssueStatusWithUsagesDto>> GetIssueStatusDistributionAsync(ProjectIdentifier project, Func<Partial<IssueStatusWithUsagesDto>, Partial<IssueStatusWithUsagesDto>>? partial = null)
                            => await _connection.RequestResourceAsync<List<IssueStatusWithUsagesDto>>("GET", $"api/http/projects/{project}/planning/issues/statuses/distribution?$fields={(partial != null ? partial(new Partial<IssueStatusWithUsagesDto>()) : Partial<IssueStatusWithUsagesDto>.Default())}");
                    
                    }
                
                }
            
                public AttachmentClient Attachments => new AttachmentClient(_connection);
                
                public partial class AttachmentClient
                {
                    private readonly Connection _connection;
                    
                    public AttachmentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddAttachmentsAsync(ProjectIdentifier project, string issueId, List<AttachmentDto> attachments)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/issues/{issueId}/attachments", 
                            new ProjectsForProjectPlanningIssuesForIssueIdAttachmentsPostRequest { 
                                Attachments = attachments,
                            }
                    );
                
                    public async Task RemoveAttachmentsAsync(ProjectIdentifier project, string issueId, List<string> identities)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/issues/{issueId}/attachments?identities={identities.JoinToString("identities", it => it.ToString())}");
                
                }
            
                public ChecklistClient Checklists => new ChecklistClient(_connection);
                
                public partial class ChecklistClient
                {
                    private readonly Connection _connection;
                    
                    public ChecklistClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddIssueChecklistAsync(ProjectIdentifier project, string issueId, string checklistId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/issues/{issueId}/checklists/{checklistId}");
                
                    public async Task RemoveIssueChecklistAsync(ProjectIdentifier project, string issueId, string checklistId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/issues/{issueId}/checklists/{checklistId}");
                
                }
            
                public CommentClient Comments => new CommentClient(_connection);
                
                public partial class CommentClient
                {
                    private readonly Connection _connection;
                    
                    public CommentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<string>> ImportIssueCommentHistoryAsync(ProjectIdentifier project, string issueId, List<MessageForImportDto> comments)
                        => await _connection.RequestResourceAsync<ProjectsForProjectPlanningIssuesForIssueIdCommentsImportPostRequest, List<string>>("POST", $"api/http/projects/{project}/planning/issues/{issueId}/comments/import", 
                            new ProjectsForProjectPlanningIssuesForIssueIdCommentsImportPostRequest { 
                                Comments = comments,
                            }
                    );
                
                }
            
                public TagClient Tags => new TagClient(_connection);
                
                public partial class TagClient
                {
                    private readonly Connection _connection;
                    
                    public TagClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddIssueTagAsync(ProjectIdentifier project, string issueId, string tagId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/planning/issues/{issueId}/tags/{tagId}");
                
                    public async Task RemoveIssueTagAsync(ProjectIdentifier project, string issueId, string tagId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/planning/issues/{issueId}/tags/{tagId}");
                
                }
            
            }
        
            public TagClient Tags => new TagClient(_connection);
            
            public partial class TagClient
            {
                private readonly Connection _connection;
                
                public TagClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<PlanningTagDto> CreateHierarchicalTagAsync(ProjectIdentifier project, List<string> path, string? parentTagId = null, Func<Partial<PlanningTagDto>, Partial<PlanningTagDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectPlanningTagsPostRequest, PlanningTagDto>("POST", $"api/http/projects/{project}/planning/tags?$fields={(partial != null ? partial(new Partial<PlanningTagDto>()) : Partial<PlanningTagDto>.Default())}", 
                        new ProjectsForProjectPlanningTagsPostRequest { 
                            ParentTagId = parentTagId,
                            Path = path,
                        }
                );
            
                public async Task<Batch<PlanningTagDto>> GetAllHierarchicalTagsAsync(ProjectIdentifier project, string? skip = null, int? top = 100, string? query = null, Func<Partial<Batch<PlanningTagDto>>, Partial<Batch<PlanningTagDto>>>? partial = null)
                    => await _connection.RequestResourceAsync<Batch<PlanningTagDto>>("GET", $"api/http/projects/{project}/planning/tags?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<PlanningTagDto>>()) : Partial<Batch<PlanningTagDto>>.Default())}");
                
                public IAsyncEnumerable<PlanningTagDto> GetAllHierarchicalTagsAsyncEnumerable(ProjectIdentifier project, string? skip = null, int? top = 100, string? query = null, Func<Partial<PlanningTagDto>, Partial<PlanningTagDto>>? partial = null)
                    => BatchEnumerator.AllItems(batchSkip => GetAllHierarchicalTagsAsync(project: project, top: top, query: query, skip: batchSkip, partial: builder => Partial<Batch<PlanningTagDto>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<PlanningTagDto>.Default())), skip);
            
            }
        
        }
    
        public RepositoryClient Repositories => new RepositoryClient(_connection);
        
        public partial class RepositoryClient
        {
            private readonly Connection _connection;
            
            public RepositoryClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<PRRepositoryInfoDto> CreateNewRepositoryAsync(ProjectIdentifier project, string repository, string description, bool initialize = true, bool defaultSetup = false, Func<Partial<PRRepositoryInfoDto>, Partial<PRRepositoryInfoDto>>? partial = null)
                => await _connection.RequestResourceAsync<ProjectsForProjectRepositoriesForRepositoryPostRequest, PRRepositoryInfoDto>("POST", $"api/http/projects/{project}/repositories/{repository}?$fields={(partial != null ? partial(new Partial<PRRepositoryInfoDto>()) : Partial<PRRepositoryInfoDto>.Default())}", 
                    new ProjectsForProjectRepositoriesForRepositoryPostRequest { 
                        Description = description,
                        Initialize = initialize,
                        DefaultSetup = defaultSetup,
                    }
            );
        
            public async Task DeleteRepositoryAsync(ProjectIdentifier project, string repository)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{project}/repositories/{repository}");
        
            public CommitSetReviewClient CommitSetReviews => new CommitSetReviewClient(_connection);
            
            public partial class CommitSetReviewClient
            {
                private readonly Connection _connection;
                
                public CommitSetReviewClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CommitSetReviewRecordDto> CreateCommitSetReviewAsync(ProjectIdentifier project, string repository, List<string> revisions, string? title = null, Func<Partial<CommitSetReviewRecordDto>, Partial<CommitSetReviewRecordDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectRepositoriesForRepositoryCommitSetReviewsPostRequest, CommitSetReviewRecordDto>("POST", $"api/http/projects/{project}/repositories/{repository}/commit-set-reviews?$fields={(partial != null ? partial(new Partial<CommitSetReviewRecordDto>()) : Partial<CommitSetReviewRecordDto>.Default())}", 
                        new ProjectsForProjectRepositoriesForRepositoryCommitSetReviewsPostRequest { 
                            Revisions = revisions,
                            Title = title,
                        }
                );
            
            }
        
            public MergeRequestClient MergeRequests => new MergeRequestClient(_connection);
            
            public partial class MergeRequestClient
            {
                private readonly Connection _connection;
                
                public MergeRequestClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<MergeRequestRecordDto> CreateMergeRequestAsync(ProjectIdentifier project, string repository, string sourceBranch, string targetBranch, string title, List<MergeRequestReviewerDto>? reviewers = null, Func<Partial<MergeRequestRecordDto>, Partial<MergeRequestRecordDto>>? partial = null)
                    => await _connection.RequestResourceAsync<ProjectsForProjectRepositoriesForRepositoryMergeRequestsPostRequest, MergeRequestRecordDto>("POST", $"api/http/projects/{project}/repositories/{repository}/merge-requests?$fields={(partial != null ? partial(new Partial<MergeRequestRecordDto>()) : Partial<MergeRequestRecordDto>.Default())}", 
                        new ProjectsForProjectRepositoriesForRepositoryMergeRequestsPostRequest { 
                            SourceBranch = sourceBranch,
                            TargetBranch = targetBranch,
                            Title = title,
                            Reviewers = reviewers,
                        }
                );
            
            }
        
            public RevisionClient Revisions => new RevisionClient(_connection);
            
            public partial class RevisionClient
            {
                private readonly Connection _connection;
                
                public RevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public CodeDiscussionClient CodeDiscussions => new CodeDiscussionClient(_connection);
                
                public partial class CodeDiscussionClient
                {
                    private readonly Connection _connection;
                    
                    public CodeDiscussionClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<CodeDiscussionRecordDto> CreateCodeDiscussionAsync(ProjectIdentifier project, string repository, string revision, string text, bool pending = false, DiffContextDto? diffContext = null, string? filename = null, int? line = null, int? oldLine = null, Func<Partial<CodeDiscussionRecordDto>, Partial<CodeDiscussionRecordDto>>? partial = null)
                        => await _connection.RequestResourceAsync<ProjectsForProjectRepositoriesForRepositoryRevisionsForRevisionCodeDiscussionsPostRequest, CodeDiscussionRecordDto>("POST", $"api/http/projects/{project}/repositories/{repository}/revisions/{revision}/code-discussions?$fields={(partial != null ? partial(new Partial<CodeDiscussionRecordDto>()) : Partial<CodeDiscussionRecordDto>.Default())}", 
                            new ProjectsForProjectRepositoriesForRepositoryRevisionsForRevisionCodeDiscussionsPostRequest { 
                                Text = text,
                                DiffContext = diffContext,
                                Filename = filename,
                                Line = line,
                                OldLine = oldLine,
                                Pending = pending,
                            }
                    );
                
                }
            
                public CommitStatusClient CommitStatuses => new CommitStatusClient(_connection);
                
                public partial class CommitStatusClient
                {
                    private readonly Connection _connection;
                    
                    public CommitStatusClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task PushCommitStatusAsync(ProjectIdentifier project, string repository, string revision, CommitExecutionStatus executionStatus, string url, string externalServiceName, string taskName, string taskId, string? branch = null, List<string>? changes = null, long? timestamp = null, string? description = null)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{project}/repositories/{repository}/revisions/{revision}/commit-statuses", 
                            new ProjectsForProjectRepositoriesForRepositoryRevisionsForRevisionCommitStatusesPostRequest { 
                                Branch = branch,
                                Changes = changes,
                                ExecutionStatus = executionStatus,
                                Url = url,
                                ExternalServiceName = externalServiceName,
                                TaskName = taskName,
                                TaskId = taskId,
                                Timestamp = timestamp,
                                Description = description,
                            }
                    );
                
                    public async Task<List<CommitStatusDTODto>> GetCommitStatusesForCommitAsync(ProjectIdentifier project, string repository, string revision, Func<Partial<CommitStatusDTODto>, Partial<CommitStatusDTODto>>? partial = null)
                        => await _connection.RequestResourceAsync<List<CommitStatusDTODto>>("GET", $"api/http/projects/{project}/repositories/{repository}/revisions/{revision}/commit-statuses?$fields={(partial != null ? partial(new Partial<CommitStatusDTODto>()) : Partial<CommitStatusDTODto>.Default())}");
                
                }
            
            }
        
        }
    
    }
    
}
