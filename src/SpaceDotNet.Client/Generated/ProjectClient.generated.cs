// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public partial class ProjectClient
    {
        private readonly Connection _connection;
        
        public ProjectClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<PRProjectDto> CreateProject(CreateProjectRequestDto data, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partialBuilder = null)
            => await _connection.RequestResourceAsync<CreateProjectRequestDto, PRProjectDto>("POST", $"api/http/projects?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default()), data);        
        
        public async Task<Batch<PRProjectDto>> GetAllProjects(string? skip = null, int? top = null, string? term = null, string? tag = null, bool? starred = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>> partialBuilder = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&tag={tag?.ToString() ?? "null"}&starred={starred?.ToString()?.ToLowerInvariant() ?? "null"}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default()));        
        
        public async Task<PRProjectDto> GetProjectByKey(string projectKey, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partialBuilder = null)
            => await _connection.RequestResourceAsync<PRProjectDto>("GET", $"api/http/projects/key:{projectKey}?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default()));        
        
        public async Task<Batch<PRProjectDto>> GetAllProjectsByMember(string member, string? skip = null, int? top = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>> partialBuilder = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/member:{member}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default()));        
        
        public async Task<Batch<PRProjectDto>> GetAllProjectsWithRight(string rightCode, string? skip = null, int? top = null, string? term = null, string? path = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>> partialBuilder = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/right-code:{rightCode}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&path={path?.ToString() ?? "null"}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default()));        
        
        public async Task<Batch<PRProjectDto>> GetAllProjectsByTeam(string team, string? skip = null, int? top = null, Func<Partial<Batch<PRProjectDto>>, Partial<Batch<PRProjectDto>>> partialBuilder = null)
            => await _connection.RequestResourceAsync<Batch<PRProjectDto>>("GET", $"api/http/projects/team:{team}?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<PRProjectDto>>()) : Partial<Batch<PRProjectDto>>.Default()));        
        
        public async Task<PRProjectDto> GetProject(string projectId, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partialBuilder = null)
            => await _connection.RequestResourceAsync<PRProjectDto>("GET", $"api/http/projects/{projectId}?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default()));        
        
        public async Task<PRProjectDto> UpdateProject(string projectId, UpdateProjectRequestDto data, Func<Partial<PRProjectDto>, Partial<PRProjectDto>> partialBuilder = null)
            => await _connection.RequestResourceAsync<UpdateProjectRequestDto, PRProjectDto>("PATCH", $"api/http/projects/{projectId}?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<PRProjectDto>()) : Partial<PRProjectDto>.Default()), data);        
        
        public async Task ArchiveProject(string projectId)
            => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}");        
        
        public CodeDiscussionClient CodeDiscussions => new CodeDiscussionClient(_connection);
        
        public partial class CodeDiscussionClient
        {
            private readonly Connection _connection;
            
            public CodeDiscussionClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<List<PropagatedCodeDiscussionDto>> GetAllCodeDiscussionsByChange(GetAllCodeDiscussionsByChangeRequestDto data, Func<Partial<List<PropagatedCodeDiscussionDto>>, Partial<List<PropagatedCodeDiscussionDto>>> partialBuilder = null)
                => await _connection.RequestResourceAsync<GetAllCodeDiscussionsByChangeRequestDto, List<PropagatedCodeDiscussionDto>>("POST", $"api/http/projects/code-discussions/get-by-change?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<PropagatedCodeDiscussionDto>>()) : Partial<List<PropagatedCodeDiscussionDto>>.Default()), data);            
            
            public DiscussionsCounterClient DiscussionsCounters => new DiscussionsCounterClient(_connection);
            
            public partial class DiscussionsCounterClient
            {
                private readonly Connection _connection;
                
                public DiscussionsCounterClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<RevisionDiscussionsCounterDto>> GetAllDiscussionsCounters(string projectKey, string repository, List<string> revisions, Func<Partial<List<RevisionDiscussionsCounterDto>>, Partial<List<RevisionDiscussionsCounterDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<List<RevisionDiscussionsCounterDto>>("GET", $"api/http/projects/code-discussions/discussions-counters?projectKey={projectKey.ToString()}&repository={repository.ToString()}&revisions={revisions.JoinToString("revisions", it => it.ToString())}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<RevisionDiscussionsCounterDto>>()) : Partial<List<RevisionDiscussionsCounterDto>>.Default()));                
                
            }
            
        }
        
        public PrivateProjectClient PrivateProjects => new PrivateProjectClient(_connection);
        
        public partial class PrivateProjectClient
        {
            private readonly Connection _connection;
            
            public PrivateProjectClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task RequestAccessToProject(string projectKey)
                => await _connection.RequestResourceAsync("POST", $"api/http/projects/private-projects/key:{projectKey}/request-access");            
            
            public async Task<List<PRPrivateProjectDto>> GetAllPrivateProjects(Func<Partial<List<PRPrivateProjectDto>>, Partial<List<PRPrivateProjectDto>>> partialBuilder = null)
                => await _connection.RequestResourceAsync<List<PRPrivateProjectDto>>("GET", $"api/http/projects/private-projects?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<PRPrivateProjectDto>>()) : Partial<List<PRPrivateProjectDto>>.Default()));            
            
        }
        
        public ResponsibilityClient Responsibilities => new ResponsibilityClient(_connection);
        
        public partial class ResponsibilityClient
        {
            private readonly Connection _connection;
            
            public ResponsibilityClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<string> AddResponsibility(AddResponsibilityRequestDto data)
                => await _connection.RequestResourceAsync<AddResponsibilityRequestDto, string>("POST", $"api/http/projects/responsibilities?", data);            
            
            public async Task UpdateResponsibility(string responsibilityId, UpdateResponsibilityRequestDto data)
                => await _connection.RequestResourceAsync<UpdateResponsibilityRequestDto>("PATCH", $"api/http/projects/responsibilities/{responsibilityId}", data);            
            
            public async Task DeleteResponsibility(string responsibilityId)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/responsibilities/{responsibilityId}");            
            
            public SubjectClient Subjects => new SubjectClient(_connection);
            
            public partial class SubjectClient
            {
                private readonly Connection _connection;
                
                public SubjectClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task DeleteResponsibilitySubject(string subjectId, string? projectId = null)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/responsibilities/subjects/{subjectId}?projectId={projectId?.ToString() ?? "null"}");                
                
            }
            
        }
        
        public partial class ResponsibilityClient
        {
            public SchemeClient Scheme => new SchemeClient(_connection);
            
            public partial class SchemeClient
            {
                private readonly Connection _connection;
                
                public SchemeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<SubjectResponsibilitiesTableDto>> GetProjectResponsibilityScheme(string projectId, Func<Partial<List<SubjectResponsibilitiesTableDto>>, Partial<List<SubjectResponsibilitiesTableDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<List<SubjectResponsibilitiesTableDto>>("GET", $"api/http/projects/{projectId}/responsibilities/scheme?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<SubjectResponsibilitiesTableDto>>()) : Partial<List<SubjectResponsibilitiesTableDto>>.Default()));                
                
            }
            
            public partial class SubjectClient
            {
                public async Task<string> AddResponsibilitySubject(string projectId, AddResponsibilitySubjectRequestDto data)
                    => await _connection.RequestResourceAsync<AddResponsibilitySubjectRequestDto, string>("POST", $"api/http/projects/{projectId}/responsibilities/subjects?", data);                
                
                public async Task EditResponsibilitySubject(string projectId, string subjectId, AddResponsibilitySubjectRequestDto data)
                    => await _connection.RequestResourceAsync<AddResponsibilitySubjectRequestDto>("PATCH", $"api/http/projects/{projectId}/responsibilities/subjects/{subjectId}", data);                
                
            }
            
            public AssigneeClient Assignees => new AssigneeClient(_connection);
            
            public partial class AssigneeClient
            {
                private readonly Connection _connection;
                
                public AssigneeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AssignResponsible(string projectId, string responsibilityId, string profileId, AssignResponsibleRequestDto data)
                    => await _connection.RequestResourceAsync<AssignResponsibleRequestDto>("POST", $"api/http/projects/{projectId}/responsibilities/{responsibilityId}/assignees/{profileId}", data);                
                
                public async Task RemoveResponsible(string projectId, string responsibilityId, string profileId, string? role = null)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/responsibilities/{responsibilityId}/assignees/{profileId}?role={role?.ToString() ?? "null"}");                
                
            }
            
        }
        
        public TagClient Tags => new TagClient(_connection);
        
        public partial class TagClient
        {
            private readonly Connection _connection;
            
            public TagClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task TrackTagAccess(TrackTagAccessRequestDto data)
                => await _connection.RequestResourceAsync<TrackTagAccessRequestDto>("POST", $"api/http/projects/tags/track-access", data);            
            
            public async Task<List<PRTagDto>> GetAllTags(Func<Partial<List<PRTagDto>>, Partial<List<PRTagDto>>> partialBuilder = null)
                => await _connection.RequestResourceAsync<List<PRTagDto>>("GET", $"api/http/projects/tags?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<PRTagDto>>()) : Partial<List<PRTagDto>>.Default()));            
            
        }
        
        public AccesClient Access => new AccesClient(_connection);
        
        public partial class AccesClient
        {
            private readonly Connection _connection;
            
            public AccesClient(Connection connection)
            {
                _connection = connection;
            }
            
            public MemberProfileClient MemberProfiles => new MemberProfileClient(_connection);
            
            public partial class MemberProfileClient
            {
                private readonly Connection _connection;
                
                public MemberProfileClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Batch<TDMemberProfileDto>> GetAllMemberProfiles(string projectKey, string query, bool includingAdmins, string? skip = null, int? top = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/projects/key:{projectKey}/access/member-profiles?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query.ToString()}&includingAdmins={includingAdmins.ToString().ToLowerInvariant()}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default()));                
                
            }
            
        }
        
        public partial class AccesClient
        {
            public AdminClient Admins => new AdminClient(_connection);
            
            public partial class AdminClient
            {
                private readonly Connection _connection;
                
                public AdminClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddAdministrator(string projectId, AddAdministratorRequestDto data)
                        => await _connection.RequestResourceAsync<AddAdministratorRequestDto>("POST", $"api/http/projects/{projectId}/access/admins/profiles", data);                    
                    
                    public async Task RemoveAdministrator(string projectId, string profileId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/admins/profiles/{profileId}");                    
                    
                }
                
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddAdministratorsTeam(string projectId, CreateTeamRequestDto data)
                        => await _connection.RequestResourceAsync<CreateTeamRequestDto>("POST", $"api/http/projects/{projectId}/access/admins/teams", data);                    
                    
                    public async Task RemoveAdministratorsTeam(string projectId, string teamId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/admins/teams/{teamId}");                    
                    
                }
                
            }
            
            public MemberClient Members => new MemberClient(_connection);
            
            public partial class MemberClient
            {
                private readonly Connection _connection;
                
                public MemberClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public ProfileClient Profiles => new ProfileClient(_connection);
                
                public partial class ProfileClient
                {
                    private readonly Connection _connection;
                    
                    public ProfileClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddMember(string projectId, AddAdministratorRequestDto data)
                        => await _connection.RequestResourceAsync<AddAdministratorRequestDto>("POST", $"api/http/projects/{projectId}/access/members/profiles", data);                    
                    
                    public async Task RemoveMember(string projectId, string profileId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/members/profiles/{profileId}");                    
                    
                }
                
                public TeamClient Teams => new TeamClient(_connection);
                
                public partial class TeamClient
                {
                    private readonly Connection _connection;
                    
                    public TeamClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddTeam(string projectId, CreateTeamRequestDto data)
                        => await _connection.RequestResourceAsync<CreateTeamRequestDto>("POST", $"api/http/projects/{projectId}/access/members/teams", data);                    
                    
                    public async Task RemoveTeam(string projectId, string teamId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/access/members/teams/{teamId}");                    
                    
                }
                
            }
            
            public ViewerClient Viewers => new ViewerClient(_connection);
            
            public partial class ViewerClient
            {
                private readonly Connection _connection;
                
                public ViewerClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<Batch<TDMemberProfileDto>> OrganizationProfilesWhoCanViewTheProject(string projectId, string term, bool meOnTop, string? skip = null, int? top = null, Func<Partial<Batch<TDMemberProfileDto>>, Partial<Batch<TDMemberProfileDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<Batch<TDMemberProfileDto>>("GET", $"api/http/projects/{projectId}/access/viewers?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term.ToString()}&meOnTop={meOnTop.ToString().ToLowerInvariant()}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<TDMemberProfileDto>>()) : Partial<Batch<TDMemberProfileDto>>.Default()));                
                
            }
            
        }
        
        public CodeReviewClient CodeReviews => new CodeReviewClient(_connection);
        
        public partial class CodeReviewClient
        {
            private readonly Connection _connection;
            
            public CodeReviewClient(Connection connection)
            {
                _connection = connection;
            }
            
            public async Task<Batch<CodeReviewWithCountDto>> GetAllCodeReviews(string projectKey, ReviewSorting sort, string? skip = null, int? top = null, CodeReviewStateFilter? state = null, string? text = null, string? authorProfileId = null, SpaceDate? from = null, SpaceDate? to = null, string? reviewer = null, ReviewType? type = null, Func<Partial<Batch<CodeReviewWithCountDto>>, Partial<Batch<CodeReviewWithCountDto>>> partialBuilder = null)
                => await _connection.RequestResourceAsync<Batch<CodeReviewWithCountDto>>("GET", $"api/http/projects/key:{projectKey}/code-reviews?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&state={state?.ToString() ?? "null"}&text={text?.ToString() ?? "null"}&authorProfileId={authorProfileId?.ToString() ?? "null"}&from={from?.ToString() ?? "null"}&to={to?.ToString() ?? "null"}&sort={sort.ToString()}&reviewer={reviewer?.ToString() ?? "null"}&type={type?.ToString() ?? "null"}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<CodeReviewWithCountDto>>()) : Partial<Batch<CodeReviewWithCountDto>>.Default()));            
            
            public async Task<ReviewCountsDto> GetReviewCounts(string projectKey, Func<Partial<ReviewCountsDto>, Partial<ReviewCountsDto>> partialBuilder = null)
                => await _connection.RequestResourceAsync<ReviewCountsDto>("GET", $"api/http/projects/key:{projectKey}/code-reviews/review-counts?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<ReviewCountsDto>()) : Partial<ReviewCountsDto>.Default()));            
            
            public async Task<CodeReviewRecordDto> GetCodeReviewByReviewNumber(string projectKey, int reviewNumber, Func<Partial<CodeReviewRecordDto>, Partial<CodeReviewRecordDto>> partialBuilder = null)
                => await _connection.RequestResourceAsync<CodeReviewRecordDto>("GET", $"api/http/projects/key:{projectKey}/code-reviews/review-number:{reviewNumber}?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<CodeReviewRecordDto>()) : Partial<CodeReviewRecordDto>.Default()));            
            
            public ChangeClient Changes => new ChangeClient(_connection);
            
            public partial class ChangeClient
            {
                private readonly Connection _connection;
                
                public ChangeClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<ChangeInReviewDto>> GetAllChanges(string projectKey, string reviewId, List<string> revisions, Func<Partial<List<ChangeInReviewDto>>, Partial<List<ChangeInReviewDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<List<ChangeInReviewDto>>("GET", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/changes?revisions={revisions.JoinToString("revisions", it => it.ToString())}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<ChangeInReviewDto>>()) : Partial<List<ChangeInReviewDto>>.Default()));                
                
            }
            
            public DetailClient Details => new DetailClient(_connection);
            
            public partial class DetailClient
            {
                private readonly Connection _connection;
                
                public DetailClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CodeReviewDetailedInfoDto> GetReviewDetails(string projectKey, string reviewId, Func<Partial<CodeReviewDetailedInfoDto>, Partial<CodeReviewDetailedInfoDto>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<CodeReviewDetailedInfoDto>("GET", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/details?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<CodeReviewDetailedInfoDto>()) : Partial<CodeReviewDetailedInfoDto>.Default()));                
                
            }
            
            public ParticipantClient Participants => new ParticipantClient(_connection);
            
            public partial class ParticipantClient
            {
                private readonly Connection _connection;
                
                public ParticipantClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewParticipant(string projectKey, string reviewId, string user, EditReviewParticipantRequestDto data)
                    => await _connection.RequestResourceAsync<EditReviewParticipantRequestDto>("PATCH", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/participants/{user}", data);                
                
            }
            
            public RevisionClient Revisions => new RevisionClient(_connection);
            
            public partial class RevisionClient
            {
                private readonly Connection _connection;
                
                public RevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task AddRevisionsToReview(string projectKey, string reviewId, AddRevisionsToReviewRequestDto data)
                    => await _connection.RequestResourceAsync<AddRevisionsToReviewRequestDto>("POST", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/revisions", data);                
                
                public async Task RemoveRevisionsFromReview(string projectKey, string reviewId, List<string> revisions)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/revisions?revisions={revisions.JoinToString("revisions", it => it.ToString())}");                
                
            }
            
            public StateClient State => new StateClient(_connection);
            
            public partial class StateClient
            {
                private readonly Connection _connection;
                
                public StateClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewState(string projectKey, string reviewId, EditReviewStateRequestDto data)
                    => await _connection.RequestResourceAsync<EditReviewStateRequestDto>("PATCH", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/state", data);                
                
            }
            
            public SuggestedReviewerClient SuggestedReviewers => new SuggestedReviewerClient(_connection);
            
            public partial class SuggestedReviewerClient
            {
                private readonly Connection _connection;
                
                public SuggestedReviewerClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<TDMemberProfileDto>> GetAllSuggestedReviewers(string projectKey, string reviewId, Func<Partial<List<TDMemberProfileDto>>, Partial<List<TDMemberProfileDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<List<TDMemberProfileDto>>("GET", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/suggested-reviewers?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<TDMemberProfileDto>>()) : Partial<List<TDMemberProfileDto>>.Default()));                
                
            }
            
            public TitleClient Title => new TitleClient(_connection);
            
            public partial class TitleClient
            {
                private readonly Connection _connection;
                
                public TitleClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task EditReviewTitle(string projectKey, string reviewId, EditReviewTitleRequestDto data)
                    => await _connection.RequestResourceAsync<EditReviewTitleRequestDto>("PATCH", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/title", data);                
                
            }
            
            public UnreadRevisionClient UnreadRevisions => new UnreadRevisionClient(_connection);
            
            public partial class UnreadRevisionClient
            {
                private readonly Connection _connection;
                
                public UnreadRevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<List<RevisionInReviewDto>> GetAllUnreadRevisions(string projectKey, string reviewId, Func<Partial<List<RevisionInReviewDto>>, Partial<List<RevisionInReviewDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<List<RevisionInReviewDto>>("GET", $"api/http/projects/key:{projectKey}/code-reviews/{reviewId}/unread-revisions?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<RevisionInReviewDto>>()) : Partial<List<RevisionInReviewDto>>.Default()));                
                
            }
            
        }
        
        public RepositoryClient Repositories => new RepositoryClient(_connection);
        
        public partial class RepositoryClient
        {
            private readonly Connection _connection;
            
            public RepositoryClient(Connection connection)
            {
                _connection = connection;
            }
            
            public CommitSetReviewClient CommitSetReviews => new CommitSetReviewClient(_connection);
            
            public partial class CommitSetReviewClient
            {
                private readonly Connection _connection;
                
                public CommitSetReviewClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<CommitSetReviewRecordDto> CreateCommitSetReview(string projectKey, string repository, CreateCommitSetReviewRequestDto data, Func<Partial<CommitSetReviewRecordDto>, Partial<CommitSetReviewRecordDto>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<CreateCommitSetReviewRequestDto, CommitSetReviewRecordDto>("POST", $"api/http/projects/key:{projectKey}/repositories/{repository}/commit-set-reviews?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<CommitSetReviewRecordDto>()) : Partial<CommitSetReviewRecordDto>.Default()), data);                
                
            }
            
            public MergeRequestClient MergeRequests => new MergeRequestClient(_connection);
            
            public partial class MergeRequestClient
            {
                private readonly Connection _connection;
                
                public MergeRequestClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<MergeRequestRecordDto> CreateMergeRequest(string projectKey, string repository, CreateMergeRequestRequestDto data, Func<Partial<MergeRequestRecordDto>, Partial<MergeRequestRecordDto>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<CreateMergeRequestRequestDto, MergeRequestRecordDto>("POST", $"api/http/projects/key:{projectKey}/repositories/{repository}/merge-requests?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<MergeRequestRecordDto>()) : Partial<MergeRequestRecordDto>.Default()), data);                
                
            }
            
            public RevisionClient Revisions => new RevisionClient(_connection);
            
            public partial class RevisionClient
            {
                private readonly Connection _connection;
                
                public RevisionClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public CodeDiscussionClient CodeDiscussions => new CodeDiscussionClient(_connection);
                
                public partial class CodeDiscussionClient
                {
                    private readonly Connection _connection;
                    
                    public CodeDiscussionClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<CodeDiscussionRecordDto> CreateCodeDiscussion(string projectKey, string repository, string revision, CreateCodeDiscussionRequestDto data, Func<Partial<CodeDiscussionRecordDto>, Partial<CodeDiscussionRecordDto>> partialBuilder = null)
                        => await _connection.RequestResourceAsync<CreateCodeDiscussionRequestDto, CodeDiscussionRecordDto>("POST", $"api/http/projects/key:{projectKey}/repositories/{repository}/revisions/{revision}/code-discussions?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<CodeDiscussionRecordDto>()) : Partial<CodeDiscussionRecordDto>.Default()), data);                    
                    
                    public async Task<List<PropagatedCodeDiscussionDto>> GetDiscussionInFile(string projectKey, string repository, string revision, string file, Func<Partial<List<PropagatedCodeDiscussionDto>>, Partial<List<PropagatedCodeDiscussionDto>>> partialBuilder = null)
                        => await _connection.RequestResourceAsync<List<PropagatedCodeDiscussionDto>>("GET", $"api/http/projects/key:{projectKey}/repositories/{repository}/revisions/{revision}/code-discussions/discussions-in-file?file={file.ToString()}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<PropagatedCodeDiscussionDto>>()) : Partial<List<PropagatedCodeDiscussionDto>>.Default()));                    
                    
                }
                
                public CommitStatusClient CommitStatuses => new CommitStatusClient(_connection);
                
                public partial class CommitStatusClient
                {
                    private readonly Connection _connection;
                    
                    public CommitStatusClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task PushCommitStatus(string projectKey, string repository, string revision, PushCommitStatusRequestDto data)
                        => await _connection.RequestResourceAsync<PushCommitStatusRequestDto>("POST", $"api/http/projects/key:{projectKey}/repositories/{repository}/revisions/{revision}/commit-statuses", data);                    
                    
                    public async Task<List<CommitStatusDTODto>> GetCommitStatusesForCommit(string projectKey, string repository, string revision, Func<Partial<List<CommitStatusDTODto>>, Partial<List<CommitStatusDTODto>>> partialBuilder = null)
                        => await _connection.RequestResourceAsync<List<CommitStatusDTODto>>("GET", $"api/http/projects/key:{projectKey}/repositories/{repository}/revisions/{revision}/commit-statuses?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<CommitStatusDTODto>>()) : Partial<List<CommitStatusDTODto>>.Default()));                    
                    
                }
                
            }
            
        }
        
        public PlanningClient Planning => new PlanningClient(_connection);
        
        public partial class PlanningClient
        {
            private readonly Connection _connection;
            
            public PlanningClient(Connection connection)
            {
                _connection = connection;
            }
            
            public ChecklistClient Checklists => new ChecklistClient(_connection);
            
            public partial class ChecklistClient
            {
                private readonly Connection _connection;
                
                public ChecklistClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<ChecklistDto> CreateChecklist(string projectId, IsNameFreeRequestDto data, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<IsNameFreeRequestDto, ChecklistDto>("POST", $"api/http/projects/{projectId}/planning/checklists?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default()), data);                
                
                public async Task<ChecklistDto> ImportChecklist(string projectId, ImportChecklistRequestDto data, Func<Partial<ChecklistDto>, Partial<ChecklistDto>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<ImportChecklistRequestDto, ChecklistDto>("POST", $"api/http/projects/{projectId}/planning/checklists/import?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<ChecklistDto>()) : Partial<ChecklistDto>.Default()), data);                
                
                public async Task ImportChecklistLines(string projectId, string checklistId, ImportChecklistLinesRequestDto data)
                    => await _connection.RequestResourceAsync<ImportChecklistLinesRequestDto>("POST", $"api/http/projects/{projectId}/planning/checklists/{checklistId}/import", data);                
                
                public async Task<Batch<ChecklistDto>> GetAllChecklists(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<Batch<ChecklistDto>>, Partial<Batch<ChecklistDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<Batch<ChecklistDto>>("GET", $"api/http/projects/{projectId}/planning/checklists?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<ChecklistDto>>()) : Partial<Batch<ChecklistDto>>.Default()));                
                
                public async Task UpdateChecklist(string projectId, string checklistId, UpdateChecklistRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateChecklistRequestDto>("PATCH", $"api/http/projects/{projectId}/planning/checklists/{checklistId}", data);                
                
                public async Task DeleteChecklist(string projectId, string checklistId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/checklists/{checklistId}");                
                
                public StarredClient Starred => new StarredClient(_connection);
                
                public partial class StarredClient
                {
                    private readonly Connection _connection;
                    
                    public StarredClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<ChecklistDto>> GetAllStarredChecklists(string projectId, Func<Partial<List<ChecklistDto>>, Partial<List<ChecklistDto>>> partialBuilder = null)
                        => await _connection.RequestResourceAsync<List<ChecklistDto>>("GET", $"api/http/projects/{projectId}/planning/checklists/starred?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<ChecklistDto>>()) : Partial<List<ChecklistDto>>.Default()));                    
                    
                }
                
                public FullChecklistTreeClient FullChecklistTree => new FullChecklistTreeClient(_connection);
                
                public partial class FullChecklistTreeClient
                {
                    private readonly Connection _connection;
                    
                    public FullChecklistTreeClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<PlanItemChildrenDto>> GetFullChecklistTree(string projectId, string checklistId, Func<Partial<List<PlanItemChildrenDto>>, Partial<List<PlanItemChildrenDto>>> partialBuilder = null)
                        => await _connection.RequestResourceAsync<List<PlanItemChildrenDto>>("GET", $"api/http/projects/{projectId}/planning/checklists/{checklistId}/full-checklist-tree?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<PlanItemChildrenDto>>()) : Partial<List<PlanItemChildrenDto>>.Default()));                    
                    
                }
                
            }
            
            public IssueClient Issues => new IssueClient(_connection);
            
            public partial class IssueClient
            {
                private readonly Connection _connection;
                
                public IssueClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<IssueDto> CreateIssue(string projectId, CreateIssueRequestDto data, Func<Partial<IssueDto>, Partial<IssueDto>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<CreateIssueRequestDto, IssueDto>("POST", $"api/http/projects/{projectId}/planning/issues?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<IssueDto>()) : Partial<IssueDto>.Default()), data);                
                
                public async Task ToggleIssueResolved(string projectId, string issueId, ToggleIssueResolvedRequestDto data)
                    => await _connection.RequestResourceAsync<ToggleIssueResolvedRequestDto>("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/toggle-resolved", data);                
                
                public async Task<Batch<IssueDto>> GetAllIssues(string projectId, List<string> statuses, IssuesSorting sorting, bool descending, string? skip = null, int? top = null, string? assigneeId = null, string? createdByProfileId = null, string? tagId = null, string? query = null, Func<Partial<Batch<IssueDto>>, Partial<Batch<IssueDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<Batch<IssueDto>>("GET", $"api/http/projects/{projectId}/planning/issues?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&assigneeId={assigneeId?.ToString() ?? "null"}&createdByProfileId={createdByProfileId?.ToString() ?? "null"}&statuses={statuses.JoinToString("statuses", it => it.ToString())}&tagId={tagId?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&sorting={sorting.ToString()}&descending={descending.ToString().ToLowerInvariant()}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<IssueDto>>()) : Partial<Batch<IssueDto>>.Default()));                
                
                public async Task<IssueDto> GetIssueByNumber(string projectId, int number, Func<Partial<IssueDto>, Partial<IssueDto>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<IssueDto>("GET", $"api/http/projects/{projectId}/planning/issues/number:{number}?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<IssueDto>()) : Partial<IssueDto>.Default()));                
                
                public async Task UpdateIssue(string projectId, string issueId, UpdateIssueRequestDto data)
                    => await _connection.RequestResourceAsync<UpdateIssueRequestDto>("PATCH", $"api/http/projects/{projectId}/planning/issues/{issueId}", data);                
                
                public async Task DeleteIssue(string projectId, string issueId)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/issues/{issueId}");                
                
                public StatusClient Statuses => new StatusClient(_connection);
                
                public partial class StatusClient
                {
                    private readonly Connection _connection;
                    
                    public StatusClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<IssueStatusDto>> GetAllIssueStatuses(string projectId, Func<Partial<List<IssueStatusDto>>, Partial<List<IssueStatusDto>>> partialBuilder = null)
                        => await _connection.RequestResourceAsync<List<IssueStatusDto>>("GET", $"api/http/projects/{projectId}/planning/issues/statuses?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<IssueStatusDto>>()) : Partial<List<IssueStatusDto>>.Default()));                    
                    
                    public async Task UpdateStatus(string projectId, UpdateStatusRequestDto data)
                        => await _connection.RequestResourceAsync<UpdateStatusRequestDto>("PATCH", $"api/http/projects/{projectId}/planning/issues/statuses", data);                    
                    
                    public DistributionClient Distribution => new DistributionClient(_connection);
                    
                    public partial class DistributionClient
                    {
                        private readonly Connection _connection;
                        
                        public DistributionClient(Connection connection)
                        {
                            _connection = connection;
                        }
                        
                        public async Task<List<IssueStatusWithUsagesDto>> GetIssueStatusDistribution(string projectId, Func<Partial<List<IssueStatusWithUsagesDto>>, Partial<List<IssueStatusWithUsagesDto>>> partialBuilder = null)
                            => await _connection.RequestResourceAsync<List<IssueStatusWithUsagesDto>>("GET", $"api/http/projects/{projectId}/planning/issues/statuses/distribution?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<List<IssueStatusWithUsagesDto>>()) : Partial<List<IssueStatusWithUsagesDto>>.Default()));                        
                        
                    }
                    
                }
                
                public AttachmentClient Attachments => new AttachmentClient(_connection);
                
                public partial class AttachmentClient
                {
                    private readonly Connection _connection;
                    
                    public AttachmentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddAttachments(string projectId, string issueId, AddAttachmentsRequestDto data)
                        => await _connection.RequestResourceAsync<AddAttachmentsRequestDto>("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/attachments", data);                    
                    
                    public async Task RemoveAttachments(string projectId, string issueId, List<string> identities)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/issues/{issueId}/attachments?identities={identities.JoinToString("identities", it => it.ToString())}");                    
                    
                }
                
                public ChecklistClient Checklists => new ChecklistClient(_connection);
                
                public partial class ChecklistClient
                {
                    private readonly Connection _connection;
                    
                    public ChecklistClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddIssueChecklist(string projectId, string issueId, string checklistId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/checklists/{checklistId}");                    
                    
                    public async Task RemoveIssueChecklist(string projectId, string issueId, string checklistId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/issues/{issueId}/checklists/{checklistId}");                    
                    
                }
                
                public CommentClient Comments => new CommentClient(_connection);
                
                public partial class CommentClient
                {
                    private readonly Connection _connection;
                    
                    public CommentClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task<List<string>> ImportIssueCommentHistory(string projectId, string issueId, ImportIssueCommentHistoryRequestDto data)
                        => await _connection.RequestResourceAsync<ImportIssueCommentHistoryRequestDto, List<string>>("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/comments/import?", data);                    
                    
                }
                
                public TagClient Tags => new TagClient(_connection);
                
                public partial class TagClient
                {
                    private readonly Connection _connection;
                    
                    public TagClient(Connection connection)
                    {
                        _connection = connection;
                    }
                    
                    public async Task AddIssueTag(string projectId, string issueId, string tagId)
                        => await _connection.RequestResourceAsync("POST", $"api/http/projects/{projectId}/planning/issues/{issueId}/tags/{tagId}");                    
                    
                    public async Task RemoveIssueTag(string projectId, string issueId, string tagId)
                        => await _connection.RequestResourceAsync("DELETE", $"api/http/projects/{projectId}/planning/issues/{issueId}/tags/{tagId}");                    
                    
                }
                
            }
            
            public TagClient Tags => new TagClient(_connection);
            
            public partial class TagClient
            {
                private readonly Connection _connection;
                
                public TagClient(Connection connection)
                {
                    _connection = connection;
                }
                
                public async Task<PlanningTagDto> CreateHierarchicalTag(string projectId, CreateHierarchicalTagRequestDto data, Func<Partial<PlanningTagDto>, Partial<PlanningTagDto>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<CreateHierarchicalTagRequestDto, PlanningTagDto>("POST", $"api/http/projects/{projectId}/planning/tags?$fields=" + (partialBuilder != null ? partialBuilder(new Partial<PlanningTagDto>()) : Partial<PlanningTagDto>.Default()), data);                
                
                public async Task<Batch<PlanningTagDto>> GetAllHierarchicalTags(string projectId, string? skip = null, int? top = null, string? query = null, Func<Partial<Batch<PlanningTagDto>>, Partial<Batch<PlanningTagDto>>> partialBuilder = null)
                    => await _connection.RequestResourceAsync<Batch<PlanningTagDto>>("GET", $"api/http/projects/{projectId}/planning/tags?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&query={query?.ToString() ?? "null"}&$fields=" + (partialBuilder != null ? partialBuilder(new Partial<Batch<PlanningTagDto>>()) : Partial<Batch<PlanningTagDto>>.Default()));                
                
            }
            
        }
        
    }
    
}
