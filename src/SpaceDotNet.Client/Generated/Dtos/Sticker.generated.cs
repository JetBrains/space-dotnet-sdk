// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class Sticker
         : IPropagatePropertyAccessPath
    {
        public Sticker() { }
        
        public Sticker(string id, bool archived, string? symbol = null, string? attachmentId = null, int? width = null, int? height = null, List<StickerVariant>? variants = null, bool? animated = null)
        {
            Id = id;
            Symbol = symbol;
            AttachmentId = attachmentId;
            Width = width;
            Height = height;
            Variants = variants;
            IsAnimated = animated;
            IsArchived = archived;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(Sticker), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get => _id.GetValue();
            set => _id.SetValue(value);
        }
    
        private PropertyValue<string?> _symbol = new PropertyValue<string?>(nameof(Sticker), nameof(Symbol));
        
        [JsonPropertyName("symbol")]
        public string? Symbol
        {
            get => _symbol.GetValue();
            set => _symbol.SetValue(value);
        }
    
        private PropertyValue<string?> _attachmentId = new PropertyValue<string?>(nameof(Sticker), nameof(AttachmentId));
        
        [JsonPropertyName("attachmentId")]
        public string? AttachmentId
        {
            get => _attachmentId.GetValue();
            set => _attachmentId.SetValue(value);
        }
    
        private PropertyValue<int?> _width = new PropertyValue<int?>(nameof(Sticker), nameof(Width));
        
        [JsonPropertyName("width")]
        public int? Width
        {
            get => _width.GetValue();
            set => _width.SetValue(value);
        }
    
        private PropertyValue<int?> _height = new PropertyValue<int?>(nameof(Sticker), nameof(Height));
        
        [JsonPropertyName("height")]
        public int? Height
        {
            get => _height.GetValue();
            set => _height.SetValue(value);
        }
    
        private PropertyValue<List<StickerVariant>?> _variants = new PropertyValue<List<StickerVariant>?>(nameof(Sticker), nameof(Variants));
        
        [JsonPropertyName("variants")]
        public List<StickerVariant>? Variants
        {
            get => _variants.GetValue();
            set => _variants.SetValue(value);
        }
    
        private PropertyValue<bool?> _animated = new PropertyValue<bool?>(nameof(Sticker), nameof(IsAnimated));
        
        [JsonPropertyName("animated")]
        public bool? IsAnimated
        {
            get => _animated.GetValue();
            set => _animated.SetValue(value);
        }
    
        private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(Sticker), nameof(IsArchived));
        
        [Required]
        [JsonPropertyName("archived")]
        public bool IsArchived
        {
            get => _archived.GetValue();
            set => _archived.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _symbol.SetAccessPath(path, validateHasBeenSet);
            _attachmentId.SetAccessPath(path, validateHasBeenSet);
            _width.SetAccessPath(path, validateHasBeenSet);
            _height.SetAccessPath(path, validateHasBeenSet);
            _variants.SetAccessPath(path, validateHasBeenSet);
            _animated.SetAccessPath(path, validateHasBeenSet);
            _archived.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
