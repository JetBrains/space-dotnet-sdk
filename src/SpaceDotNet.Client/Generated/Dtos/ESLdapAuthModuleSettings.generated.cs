// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class ESLdapAuthModuleSettings
         : ESExternalPasswordAuthModuleSettings, IClassNameConvertible, IPropagatePropertyAccessPath
    {
        [JsonPropertyName("className")]
        public override string? ClassName => "ES_LdapAuthModuleSettings";
        
        public ESLdapAuthModuleSettings() { }
        
        public ESLdapAuthModuleSettings(LdapModuleType type, bool registerNewUsers, string serverUrl, int connectionTimeout, int readTimeout, List<ESTeamMapping> teamMappings, bool referralIgnored, string filter, string bindUserDN, string bindUserPassword, ESLdapAttributeNames attributeNames, SSLKeystore? sslKeystore = null)
        {
            Type = type;
            IsRegisterNewUsers = registerNewUsers;
            ServerUrl = serverUrl;
            ConnectionTimeout = connectionTimeout;
            ReadTimeout = readTimeout;
            SslKeystore = sslKeystore;
            TeamMappings = teamMappings;
            IsReferralIgnored = referralIgnored;
            Filter = filter;
            BindUserDN = bindUserDN;
            BindUserPassword = bindUserPassword;
            AttributeNames = attributeNames;
        }
        
        private PropertyValue<LdapModuleType> _type = new PropertyValue<LdapModuleType>(nameof(ESLdapAuthModuleSettings), nameof(Type));
        
        [Required]
        [JsonPropertyName("type")]
        public LdapModuleType Type
        {
            get => _type.GetValue();
            set => _type.SetValue(value);
        }
    
        private PropertyValue<bool> _registerNewUsers = new PropertyValue<bool>(nameof(ESLdapAuthModuleSettings), nameof(IsRegisterNewUsers));
        
        [Required]
        [JsonPropertyName("registerNewUsers")]
        public bool IsRegisterNewUsers
        {
            get => _registerNewUsers.GetValue();
            set => _registerNewUsers.SetValue(value);
        }
    
        private PropertyValue<string> _serverUrl = new PropertyValue<string>(nameof(ESLdapAuthModuleSettings), nameof(ServerUrl));
        
        [Required]
        [JsonPropertyName("serverUrl")]
        public string ServerUrl
        {
            get => _serverUrl.GetValue();
            set => _serverUrl.SetValue(value);
        }
    
        private PropertyValue<int> _connectionTimeout = new PropertyValue<int>(nameof(ESLdapAuthModuleSettings), nameof(ConnectionTimeout));
        
        [Required]
        [JsonPropertyName("connectionTimeout")]
        public int ConnectionTimeout
        {
            get => _connectionTimeout.GetValue();
            set => _connectionTimeout.SetValue(value);
        }
    
        private PropertyValue<int> _readTimeout = new PropertyValue<int>(nameof(ESLdapAuthModuleSettings), nameof(ReadTimeout));
        
        [Required]
        [JsonPropertyName("readTimeout")]
        public int ReadTimeout
        {
            get => _readTimeout.GetValue();
            set => _readTimeout.SetValue(value);
        }
    
        private PropertyValue<SSLKeystore?> _sslKeystore = new PropertyValue<SSLKeystore?>(nameof(ESLdapAuthModuleSettings), nameof(SslKeystore));
        
        [JsonPropertyName("sslKeystore")]
        public SSLKeystore? SslKeystore
        {
            get => _sslKeystore.GetValue();
            set => _sslKeystore.SetValue(value);
        }
    
        private PropertyValue<List<ESTeamMapping>> _teamMappings = new PropertyValue<List<ESTeamMapping>>(nameof(ESLdapAuthModuleSettings), nameof(TeamMappings));
        
        [Required]
        [JsonPropertyName("teamMappings")]
        public List<ESTeamMapping> TeamMappings
        {
            get => _teamMappings.GetValue();
            set => _teamMappings.SetValue(value);
        }
    
        private PropertyValue<bool> _referralIgnored = new PropertyValue<bool>(nameof(ESLdapAuthModuleSettings), nameof(IsReferralIgnored));
        
        [Required]
        [JsonPropertyName("referralIgnored")]
        public bool IsReferralIgnored
        {
            get => _referralIgnored.GetValue();
            set => _referralIgnored.SetValue(value);
        }
    
        private PropertyValue<string> _filter = new PropertyValue<string>(nameof(ESLdapAuthModuleSettings), nameof(Filter));
        
        [Required]
        [JsonPropertyName("filter")]
        public string Filter
        {
            get => _filter.GetValue();
            set => _filter.SetValue(value);
        }
    
        private PropertyValue<string> _bindUserDN = new PropertyValue<string>(nameof(ESLdapAuthModuleSettings), nameof(BindUserDN));
        
        [Required]
        [JsonPropertyName("bindUserDN")]
        public string BindUserDN
        {
            get => _bindUserDN.GetValue();
            set => _bindUserDN.SetValue(value);
        }
    
        private PropertyValue<string> _bindUserPassword = new PropertyValue<string>(nameof(ESLdapAuthModuleSettings), nameof(BindUserPassword));
        
        [Required]
        [JsonPropertyName("bindUserPassword")]
        public string BindUserPassword
        {
            get => _bindUserPassword.GetValue();
            set => _bindUserPassword.SetValue(value);
        }
    
        private PropertyValue<ESLdapAttributeNames> _attributeNames = new PropertyValue<ESLdapAttributeNames>(nameof(ESLdapAuthModuleSettings), nameof(AttributeNames));
        
        [Required]
        [JsonPropertyName("attributeNames")]
        public ESLdapAttributeNames AttributeNames
        {
            get => _attributeNames.GetValue();
            set => _attributeNames.SetValue(value);
        }
    
        public override void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _type.SetAccessPath(path, validateHasBeenSet);
            _registerNewUsers.SetAccessPath(path, validateHasBeenSet);
            _serverUrl.SetAccessPath(path, validateHasBeenSet);
            _connectionTimeout.SetAccessPath(path, validateHasBeenSet);
            _readTimeout.SetAccessPath(path, validateHasBeenSet);
            _sslKeystore.SetAccessPath(path, validateHasBeenSet);
            _teamMappings.SetAccessPath(path, validateHasBeenSet);
            _referralIgnored.SetAccessPath(path, validateHasBeenSet);
            _filter.SetAccessPath(path, validateHasBeenSet);
            _bindUserDN.SetAccessPath(path, validateHasBeenSet);
            _bindUserPassword.SetAccessPath(path, validateHasBeenSet);
            _attributeNames.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
