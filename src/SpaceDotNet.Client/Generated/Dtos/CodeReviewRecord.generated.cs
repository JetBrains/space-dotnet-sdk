// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    [JsonConverter(typeof(ClassNameDtoTypeConverter))]
    public abstract class CodeReviewRecord
         : IClassNameConvertible, IPropagatePropertyAccessPath
    {
        [JsonPropertyName("className")]
        public virtual string? ClassName => "CodeReviewRecord";
        
        public static CommitSetReviewRecord CommitSetReviewRecord(ProjectKey project, int number, string title, CodeReviewState state, long createdAt, bool? canBeReopened = null, TDMemberProfile? createdBy = null, bool? turnBased = null, M2ChannelRecord? feedChannel = null)
            => new CommitSetReviewRecord(project: project, number: number, title: title, state: state, createdAt: createdAt, canBeReopened: null, createdBy: null, turnBased: null, feedChannel: null);
        
        public static MergeRequestRecord MergeRequestRecord(ProjectKey project, int number, string title, CodeReviewState state, long createdAt, List<MergeRequestBranchPair> branchPairs, bool? canBeReopened = null, TDMemberProfile? createdBy = null, bool? turnBased = null, M2ChannelRecord? feedChannel = null)
            => new MergeRequestRecord(project: project, number: number, title: title, state: state, createdAt: createdAt, branchPairs: branchPairs, canBeReopened: null, createdBy: null, turnBased: null, feedChannel: null);
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(CodeReviewRecord), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get { return _id.GetValue(); }
            set { _id.SetValue(value); }
        }
    
        private PropertyValue<List<CodeReviewParticipantRecord>> _authors = new PropertyValue<List<CodeReviewParticipantRecord>>(nameof(CodeReviewRecord), nameof(Authors));
        
        [Required]
        [JsonPropertyName("authors")]
        public List<CodeReviewParticipantRecord> Authors
        {
            get { return _authors.GetValue(); }
            set { _authors.SetValue(value); }
        }
    
        private PropertyValue<int> _count = new PropertyValue<int>(nameof(CodeReviewRecord), nameof(Count));
        
        [Required]
        [JsonPropertyName("count")]
        public int Count
        {
            get { return _count.GetValue(); }
            set { _count.SetValue(value); }
        }
    
        private PropertyValue<Counter> _counter = new PropertyValue<Counter>(nameof(CodeReviewRecord), nameof(Counter));
        
        [Required]
        [JsonPropertyName("counter")]
        public Counter Counter
        {
            get { return _counter.GetValue(); }
            set { _counter.SetValue(value); }
        }
    
        private PropertyValue<List<CodeReviewParticipant>?> _participants = new PropertyValue<List<CodeReviewParticipant>?>(nameof(CodeReviewRecord), nameof(Participants));
        
        [JsonPropertyName("participants")]
        public List<CodeReviewParticipant>? Participants
        {
            get { return _participants.GetValue(); }
            set { _participants.SetValue(value); }
        }
    
        private PropertyValue<string> _projectId = new PropertyValue<string>(nameof(CodeReviewRecord), nameof(ProjectId));
        
        [Required]
        [JsonPropertyName("projectId")]
        public string ProjectId
        {
            get { return _projectId.GetValue(); }
            set { _projectId.SetValue(value); }
        }
    
        private PropertyValue<List<CodeReviewParticipantRecord>> _reviewers = new PropertyValue<List<CodeReviewParticipantRecord>>(nameof(CodeReviewRecord), nameof(Reviewers));
        
        [Required]
        [JsonPropertyName("reviewers")]
        public List<CodeReviewParticipantRecord> Reviewers
        {
            get { return _reviewers.GetValue(); }
            set { _reviewers.SetValue(value); }
        }
    
        private PropertyValue<List<CodeReviewParticipantRecord>> _watchers = new PropertyValue<List<CodeReviewParticipantRecord>>(nameof(CodeReviewRecord), nameof(Watchers));
        
        [Required]
        [JsonPropertyName("watchers")]
        public List<CodeReviewParticipantRecord> Watchers
        {
            get { return _watchers.GetValue(); }
            set { _watchers.SetValue(value); }
        }
    
        public virtual void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _authors.SetAccessPath(path, validateHasBeenSet);
            _count.SetAccessPath(path, validateHasBeenSet);
            _counter.SetAccessPath(path, validateHasBeenSet);
            _participants.SetAccessPath(path, validateHasBeenSet);
            _projectId.SetAccessPath(path, validateHasBeenSet);
            _reviewers.SetAccessPath(path, validateHasBeenSet);
            _watchers.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
