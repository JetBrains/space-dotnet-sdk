// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class DocumentFolderRecordDto
         : IPropagatePropertyAccessPath
    {
        public DocumentFolderRecordDto() { }
        
        public DocumentFolderRecordDto(string id, bool archived, string name, List<DocumentFolderRecordDto> subfolders, List<DRDraftHeaderDto> documents, TDMemberProfileDto owner, string alias, DocumentFolderRecordDto? parent = null)
        {
            Id = id;
            Archived = archived;
            Name = name;
            Parent = parent;
            Subfolders = subfolders;
            Documents = documents;
            Owner = owner;
            Alias = alias;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(DocumentFolderRecordDto), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get { return _id.GetValue(); }
            set { _id.SetValue(value); }
        }
    
        private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(DocumentFolderRecordDto), nameof(Archived));
        
        [Required]
        [JsonPropertyName("archived")]
        public bool Archived
        {
            get { return _archived.GetValue(); }
            set { _archived.SetValue(value); }
        }
    
        private PropertyValue<string> _name = new PropertyValue<string>(nameof(DocumentFolderRecordDto), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public string Name
        {
            get { return _name.GetValue(); }
            set { _name.SetValue(value); }
        }
    
        private PropertyValue<DocumentFolderRecordDto?> _parent = new PropertyValue<DocumentFolderRecordDto?>(nameof(DocumentFolderRecordDto), nameof(Parent));
        
        [JsonPropertyName("parent")]
        public DocumentFolderRecordDto? Parent
        {
            get { return _parent.GetValue(); }
            set { _parent.SetValue(value); }
        }
    
        private PropertyValue<List<DocumentFolderRecordDto>> _subfolders = new PropertyValue<List<DocumentFolderRecordDto>>(nameof(DocumentFolderRecordDto), nameof(Subfolders));
        
        [Required]
        [JsonPropertyName("subfolders")]
        public List<DocumentFolderRecordDto> Subfolders
        {
            get { return _subfolders.GetValue(); }
            set { _subfolders.SetValue(value); }
        }
    
        private PropertyValue<List<DRDraftHeaderDto>> _documents = new PropertyValue<List<DRDraftHeaderDto>>(nameof(DocumentFolderRecordDto), nameof(Documents));
        
        [Required]
        [JsonPropertyName("documents")]
        public List<DRDraftHeaderDto> Documents
        {
            get { return _documents.GetValue(); }
            set { _documents.SetValue(value); }
        }
    
        private PropertyValue<TDMemberProfileDto> _owner = new PropertyValue<TDMemberProfileDto>(nameof(DocumentFolderRecordDto), nameof(Owner));
        
        [Required]
        [JsonPropertyName("owner")]
        public TDMemberProfileDto Owner
        {
            get { return _owner.GetValue(); }
            set { _owner.SetValue(value); }
        }
    
        private PropertyValue<string> _alias = new PropertyValue<string>(nameof(DocumentFolderRecordDto), nameof(Alias));
        
        [Required]
        [JsonPropertyName("alias")]
        public string Alias
        {
            get { return _alias.GetValue(); }
            set { _alias.SetValue(value); }
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _archived.SetAccessPath(path, validateHasBeenSet);
            _name.SetAccessPath(path, validateHasBeenSet);
            _parent.SetAccessPath(path, validateHasBeenSet);
            _subfolders.SetAccessPath(path, validateHasBeenSet);
            _documents.SetAccessPath(path, validateHasBeenSet);
            _owner.SetAccessPath(path, validateHasBeenSet);
            _alias.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
