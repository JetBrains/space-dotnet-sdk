// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class ESOIDCAuthModuleSettingsDto
         : ESOAuth2AuthModuleSettingsDto, IClassNameConvertible, IPropagatePropertyAccessPath
    {
        [JsonPropertyName("className")]
        public override string? ClassName => "ES_OIDCAuthModuleSettings";
        
        public ESOIDCAuthModuleSettingsDto() { }
        
        public ESOIDCAuthModuleSettingsDto(string clientId, string clientSecret, bool registerNewUsers, string issuer, string authorizationEndpoint, string tokenEndpoint, string tokenKeysEndpoint, string userInfoEndpoint, List<string> domains, string? discoveryUrl = null)
        {
            ClientId = clientId;
            ClientSecret = clientSecret;
            RegisterNewUsers = registerNewUsers;
            DiscoveryUrl = discoveryUrl;
            Issuer = issuer;
            AuthorizationEndpoint = authorizationEndpoint;
            TokenEndpoint = tokenEndpoint;
            TokenKeysEndpoint = tokenKeysEndpoint;
            UserInfoEndpoint = userInfoEndpoint;
            Domains = domains;
        }
        
        private PropertyValue<string> _clientId = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettingsDto), nameof(ClientId));
        
        [Required]
        [JsonPropertyName("clientId")]
        public string ClientId
        {
            get { return _clientId.GetValue(); }
            set { _clientId.SetValue(value); }
        }
    
        private PropertyValue<string> _clientSecret = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettingsDto), nameof(ClientSecret));
        
        [Required]
        [JsonPropertyName("clientSecret")]
        public string ClientSecret
        {
            get { return _clientSecret.GetValue(); }
            set { _clientSecret.SetValue(value); }
        }
    
        private PropertyValue<bool> _registerNewUsers = new PropertyValue<bool>(nameof(ESOIDCAuthModuleSettingsDto), nameof(RegisterNewUsers));
        
        [Required]
        [JsonPropertyName("registerNewUsers")]
        public bool RegisterNewUsers
        {
            get { return _registerNewUsers.GetValue(); }
            set { _registerNewUsers.SetValue(value); }
        }
    
        private PropertyValue<string?> _discoveryUrl = new PropertyValue<string?>(nameof(ESOIDCAuthModuleSettingsDto), nameof(DiscoveryUrl));
        
        [JsonPropertyName("discoveryUrl")]
        public string? DiscoveryUrl
        {
            get { return _discoveryUrl.GetValue(); }
            set { _discoveryUrl.SetValue(value); }
        }
    
        private PropertyValue<string> _issuer = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettingsDto), nameof(Issuer));
        
        [Required]
        [JsonPropertyName("issuer")]
        public string Issuer
        {
            get { return _issuer.GetValue(); }
            set { _issuer.SetValue(value); }
        }
    
        private PropertyValue<string> _authorizationEndpoint = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettingsDto), nameof(AuthorizationEndpoint));
        
        [Required]
        [JsonPropertyName("authorizationEndpoint")]
        public string AuthorizationEndpoint
        {
            get { return _authorizationEndpoint.GetValue(); }
            set { _authorizationEndpoint.SetValue(value); }
        }
    
        private PropertyValue<string> _tokenEndpoint = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettingsDto), nameof(TokenEndpoint));
        
        [Required]
        [JsonPropertyName("tokenEndpoint")]
        public string TokenEndpoint
        {
            get { return _tokenEndpoint.GetValue(); }
            set { _tokenEndpoint.SetValue(value); }
        }
    
        private PropertyValue<string> _tokenKeysEndpoint = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettingsDto), nameof(TokenKeysEndpoint));
        
        [Required]
        [JsonPropertyName("tokenKeysEndpoint")]
        public string TokenKeysEndpoint
        {
            get { return _tokenKeysEndpoint.GetValue(); }
            set { _tokenKeysEndpoint.SetValue(value); }
        }
    
        private PropertyValue<string> _userInfoEndpoint = new PropertyValue<string>(nameof(ESOIDCAuthModuleSettingsDto), nameof(UserInfoEndpoint));
        
        [Required]
        [JsonPropertyName("userInfoEndpoint")]
        public string UserInfoEndpoint
        {
            get { return _userInfoEndpoint.GetValue(); }
            set { _userInfoEndpoint.SetValue(value); }
        }
    
        private PropertyValue<List<string>> _domains = new PropertyValue<List<string>>(nameof(ESOIDCAuthModuleSettingsDto), nameof(Domains));
        
        [Required]
        [JsonPropertyName("domains")]
        public List<string> Domains
        {
            get { return _domains.GetValue(); }
            set { _domains.SetValue(value); }
        }
    
        public override void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _clientId.SetAccessPath(path, validateHasBeenSet);
            _clientSecret.SetAccessPath(path, validateHasBeenSet);
            _registerNewUsers.SetAccessPath(path, validateHasBeenSet);
            _discoveryUrl.SetAccessPath(path, validateHasBeenSet);
            _issuer.SetAccessPath(path, validateHasBeenSet);
            _authorizationEndpoint.SetAccessPath(path, validateHasBeenSet);
            _tokenEndpoint.SetAccessPath(path, validateHasBeenSet);
            _tokenKeysEndpoint.SetAccessPath(path, validateHasBeenSet);
            _userInfoEndpoint.SetAccessPath(path, validateHasBeenSet);
            _domains.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
