// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class MeCodeReviewParticipantRecord
         : IPropagatePropertyAccessPath
    {
        public MeCodeReviewParticipantRecord() { }
        
        public MeCodeReviewParticipantRecord(string id, CodeReviewRecord review, CodeReviewParticipants participants, CodeReviewPendingMessageCounter pendingCounter, bool archived, CodeReviewParticipantRole? role = null, bool? theirTurn = null, ReviewerState? reviewerState = null)
        {
            Id = id;
            Role = role;
            IsTheirTurn = theirTurn;
            ReviewerState = reviewerState;
            Review = review;
            Participants = participants;
            PendingCounter = pendingCounter;
            IsArchived = archived;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(MeCodeReviewParticipantRecord), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get => _id.GetValue();
            set => _id.SetValue(value);
        }
    
        private PropertyValue<CodeReviewParticipantRole?> _role = new PropertyValue<CodeReviewParticipantRole?>(nameof(MeCodeReviewParticipantRecord), nameof(Role));
        
        [JsonPropertyName("role")]
        public CodeReviewParticipantRole? Role
        {
            get => _role.GetValue();
            set => _role.SetValue(value);
        }
    
        private PropertyValue<bool?> _theirTurn = new PropertyValue<bool?>(nameof(MeCodeReviewParticipantRecord), nameof(IsTheirTurn));
        
        [JsonPropertyName("theirTurn")]
        public bool? IsTheirTurn
        {
            get => _theirTurn.GetValue();
            set => _theirTurn.SetValue(value);
        }
    
        private PropertyValue<ReviewerState?> _reviewerState = new PropertyValue<ReviewerState?>(nameof(MeCodeReviewParticipantRecord), nameof(ReviewerState));
        
        [JsonPropertyName("reviewerState")]
        public ReviewerState? ReviewerState
        {
            get => _reviewerState.GetValue();
            set => _reviewerState.SetValue(value);
        }
    
        private PropertyValue<CodeReviewRecord> _review = new PropertyValue<CodeReviewRecord>(nameof(MeCodeReviewParticipantRecord), nameof(Review));
        
        [Required]
        [JsonPropertyName("review")]
        public CodeReviewRecord Review
        {
            get => _review.GetValue();
            set => _review.SetValue(value);
        }
    
        private PropertyValue<CodeReviewParticipants> _participants = new PropertyValue<CodeReviewParticipants>(nameof(MeCodeReviewParticipantRecord), nameof(Participants));
        
        [Required]
        [JsonPropertyName("participants")]
        public CodeReviewParticipants Participants
        {
            get => _participants.GetValue();
            set => _participants.SetValue(value);
        }
    
        private PropertyValue<CodeReviewPendingMessageCounter> _pendingCounter = new PropertyValue<CodeReviewPendingMessageCounter>(nameof(MeCodeReviewParticipantRecord), nameof(PendingCounter));
        
        [Required]
        [JsonPropertyName("pendingCounter")]
        public CodeReviewPendingMessageCounter PendingCounter
        {
            get => _pendingCounter.GetValue();
            set => _pendingCounter.SetValue(value);
        }
    
        private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(MeCodeReviewParticipantRecord), nameof(IsArchived));
        
        [Required]
        [JsonPropertyName("archived")]
        public bool IsArchived
        {
            get => _archived.GetValue();
            set => _archived.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _role.SetAccessPath(path, validateHasBeenSet);
            _theirTurn.SetAccessPath(path, validateHasBeenSet);
            _reviewerState.SetAccessPath(path, validateHasBeenSet);
            _review.SetAccessPath(path, validateHasBeenSet);
            _participants.SetAccessPath(path, validateHasBeenSet);
            _pendingCounter.SetAccessPath(path, validateHasBeenSet);
            _archived.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
