// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class ArticleRecord
         : IPropagatePropertyAccessPath
    {
        public ArticleRecord() { }
        
        public ArticleRecord(string id, bool archived, string title, DateTime created, TDMemberProfile author, List<BGArticleAlias> aliases, M2ChannelRecord channel, M2ChannelContentRecord channelContent, string content, bool editable, string preview, List<ArticleMarkdownImage> previewImages, AllReactionsToItemRecord reactions, TDMemberProfile? archivedBy = null, DateTime? archivedAt = null, bool? cut = null, MeetingRecord? @event = null, ExternalEntityInfoRecord? externalEntityInfo = null, TDLocation? location = null, List<TDLocation>? locations = null, PRProject? project = null, TDTeam? team = null, List<TDTeam>? teams = null, int? wordsNumber = null)
        {
            Id = id;
            IsArchived = archived;
            Title = title;
            Created = created;
            Author = author;
            Aliases = aliases;
            ArchivedBy = archivedBy;
            ArchivedAt = archivedAt;
            Channel = channel;
            ChannelContent = channelContent;
            Content = content;
            IsCut = cut;
            IsEditable = editable;
            Event = @event;
            ExternalEntityInfo = externalEntityInfo;
            Location = location;
            Locations = locations;
            Preview = preview;
            PreviewImages = previewImages;
            Project = project;
            Reactions = reactions;
            Team = team;
            Teams = teams;
            WordsNumber = wordsNumber;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(ArticleRecord), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get => _id.GetValue();
            set => _id.SetValue(value);
        }
    
        private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(ArticleRecord), nameof(IsArchived));
        
        [Required]
        [JsonPropertyName("archived")]
        public bool IsArchived
        {
            get => _archived.GetValue();
            set => _archived.SetValue(value);
        }
    
        private PropertyValue<string> _title = new PropertyValue<string>(nameof(ArticleRecord), nameof(Title));
        
        [Required]
        [JsonPropertyName("title")]
        public string Title
        {
            get => _title.GetValue();
            set => _title.SetValue(value);
        }
    
        private PropertyValue<DateTime> _created = new PropertyValue<DateTime>(nameof(ArticleRecord), nameof(Created));
        
        [Required]
        [JsonPropertyName("created")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime Created
        {
            get => _created.GetValue();
            set => _created.SetValue(value);
        }
    
        private PropertyValue<TDMemberProfile> _author = new PropertyValue<TDMemberProfile>(nameof(ArticleRecord), nameof(Author));
        
        [Required]
        [JsonPropertyName("author")]
        public TDMemberProfile Author
        {
            get => _author.GetValue();
            set => _author.SetValue(value);
        }
    
        private PropertyValue<List<BGArticleAlias>> _aliases = new PropertyValue<List<BGArticleAlias>>(nameof(ArticleRecord), nameof(Aliases));
        
        [Required]
        [JsonPropertyName("aliases")]
        public List<BGArticleAlias> Aliases
        {
            get => _aliases.GetValue();
            set => _aliases.SetValue(value);
        }
    
        private PropertyValue<TDMemberProfile?> _archivedBy = new PropertyValue<TDMemberProfile?>(nameof(ArticleRecord), nameof(ArchivedBy));
        
        [JsonPropertyName("archivedBy")]
        public TDMemberProfile? ArchivedBy
        {
            get => _archivedBy.GetValue();
            set => _archivedBy.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _archivedAt = new PropertyValue<DateTime?>(nameof(ArticleRecord), nameof(ArchivedAt));
        
        [JsonPropertyName("archivedAt")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime? ArchivedAt
        {
            get => _archivedAt.GetValue();
            set => _archivedAt.SetValue(value);
        }
    
        private PropertyValue<M2ChannelRecord> _channel = new PropertyValue<M2ChannelRecord>(nameof(ArticleRecord), nameof(Channel));
        
        [Required]
        [JsonPropertyName("channel")]
        public M2ChannelRecord Channel
        {
            get => _channel.GetValue();
            set => _channel.SetValue(value);
        }
    
        private PropertyValue<M2ChannelContentRecord> _channelContent = new PropertyValue<M2ChannelContentRecord>(nameof(ArticleRecord), nameof(ChannelContent));
        
        [Required]
        [JsonPropertyName("channelContent")]
        public M2ChannelContentRecord ChannelContent
        {
            get => _channelContent.GetValue();
            set => _channelContent.SetValue(value);
        }
    
        private PropertyValue<string> _content = new PropertyValue<string>(nameof(ArticleRecord), nameof(Content));
        
        [Required]
        [JsonPropertyName("content")]
        public string Content
        {
            get => _content.GetValue();
            set => _content.SetValue(value);
        }
    
        private PropertyValue<bool?> _cut = new PropertyValue<bool?>(nameof(ArticleRecord), nameof(IsCut));
        
        [JsonPropertyName("cut")]
        public bool? IsCut
        {
            get => _cut.GetValue();
            set => _cut.SetValue(value);
        }
    
        private PropertyValue<bool> _editable = new PropertyValue<bool>(nameof(ArticleRecord), nameof(IsEditable));
        
        [Required]
        [JsonPropertyName("editable")]
        public bool IsEditable
        {
            get => _editable.GetValue();
            set => _editable.SetValue(value);
        }
    
        private PropertyValue<MeetingRecord?> _event = new PropertyValue<MeetingRecord?>(nameof(ArticleRecord), nameof(Event));
        
        [JsonPropertyName("event")]
        public MeetingRecord? Event
        {
            get => _event.GetValue();
            set => _event.SetValue(value);
        }
    
        private PropertyValue<ExternalEntityInfoRecord?> _externalEntityInfo = new PropertyValue<ExternalEntityInfoRecord?>(nameof(ArticleRecord), nameof(ExternalEntityInfo));
        
        [JsonPropertyName("externalEntityInfo")]
        public ExternalEntityInfoRecord? ExternalEntityInfo
        {
            get => _externalEntityInfo.GetValue();
            set => _externalEntityInfo.SetValue(value);
        }
    
        private PropertyValue<TDLocation?> _location = new PropertyValue<TDLocation?>(nameof(ArticleRecord), nameof(Location));
        
        [JsonPropertyName("location")]
        public TDLocation? Location
        {
            get => _location.GetValue();
            set => _location.SetValue(value);
        }
    
        private PropertyValue<List<TDLocation>?> _locations = new PropertyValue<List<TDLocation>?>(nameof(ArticleRecord), nameof(Locations));
        
        [JsonPropertyName("locations")]
        public List<TDLocation>? Locations
        {
            get => _locations.GetValue();
            set => _locations.SetValue(value);
        }
    
        private PropertyValue<string> _preview = new PropertyValue<string>(nameof(ArticleRecord), nameof(Preview));
        
        [Required]
        [JsonPropertyName("preview")]
        public string Preview
        {
            get => _preview.GetValue();
            set => _preview.SetValue(value);
        }
    
        private PropertyValue<List<ArticleMarkdownImage>> _previewImages = new PropertyValue<List<ArticleMarkdownImage>>(nameof(ArticleRecord), nameof(PreviewImages));
        
        [Required]
        [JsonPropertyName("previewImages")]
        public List<ArticleMarkdownImage> PreviewImages
        {
            get => _previewImages.GetValue();
            set => _previewImages.SetValue(value);
        }
    
        private PropertyValue<PRProject?> _project = new PropertyValue<PRProject?>(nameof(ArticleRecord), nameof(Project));
        
        [JsonPropertyName("project")]
        public PRProject? Project
        {
            get => _project.GetValue();
            set => _project.SetValue(value);
        }
    
        private PropertyValue<AllReactionsToItemRecord> _reactions = new PropertyValue<AllReactionsToItemRecord>(nameof(ArticleRecord), nameof(Reactions));
        
        [Required]
        [JsonPropertyName("reactions")]
        public AllReactionsToItemRecord Reactions
        {
            get => _reactions.GetValue();
            set => _reactions.SetValue(value);
        }
    
        private PropertyValue<TDTeam?> _team = new PropertyValue<TDTeam?>(nameof(ArticleRecord), nameof(Team));
        
        [JsonPropertyName("team")]
        public TDTeam? Team
        {
            get => _team.GetValue();
            set => _team.SetValue(value);
        }
    
        private PropertyValue<List<TDTeam>?> _teams = new PropertyValue<List<TDTeam>?>(nameof(ArticleRecord), nameof(Teams));
        
        [JsonPropertyName("teams")]
        public List<TDTeam>? Teams
        {
            get => _teams.GetValue();
            set => _teams.SetValue(value);
        }
    
        private PropertyValue<int?> _wordsNumber = new PropertyValue<int?>(nameof(ArticleRecord), nameof(WordsNumber));
        
        [JsonPropertyName("wordsNumber")]
        public int? WordsNumber
        {
            get => _wordsNumber.GetValue();
            set => _wordsNumber.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _archived.SetAccessPath(path, validateHasBeenSet);
            _title.SetAccessPath(path, validateHasBeenSet);
            _created.SetAccessPath(path, validateHasBeenSet);
            _author.SetAccessPath(path, validateHasBeenSet);
            _aliases.SetAccessPath(path, validateHasBeenSet);
            _archivedBy.SetAccessPath(path, validateHasBeenSet);
            _archivedAt.SetAccessPath(path, validateHasBeenSet);
            _channel.SetAccessPath(path, validateHasBeenSet);
            _channelContent.SetAccessPath(path, validateHasBeenSet);
            _content.SetAccessPath(path, validateHasBeenSet);
            _cut.SetAccessPath(path, validateHasBeenSet);
            _editable.SetAccessPath(path, validateHasBeenSet);
            _event.SetAccessPath(path, validateHasBeenSet);
            _externalEntityInfo.SetAccessPath(path, validateHasBeenSet);
            _location.SetAccessPath(path, validateHasBeenSet);
            _locations.SetAccessPath(path, validateHasBeenSet);
            _preview.SetAccessPath(path, validateHasBeenSet);
            _previewImages.SetAccessPath(path, validateHasBeenSet);
            _project.SetAccessPath(path, validateHasBeenSet);
            _reactions.SetAccessPath(path, validateHasBeenSet);
            _team.SetAccessPath(path, validateHasBeenSet);
            _teams.SetAccessPath(path, validateHasBeenSet);
            _wordsNumber.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
