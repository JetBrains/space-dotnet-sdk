// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class PermissionComparisonEntry
         : IPropagatePropertyAccessPath
    {
        public PermissionComparisonEntry() { }
        
        public PermissionComparisonEntry(int principalIndex, int rightIndex, bool allTargets1, List<int> targetIndices1, bool allTargets2, List<int> targetIndices2)
        {
            PrincipalIndex = principalIndex;
            RightIndex = rightIndex;
            IsAllTargets1 = allTargets1;
            TargetIndices1 = targetIndices1;
            IsAllTargets2 = allTargets2;
            TargetIndices2 = targetIndices2;
        }
        
        private PropertyValue<int> _principalIndex = new PropertyValue<int>(nameof(PermissionComparisonEntry), nameof(PrincipalIndex));
        
        [Required]
        [JsonPropertyName("principalIndex")]
        public int PrincipalIndex
        {
            get => _principalIndex.GetValue();
            set => _principalIndex.SetValue(value);
        }
    
        private PropertyValue<int> _rightIndex = new PropertyValue<int>(nameof(PermissionComparisonEntry), nameof(RightIndex));
        
        [Required]
        [JsonPropertyName("rightIndex")]
        public int RightIndex
        {
            get => _rightIndex.GetValue();
            set => _rightIndex.SetValue(value);
        }
    
        private PropertyValue<bool> _allTargets1 = new PropertyValue<bool>(nameof(PermissionComparisonEntry), nameof(IsAllTargets1));
        
        [Required]
        [JsonPropertyName("allTargets1")]
        public bool IsAllTargets1
        {
            get => _allTargets1.GetValue();
            set => _allTargets1.SetValue(value);
        }
    
        private PropertyValue<List<int>> _targetIndices1 = new PropertyValue<List<int>>(nameof(PermissionComparisonEntry), nameof(TargetIndices1));
        
        [Required]
        [JsonPropertyName("targetIndices1")]
        public List<int> TargetIndices1
        {
            get => _targetIndices1.GetValue();
            set => _targetIndices1.SetValue(value);
        }
    
        private PropertyValue<bool> _allTargets2 = new PropertyValue<bool>(nameof(PermissionComparisonEntry), nameof(IsAllTargets2));
        
        [Required]
        [JsonPropertyName("allTargets2")]
        public bool IsAllTargets2
        {
            get => _allTargets2.GetValue();
            set => _allTargets2.SetValue(value);
        }
    
        private PropertyValue<List<int>> _targetIndices2 = new PropertyValue<List<int>>(nameof(PermissionComparisonEntry), nameof(TargetIndices2));
        
        [Required]
        [JsonPropertyName("targetIndices2")]
        public List<int> TargetIndices2
        {
            get => _targetIndices2.GetValue();
            set => _targetIndices2.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _principalIndex.SetAccessPath(path, validateHasBeenSet);
            _rightIndex.SetAccessPath(path, validateHasBeenSet);
            _allTargets1.SetAccessPath(path, validateHasBeenSet);
            _targetIndices1.SetAccessPath(path, validateHasBeenSet);
            _allTargets2.SetAccessPath(path, validateHasBeenSet);
            _targetIndices2.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
