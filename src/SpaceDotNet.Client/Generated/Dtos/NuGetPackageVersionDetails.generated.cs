// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class NuGetPackageVersionDetails
         : PackageVersionDetails, IClassNameConvertible, IPropagatePropertyAccessPath
    {
        [JsonPropertyName("className")]
        public  string? ClassName => "NuGetPackageVersionDetails";
        
        public NuGetPackageVersionDetails() { }
        
        public NuGetPackageVersionDetails(PackageType type, string repository, string name, string version, long created, long downloads, long diskSize, Dictionary<string, string> metadata, List<NuGetDependencyGroup> dependencies, List<string>? tags = null, long? accessed = null, CPrincipal? author = null, List<CPrincipal>? authors = null, string? description = null, string? projectUrl = null, string? license = null, string? licenseUrl = null, string? icon = null, string? title = null)
        {
            Type = type;
            Repository = repository;
            Name = name;
            Version = version;
            Tags = tags;
            Created = created;
            Accessed = accessed;
            Downloads = downloads;
            DiskSize = diskSize;
            Author = author;
            Authors = authors;
            Metadata = metadata;
            Description = description;
            ProjectUrl = projectUrl;
            License = license;
            LicenseUrl = licenseUrl;
            Icon = icon;
            Title = title;
            Dependencies = dependencies;
        }
        
        private PropertyValue<PackageType> _type = new PropertyValue<PackageType>(nameof(NuGetPackageVersionDetails), nameof(Type));
        
        [Required]
        [JsonPropertyName("type")]
        public PackageType Type
        {
            get { return _type.GetValue(); }
            set { _type.SetValue(value); }
        }
    
        private PropertyValue<string> _repository = new PropertyValue<string>(nameof(NuGetPackageVersionDetails), nameof(Repository));
        
        [Required]
        [JsonPropertyName("repository")]
        public string Repository
        {
            get { return _repository.GetValue(); }
            set { _repository.SetValue(value); }
        }
    
        private PropertyValue<string> _name = new PropertyValue<string>(nameof(NuGetPackageVersionDetails), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public string Name
        {
            get { return _name.GetValue(); }
            set { _name.SetValue(value); }
        }
    
        private PropertyValue<string> _version = new PropertyValue<string>(nameof(NuGetPackageVersionDetails), nameof(Version));
        
        [Required]
        [JsonPropertyName("version")]
        public string Version
        {
            get { return _version.GetValue(); }
            set { _version.SetValue(value); }
        }
    
        private PropertyValue<List<string>?> _tags = new PropertyValue<List<string>?>(nameof(NuGetPackageVersionDetails), nameof(Tags));
        
        [JsonPropertyName("tags")]
        public List<string>? Tags
        {
            get { return _tags.GetValue(); }
            set { _tags.SetValue(value); }
        }
    
        private PropertyValue<long> _created = new PropertyValue<long>(nameof(NuGetPackageVersionDetails), nameof(Created));
        
        [Required]
        [JsonPropertyName("created")]
        public long Created
        {
            get { return _created.GetValue(); }
            set { _created.SetValue(value); }
        }
    
        private PropertyValue<long?> _accessed = new PropertyValue<long?>(nameof(NuGetPackageVersionDetails), nameof(Accessed));
        
        [JsonPropertyName("accessed")]
        public long? Accessed
        {
            get { return _accessed.GetValue(); }
            set { _accessed.SetValue(value); }
        }
    
        private PropertyValue<long> _downloads = new PropertyValue<long>(nameof(NuGetPackageVersionDetails), nameof(Downloads));
        
        [Required]
        [JsonPropertyName("downloads")]
        public long Downloads
        {
            get { return _downloads.GetValue(); }
            set { _downloads.SetValue(value); }
        }
    
        private PropertyValue<long> _diskSize = new PropertyValue<long>(nameof(NuGetPackageVersionDetails), nameof(DiskSize));
        
        [Required]
        [JsonPropertyName("diskSize")]
        public long DiskSize
        {
            get { return _diskSize.GetValue(); }
            set { _diskSize.SetValue(value); }
        }
    
        private PropertyValue<CPrincipal?> _author = new PropertyValue<CPrincipal?>(nameof(NuGetPackageVersionDetails), nameof(Author));
        
        [JsonPropertyName("author")]
        public CPrincipal? Author
        {
            get { return _author.GetValue(); }
            set { _author.SetValue(value); }
        }
    
        private PropertyValue<List<CPrincipal>?> _authors = new PropertyValue<List<CPrincipal>?>(nameof(NuGetPackageVersionDetails), nameof(Authors));
        
        [JsonPropertyName("authors")]
        public List<CPrincipal>? Authors
        {
            get { return _authors.GetValue(); }
            set { _authors.SetValue(value); }
        }
    
        private PropertyValue<Dictionary<string, string>> _metadata = new PropertyValue<Dictionary<string, string>>(nameof(NuGetPackageVersionDetails), nameof(Metadata));
        
        [Required]
        [JsonPropertyName("metadata")]
        public Dictionary<string, string> Metadata
        {
            get { return _metadata.GetValue(); }
            set { _metadata.SetValue(value); }
        }
    
        private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(NuGetPackageVersionDetails), nameof(Description));
        
        [JsonPropertyName("description")]
        public string? Description
        {
            get { return _description.GetValue(); }
            set { _description.SetValue(value); }
        }
    
        private PropertyValue<string?> _projectUrl = new PropertyValue<string?>(nameof(NuGetPackageVersionDetails), nameof(ProjectUrl));
        
        [JsonPropertyName("projectUrl")]
        public string? ProjectUrl
        {
            get { return _projectUrl.GetValue(); }
            set { _projectUrl.SetValue(value); }
        }
    
        private PropertyValue<string?> _license = new PropertyValue<string?>(nameof(NuGetPackageVersionDetails), nameof(License));
        
        [JsonPropertyName("license")]
        public string? License
        {
            get { return _license.GetValue(); }
            set { _license.SetValue(value); }
        }
    
        private PropertyValue<string?> _licenseUrl = new PropertyValue<string?>(nameof(NuGetPackageVersionDetails), nameof(LicenseUrl));
        
        [JsonPropertyName("licenseUrl")]
        public string? LicenseUrl
        {
            get { return _licenseUrl.GetValue(); }
            set { _licenseUrl.SetValue(value); }
        }
    
        private PropertyValue<string?> _icon = new PropertyValue<string?>(nameof(NuGetPackageVersionDetails), nameof(Icon));
        
        [JsonPropertyName("icon")]
        public string? Icon
        {
            get { return _icon.GetValue(); }
            set { _icon.SetValue(value); }
        }
    
        private PropertyValue<string?> _title = new PropertyValue<string?>(nameof(NuGetPackageVersionDetails), nameof(Title));
        
        [JsonPropertyName("title")]
        public string? Title
        {
            get { return _title.GetValue(); }
            set { _title.SetValue(value); }
        }
    
        private PropertyValue<List<NuGetDependencyGroup>> _dependencies = new PropertyValue<List<NuGetDependencyGroup>>(nameof(NuGetPackageVersionDetails), nameof(Dependencies));
        
        [Required]
        [JsonPropertyName("dependencies")]
        public List<NuGetDependencyGroup> Dependencies
        {
            get { return _dependencies.GetValue(); }
            set { _dependencies.SetValue(value); }
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _type.SetAccessPath(path, validateHasBeenSet);
            _repository.SetAccessPath(path, validateHasBeenSet);
            _name.SetAccessPath(path, validateHasBeenSet);
            _version.SetAccessPath(path, validateHasBeenSet);
            _tags.SetAccessPath(path, validateHasBeenSet);
            _created.SetAccessPath(path, validateHasBeenSet);
            _accessed.SetAccessPath(path, validateHasBeenSet);
            _downloads.SetAccessPath(path, validateHasBeenSet);
            _diskSize.SetAccessPath(path, validateHasBeenSet);
            _author.SetAccessPath(path, validateHasBeenSet);
            _authors.SetAccessPath(path, validateHasBeenSet);
            _metadata.SetAccessPath(path, validateHasBeenSet);
            _description.SetAccessPath(path, validateHasBeenSet);
            _projectUrl.SetAccessPath(path, validateHasBeenSet);
            _license.SetAccessPath(path, validateHasBeenSet);
            _licenseUrl.SetAccessPath(path, validateHasBeenSet);
            _icon.SetAccessPath(path, validateHasBeenSet);
            _title.SetAccessPath(path, validateHasBeenSet);
            _dependencies.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
