// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class ContainerImageAnnotationDto
         : IPropagatePropertyAccessPath
    {
        public ContainerImageAnnotationDto() { }
        
        public ContainerImageAnnotationDto(long? created = null, string? buildName = null, string? buildUrl = null, string? revision = null, string? vendor = null, string? documentationUrl = null, string? licenses = null)
        {
            Created = created;
            BuildName = buildName;
            BuildUrl = buildUrl;
            Revision = revision;
            Vendor = vendor;
            DocumentationUrl = documentationUrl;
            Licenses = licenses;
        }
        
        private PropertyValue<long?> _created = new PropertyValue<long?>(nameof(ContainerImageAnnotationDto), nameof(Created));
        
        [JsonPropertyName("created")]
        public long? Created
        {
            get { return _created.GetValue(); }
            set { _created.SetValue(value); }
        }
    
        private PropertyValue<string?> _buildName = new PropertyValue<string?>(nameof(ContainerImageAnnotationDto), nameof(BuildName));
        
        [JsonPropertyName("buildName")]
        public string? BuildName
        {
            get { return _buildName.GetValue(); }
            set { _buildName.SetValue(value); }
        }
    
        private PropertyValue<string?> _buildUrl = new PropertyValue<string?>(nameof(ContainerImageAnnotationDto), nameof(BuildUrl));
        
        [JsonPropertyName("buildUrl")]
        public string? BuildUrl
        {
            get { return _buildUrl.GetValue(); }
            set { _buildUrl.SetValue(value); }
        }
    
        private PropertyValue<string?> _revision = new PropertyValue<string?>(nameof(ContainerImageAnnotationDto), nameof(Revision));
        
        [JsonPropertyName("revision")]
        public string? Revision
        {
            get { return _revision.GetValue(); }
            set { _revision.SetValue(value); }
        }
    
        private PropertyValue<string?> _vendor = new PropertyValue<string?>(nameof(ContainerImageAnnotationDto), nameof(Vendor));
        
        [JsonPropertyName("vendor")]
        public string? Vendor
        {
            get { return _vendor.GetValue(); }
            set { _vendor.SetValue(value); }
        }
    
        private PropertyValue<string?> _documentationUrl = new PropertyValue<string?>(nameof(ContainerImageAnnotationDto), nameof(DocumentationUrl));
        
        [JsonPropertyName("documentationUrl")]
        public string? DocumentationUrl
        {
            get { return _documentationUrl.GetValue(); }
            set { _documentationUrl.SetValue(value); }
        }
    
        private PropertyValue<string?> _licenses = new PropertyValue<string?>(nameof(ContainerImageAnnotationDto), nameof(Licenses));
        
        [JsonPropertyName("licenses")]
        public string? Licenses
        {
            get { return _licenses.GetValue(); }
            set { _licenses.SetValue(value); }
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _created.SetAccessPath(path, validateHasBeenSet);
            _buildName.SetAccessPath(path, validateHasBeenSet);
            _buildUrl.SetAccessPath(path, validateHasBeenSet);
            _revision.SetAccessPath(path, validateHasBeenSet);
            _vendor.SetAccessPath(path, validateHasBeenSet);
            _documentationUrl.SetAccessPath(path, validateHasBeenSet);
            _licenses.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
