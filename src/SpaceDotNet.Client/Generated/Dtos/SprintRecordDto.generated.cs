// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class SprintRecordDto
         : IPropagatePropertyAccessPath
    {
        public SprintRecordDto() { }
        
        public SprintRecordDto(string id, bool archived, BoardRecordDto board, string name, SprintState state, SpaceDate from, SpaceDate to, bool @default, string? description = null)
        {
            Id = id;
            Archived = archived;
            Board = board;
            Name = name;
            State = state;
            From = from;
            To = to;
            Default = @default;
            Description = description;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(SprintRecordDto), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get { return _id.GetValue(); }
            set { _id.SetValue(value); }
        }
    
        private PropertyValue<bool> _archived = new PropertyValue<bool>(nameof(SprintRecordDto), nameof(Archived));
        
        [Required]
        [JsonPropertyName("archived")]
        public bool Archived
        {
            get { return _archived.GetValue(); }
            set { _archived.SetValue(value); }
        }
    
        private PropertyValue<BoardRecordDto> _board = new PropertyValue<BoardRecordDto>(nameof(SprintRecordDto), nameof(Board));
        
        [Required]
        [JsonPropertyName("board")]
        public BoardRecordDto Board
        {
            get { return _board.GetValue(); }
            set { _board.SetValue(value); }
        }
    
        private PropertyValue<string> _name = new PropertyValue<string>(nameof(SprintRecordDto), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public string Name
        {
            get { return _name.GetValue(); }
            set { _name.SetValue(value); }
        }
    
        private PropertyValue<SprintState> _state = new PropertyValue<SprintState>(nameof(SprintRecordDto), nameof(State));
        
        [Required]
        [JsonPropertyName("state")]
        public SprintState State
        {
            get { return _state.GetValue(); }
            set { _state.SetValue(value); }
        }
    
        private PropertyValue<SpaceDate> _from = new PropertyValue<SpaceDate>(nameof(SprintRecordDto), nameof(From));
        
        [Required]
        [JsonPropertyName("from")]
        public SpaceDate From
        {
            get { return _from.GetValue(); }
            set { _from.SetValue(value); }
        }
    
        private PropertyValue<SpaceDate> _to = new PropertyValue<SpaceDate>(nameof(SprintRecordDto), nameof(To));
        
        [Required]
        [JsonPropertyName("to")]
        public SpaceDate To
        {
            get { return _to.GetValue(); }
            set { _to.SetValue(value); }
        }
    
        private PropertyValue<bool> _default = new PropertyValue<bool>(nameof(SprintRecordDto), nameof(Default));
        
        [Required]
        [JsonPropertyName("default")]
        public bool Default
        {
            get { return _default.GetValue(); }
            set { _default.SetValue(value); }
        }
    
        private PropertyValue<string?> _description = new PropertyValue<string?>(nameof(SprintRecordDto), nameof(Description));
        
        [JsonPropertyName("description")]
        public string? Description
        {
            get { return _description.GetValue(); }
            set { _description.SetValue(value); }
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _archived.SetAccessPath(path, validateHasBeenSet);
            _board.SetAccessPath(path, validateHasBeenSet);
            _name.SetAccessPath(path, validateHasBeenSet);
            _state.SetAccessPath(path, validateHasBeenSet);
            _from.SetAccessPath(path, validateHasBeenSet);
            _to.SetAccessPath(path, validateHasBeenSet);
            _default.SetAccessPath(path, validateHasBeenSet);
            _description.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
