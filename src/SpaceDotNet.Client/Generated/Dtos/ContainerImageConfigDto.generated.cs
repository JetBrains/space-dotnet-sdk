// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class ContainerImageConfigDto
         : IPropagatePropertyAccessPath
    {
        public ContainerImageConfigDto() { }
        
        public ContainerImageConfigDto(string? userName = null, List<string>? ports = null, List<string>? volumes = null, List<string>? env = null, string? workingDir = null, string? entryPoint = null, string? cmd = null, List<string>? labels = null)
        {
            UserName = userName;
            Ports = ports;
            Volumes = volumes;
            Env = env;
            WorkingDir = workingDir;
            EntryPoint = entryPoint;
            Cmd = cmd;
            Labels = labels;
        }
        
        private PropertyValue<string?> _userName = new PropertyValue<string?>(nameof(ContainerImageConfigDto), nameof(UserName));
        
        [JsonPropertyName("userName")]
        public string? UserName
        {
            get { return _userName.GetValue(); }
            set { _userName.SetValue(value); }
        }
    
        private PropertyValue<List<string>?> _ports = new PropertyValue<List<string>?>(nameof(ContainerImageConfigDto), nameof(Ports));
        
        [JsonPropertyName("ports")]
        public List<string>? Ports
        {
            get { return _ports.GetValue(); }
            set { _ports.SetValue(value); }
        }
    
        private PropertyValue<List<string>?> _volumes = new PropertyValue<List<string>?>(nameof(ContainerImageConfigDto), nameof(Volumes));
        
        [JsonPropertyName("volumes")]
        public List<string>? Volumes
        {
            get { return _volumes.GetValue(); }
            set { _volumes.SetValue(value); }
        }
    
        private PropertyValue<List<string>?> _env = new PropertyValue<List<string>?>(nameof(ContainerImageConfigDto), nameof(Env));
        
        [JsonPropertyName("env")]
        public List<string>? Env
        {
            get { return _env.GetValue(); }
            set { _env.SetValue(value); }
        }
    
        private PropertyValue<string?> _workingDir = new PropertyValue<string?>(nameof(ContainerImageConfigDto), nameof(WorkingDir));
        
        [JsonPropertyName("workingDir")]
        public string? WorkingDir
        {
            get { return _workingDir.GetValue(); }
            set { _workingDir.SetValue(value); }
        }
    
        private PropertyValue<string?> _entryPoint = new PropertyValue<string?>(nameof(ContainerImageConfigDto), nameof(EntryPoint));
        
        [JsonPropertyName("entryPoint")]
        public string? EntryPoint
        {
            get { return _entryPoint.GetValue(); }
            set { _entryPoint.SetValue(value); }
        }
    
        private PropertyValue<string?> _cmd = new PropertyValue<string?>(nameof(ContainerImageConfigDto), nameof(Cmd));
        
        [JsonPropertyName("cmd")]
        public string? Cmd
        {
            get { return _cmd.GetValue(); }
            set { _cmd.SetValue(value); }
        }
    
        private PropertyValue<List<string>?> _labels = new PropertyValue<List<string>?>(nameof(ContainerImageConfigDto), nameof(Labels));
        
        [JsonPropertyName("labels")]
        public List<string>? Labels
        {
            get { return _labels.GetValue(); }
            set { _labels.SetValue(value); }
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _userName.SetAccessPath(path, validateHasBeenSet);
            _ports.SetAccessPath(path, validateHasBeenSet);
            _volumes.SetAccessPath(path, validateHasBeenSet);
            _env.SetAccessPath(path, validateHasBeenSet);
            _workingDir.SetAccessPath(path, validateHasBeenSet);
            _entryPoint.SetAccessPath(path, validateHasBeenSet);
            _cmd.SetAccessPath(path, validateHasBeenSet);
            _labels.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
