// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class ContainerPackageVersionDetailsDto
         : PackageVersionDetailsDto, IClassNameConvertible, IPropagatePropertyAccessPath
    {
        [JsonPropertyName("className")]
        public  string? ClassName => "ContainerPackageVersionDetails";
        
        public ContainerPackageVersionDetailsDto() { }
        
        public ContainerPackageVersionDetailsDto(PackageTypeDto type, string repository, string name, string version, long created, long downloads, long diskSize, Dictionary<string, string> metadata, int schemaVersion, string mediaType, string manifestType, List<string>? tags = null, long? accessed = null, CPrincipalDto? author = null, List<CPrincipalDto>? authors = null, ContainerImageDto? image = null, ContainerHelmChartDto? chart = null)
        {
            Type = type;
            Repository = repository;
            Name = name;
            Version = version;
            Tags = tags;
            Created = created;
            Accessed = accessed;
            Downloads = downloads;
            DiskSize = diskSize;
            Author = author;
            Authors = authors;
            Metadata = metadata;
            SchemaVersion = schemaVersion;
            MediaType = mediaType;
            ManifestType = manifestType;
            Image = image;
            Chart = chart;
        }
        
        private PropertyValue<PackageTypeDto> _type = new PropertyValue<PackageTypeDto>(nameof(ContainerPackageVersionDetailsDto), nameof(Type));
        
        [Required]
        [JsonPropertyName("type")]
        public PackageTypeDto Type
        {
            get { return _type.GetValue(); }
            set { _type.SetValue(value); }
        }
    
        private PropertyValue<string> _repository = new PropertyValue<string>(nameof(ContainerPackageVersionDetailsDto), nameof(Repository));
        
        [Required]
        [JsonPropertyName("repository")]
        public string Repository
        {
            get { return _repository.GetValue(); }
            set { _repository.SetValue(value); }
        }
    
        private PropertyValue<string> _name = new PropertyValue<string>(nameof(ContainerPackageVersionDetailsDto), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public string Name
        {
            get { return _name.GetValue(); }
            set { _name.SetValue(value); }
        }
    
        private PropertyValue<string> _version = new PropertyValue<string>(nameof(ContainerPackageVersionDetailsDto), nameof(Version));
        
        [Required]
        [JsonPropertyName("version")]
        public string Version
        {
            get { return _version.GetValue(); }
            set { _version.SetValue(value); }
        }
    
        private PropertyValue<List<string>?> _tags = new PropertyValue<List<string>?>(nameof(ContainerPackageVersionDetailsDto), nameof(Tags));
        
        [JsonPropertyName("tags")]
        public List<string>? Tags
        {
            get { return _tags.GetValue(); }
            set { _tags.SetValue(value); }
        }
    
        private PropertyValue<long> _created = new PropertyValue<long>(nameof(ContainerPackageVersionDetailsDto), nameof(Created));
        
        [Required]
        [JsonPropertyName("created")]
        public long Created
        {
            get { return _created.GetValue(); }
            set { _created.SetValue(value); }
        }
    
        private PropertyValue<long?> _accessed = new PropertyValue<long?>(nameof(ContainerPackageVersionDetailsDto), nameof(Accessed));
        
        [JsonPropertyName("accessed")]
        public long? Accessed
        {
            get { return _accessed.GetValue(); }
            set { _accessed.SetValue(value); }
        }
    
        private PropertyValue<long> _downloads = new PropertyValue<long>(nameof(ContainerPackageVersionDetailsDto), nameof(Downloads));
        
        [Required]
        [JsonPropertyName("downloads")]
        public long Downloads
        {
            get { return _downloads.GetValue(); }
            set { _downloads.SetValue(value); }
        }
    
        private PropertyValue<long> _diskSize = new PropertyValue<long>(nameof(ContainerPackageVersionDetailsDto), nameof(DiskSize));
        
        [Required]
        [JsonPropertyName("diskSize")]
        public long DiskSize
        {
            get { return _diskSize.GetValue(); }
            set { _diskSize.SetValue(value); }
        }
    
        private PropertyValue<CPrincipalDto?> _author = new PropertyValue<CPrincipalDto?>(nameof(ContainerPackageVersionDetailsDto), nameof(Author));
        
        [JsonPropertyName("author")]
        public CPrincipalDto? Author
        {
            get { return _author.GetValue(); }
            set { _author.SetValue(value); }
        }
    
        private PropertyValue<List<CPrincipalDto>?> _authors = new PropertyValue<List<CPrincipalDto>?>(nameof(ContainerPackageVersionDetailsDto), nameof(Authors));
        
        [JsonPropertyName("authors")]
        public List<CPrincipalDto>? Authors
        {
            get { return _authors.GetValue(); }
            set { _authors.SetValue(value); }
        }
    
        private PropertyValue<Dictionary<string, string>> _metadata = new PropertyValue<Dictionary<string, string>>(nameof(ContainerPackageVersionDetailsDto), nameof(Metadata));
        
        [Required]
        [JsonPropertyName("metadata")]
        public Dictionary<string, string> Metadata
        {
            get { return _metadata.GetValue(); }
            set { _metadata.SetValue(value); }
        }
    
        private PropertyValue<int> _schemaVersion = new PropertyValue<int>(nameof(ContainerPackageVersionDetailsDto), nameof(SchemaVersion));
        
        [Required]
        [JsonPropertyName("schemaVersion")]
        public int SchemaVersion
        {
            get { return _schemaVersion.GetValue(); }
            set { _schemaVersion.SetValue(value); }
        }
    
        private PropertyValue<string> _mediaType = new PropertyValue<string>(nameof(ContainerPackageVersionDetailsDto), nameof(MediaType));
        
        [Required]
        [JsonPropertyName("mediaType")]
        public string MediaType
        {
            get { return _mediaType.GetValue(); }
            set { _mediaType.SetValue(value); }
        }
    
        private PropertyValue<string> _manifestType = new PropertyValue<string>(nameof(ContainerPackageVersionDetailsDto), nameof(ManifestType));
        
        [Required]
        [JsonPropertyName("manifestType")]
        public string ManifestType
        {
            get { return _manifestType.GetValue(); }
            set { _manifestType.SetValue(value); }
        }
    
        private PropertyValue<ContainerImageDto?> _image = new PropertyValue<ContainerImageDto?>(nameof(ContainerPackageVersionDetailsDto), nameof(Image));
        
        [JsonPropertyName("image")]
        public ContainerImageDto? Image
        {
            get { return _image.GetValue(); }
            set { _image.SetValue(value); }
        }
    
        private PropertyValue<ContainerHelmChartDto?> _chart = new PropertyValue<ContainerHelmChartDto?>(nameof(ContainerPackageVersionDetailsDto), nameof(Chart));
        
        [JsonPropertyName("chart")]
        public ContainerHelmChartDto? Chart
        {
            get { return _chart.GetValue(); }
            set { _chart.SetValue(value); }
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _type.SetAccessPath(path, validateHasBeenSet);
            _repository.SetAccessPath(path, validateHasBeenSet);
            _name.SetAccessPath(path, validateHasBeenSet);
            _version.SetAccessPath(path, validateHasBeenSet);
            _tags.SetAccessPath(path, validateHasBeenSet);
            _created.SetAccessPath(path, validateHasBeenSet);
            _accessed.SetAccessPath(path, validateHasBeenSet);
            _downloads.SetAccessPath(path, validateHasBeenSet);
            _diskSize.SetAccessPath(path, validateHasBeenSet);
            _author.SetAccessPath(path, validateHasBeenSet);
            _authors.SetAccessPath(path, validateHasBeenSet);
            _metadata.SetAccessPath(path, validateHasBeenSet);
            _schemaVersion.SetAccessPath(path, validateHasBeenSet);
            _mediaType.SetAccessPath(path, validateHasBeenSet);
            _manifestType.SetAccessPath(path, validateHasBeenSet);
            _image.SetAccessPath(path, validateHasBeenSet);
            _chart.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
