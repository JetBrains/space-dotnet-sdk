// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public sealed class InvitationLink
         : IPropagatePropertyAccessPath
    {
        public InvitationLink() { }
        
        public InvitationLink(string id, string name, CPrincipal createdBy, DateTime createdAt, int inviteeLimit, int inviteeUsage, bool deleted, DateTime? expiresAt = null)
        {
            Id = id;
            Name = name;
            CreatedBy = createdBy;
            CreatedAt = createdAt;
            ExpiresAt = expiresAt;
            InviteeLimit = inviteeLimit;
            InviteeUsage = inviteeUsage;
            IsDeleted = deleted;
        }
        
        private PropertyValue<string> _id = new PropertyValue<string>(nameof(InvitationLink), nameof(Id));
        
        [Required]
        [JsonPropertyName("id")]
        public string Id
        {
            get => _id.GetValue();
            set => _id.SetValue(value);
        }
    
        private PropertyValue<string> _name = new PropertyValue<string>(nameof(InvitationLink), nameof(Name));
        
        [Required]
        [JsonPropertyName("name")]
        public string Name
        {
            get => _name.GetValue();
            set => _name.SetValue(value);
        }
    
        private PropertyValue<CPrincipal> _createdBy = new PropertyValue<CPrincipal>(nameof(InvitationLink), nameof(CreatedBy));
        
        [Required]
        [JsonPropertyName("createdBy")]
        public CPrincipal CreatedBy
        {
            get => _createdBy.GetValue();
            set => _createdBy.SetValue(value);
        }
    
        private PropertyValue<DateTime> _createdAt = new PropertyValue<DateTime>(nameof(InvitationLink), nameof(CreatedAt));
        
        [Required]
        [JsonPropertyName("createdAt")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime CreatedAt
        {
            get => _createdAt.GetValue();
            set => _createdAt.SetValue(value);
        }
    
        private PropertyValue<DateTime?> _expiresAt = new PropertyValue<DateTime?>(nameof(InvitationLink), nameof(ExpiresAt));
        
        [JsonPropertyName("expiresAt")]
        [JsonConverter(typeof(SpaceDateTimeConverter))]
        public DateTime? ExpiresAt
        {
            get => _expiresAt.GetValue();
            set => _expiresAt.SetValue(value);
        }
    
        private PropertyValue<int> _inviteeLimit = new PropertyValue<int>(nameof(InvitationLink), nameof(InviteeLimit));
        
        [Required]
        [JsonPropertyName("inviteeLimit")]
        public int InviteeLimit
        {
            get => _inviteeLimit.GetValue();
            set => _inviteeLimit.SetValue(value);
        }
    
        private PropertyValue<int> _inviteeUsage = new PropertyValue<int>(nameof(InvitationLink), nameof(InviteeUsage));
        
        [Required]
        [JsonPropertyName("inviteeUsage")]
        public int InviteeUsage
        {
            get => _inviteeUsage.GetValue();
            set => _inviteeUsage.SetValue(value);
        }
    
        private PropertyValue<bool> _deleted = new PropertyValue<bool>(nameof(InvitationLink), nameof(IsDeleted));
        
        [Required]
        [JsonPropertyName("deleted")]
        public bool IsDeleted
        {
            get => _deleted.GetValue();
            set => _deleted.SetValue(value);
        }
    
        public  void SetAccessPath(string path, bool validateHasBeenSet)
        {
            _id.SetAccessPath(path, validateHasBeenSet);
            _name.SetAccessPath(path, validateHasBeenSet);
            _createdBy.SetAccessPath(path, validateHasBeenSet);
            _createdAt.SetAccessPath(path, validateHasBeenSet);
            _expiresAt.SetAccessPath(path, validateHasBeenSet);
            _inviteeLimit.SetAccessPath(path, validateHasBeenSet);
            _inviteeUsage.SetAccessPath(path, validateHasBeenSet);
            _deleted.SetAccessPath(path, validateHasBeenSet);
        }
    
    }
    
}
