// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS0108

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SpaceDotNet.Client.Internal;
using SpaceDotNet.Common;
using SpaceDotNet.Common.Json.Serialization;
using SpaceDotNet.Common.Json.Serialization.Polymorphism;
using SpaceDotNet.Common.Types;

namespace SpaceDotNet.Client
{
    public partial class BlogClient : ISpaceClient
    {
        private readonly Connection _connection;
        
        public BlogClient(Connection connection)
        {
            _connection = connection;
        }
        
        public async Task<string> ConvertMarkdownToHtmlAsync(string markdown, CancellationToken cancellationToken = default)
            => await _connection.RequestResourceAsync<BlogsMarkdown2htmlPostRequest, string>("POST", $"api/http/blogs/markdown2html", 
                new BlogsMarkdown2htmlPostRequest { 
                    Markdown = markdown,
                }
        , cancellationToken);
    
        public ArticleClient Articles => new ArticleClient(_connection);
        
        public partial class ArticleClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public ArticleClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Import articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<List<ArticleImportResult>> ImportArticlesAsync(ImportMetadata metadata, List<ExternalArticle> articles, Func<Partial<ArticleImportResult>, Partial<ArticleImportResult>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<BlogsArticlesImportPostRequest, List<ArticleImportResult>>("POST", $"api/http/blogs/articles/import?$fields={(partial != null ? partial(new Partial<ArticleImportResult>()) : Partial<ArticleImportResult>.Default())}", 
                    new BlogsArticlesImportPostRequest { 
                        Metadata = metadata,
                        Articles = articles,
                    }
            , cancellationToken);
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<Batch<ArticleRecord>> GetAllArticlesAsync(string? skip = null, int? top = 100, string? term = null, DateTime? dateFrom = null, DateTime? dateTo = null, string? authorId = null, string? teamId = null, string? locationId = null, string? forProfile = null, Func<Partial<Batch<ArticleRecord>>, Partial<Batch<ArticleRecord>>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<Batch<ArticleRecord>>("GET", $"api/http/blogs/articles?$skip={skip?.ToString() ?? "null"}&$top={top?.ToString() ?? "null"}&term={term?.ToString() ?? "null"}&dateFrom={dateFrom?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ") ?? "null"}&dateTo={dateTo?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ") ?? "null"}&authorId={authorId?.ToString() ?? "null"}&teamId={teamId?.ToString() ?? "null"}&locationId={locationId?.ToString() ?? "null"}&forProfile={forProfile?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<Batch<ArticleRecord>>()) : Partial<Batch<ArticleRecord>>.Default())}", cancellationToken);
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public IAsyncEnumerable<ArticleRecord> GetAllArticlesAsyncEnumerable(string? skip = null, int? top = 100, string? term = null, DateTime? dateFrom = null, DateTime? dateTo = null, string? authorId = null, string? teamId = null, string? locationId = null, string? forProfile = null, Func<Partial<ArticleRecord>, Partial<ArticleRecord>>? partial = null, CancellationToken cancellationToken = default)
                => BatchEnumerator.AllItems((batchSkip, batchCancellationToken) => GetAllArticlesAsync(top: top, term: term, dateFrom: dateFrom, dateTo: dateTo, authorId: authorId, teamId: teamId, locationId: locationId, forProfile: forProfile, cancellationToken: cancellationToken, skip: batchSkip, partial: builder => Partial<Batch<ArticleRecord>>.Default().WithNext().WithTotalCount().WithData(partial != null ? partial : _ => Partial<ArticleRecord>.Default())), skip, cancellationToken);
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<int> GetAllArticlesCountAsync(string? term = null, DateTime? dateFrom = null, DateTime? dateTo = null, string? authorId = null, string? teamId = null, string? locationId = null, string? forProfile = null, CancellationToken cancellationToken = default)
                => (await GetAllArticlesAsync(term: term, dateFrom: dateFrom, dateTo: dateTo, authorId: authorId, teamId: teamId, locationId: locationId, forProfile: forProfile, cancellationToken: cancellationToken, skip: null, top: 1)).TotalCount.GetValueOrDefault();
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<ArticleRecord> GetArticleByAliasAsync(string alias, Func<Partial<ArticleRecord>, Partial<ArticleRecord>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<ArticleRecord>("GET", $"api/http/blogs/articles/alias:{alias}?$fields={(partial != null ? partial(new Partial<ArticleRecord>()) : Partial<ArticleRecord>.Default())}", cancellationToken);
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<ArticleRecord> GetArticleByExternalIdAsync(string id, Func<Partial<ArticleRecord>, Partial<ArticleRecord>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<ArticleRecord>("GET", $"api/http/blogs/articles/external-id:{id}?$fields={(partial != null ? partial(new Partial<ArticleRecord>()) : Partial<ArticleRecord>.Default())}", cancellationToken);
        
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<ArticleRecord> GetArticleAsync(string id, Func<Partial<ArticleRecord>, Partial<ArticleRecord>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<ArticleRecord>("GET", $"api/http/blogs/articles/{id}?$fields={(partial != null ? partial(new Partial<ArticleRecord>()) : Partial<ArticleRecord>.Default())}", cancellationToken);
        
            /// <summary>
            /// Unpublish the article and delete its draft (if any)
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Unpublish articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task DeleteArticleAsync(string articleId, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/blogs/articles/article-id:{articleId}/delete", cancellationToken);
        
            /// <summary>
            /// Unpublish the article, but keeps its draft
            /// </summary>
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>Unpublish articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task UnpublishArticleAsync(string articleId, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync("DELETE", $"api/http/blogs/articles/article-id:{articleId}/unpublish", cancellationToken);
        
            public DraftClient Drafts => new DraftClient(_connection);
            
            public partial class DraftClient : ISpaceClient
            {
                private readonly Connection _connection;
                
                public DraftClient(Connection connection)
                {
                    _connection = connection;
                }
                
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Publish articles</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<BGArticleId> PublishArticleAsync(string draftId, Func<Partial<BGArticleId>, Partial<BGArticleId>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<BGArticleId>("POST", $"api/http/blogs/articles/drafts/{draftId}/publish?$fields={(partial != null ? partial(new Partial<BGArticleId>()) : Partial<BGArticleId>.Default())}", cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View articles</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<DRDraftId> GetDraftByArticleIdAsync(string articleId, Func<Partial<DRDraftId>, Partial<DRDraftId>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<DRDraftId>("GET", $"api/http/blogs/articles/drafts/article-id:{articleId}?$fields={(partial != null ? partial(new Partial<DRDraftId>()) : Partial<DRDraftId>.Default())}", cancellationToken);
            
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>View articles</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task<ArticleRecord> GetDraftByDraftIdAsync(string draftId, Func<Partial<ArticleRecord>, Partial<ArticleRecord>>? partial = null, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync<ArticleRecord>("GET", $"api/http/blogs/articles/drafts/draft-id:{draftId}?$fields={(partial != null ? partial(new Partial<ArticleRecord>()) : Partial<ArticleRecord>.Default())}", cancellationToken);
            
                /// <summary>
                /// Unpublish the article, but keeps its draft
                /// </summary>
                /// <remarks>
                /// Required permissions:
                /// <list type="bullet">
                /// <item>
                /// <term>Unpublish articles</term>
                /// </item>
                /// </list>
                /// </remarks>
                public async Task UnpublishArticleAsync(string draftId, CancellationToken cancellationToken = default)
                    => await _connection.RequestResourceAsync("DELETE", $"api/http/blogs/articles/drafts/{draftId}/unpublish", cancellationToken);
            
            }
        
        }
    
        public DateClient Dates => new DateClient(_connection);
        
        public partial class DateClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public DateClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<BGDates> GetDatesAsync(Func<Partial<BGDates>, Partial<BGDates>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<BGDates>("GET", $"api/http/blogs/dates?$fields={(partial != null ? partial(new Partial<BGDates>()) : Partial<BGDates>.Default())}", cancellationToken);
        
        }
    
        public StatClient Stats => new StatClient(_connection);
        
        public partial class StatClient : ISpaceClient
        {
            private readonly Connection _connection;
            
            public StatClient(Connection connection)
            {
                _connection = connection;
            }
            
            /// <remarks>
            /// Required permissions:
            /// <list type="bullet">
            /// <item>
            /// <term>View articles</term>
            /// </item>
            /// </list>
            /// </remarks>
            public async Task<BGStats> GetStatsAsync(DateTime? dateFrom = null, DateTime? dateTo = null, string? authorId = null, string? teamId = null, string? locationId = null, Func<Partial<BGStats>, Partial<BGStats>>? partial = null, CancellationToken cancellationToken = default)
                => await _connection.RequestResourceAsync<BGStats>("GET", $"api/http/blogs/stats?dateFrom={dateFrom?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ") ?? "null"}&dateTo={dateTo?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ") ?? "null"}&authorId={authorId?.ToString() ?? "null"}&teamId={teamId?.ToString() ?? "null"}&locationId={locationId?.ToString() ?? "null"}&$fields={(partial != null ? partial(new Partial<BGStats>()) : Partial<BGStats>.Default())}", cancellationToken);
        
        }
    
    }
    
}
