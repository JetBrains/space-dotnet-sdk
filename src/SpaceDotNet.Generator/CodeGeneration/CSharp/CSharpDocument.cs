using System.IO;
using System.Text;

namespace SpaceDotNet.Generator.CodeGeneration.CSharp
{
    public class CSharpDocument
    {
        private StringBuilder Builder { get; } = new StringBuilder();
        private Indent Indent { get; } = new Indent();

        public void Write(string content)
        {
            Builder.AppendLine(content);
        }

        public string Create() => CreateWithNamespaceSuffix(null);

        public string CreateWithNamespaceSuffix(string? namespaceSuffix)
        {
            Indent.Reset();
            
            var builder = new StringBuilder();
            builder.AppendLine($"{Indent}// ------------------------------------------------------------------------------");
            builder.AppendLine($"{Indent}// <auto-generated>");
            builder.AppendLine($"{Indent}//     This code was generated by a tool.");
            builder.AppendLine($"{Indent}// ");
            builder.AppendLine($"{Indent}//     Changes to this file may cause incorrect behavior and will be lost if");
            builder.AppendLine($"{Indent}//     the code is regenerated.");
            builder.AppendLine($"{Indent}// </auto-generated>");
            builder.AppendLine($"{Indent}// ------------------------------------------------------------------------------");
            builder.AppendLine($"{Indent}");
            builder.AppendLine($"{Indent}#nullable enable");
            builder.AppendLine($"{Indent}");
            builder.AppendLine($"{Indent}using System;");
            builder.AppendLine($"{Indent}using System.Collections.Generic;");
            builder.AppendLine($"{Indent}using System.ComponentModel.DataAnnotations;");
            builder.AppendLine($"{Indent}using System.Text.Json.Serialization;");
            builder.AppendLine($"{Indent}using System.Threading.Tasks;");
            builder.AppendLine($"{Indent}using SpaceDotNet.Client.Internal;");
            builder.AppendLine($"{Indent}using SpaceDotNet.Common;");
            builder.AppendLine($"{Indent}using SpaceDotNet.Common.Json.Serialization;");
            builder.AppendLine($"{Indent}using SpaceDotNet.Common.Types;");
            builder.AppendLine($"{Indent}");
            builder.AppendLine($"{Indent}namespace SpaceDotNet.Client{(!string.IsNullOrEmpty(namespaceSuffix) ? "." + namespaceSuffix : "")}");
            builder.AppendLine($"{Indent}{{");
            
            Indent.Increment();

            builder.Append(Indent.Wrap(Builder.ToString()));
            
            Indent.Decrement();
            
            builder.AppendLine($"{Indent}}}");

            return builder.ToString();
        }
    }
}